*    ZCOBOL PGM='cics\TESTBMC1' VER=V1.5.06 05/21/12 13:48:10 
*    ZCOBOL OPTIONS=(CICS) 
         COPY  TESTBMC1_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST SEND/RECEIVE MAP AND SEND CONTROL
*      * CODE AND DISPLAYS ARE ALMOST IDENTICAL TO GUI4/6
*      * AFTER GUI4 IS ENDED, THE PROGRAM SWITCHES INTO GUI6
*         PROGRAM-ID. TESTBMC1.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT 
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEPCT DS    AL4         ADDRESS OF DFHPCT
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           CEDF INTERCEPT INDICATOR
*                             00='BEFORE'
*                             FE='AFTER' LINK/XCTL/RETURN FAIL
*                             FF='AFTER'
TCTTEEDL DS    X           CEDF LINKAGE INDICATOR
*                             00=NORMAL LINKAGE
*                             FE=SPECIAL LINKAGE
*                             FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
TCTTECHN DS    CL16        PASSED CHANNEL NAME
TCTTECAQ DS    AL4         ANCHOR FOR CHANNEL CHAIN
TCTTETKN DS    XL4         TOKEN FOR STARTBROWSE CONTAINER
TCTTECHW DS    AL4         ADDRESS OF CHWA (STARTBROWSE CONTAINER)
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0     EQU 0
R1     EQU 1
R2     EQU 2
R3     EQU 3
R4     EQU 4
R5     EQU 5
R6     EQU 6
R7     EQU 7
R8     EQU 8
R9     EQU 9
R10    EQU 10
R11    EQU 11
R12    EQU 12
R13    EQU 13
R14    EQU 14
R15    EQU 15
TESTBMC1 CSECT 
*            R1 >>> A(EIB,COMMAREA)
*            R2 >>> P0E02 (LINK) OR P0E04 (XCTL) PARMS
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         L     R2,0(R2)           R2=P0E02/P0E04 PARM POINTER
         STRL  R2,CICS_EIENT_0065_PARMPNTR SAVE IT
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
         LR    R2,R1              R2=SAVE USER PARM POINTER
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0065_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0065_NOSAVE     EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         IILF  R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH RPI 1181
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0065_NOSAVE2 EXIT IF IT IS
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
CICS_EIENT_0065_NOSAVE2     EQU *
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0065_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        NEW PARM POSITION FOR ZCOBOL
CICS_EIENT_0065_01     DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
         MVC   DFHEICHN,TCTTECHN  SET CHANNEL FOR ASSIGN
*
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         JNE   CICS_EIENT_0065_NOEDFA EXIT IF NOT
* PROGRAM INITIATION
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'FE'     SET SPECIAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
         J     CICS_EIENT_0065_NOEDFA EXIT
CICS_EIENT_0065_PARMPNTR     DS AL4 SAVE P0E02/P0E04 PARM POINTER
*
CICS_EIENT_0065_NOEDFA     DS 0H
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBMC1'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'05/21/12'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'13.48'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0075_EOT-*+1)/2*2
         DC    AL2(WTO#0075_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0075_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0076_EOT-*+1)/2*2
         DC    AL2(WTO#0076_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0076_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
DFHEISTG DSECT 
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEICHN DS    CL16 CHANNEL FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
         PRINT DATA
*         WORKING-STORAGE SECTION.
*         COPY  MAP01C.
*        01  GUI4I.
*            02  FILLER  PIC X(12).
*            02  FILLER   PIC S9(4) COMP.
*            02  FILLER   PIC X.
*            02  INPUTI   PIC X(3).
*            02  FILLER   PIC S9(4) COMP.
*            02  FILLER   PIC X.
*            02  REPLYI   PIC X(3).
*            02  FILLER REDEFINES REPLYI.
*                03  REPLYO   PIC X(3).
*        01  GUI4O REDEFINES GUI4I.
*           02  FILLER PIC X(24).
*        01  GUI6I.
*            02  FILLER  PIC X(12).
*            02  NAMEL    PIC S9(4) COMP.
*            02  NAMEF    PIC X.
*            02  NAMEI    PIC X(40).
*            02  ADDRL    PIC S9(4) COMP.
*            02  ADDRF    PIC X.
*            02  ADDRI    PIC X(40).
*            02  ZIPL     PIC S9(4) COMP.
*            02  ZIPF     PIC X.
*            02  ZIPI     PIC X(5).
*            02  FILLER  PIC S9(4) COMP.
*            02  FILLER  PIC X.
*            02  NAMEHDI  PIC X(4).
*            02  FILLER REDEFINES NAMEHDI.
*                03  NAMEHDO  PIC X(4).
*            02  FILLER PIC S9(4) COMP.
*            02  FILLER PIC X.
*            02  NEWNAMEI PIC X(40).
*            02  FILLER REDEFINES NEWNAMEI.
*                03  NEWNAMEO PIC X(40).
*            02  FILLER  PIC S9(4) COMP.
*            02  FILLER  PIC X.
*            02  ADDRHDI  PIC X(4).
*            02  FILLER REDEFINES ADDRHDI.
*                03  ADDRHDO  PIC X(4).
*            02  FILLER PIC S9(4) COMP.
*            02  FILLER PIC X.
*            02  NEWADDRI PIC X(40).
*            02  FILLER REDEFINES NEWADDRI.
*                03  NEWADDRO PIC X(40).
*            02  FILLER   PIC S9(4) COMP.
*            02  FILLER   PIC X.
*            02  ZIPHDI   PIC X(4).
*            02  FILLER REDEFINES ZIPHDI.
*                03  ZIPHDO   PIC X(4).
*            02  FILLER  PIC S9(4) COMP.
*            02  FILLER  PIC X.
*            02  NEWZIPI  PIC X(5).
*            02  FILLER REDEFINES NEWZIPI.
*                03  NEWZIPO  PIC X(5).
*            02  FILLER  PIC S9(4) COMP.
*            02  FILLER  PIC X.
*            02  ERRMSGI  PIC X(34).
*            02  FILLER REDEFINES ERRMSGI.
*                03  ERRMSGO  PIC X(34).
*            02  TESTOCCD OCCURS 5 TIMES.
*                03  FILLER PIC S9(4) COMP.
*                03  TESTOCCF PIC X.
*                03  TESTOCCI PIC 9(5).
*            02  FILLER  PIC S9(4) COMP.
*            02  FILLER  PIC X.
*            02  OCCSUMI  PIC X(10).
*            02  FILLER REDEFINES OCCSUMI.
*                03  OCCSUMO  PIC ZZ,ZZZ,ZZ9.
*            02  FILLER    PIC S9(4) COMP.
*            02  DATEF    PIC X.
*            02  DATEI.
*            02  DATEO REDEFINES DATEI.
*                03  MOI      PIC X(2).
*                03  FILLER REDEFINES MOI.
*                    04  MOO      PIC X(2).
*                03  SEP1I    PIC X.
*                03  DAYI     PIC X(2).
*                03  FILLER REDEFINES DAYI.
*                    04  DAYO     PIC X(2).
*                03  SEP2I    PIC X.
*                03  YRI      PIC X(2).
*                03  FILLER REDEFINES YRI.
*                    04  YRO      PIC X(2).
*            02  FILLER PIC S9(4) COMP.
*            02  FILLER PIC X.
*            02  SHOWMDYI PIC X(18).
*            02  FILLER REDEFINES SHOWMDYI.
*                03  SHOWMDYO PIC X(18).
*            02  TESTPCOL PIC S9(4) COMP.
*            02  TESTPCOF PIC X.
*            02  TESTPCOI PIC 9(12).
*            02  FILLER REDEFINES TESTPCOI.
*                03  TESTPCOO PIC X(12).
*            02  FILLER   PIC S9(4) COMP.
*            02  FILLER   PIC X.
*            02  PAYMEI   PIC X(14).
*            02  FILLER REDEFINES PAYMEI.
*                03  PAYMEO   PIC X(14).
*            02  FILLER  PIC S9(4) COMP.
*            02  FILLER  PIC X.
*            02  PAYME1I  PIC X(12).
*            02  FILLER REDEFINES PAYME1I.
*                03  PAYME1O  PIC $$$$,$$$,$$9.
*            02  FILLER    PIC S9(4) COMP.
*            02  FILLER    PIC X.
*            02  CURSI    PIC X(9).
*            02  FILLER REDEFINES CURSI.
*                03  CURSO    PIC X(9).
*        01  GUI6O REDEFINES GUI6I.
*           02  FILLER PIC X(402).
*        01  GUI6HI.
*            02  FILLER  PIC X(12).
*         COPY  DFHAID.
*      * AID VALUES
*        01  DFHAID.
*          02  DFHNULL  PIC X VALUE X'00'.
*          02  DFHENTER PIC X VALUE X'7D'.
*          02  DFHPF1   PIC X VALUE X'F1'.
*          02  DFHPF2   PIC X VALUE X'F2'.
*          02  DFHPF3   PIC X VALUE X'F3'.
*          02  DFHPF4   PIC X VALUE X'F4'.
*          02  DFHPF5   PIC X VALUE X'F5'.
*          02  DFHPF6   PIC X VALUE X'F6'.
*          02  DFHPF7   PIC X VALUE X'F7'.
*          02  DFHPF8   PIC X VALUE X'F8'.
*          02  DFHPF9   PIC X VALUE X'F9'.
*          02  DFHPF10  PIC X VALUE X'7A'.
*          02  DFHPF11  PIC X VALUE X'7B'.
*          02  DFHPF12  PIC X VALUE X'7C'.
*          02  DFHPF13  PIC X VALUE X'C1'.
*          02  DFHPF14  PIC X VALUE X'C2'.
*          02  DFHPF15  PIC X VALUE X'C3'.
*          02  DFHPF16  PIC X VALUE X'C4'.
*          02  DFHPF17  PIC X VALUE X'C5'.
*          02  DFHPF18  PIC X VALUE X'C6'.
*          02  DFHPF19  PIC X VALUE X'C7'.
*          02  DFHPF20  PIC X VALUE X'C8'.
*          02  DFHPF21  PIC X VALUE X'C9'.
*          02  DFHPF22  PIC X VALUE X'4A'.
*          02  DFHPF23  PIC X VALUE X'4B'.
*          02  DFHPF24  PIC X VALUE X'4C'.
*          02  DFHPA1   PIC X VALUE X'6C'.
*          02  DFHPA2   PIC X VALUE X'6E'.
*          02  DFHPA3   PIC X VALUE X'6B'.
*          02  DFHCLEAR PIC X VALUE X'6D'.
*
*         COPY  DFHBMSCA.
*      * Standard BMS equates
*      * Attributes
*        01  DFHBMSCA.
*          02  DFHBMUNP PIC X VALUE X'40'.
*          02  DFHBMFSE PIC X VALUE X'C1'.
*          02  DFHBMBRY PIC X VALUE X'C8'.
*          02  DFHUNIMD PIC X VALUE X'C9'.
*          02  DFHBMDAR PIC X VALUE X'4C'.
*          02  DFHUNNOD PIC X VALUE X'4D'.
*          02  DFHBMUNN PIC X VALUE X'50'.
*          02  DFHUNNUM PIC X VALUE X'D1'.
*          02  DFHUNNUB PIC X VALUE X'D8'.
*          02  DFHUNINT PIC X VALUE X'D9'.
*          02  DFHUNNON PIC X VALUE X'5D'.
*          02  DFHBMPRO PIC X VALUE X'60'.
*          02  DFHBMPRF PIC X VALUE X'61'.
*          02  DFHPROTI PIC X VALUE X'E8'.
*          02  DFHPROTN PIC X VALUE X'6C'.
*          02  DFHBMASK PIC X VALUE X'F0'.
*          02  DFHBMASF PIC X VALUE X'F1'.
*          02  DFHBMASB PIC X VALUE X'F8'.
*      * Mapping
*          02  DFHBMEOF PIC X VALUE X'80'.
*          02  DFHBMCUR PIC X VALUE X'02'.
*          02  DFHBMEF  PIC X VALUE X'82'.
*      * Extended Attributes
*          02  DFHDFCOL PIC X VALUE X'00'.
*          02  DFHBLUE  PIC X VALUE X'F1'.
*          02  DFHRED   PIC X VALUE X'F2'.
*          02  DFHPINK  PIC X VALUE X'F3'.
*          02  DFHGREEN PIC X VALUE X'F4'.
*          02  DFHTURQ  PIC X VALUE X'F5'.
*          02  DFHYELLO PIC X VALUE X'F6'.
*          02  DFHNEUTR PIC X VALUE X'F7'.
*
*         01  MYCOMM.
*             02  COMMIND  PIC X.
*             02  COMMNAME PIC X(40).
*             02  COMMADDR PIC X(40).
*             02  COMMZIP  PIC X(5).
*         77  MYGUI6   PIC X(7)  VALUE 'GUI6   '.
*         77  OCCSUM   PIC 9(7)  COMP-3.
*         77  OCCINDX  PIC 9(2)  COMP.
*         77  LOOPCTRL PIC 9(2)  COMP.
*         77  SUMLEN   PIC 9(2)  COMP.
*         01  OCCZONE  PIC 99.
*         01  FILLER REDEFINES OCCZONE.
*             02  FILLER   PIC X.
*             02  OCCZONE2 PIC X.
*         01  OCCCURSO.
*             02  FILLER  PIC X(7)  VALUE 'OCCURS('.
*             02  OCCNUM  PIC X.
*             02  FILLER  PIC X     VALUE ')'.
*         01  SHOWMSG.
*             02  FILLER  PIC X(3)  VALUE 'MO='.
*             02  SHOWMO  PIC XX.
*             02  FILLER  PIC X(5)  VALUE ' DAY='.
*             02  SHOWDAY PIC XX.
*             02  FILLER  PIC X(4)  VALUE ' YR='.
*             02  SHOWYR  PIC XX.
*         01  BADKEY.
*             02  FILLER  PIC X(26) VALUE 'NO ACTION FOR AID KEY HEX '.
*             02  HEXKEY  PIC X(2).
*             02  FILLER  PIC X(6)  VALUE SPACES.
*         77  NOMODS   PIC X(34)
*                      VALUE 'NO FIELDS CHANGED                 '.
*         01  FAILMSG.
*             02  FILLER  PIC X(8)  VALUE 'MAPFAIL/'.
*             02  FAILIND PIC X.
*             02  FILLER  PIC X(25) VALUE ' HAS OCCURRED            '.
*         77  ENDMSG   PIC X(34)
*                      VALUE 'TRANSACTION COMPLETE - PRESS CLEAR'.
*         01  WORK1.
*             02  FILLER PIC X(3).
*             02  RESP2  PIC X.
*         LINKAGE SECTION.
*         01  DFHCOMMAREA.
*             02  FILLER PIC X(86).
*         PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBMC1 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         MVI   DFHNULL,X'00'
         MVI   DFHENTER,X'7D'
         MVI   DFHPF1,X'F1'
         MVI   DFHPF2,X'F2'
         MVI   DFHPF3,X'F3'
         MVI   DFHPF4,X'F4'
         MVI   DFHPF5,X'F5'
         MVI   DFHPF6,X'F6'
         MVI   DFHPF7,X'F7'
         MVI   DFHPF8,X'F8'
         MVI   DFHPF9,X'F9'
         MVI   DFHPF10,X'7A'
         MVI   DFHPF11,X'7B'
         MVI   DFHPF12,X'7C'
         MVI   DFHPF13,X'C1'
         MVI   DFHPF14,X'C2'
         MVI   DFHPF15,X'C3'
         MVI   DFHPF16,X'C4'
         MVI   DFHPF17,X'C5'
         MVI   DFHPF18,X'C6'
         MVI   DFHPF19,X'C7'
         MVI   DFHPF20,X'C8'
         MVI   DFHPF21,X'C9'
         MVI   DFHPF22,X'4A'
         MVI   DFHPF23,X'4B'
         MVI   DFHPF24,X'4C'
         MVI   DFHPA1,X'6C'
         MVI   DFHPA2,X'6E'
         MVI   DFHPA3,X'6B'
         MVI   DFHCLEAR,X'6D'
         MVI   DFHBMUNP,X'40'
         MVI   DFHBMFSE,X'C1'
         MVI   DFHBMBRY,X'C8'
         MVI   DFHUNIMD,X'C9'
         MVI   DFHBMDAR,X'4C'
         MVI   DFHUNNOD,X'4D'
         MVI   DFHBMUNN,X'50'
         MVI   DFHUNNUM,X'D1'
         MVI   DFHUNNUB,X'D8'
         MVI   DFHUNINT,X'D9'
         MVI   DFHUNNON,X'5D'
         MVI   DFHBMPRO,X'60'
         MVI   DFHBMPRF,X'61'
         MVI   DFHPROTI,X'E8'
         MVI   DFHPROTN,X'6C'
         MVI   DFHBMASK,X'F0'
         MVI   DFHBMASF,X'F1'
         MVI   DFHBMASB,X'F8'
         MVI   DFHBMEOF,X'80'
         MVI   DFHBMCUR,X'02'
         MVI   DFHBMEF,X'82'
         MVI   DFHDFCOL,X'00'
         MVI   DFHBLUE,X'F1'
         MVI   DFHRED,X'F2'
         MVI   DFHPINK,X'F3'
         MVI   DFHGREEN,X'F4'
         MVI   DFHTURQ,X'F5'
         MVI   DFHYELLO,X'F6'
         MVI   DFHNEUTR,X'F7'
         LARL  ZC_R1,=CL8'GUI6   '
          MVC   MYGUI6,0(ZC_R1)
         LARL  ZC_R1,=CL8'OCCURS('
          MVC   ZC_FILLER_V1,0(ZC_R1)
         MVI   ZC_FILLER_V2,C')'
         LARL  ZC_R1,=CL4'MO='
          MVC   ZC_FILLER_V3,0(ZC_R1)
         LARL  ZC_R1,=CL6' DAY='
          MVC   ZC_FILLER_V4,0(ZC_R1)
         LARL  ZC_R1,=CL4' YR='
          MVC   ZC_FILLER_V5,0(ZC_R1)
         LARL  ZC_R1,=CL26'NO ACTION FOR AID KEY HEX '
          MVC   ZC_FILLER_V6,0(ZC_R1)
         MVI   ZC_FILLER_V7,C' '
         MVC   ZC_FILLER_V7+1(6-1),ZC_FILLER_V7
         LARL  ZC_R1,=CL34'NO FIELDS CHANGED                 '
          MVC   NOMODS,0(ZC_R1)
         LARL  ZC_R1,=CL8'MAPFAIL/'
          MVC   ZC_FILLER_V8,0(ZC_R1)
         LARL  ZC_R1,=CL26' HAS OCCURRED            '
          MVC   ZC_FILLER_V9,0(ZC_R1)
         LARL  ZC_R1,=CL34'TRANSACTION COMPLETE - PRESS CLEAR'
          MVC   ENDMSG,0(ZC_R1)
         LARL  ZC_R1,=CL8'ZCWSID1'
          MVC   ZC_WS_ID1,0(ZC_R1)
         MVI   ZC_FILLER_V10,C' '
         MVI   ZC_FILLER_V11,C' '
         MVI   ZC_FILLER_V12,C' '
         MVI   ZC_FILLER_V13,C' '
         MVI   ZC_FILLER_V14,C' '
          MVI   TRUE,C'1'
          MVI   FALSE,C'0'
          MVHHI RETURN_CODE,0
*
*      *  XC    COMMIND(86),COMMIND CLEAR COMMAREA
*             MOVE LOW-VALUES TO MYCOMM.
*      *  ICM   R5,15,TCTTECA      ADDRESS RECEIVED COMMAREA ?
*      *  BNZ   NOT1ST             EXIT IF OK
*ZC    275         MOVE  LOW_VALUES,TO,MYCOMM
         MVI   MYCOMM,X'00'
         MVC   MYCOMM+1(86-1),MYCOMM
*             IF EIBCALEN NOT = 0 THEN GO TO NOT1ST.
*ZC    278         IF    EIBCALEN,NOT,=,0,THEN
         LH    0,EIBCALEN
         CHI   0,0
         BRC   15-ZC_NE,PG_IF_1_1
*      * SETUP DSA COMMAREA
*      *  LA    R5,COMMIND         ADDRESS DSA COMMAREA
*      *  USING COMMIND,R5
*      * RESEND4  EQU   *
*ZC    278         GO    TO,NOT1ST
         J     PG_NOT1ST
PG_IF_1_1    DS    0H  &TYPE
*         RESEND4.
*      * INITIAL GUI4 MAP
PG_RESEND4 DS  0H
*             EXEC CICS SEND MAP('GUI4') MAPSET('MAP01C') MAPONLY ERASE
*ZC    285         EXEC  CICS,SEND,MAP('GUI4'),MAPSET('MAP01C'),MAPONLYX
               ,ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI4'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1804MLN         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_0982 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_0982    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_0982   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_0982   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_0982) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_0982    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         J     P0E06BYP_0982   EXIT
*
P0E06    DS    0H
P0E06FN  DS    XL2                FUNCTION CODE
P0E06EIB DS    AL4                EIB
P0E06TCT DS    AL4                TCTTE
P0E06PGM DS    CL8                PROGRAM
P0E06LEN DS    AL4                ADDRESS OF LENGTH
P0E06FLN DS    AL4                ADDRESS OF FLENGTH
P0E06ENT DS    AL4                ENTRY POINT
P0E06EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E06EDS DS    AL4                DSA ADDRESS FOR EDF
P0E06EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E06EDL DS    XL2                DSA LENGTH FOR EDF
P0E06NED DS    X                  FF=NOEDF
         DS    X
P0E06NOH DS    X                  FF=NOHANDLE
         DS    X
P0E06RSP DS    AL4                RESP
P0E06RS2 DS    AL4                RESP2
P0E06END EQU   *                  END MARKER
*
P0E06BYP_0982    DS 0H
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10010000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(4000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0C02EDF_0997 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_0997    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         J     P0C02BYP_0997   EXIT
*
P0C02    DS    0H
P0C02FN  DS    XL2                FUNCTION CODE
P0C02EIB DS    AL4                EIB
P0C02TCT DS    AL4                TCTTE
P0C02LEN DS    AL4                LENGTH/FLENGTH
P0C02INM DS    X                  FF=INITIMG SPECIFIED
         DS    X
P0C02INT DS    X                  INITIMG
         DS    X
P0C02GMA DS    AL4                GETMAIN ADDRESS
P0C02EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0C02EDS DS    AL4                DSA ADDRESS FOR EDF
P0C02EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0C02EDL DS    XL2                DSA LENGTH FOR EDF
P0C02NED DS    X                  FF=NOEDF
         DS    X
P0C02NOH DS    X                  FF=NOHANDLE
         DS    X
P0C02RSP DS    AL4                RESP
P0C02RS2 DS    AL4                RESP2
P0C02END EQU   *                  END MARKER
*
P0C02BYP_0997    DS 0H
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1804EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1804EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1804EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P1804EDF_0977 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1804EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
P1804EDF_0977    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_0977   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_0977   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_0977) ENTRYPOINT FOR IGNORE CONDITION
*
P1804    DS    0H
P1804FN  DS    XL2                FUNCTION CODE
P1804EIB DS    AL4                EIB
P1804TCT DS    AL4                TCTTE
P1804MSA DS    AL4                MAPSET ADDRESS
P1804MAP DS    CL7                MAP NAME
         DS    X
P1804MLN DS    XL2                MAPSET LENGTH
P1804DSC DS    AL4                STRUCTURE ADDRESS
P1804DSL DS    XL2                STRUCTURE LENGTH
P1804OUT DS    AL4                OUTPUT AREA
P1804OAL DS    XL2                OUTPUT AREA LENGTH (FOR SET)
P1804CRS DS    XL2                CURSOR POSITION (X'FFFF'=NONE)
P1804OPT DS    X                  OPTION BITS...
P1804ERS EQU   X'80'                 ERASE
P1804EAU EQU   X'40'                 ERASEAUP
P1804CSM EQU   X'20'                 SYMBOLIC CURSOR
P1804MNY EQU   X'10'                 MAPONLY
P1804DNY EQU   X'08'                 DATAONLY
P1804ALM EQU   X'04'                 ALARM
P1804FKB EQU   X'02'                 FREEKB
P1804FRS EQU   X'01'                 FRSET
         DS    X
P1804SET DS    X                  FF=SET SPECIFIED
         DS    X
P1804EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P1804EDS DS    AL4                DSA ADDRESS FOR EDF
P1804EDC DS    XL2                CICS DSA LENGTH FOR EDF
P1804EDL DS    XL2                DSA LENGTH FOR EDF
P1804NED DS    X                  FF=NOEDF
         DS    X
P1804NOH DS    X                  FF=NOHANDLE
         DS    X
P1804RSP DS    AL4                RESP
P1804RS2 DS    AL4                RESP2
P1804END EQU   *                  END MARKER
*
P1804BYP_0977    DS 0H
         LARL  R1,P1804RSP_0977 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1804RS2_0977 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C04NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0C04EDF_1017 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
P0C04EDF_1017    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1017   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1017   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1017) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04    DS    0H
P0C04FN  DS    XL2                FUNCTION CODE
P0C04EIB DS    AL4                EIB
P0C04TCT DS    AL4                TCTTE
P0C04FMA DS    AL4                FREEMAIN ADDRESS
P0C04EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0C04EDS DS    AL4                DSA ADDRESS FOR EDF
P0C04EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0C04EDL DS    XL2                DSA LENGTH FOR EDF
P0C04NED DS    X                  FF=NOEDF
         DS    X
P0C04NOH DS    X                  FF=NOHANDLE
         DS    X
P0C04RSP DS    AL4                RESP
P0C04RS2 DS    AL4                RESP2
P0C04END EQU   *                  END MARKER
*
P0C04BYP_1017    DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_1028 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_1028    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1028   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1028   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1028) ENTRYPOINT FOR IGNORE CONDITION
*
P0E0A    DS    0H
P0E0AFN  DS    XL2                FUNCTION CODE
P0E0AEIB DS    AL4                EIB
P0E0ATCT DS    AL4                TCTTE
P0E0APGM DS    CL8                PROGRAM
P0E0ACST DS    CL8                OUR PROGRAM NAME
P0E0AEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E0AEDS DS    AL4                DSA ADDRESS FOR EDF
P0E0AEDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E0AEDL DS    XL2                DSA LENGTH FOR EDF
P0E0ANED DS    X                  FF=NOEDF
         DS    X
P0E0ANOH DS    X                  FF=NOHANDLE
         DS    X
P0E0ARSP DS    AL4                RESP
P0E0ARS2 DS    AL4                RESP2
P0E0AEND EQU   *                  END MARKER
*
P0E0ABYP_1028    DS 0H
         LARL  R1,P1804RSP_0977 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1804RS2_0977 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1804MRS_0977   EXIT
*
P1804RSP_0977    DS F             SAVED EIBRESP
P1804RS2_0977    DS F             SAVED EIBRESP2
P1804MRS_0977    DS 0H
*                       END-EXEC.
*      *  MVI   COMMIND,C'1'       SET GUI4 REENTRY POINT
*             MOVE '1' TO COMMIND.
*      *  B     RETURN             EXIT
*ZC    288         MOVE  '1',TO,COMMIND
         MVI   COMMIND,C'1'
*             GO TO ECRETURN.
*      * NOT1ST   EQU   *
*ZC    290         GO    TO,ECRETURN
         J     PG_ECRETURN
*         NOT1ST.
*      * PROCESS INPUT
PG_RESEND4_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOT1ST DS   0H
*             MOVE DFHCOMMAREA TO MYCOMM.
*      *  CLI   COMMIND,C'1'       COMMAREA=1 ?
*      *  BE    GUI4RENT           EXIT IF IT IS
*      *  CLI   COMMIND,C'2'       COMMAREA=2 ?
*      *  BE    GUI6RENT           EXIT IF IT IS
*      *  CLI   COMMIND,C'3'       COMMAREA=3 ?
*      *  BE    GUI6HRNT           EXIT IF IT IS
*      *  DC    H'0'               BAD COMMAREA
*ZC    294         MOVE  DFHCOMMAREA,TO,MYCOMM
         L     ZC_R5,ZC_DFHCOMMAREA_PTR
         USING DFHCOMMAREA_DSECT,ZC_R5
         MVC   MYCOMM,DFHCOMMAREA  ALIGN LEFT X OTHER
*             IF COMMIND = '1' THEN GO TO GUI4RENT.
*ZC    302         IF    COMMIND,=,'1',THEN
         CLI   COMMIND,C'1'
         BRC   15-ZC_EQ,PG_IF_2_1
*ZC    302         GO    TO,GUI4RENT
         J     PG_GUI4RENT
PG_IF_2_1    DS    0H  &TYPE
         DROP     ZC_R5
*             IF COMMIND = '2' THEN GO TO GUI6RENT.
*ZC    303         IF    COMMIND,=,'2',THEN
         CLI   COMMIND,C'2'
         BRC   15-ZC_EQ,PG_IF_3_1
*ZC    303         GO    TO,GUI6RENT
         J     PG_GUI6RENT
PG_IF_3_1    DS    0H  &TYPE
*             IF COMMIND = '3' THEN GO TO GUI6HRNT.
*ZC    304         IF    COMMIND,=,'3',THEN
         CLI   COMMIND,C'3'
         BRC   15-ZC_EQ,PG_IF_4_1
*ZC    304         GO    TO,GUI6HRNT
         J     PG_GUI6HRNT
PG_IF_4_1    DS    0H  &TYPE
*             GO TO ABEND.
*      * GUI4RENT EQU   *
*ZC    305         GO    TO,ABEND
         J     PG_ABEND
*         GUI4RENT.
*      * PROCESS GUI4 INPUT
PG_NOT1ST_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI4RENT DS 0H
*             EXEC CICS IGNORE CONDITION MAPFAIL END-EXEC.
*ZC    309         EXEC  CICS,IGNORE,CONDITION,MAPFAIL
         LARL  R1,P020A         ADDRESS SOURCE
         LARL  R15,P020A        ADDRESS TARGET
         XC    0(P020AEND-P020A,R15),0(R1) XC IT
         LARL  R1,=X'020A'         ADDRESS SOURCE
         LARL  R15,P020AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P020AFN,R15),0(R1) MVC IT
         LARL  R1,P020AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P020ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R14,P020ACND       R14=ADDRESS OF COND NUMBERS
         MVI   0(R14),36      SET CONDITION INDICATOR
         AHI   R14,1              BUMP POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P020AHCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P020AEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P020AEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P020AEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P020AEDF_1104 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P020AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P020A)       R1=LCL MODULE PARAMETER LIST
P020AEDF_1104    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         J     P020ABYP_1104   EXIT
*
P020A    DS    0H
P020AFN  DS    XL2                FUNCTION CODE
P020AEIB DS    AL4                EIB
P020ATCT DS    AL4                TCTTE
P020AHCN DS    AL4                A(DFHEIHCN)
P020ACND DS    XL30               ROOM FOR 30 CONDITIONS
P020AEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P020AEDS DS    AL4                DSA ADDRESS FOR EDF
P020AEDC DS    XL2                CICS DSA LENGTH FOR EDF
P020AEDL DS    XL2                DSA LENGTH FOR EDF
P020ANED DS    X                  FF=NOEDF
         DS    X
P020ARSP DS    AL4                RESP
P020ARS2 DS    AL4                RESP2
P020AEND EQU   *                  END MARKER
*
P020ABYP_1104    DS 0H
*             EXEC CICS RECEIVE MAP('GUI4') MAPSET('MAP01C') END-EXEC.
*ZC    310         EXEC  CICS,RECEIVE,MAP('GUI4'),MAPSET('MAP01C')
         LARL  R1,P1802         ADDRESS SOURCE
         LARL  R15,P1802        ADDRESS TARGET
         XC    0(P1802END-P1802,R15),0(R1) XC IT
         LARL  R1,=X'1802'         ADDRESS SOURCE
         LARL  R15,P1802FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1802FN,R15),0(R1) MVC IT
         LARL  R1,P1802EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1802TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1802EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1802EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1802EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,=CL8'GUI4'         ADDRESS SOURCE
         LARL  R15,P1802MAP        ADDRESS TARGET AS LABEL
         MVC   0(L'P1802MAP,R15),0(R1) MVC IT
         LA    R0,GUI4I        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1802DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI4I      R0=MAP STRUCTURE LENGTH (COBOL)
         LARL  R1,P1802DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1802LEN_1117         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_1129 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_1129    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1129   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1129   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1129) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1129    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1802MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,P1802LEN_1117         ADDRESS SOURCE
         LARL  R15,P1802MLN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1802MLN,R15),0(R1) MVC IT
         LARL  R0,P1802EDF_1117 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1802EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1802)       R1=LCL MODULE PARAMETER LIST
P1802EDF_1117    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1802NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1802BYP_1117   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1802BYP_1117   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1802BYP_1117) ENTRYPOINT FOR IGNORE CONDITION
*
P1802LEN_1117    DS XL2
*
P1802    DS    0H
P1802FN  DS    XL2                FUNCTION CODE
P1802EIB DS    AL4                EIB
P1802TCT DS    AL4                TCTTE
P1802MSA DS    AL4                MAPSET ADDRESS
P1802MAP DS    CL7                MAP NAME
         DS    X
P1802MLN DS    XL2                MAPSET LENGTH
P1802DSC DS    AL4                STRUCTURE ADDRESS
P1802DSL DS    AL2                STRUCTURE LENGTH
P1802EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P1802EDS DS    AL4                DSA ADDRESS FOR EDF
P1802EDC DS    XL2                CICS DSA LENGTH FOR EDF
P1802EDL DS    XL2                DSA LENGTH FOR EDF
P1802NED DS    X                  FF=NOEDF
         DS    X
P1802NOH DS    X                  FF=NOHANDLE
         DS    X
P1802RSP DS    AL4                RESP
P1802RS2 DS    AL4                RESP2
P1802END EQU   *                  END MARKER
*
P1802BYP_1117    DS 0H
         LARL  R1,P1802RSP_1117 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1802RS2_1117 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_1145 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_1145    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1145   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1145   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1145) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1145    DS 0H
         LARL  R1,P1802RSP_1117 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1802RS2_1117 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1802MRS_1117   EXIT
*
P1802RSP_1117    DS F             SAVED EIBRESP
P1802RS2_1117    DS F             SAVED EIBRESP2
P1802MRS_1117    DS 0H
*      *  CLI   EIBAID,DFHPF3      PF3 ?
*      *  BE    GUI6               YES, EXIT TO START GUI6
*             IF EIBAID = DFHPF3   THEN GO TO GUI6.
*ZC    313         IF    EIBAID,=,DFHPF3,THEN
         CLC   EIBAID,DFHPF3
         BRC   15-ZC_EQ,PG_IF_5_1
*      *  CLI   EIBAID,DFHCLEAR    CLEAR ?
*      *  BE    RESEND4            YES, EXIT TO REFRESH DISPLAY
*ZC    313         GO    TO,GUI6
         J     PG_GUI6
PG_IF_5_1    DS    0H  &TYPE
*             IF EIBAID = DFHCLEAR THEN GO TO RESEND4.
*ZC    316         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_6_1
*      *  CLC   INPUTI,=C'END'     REQUEST TO END ?
*      *  BE    GUI6               EXIT IF IT IS
*ZC    316         GO    TO,RESEND4
         J     PG_RESEND4
PG_IF_6_1    DS    0H  &TYPE
*             IF INPUTI = 'END' THEN GO TO GUI6.
*ZC    319         IF    INPUTI,=,'END',THEN
         LARL  ZC_R1,=CL4'END'
         CLC   INPUTI,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_7_1
*      *  MVC   REPLYO,INPUTI      DISPLAY THE INPUT
*ZC    319         GO    TO,GUI6
         J     PG_GUI6
PG_IF_7_1    DS    0H  &TYPE
*             MOVE INPUTI TO REPLYO.
*ZC    321         MOVE  INPUTI,TO,REPLYO
         MVC   REPLYO,INPUTI  ALIGN LEFT X OTHER
*             EXEC CICS SEND MAP('GUI4') MAPSET('MAP01C') END-EXEC.
*ZC    322         EXEC  CICS,SEND,MAP('GUI4'),MAPSET('MAP01C')
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI4'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LAY   R0,GUI4O        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1804DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI4O      SET DEFAULT MAP STRUC LENGTH (COBOL)
         LARL  R1,P1804DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1804MLN         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_1212 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_1212    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1212   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1212   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1212) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1212    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'00000000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(4000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0C02EDF_1226 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_1226    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1804EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1804EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1804EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P1804EDF_1205 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1804EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
P1804EDF_1205    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_1205   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_1205   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_1205) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_1205    DS 0H
         LARL  R1,P1804RSP_1205 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1804RS2_1205 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C04NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0C04EDF_1244 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
P0C04EDF_1244    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1244   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1244   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1244) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1244    DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_1254 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_1254    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1254   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1254   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1254) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1254    DS 0H
         LARL  R1,P1804RSP_1205 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1804RS2_1205 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1804MRS_1205   EXIT
*
P1804RSP_1205    DS F             SAVED EIBRESP
P1804RS2_1205    DS F             SAVED EIBRESP2
P1804MRS_1205    DS 0H
*      *  B     RETURN             LOOP
*             GO TO ECRETURN.
*      * GUI6     EQU   *
*ZC    324         GO    TO,ECRETURN
         J     PG_ECRETURN
*         GUI6.
*      * INITIAL GUI6 MAP
*      *  XC    COMMIND(86),COMMIND CLEAR COMMAREA
PG_GUI4RENT_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6  DS    0H
*             MOVE LOW-VALUES TO MYCOMM.
*ZC    329         MOVE  LOW_VALUES,TO,MYCOMM
         MVI   MYCOMM,X'00'
         MVC   MYCOMM+1(86-1),MYCOMM
*             EXEC CICS SEND MAP('GUI6') MAPSET('MAP01C') MAPONLY ERASE
*ZC    330         EXEC  CICS,SEND,MAP('GUI6'),MAPSET('MAP01C'),MAPONLYX
               ,ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI6'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1804MLN         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_1283 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_1283    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1283   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1283   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1283) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1283    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10010000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(4000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0C02EDF_1297 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_1297    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1804EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1804EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1804EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P1804EDF_1278 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1804EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
P1804EDF_1278    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_1278   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_1278   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_1278) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_1278    DS 0H
         LARL  R1,P1804RSP_1278 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1804RS2_1278 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C04NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0C04EDF_1315 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
P0C04EDF_1315    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_1315   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_1315   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_1315) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_1315    DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_1325 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_1325    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1325   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1325   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1325) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1325    DS 0H
         LARL  R1,P1804RSP_1278 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1804RS2_1278 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1804MRS_1278   EXIT
*
P1804RSP_1278    DS F             SAVED EIBRESP
P1804RS2_1278    DS F             SAVED EIBRESP2
P1804MRS_1278    DS 0H
*                       END-EXEC.
*      *  MVI   COMMIND,C'2'       SET GUI6 REENTRY POINT
*             MOVE '2' TO COMMIND.
*      *  B     RETURN             EXIT
*ZC    333         MOVE  '2',TO,COMMIND
         MVI   COMMIND,C'2'
*             GO TO ECRETURN.
*      * GUI6RENT EQU   *
*ZC    335         GO    TO,ECRETURN
         J     PG_ECRETURN
*         GUI6RENT.
PG_GUI6_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6RENT DS 0H
*             EXEC  CICS HANDLE CONDITION MAPFAIL(MAPFAILS) END-EXEC.
*ZC    338         EXEC  CICS,HANDLE,CONDITION,MAPFAIL(MAPFAILS)
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),36       SET CONDITION NUMBER
         LARL  R0,PG_MAPFAILS     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0204EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0204EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0204EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0204EDF_1348 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0204EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
P0204EDF_1348    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         J     P0204BYP_1348   EXIT
*
P0204    DS    0H
P0204FN  DS    XL2                FUNCTION CODE
P0204EIB DS    AL4                EIB
P0204TCT DS    AL4                TCTTE
P0204HCN DS    AL4                A(DFHEIHCN)
P0204CND DS    XL30               ROOM FOR 30 CONDITIONS
P0204ADR DS    30AL4              ROOM FOR 30 ADDRESSES, FF......=CLEAR
P0204EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0204EDS DS    AL4                DSA ADDRESS FOR EDF
P0204EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0204EDL DS    XL2                DSA LENGTH FOR EDF
P0204NED DS    X                  FF=NOEDF
         DS    X
P0204RSP DS    AL4                RESP
P0204RS2 DS    AL4                RESP2
P0204END EQU   *                  END MARKER
*
P0204BYP_1348    DS 0H
*             EXEC  CICS RECEIVE MAP('GUI6') MAPSET('MAP01C') END-EXEC.
*ZC    339         EXEC  CICS,RECEIVE,MAP('GUI6'),MAPSET('MAP01C')
         LARL  R1,P1802         ADDRESS SOURCE
         LARL  R15,P1802        ADDRESS TARGET
         XC    0(P1802END-P1802,R15),0(R1) XC IT
         LARL  R1,=X'1802'         ADDRESS SOURCE
         LARL  R15,P1802FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1802FN,R15),0(R1) MVC IT
         LARL  R1,P1802EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1802TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1802EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1802EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1802EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,=CL8'GUI6'         ADDRESS SOURCE
         LARL  R15,P1802MAP        ADDRESS TARGET AS LABEL
         MVC   0(L'P1802MAP,R15),0(R1) MVC IT
         LA    R0,GUI6I        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1802DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI6I      R0=MAP STRUCTURE LENGTH (COBOL)
         LARL  R1,P1802DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1802LEN_1361         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_1373 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_1373    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_1373   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_1373   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_1373) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_1373    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1802MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,P1802LEN_1361         ADDRESS SOURCE
         LARL  R15,P1802MLN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1802MLN,R15),0(R1) MVC IT
         LARL  R0,P1802EDF_1361 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1802EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1802)       R1=LCL MODULE PARAMETER LIST
P1802EDF_1361    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1802NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1802BYP_1361   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1802BYP_1361   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1802BYP_1361) ENTRYPOINT FOR IGNORE CONDITION
*
P1802LEN_1361    DS XL2
*
P1802BYP_1361    DS 0H
         LARL  R1,P1802RSP_1361 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1802RS2_1361 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_1388 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_1388    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_1388   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_1388   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_1388) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_1388    DS 0H
         LARL  R1,P1802RSP_1361 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1802RS2_1361 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1802MRS_1361   EXIT
*
P1802RSP_1361    DS F             SAVED EIBRESP
P1802RS2_1361    DS F             SAVED EIBRESP2
P1802MRS_1361    DS 0H
*      * SHORTRD  EQU   *
*         SHORTRD.
*      *  CLI   EIBAID,DFHENTER    ENTER ?
*      *  BE    GUI6DATA           EXIT IF IT IS
PG_GUI6RENT_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_SHORTRD DS  0H
*             IF EIBAID = DFHENTER THEN GO TO GUI6DATA.
*ZC    344         IF    EIBAID,=,DFHENTER,THEN
         CLC   EIBAID,DFHENTER
         BRC   15-ZC_EQ,PG_IF_8_1
*      *  CLI   EIBAID,DFHPF1      PF1 ?
*      *  BE    GUI6HELP           EXIT IF IT IS
*ZC    344         GO    TO,GUI6DATA
         J     PG_GUI6DATA
PG_IF_8_1    DS    0H  &TYPE
*             IF EIBAID = DFHPF1   THEN GO TO GUI6HELP.
*ZC    347         IF    EIBAID,=,DFHPF1,THEN
         CLC   EIBAID,DFHPF1
         BRC   15-ZC_EQ,PG_IF_9_1
*      *  CLI   EIBAID,DFHPF2      PF2 ?
*      *  BE    EAU                EXIT IF IT IS
*ZC    347         GO    TO,GUI6HELP
         J     PG_GUI6HELP
PG_IF_9_1    DS    0H  &TYPE
*             IF EIBAID = DFHPF2   THEN GO TO EAU.
*ZC    350         IF    EIBAID,=,DFHPF2,THEN
         CLC   EIBAID,DFHPF2
         BRC   15-ZC_EQ,PG_IF_10_1
*      *  CLI   EIBAID,DFHPF3      PF3 ?
*      *  BE    ALLDONE            EXIT IF IT IS
*ZC    350         GO    TO,EAU
         J     PG_EAU
PG_IF_10_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF3   THEN GO TO ALLDONE.
*ZC    353         IF    EIBAID,=,DFHPF3,THEN
         CLC   EIBAID,DFHPF3
         BRC   15-ZC_EQ,PG_IF_11_1
*      *  CLI   EIBAID,DFHCLEAR    CLEAR ?
*      *  BE    GUI6               YES, EXIT TO REFRESH DISPLAY
*ZC    353         GO    TO,ALLDONE
         J     PG_ALLDONE
PG_IF_11_1   DS    0H  &TYPE
*             IF EIBAID = DFHCLEAR THEN GO TO GUI6.
*ZC    356         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_12_1
*      * BAD KEY
*      *  UNPK  HEXKEY(3),EIBAID(2) UNPACK AID
*      *  TR    HEXKEY(2),HEXTAB-240 TRANSLATE
*      *  MVI   HEXKEY+2,C' '      CLEAR EXTRA BYTE
*ZC    356         GO    TO,GUI6
         J     PG_GUI6
PG_IF_12_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF4  THEN MOVE 'F4' TO HEXKEY.
*ZC    361         IF    EIBAID,=,DFHPF4,THEN
         CLC   EIBAID,DFHPF4
         BRC   15-ZC_EQ,PG_IF_13_1
*ZC    361         MOVE  'F4',TO,HEXKEY
         LARL  ZC_R1,=CL2'F4'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_13_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF5  THEN MOVE 'F5' TO HEXKEY.
*ZC    362         IF    EIBAID,=,DFHPF5,THEN
         CLC   EIBAID,DFHPF5
         BRC   15-ZC_EQ,PG_IF_14_1
*ZC    362         MOVE  'F5',TO,HEXKEY
         LARL  ZC_R1,=CL2'F5'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_14_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF6  THEN MOVE 'F6' TO HEXKEY.
*ZC    363         IF    EIBAID,=,DFHPF6,THEN
         CLC   EIBAID,DFHPF6
         BRC   15-ZC_EQ,PG_IF_15_1
*ZC    363         MOVE  'F6',TO,HEXKEY
         LARL  ZC_R1,=CL2'F6'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_15_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF7  THEN MOVE 'F7' TO HEXKEY.
*ZC    364         IF    EIBAID,=,DFHPF7,THEN
         CLC   EIBAID,DFHPF7
         BRC   15-ZC_EQ,PG_IF_16_1
*ZC    364         MOVE  'F7',TO,HEXKEY
         LARL  ZC_R1,=CL2'F7'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_16_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF8  THEN MOVE 'F8' TO HEXKEY.
*ZC    365         IF    EIBAID,=,DFHPF8,THEN
         CLC   EIBAID,DFHPF8
         BRC   15-ZC_EQ,PG_IF_17_1
*ZC    365         MOVE  'F8',TO,HEXKEY
         LARL  ZC_R1,=CL2'F8'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_17_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF9  THEN MOVE 'F9' TO HEXKEY.
*ZC    366         IF    EIBAID,=,DFHPF9,THEN
         CLC   EIBAID,DFHPF9
         BRC   15-ZC_EQ,PG_IF_18_1
*ZC    366         MOVE  'F9',TO,HEXKEY
         LARL  ZC_R1,=CL2'F9'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_18_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF10 THEN MOVE '7A' TO HEXKEY.
*ZC    367         IF    EIBAID,=,DFHPF10,THEN
         CLC   EIBAID,DFHPF10
         BRC   15-ZC_EQ,PG_IF_19_1
*ZC    367         MOVE  '7A',TO,HEXKEY
         LARL  ZC_R1,=CL2'7A'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_19_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF11 THEN MOVE '7B' TO HEXKEY.
*ZC    368         IF    EIBAID,=,DFHPF11,THEN
         CLC   EIBAID,DFHPF11
         BRC   15-ZC_EQ,PG_IF_20_1
*ZC    368         MOVE  '7B',TO,HEXKEY
         LARL  ZC_R1,=CL2'7B'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_20_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF12 THEN MOVE '7C' TO HEXKEY.
*ZC    369         IF    EIBAID,=,DFHPF12,THEN
         CLC   EIBAID,DFHPF12
         BRC   15-ZC_EQ,PG_IF_21_1
*ZC    369         MOVE  '7C',TO,HEXKEY
         LARL  ZC_R1,=CL2'7C'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_21_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF13 THEN MOVE 'C1' TO HEXKEY.
*ZC    370         IF    EIBAID,=,DFHPF13,THEN
         CLC   EIBAID,DFHPF13
         BRC   15-ZC_EQ,PG_IF_22_1
*ZC    370         MOVE  'C1',TO,HEXKEY
         LARL  ZC_R1,=CL2'C1'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_22_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF14 THEN MOVE 'C2' TO HEXKEY.
*ZC    371         IF    EIBAID,=,DFHPF14,THEN
         CLC   EIBAID,DFHPF14
         BRC   15-ZC_EQ,PG_IF_23_1
*ZC    371         MOVE  'C2',TO,HEXKEY
         LARL  ZC_R1,=CL2'C2'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_23_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF15 THEN MOVE 'C3' TO HEXKEY.
*ZC    372         IF    EIBAID,=,DFHPF15,THEN
         CLC   EIBAID,DFHPF15
         BRC   15-ZC_EQ,PG_IF_24_1
*ZC    372         MOVE  'C3',TO,HEXKEY
         LARL  ZC_R1,=CL2'C3'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_24_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF16 THEN MOVE 'C4' TO HEXKEY.
*ZC    373         IF    EIBAID,=,DFHPF16,THEN
         CLC   EIBAID,DFHPF16
         BRC   15-ZC_EQ,PG_IF_25_1
*ZC    373         MOVE  'C4',TO,HEXKEY
         LARL  ZC_R1,=CL2'C4'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_25_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF17 THEN MOVE 'C5' TO HEXKEY.
*ZC    374         IF    EIBAID,=,DFHPF17,THEN
         CLC   EIBAID,DFHPF17
         BRC   15-ZC_EQ,PG_IF_26_1
*ZC    374         MOVE  'C5',TO,HEXKEY
         LARL  ZC_R1,=CL2'C5'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_26_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF18 THEN MOVE 'C6' TO HEXKEY.
*ZC    375         IF    EIBAID,=,DFHPF18,THEN
         CLC   EIBAID,DFHPF18
         BRC   15-ZC_EQ,PG_IF_27_1
*ZC    375         MOVE  'C6',TO,HEXKEY
         LARL  ZC_R1,=CL2'C6'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_27_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF19 THEN MOVE 'C7' TO HEXKEY.
*ZC    376         IF    EIBAID,=,DFHPF19,THEN
         CLC   EIBAID,DFHPF19
         BRC   15-ZC_EQ,PG_IF_28_1
*ZC    376         MOVE  'C7',TO,HEXKEY
         LARL  ZC_R1,=CL2'C7'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_28_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF20 THEN MOVE 'C8' TO HEXKEY.
*ZC    377         IF    EIBAID,=,DFHPF20,THEN
         CLC   EIBAID,DFHPF20
         BRC   15-ZC_EQ,PG_IF_29_1
*ZC    377         MOVE  'C8',TO,HEXKEY
         LARL  ZC_R1,=CL2'C8'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_29_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF21 THEN MOVE 'C9' TO HEXKEY.
*ZC    378         IF    EIBAID,=,DFHPF21,THEN
         CLC   EIBAID,DFHPF21
         BRC   15-ZC_EQ,PG_IF_30_1
*ZC    378         MOVE  'C9',TO,HEXKEY
         LARL  ZC_R1,=CL2'C9'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_30_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF22 THEN MOVE '4A' TO HEXKEY.
*ZC    379         IF    EIBAID,=,DFHPF22,THEN
         CLC   EIBAID,DFHPF22
         BRC   15-ZC_EQ,PG_IF_31_1
*ZC    379         MOVE  '4A',TO,HEXKEY
         LARL  ZC_R1,=CL2'4A'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_31_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF23 THEN MOVE '4B' TO HEXKEY.
*ZC    380         IF    EIBAID,=,DFHPF23,THEN
         CLC   EIBAID,DFHPF23
         BRC   15-ZC_EQ,PG_IF_32_1
*ZC    380         MOVE  '4B',TO,HEXKEY
         LARL  ZC_R1,=CL2'4B'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_32_1   DS    0H  &TYPE
*             IF EIBAID = DFHPF24 THEN MOVE '4C' TO HEXKEY.
*ZC    381         IF    EIBAID,=,DFHPF24,THEN
         CLC   EIBAID,DFHPF24
         BRC   15-ZC_EQ,PG_IF_33_1
*ZC    381         MOVE  '4C',TO,HEXKEY
         LARL  ZC_R1,=CL2'4C'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_33_1   DS    0H  &TYPE
*             IF EIBAID = DFHPA1  THEN MOVE '6C' TO HEXKEY.
*ZC    382         IF    EIBAID,=,DFHPA1,THEN
         CLC   EIBAID,DFHPA1
         BRC   15-ZC_EQ,PG_IF_34_1
*ZC    382         MOVE  '6C',TO,HEXKEY
         LARL  ZC_R1,=CL2'6C'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_34_1   DS    0H  &TYPE
*             IF EIBAID = DFHPA2  THEN MOVE '6E' TO HEXKEY.
*ZC    383         IF    EIBAID,=,DFHPA2,THEN
         CLC   EIBAID,DFHPA2
         BRC   15-ZC_EQ,PG_IF_35_1
*ZC    383         MOVE  '6E',TO,HEXKEY
         LARL  ZC_R1,=CL2'6E'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_35_1   DS    0H  &TYPE
*             IF EIBAID = DFHPA3  THEN MOVE '6B' TO HEXKEY.
*ZC    384         IF    EIBAID,=,DFHPA3,THEN
         CLC   EIBAID,DFHPA3
         BRC   15-ZC_EQ,PG_IF_36_1
*      *  MVC   ERRMSGO,BADKEY     MOVE BAD KEY MESSAGE
*ZC    384         MOVE  '6B',TO,HEXKEY
         LARL  ZC_R1,=CL2'6B'
          MVC   HEXKEY,0(ZC_R1)
PG_IF_36_1   DS    0H  &TYPE
*             MOVE BADKEY TO ERRMSGO.
*      *  B     REDISP             EXIT
*ZC    386         MOVE  BADKEY,TO,ERRMSGO
         MVC   ERRMSGO,BADKEY  ALIGN LEFT X OTHER
*             GO TO REDISP.
*      * EAU      EQU   *
*ZC    388         GO    TO,REDISP
         J     PG_REDISP
*         EAU.
PG_SHORTRD_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_EAU   DS    0H
*             EXEC CICS SEND CONTROL ERASEAUP CURSOR END-EXEC.
*ZC    391         EXEC  CICS,SEND,CONTROL,ERASEAUP,CURSOR
         LARL  R1,P1812         ADDRESS SOURCE
         LARL  R15,P1812        ADDRESS TARGET
         XC    0(P1812END-P1812,R15),0(R1) XC IT
         LARL  R1,=X'1812'         ADDRESS SOURCE
         LARL  R15,P1812FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1812FN,R15),0(R1) MVC IT
         LARL  R1,P1812EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1812TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1812EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1812EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1812EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1812CRS        ADDRESS TARGET AS LABEL
         MVC   0(L'P1812CRS,R15),0(R1) MVC IT
         LARL  R1,P1812OPT         ADDRESS TARGET
         MVI   0(R1),B'01100000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(7)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0C02EDF_1882 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_1882    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LARL  R1,P1812OUT         ADDRESS TARGET
         ST    R15,0(R1)      ST IT
         LARL  R0,P1812EDF_1871 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1812EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1812)       R1=LCL MODULE PARAMETER LIST
P1812EDF_1871    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1812NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1812BYP_1871   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1812BYP_1871   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1812BYP_1871) ENTRYPOINT FOR IGNORE CONDITION
*
         J     P1812BYP_1871   EXIT
*
P1812    DS    0H
P1812FN  DS    XL2                FUNCTION CODE
P1812EIB DS    AL4                EIB
P1812TCT DS    AL4                TCTTE
P1812OUT DS    AL4                OUTPUT AREA
P1812CRS DS    XL2                CURSOR POSITION (X'FFFF'=NONE)
P1812OPT DS    X                  OPTION BITS...
P1812ERS EQU   X'80'                 ERASE
P1812EAU EQU   X'40'                 ERASEAUP
P1812CSM EQU   X'20'                 SYMBOLIC CURSOR
P1812ALM EQU   X'04'                 ALARM
P1812FKB EQU   X'02'                 FREEKB
P1812FRS EQU   X'01'                 FRSET
         DS    X
P1812EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P1812EDS DS    AL4                DSA ADDRESS FOR EDF
P1812EDC DS    XL2                CICS DSA LENGTH FOR EDF
P1812EDL DS    XL2                DSA LENGTH FOR EDF
P1812NED DS    X                  FF=NOEDF
         DS    X
P1812NOH DS    X                  FF=NOHANDLE
         DS    X
P1812RSP DS    AL4                RESP
P1812RS2 DS    AL4                RESP2
P1812END EQU   *                  END MARKER
*
P1812BYP_1871    DS 0H
*      *  B     RETURN             EXIT
*             GO TO ECRETURN.
*      * GUI6DATA EQU   *
*ZC    393         GO    TO,ECRETURN
         J     PG_ECRETURN
*         GUI6DATA.
*      * ENTER PRESSED
*      * DISPLAY CURSOR LOCATION
*      *  MVC   CURSO,=9C'?'       MARK CURSOR LOCATION UNKNOWN
PG_EAU_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6DATA DS 0H
*             MOVE '?????????' TO CURSO.
*      *  TM    NAMEF,DFHBMCUR     CURSOR ON NAME ?
*      *  BNO   CURS01             EXIT IF NOT
*      *  MVC   CURSO,=CL9'NAME'   MARK CURSOR LOCATION
*ZC    400         MOVE  '?????????',TO,CURSO
         LARL  ZC_R1,=CL10'?????????'
          MVC   CURSO,0(ZC_R1)
*             IF NAMEF = DFHBMCUR OR
*                NAMEF = DFHBMEF  THEN
*ZC    404         IF    NAMEF,=,DFHBMCUR,OR,NAMEF,=,DFHBMEF,THEN
         CLC   NAMEF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_37_IOP1_T
         CLC   NAMEF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_37_1
PG_IF_37_IOP1_T DS 0H  &TYPE
*             MOVE 'NAME     ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    406         MOVE  'NAME     ',TO,CURSO
         LARL  ZC_R1,=CL10'NAME     '
          MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS01   EQU   *
*      *  TM    ADDRF,DFHBMCUR     CURSOR ON ADDR ?
*      *  BNO   CURS02             EXIT IF NOT
*      *  MVC   CURSO,=CL9'ADDR'   MARK CURSOR LOCATION
*ZC    408         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_37_1   DS    0H  &TYPE
*             IF ADDRF = DFHBMCUR OR
*                ADDRF = DFHBMEF  THEN
*ZC    413         IF    ADDRF,=,DFHBMCUR,OR,ADDRF,=,DFHBMEF,THEN
         CLC   ADDRF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_38_IOP1_T
         CLC   ADDRF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_38_1
PG_IF_38_IOP1_T DS 0H  &TYPE
*             MOVE 'ADDR     ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    415         MOVE  'ADDR     ',TO,CURSO
         LARL  ZC_R1,=CL10'ADDR     '
          MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS02   EQU   *
*      *  TM    ZIPF,DFHBMCUR      CURSOR ON ZIP ?
*      *  BNO   CURS03             EXIT IF NOT
*      *  MVC   CURSO,=CL9'ZIP'    MARK CURSOR LOCATION
*ZC    417         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_38_1   DS    0H  &TYPE
*             IF ZIPF  = DFHBMCUR OR
*                ZIPF  = DFHBMEF  THEN
*ZC    422         IF    ZIPF,=,DFHBMCUR,OR,ZIPF,=,DFHBMEF,THEN
         CLC   ZIPF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_39_IOP1_T
         CLC   ZIPF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_39_1
PG_IF_39_IOP1_T DS 0H  &TYPE
*             MOVE 'ZIP      ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    424         MOVE  'ZIP      ',TO,CURSO
         LARL  ZC_R1,=CL10'ZIP      '
          MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS03   EQU   *
*      *  LA    R6,1               COUNT OCCURS
*      *  LA    R7,TESTOCCF        ADDRESS OCCURS
*ZC    426         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_39_1   DS    0H  &TYPE
*             MOVE 1 TO OCCINDX.
*      * OCCLOOP  EQU   *
*ZC    430         MOVE  1,TO,OCCINDX
          MVHHI OCCINDX,1
*         OCCLOOP.
*      *  TM    0(R7),DFHBMCUR     CURSOR ON THIS OCCURS ?
*      *  BO    CURSOCC            EXIT IF IT IS
PG_GUI6DATA_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_OCCLOOP DS  0H
*             IF TESTOCCF IN TESTOCCD (OCCINDX) = DFHBMCUR OR
*                TESTOCCF IN TESTOCCD (OCCINDX) = DFHBMEF  THEN
*ZC    435         IF    TESTOCCF,IN,TESTOCCD,'(',OCCINDX,')',=,DFHBMCUX
               R,OR,TESTOCCF,IN,TESTOCCD,'(',OCCINDX,')',=,DFHBMEF,THEN
         IILF  ZC_R15,OCCINDX-ZC_WS
         AR    ZC_R15,ZC_R13
         LH    ZC_R15,0(ZC_R15)
         BCTR  ZC_R15,0
         MSFI  ZC_R15,8 L'&SYM_NAME(&SIX_OCCUR(&CUR_SIX)) RPI 1161 CORRX
               ECT CONTINUE RPI 1182
         LA    ZC_R2,TESTOCCF(ZC_R15)
         CLC   0(1,ZC_R2),DFHBMCUR
         BRC   ZC_EQ,PG_IF_40_IOP1_T
         IILF  ZC_R15,OCCINDX-ZC_WS
         AR    ZC_R15,ZC_R13
         LH    ZC_R15,0(ZC_R15)
         BCTR  ZC_R15,0
         MSFI  ZC_R15,8 L'&SYM_NAME(&SIX_OCCUR(&CUR_SIX)) RPI 1161 CORRX
               ECT CONTINUE RPI 1182
         LA    ZC_R2,TESTOCCF(ZC_R15)
         CLC   0(1,ZC_R2),DFHBMEF
         BRC   15-ZC_EQ,PG_IF_40_1
PG_IF_40_IOP1_T DS 0H  &TYPE
*             GO TO CURSOCC.
*      *  AHI   R6,1               BUMP OCCURS COUNT
*ZC    437         GO    TO,CURSOCC
         J     PG_CURSOCC
PG_IF_40_1   DS    0H  &TYPE
*             ADD 1 TO OCCINDX.
*      *  CHI   R6,6               GOT TO END ?
*      *  BE    CURS04             EXIT
*ZC    439         ADD   1,TO,OCCINDX
         LH    ZC_R0,OCCINDX
         AHI   ZC_R0,1
         STH   ZC_R0,OCCINDX
*             IF OCCINDX = 6 THEN GO TO CURS04.
*ZC    442         IF    OCCINDX,=,6,THEN
         LH    0,OCCINDX
         CHI   0,6
         BRC   15-ZC_EQ,PG_IF_41_1
*      *  AHI   R7,3+5             BUMP TO NEXT OCCURS
*      *  B     OCCLOOP            LOOP
*ZC    442         GO    TO,CURS04
         J     PG_CURS04
PG_IF_41_1   DS    0H  &TYPE
*             GO TO OCCLOOP.
*      * CURSOCC  EQU   *
*ZC    445         GO    TO,OCCLOOP
         J     PG_OCCLOOP
*         CURSOCC.
*      *  MVC   CURSO,=CL9'OCCURS(.)' MARK CURSOR LOCATION
*      *  STC   R6,CURSO+7         STORE OCCURS NUMBER
*      *  OI    CURSO+7,X'F0'      CONVERT TO CHAR
PG_OCCLOOP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_CURSOCC DS  0H
*             MOVE OCCINDX  TO OCCZONE.
*ZC    451         MOVE  OCCINDX,TO,OCCZONE
         LH    0,OCCINDX
         CVD   0,ZCVT_PWORK
         UNPK  0+OCCZONE(2),6+ZCVT_PWORK(2) UNPK #1 NORMAL
         OI    2-1+OCCZONE,X'F0'  RPI 1065
*             MOVE OCCZONE2 TO OCCNUM.
*ZC    452         MOVE  OCCZONE2,TO,OCCNUM
         MVC   OCCNUM,OCCZONE2  ALIGN LEFT X OTHER
*             MOVE OCCCURSO TO CURSO.
*      *  B     GUI6PROC           EXIT
*ZC    453         MOVE  OCCCURSO,TO,CURSO
         MVC   CURSO,OCCCURSO  ALIGN LEFT X OTHER
*             GO TO GUI6PROC.
*      * CURS04   EQU   *
*ZC    455         GO    TO,GUI6PROC
         J     PG_GUI6PROC
*         CURS04.
*      *  TM    DATEF,DFHBMCUR     CURSOR ON DATE ?
*      *  BNO   CURS05             EXIT IF NOT
*      *  MVC   CURSO,=CL9'GRPNAME' MARK CURSOR LOCATION
PG_CURSOCC_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_CURS04 DS   0H
*             IF DATEF = DFHBMCUR OR
*                DATEF = DFHBMEF  THEN
*ZC    461         IF    DATEF,=,DFHBMCUR,OR,DATEF,=,DFHBMEF,THEN
         CLC   DATEF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_42_IOP1_T
         CLC   DATEF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_42_1
PG_IF_42_IOP1_T DS 0H  &TYPE
*             MOVE 'GRPNAME  ' TO CURSO
*      *  B     GUI6PROC           EXIT
*ZC    463         MOVE  'GRPNAME  ',TO,CURSO
         LARL  ZC_R1,=CL10'GRPNAME  '
          MVC   CURSO,0(ZC_R1)
*             GO TO GUI6PROC.
*      * CURS05   EQU   *
*      *  TM    TESTPCOF,DFHBMCUR  CURSOR ON TESTPCO ?
*      *  BNO   GUI6PROC           EXIT IF NOT
*      *  MVC   CURSO,=CL9'TESTPCO' MARK CURSOR LOCATION
*ZC    465         GO    TO,GUI6PROC
         J     PG_GUI6PROC
PG_IF_42_1   DS    0H  &TYPE
*             IF TESTPCOF = DFHBMCUR OR
*                TESTPCOF = DFHBMEF  THEN
*ZC    470         IF    TESTPCOF,=,DFHBMCUR,OR,TESTPCOF,=,DFHBMEF,THEN
         CLC   TESTPCOF,DFHBMCUR
         BRC   ZC_EQ,PG_IF_43_IOP1_T
         CLC   TESTPCOF,DFHBMEF
         BRC   15-ZC_EQ,PG_IF_43_1
PG_IF_43_IOP1_T DS 0H  &TYPE
*             MOVE 'TESTPCO  ' TO CURSO.
*      * GUI6PROC EQU   *
*ZC    472         MOVE  'TESTPCO  ',TO,CURSO
         LARL  ZC_R1,=CL10'TESTPCO  '
          MVC   CURSO,0(ZC_R1)
PG_IF_43_1   DS    0H  &TYPE
*         GUI6PROC.
*      *  LH    R6,NAMEL           TOTAL
*      *  AH    R6,ADDRL                 ALL
*      *  AH    R6,ZIPL                      LENGTHS
*      *  BNZ   SOMEDATA           EXIT IF NOT ZERO
PG_CURS04_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6PROC DS 0H
*             MOVE 0 TO SUMLEN.
*ZC    479         MOVE  0,TO,SUMLEN
          MVHHI SUMLEN,0
*             ADD NAMEL, ADDRL, ZIPL TO SUMLEN.
*ZC    480         ADD   NAMEL,ADDRL,ZIPL,TO,SUMLEN
         LH    ZC_R0,NAMEL
         AH    ZC_R0,SUMLEN
         STH   ZC_R0,SUMLEN
         LH    ZC_R0,ADDRL
         AH    ZC_R0,SUMLEN
         STH   ZC_R0,SUMLEN
         LH    ZC_R0,ZIPL
         AH    ZC_R0,SUMLEN
         STH   ZC_R0,SUMLEN
*             IF SUMLEN NOT = 0 THEN GO TO SOMEDATA.
*ZC    481         IF    SUMLEN,NOT,=,0,THEN
         LH    0,SUMLEN
         CHI   0,0
         BRC   15-ZC_NE,PG_IF_44_1
*      * NO FIELDS MODIFIED
*      *  MVC   ERRMSGO,NOMODS     MOVE NO FIELDS MESSAGE
*ZC    481         GO    TO,SOMEDATA
         J     PG_SOMEDATA
PG_IF_44_1   DS    0H  &TYPE
*             MOVE NOMODS TO ERRMSGO.
*      * REDISP   EQU   *
*ZC    484         MOVE  NOMODS,TO,ERRMSGO
         MVC   ERRMSGO,NOMODS  ALIGN LEFT X OTHER
*         REDISP.
*      *  CLI   COMMNAME,X'00'     ANY PREVIOUS NAME ?
*      *  BE    TRYADDR2           EXIT IF NOT
*      *  MVC   NAMEHDO,=C'NAME'   SHOW HEADER
*      *  MVC   NEWNAMEO,COMMNAME  MOVE ANY PREVIOUS NAME
PG_GUI6PROC_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_REDISP DS   0H
*             IF COMMNAME NOT = LOW-VALUES THEN
*ZC    491         IF    COMMNAME,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMNAME,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_45_1
*             MOVE 'NAME' TO NAMEHDO
*ZC    492         MOVE  'NAME',TO,NAMEHDO
         LARL  ZC_R1,=CL4'NAME'
          MVC   NAMEHDO,0(ZC_R1)
*             MOVE COMMNAME TO NEWNAMEO.
*      * TRYADDR2 EQU   *
*      *  CLI   COMMADDR,X'00'     ANY PREVIOUS ADDR ?
*      *  BE    TRYZIP2            EXIT IF NOT
*      *  MVC   ADDRHDO,=C'ADDR'   SHOW HEADER
*      *  MVC   NEWADDRO,COMMADDR  MOVE ANY PREVIOUS ADDR
*ZC    493         MOVE  COMMNAME,TO,NEWNAMEO
         MVC   NEWNAMEO,COMMNAME  ALIGN LEFT X OTHER
PG_IF_45_1   DS    0H  &TYPE
*             IF COMMADDR NOT = LOW-VALUES THEN
*ZC    499         IF    COMMADDR,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMADDR,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_46_1
*             MOVE 'ADDR' TO ADDRHDO
*ZC    500         MOVE  'ADDR',TO,ADDRHDO
         LARL  ZC_R1,=CL4'ADDR'
          MVC   ADDRHDO,0(ZC_R1)
*             MOVE COMMADDR TO NEWADDRO.
*      * TRYZIP2  EQU   *
*      *  CLI   COMMZIP,X'00'      ANY PREVIOUS ZIP ?
*      *  BE    TRYPAY             EXIT IF NOT
*      *  MVC   ZIPHDO,=C'ZIP '    SHOW HEADER
*      *  MVC   NEWZIPO,COMMZIP    MOVE ANY PREVIOUS ZIP
*ZC    501         MOVE  COMMADDR,TO,NEWADDRO
         MVC   NEWADDRO,COMMADDR  ALIGN LEFT X OTHER
PG_IF_46_1   DS    0H  &TYPE
*             IF COMMZIP NOT = LOW-VALUES THEN
*ZC    507         IF    COMMZIP,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(5+1)X'00'
         CLC   COMMZIP,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_47_1
*             MOVE 'ZIP ' TO ZIPHDO
*ZC    508         MOVE  'ZIP ',TO,ZIPHDO
         LARL  ZC_R1,=CL4'ZIP '
          MVC   ZIPHDO,0(ZC_R1)
*             MOVE COMMZIP TO NEWZIPO.
*      *  B     TRYPAY             EXIT
*ZC    509         MOVE  COMMZIP,TO,NEWZIPO
         MVC   NEWZIPO,COMMZIP  ALIGN LEFT X OTHER
PG_IF_47_1   DS    0H  &TYPE
*             GO TO TRYPAY.
*      * SOMEDATA EQU   *
*ZC    511         GO    TO,TRYPAY
         J     PG_TRYPAY
*         SOMEDATA.
*      *  XC    ERRMSGO,ERRMSGO    CLEAR ERROR MESSAGE
*      *  MVI   NAMEHDO,X'00'      ASSUME NO NAME HEADER
*      *  MVI   NEWNAMEO,X'00'     ASSUME NO NAME
PG_REDISP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_SOMEDATA DS 0H
*             MOVE LOW-VALUES TO ERRMSGO.
*ZC    517         MOVE  LOW_VALUES,TO,ERRMSGO
         MVI   ERRMSGO,X'00'
         MVC   ERRMSGO+1(34-1),ERRMSGO
*             MOVE LOW-VALUES TO NAMEHDO.
*ZC    518         MOVE  LOW_VALUES,TO,NAMEHDO
         MVI   NAMEHDO,X'00'
         MVC   NAMEHDO+1(4-1),NAMEHDO
*             MOVE LOW-VALUES TO NEWNAMEO.
*      *  OC    NAMEL,NAMEL        ANY NAME ENTERED ?
*      *  BZ    NONAME             EXIT IF NOT
*ZC    519         MOVE  LOW_VALUES,TO,NEWNAMEO
         MVI   NEWNAMEO,X'00'
         MVC   NEWNAMEO+1(40-1),NEWNAMEO
*             IF NAMEL = 0 THEN GO TO NONAME.
*ZC    522         IF    NAMEL,=,0,THEN
         LH    0,NAMEL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_48_1
*      *  MVC   NAMEHDO,=C'NAME'   SHOW HEADER
*      *  MVC   NEWNAMEO,NAMEI     SHOW NAME
*      *  MVC   COMMNAME,NAMEI     SAVE NAME
*ZC    522         GO    TO,NONAME
         J     PG_NONAME
PG_IF_48_1   DS    0H  &TYPE
*             MOVE 'NAME' TO NAMEHDO.
*ZC    526         MOVE  'NAME',TO,NAMEHDO
         LARL  ZC_R1,=CL4'NAME'
          MVC   NAMEHDO,0(ZC_R1)
*             MOVE NAMEI  TO NEWNAMEO.
*ZC    527         MOVE  NAMEI,TO,NEWNAMEO
         MVC   NEWNAMEO,NAMEI  ALIGN LEFT X OTHER
*             MOVE NAMEI  TO COMMNAME.
*      *  B     TRYADDR            EXIT
*ZC    528         MOVE  NAMEI,TO,COMMNAME
         MVC   COMMNAME,NAMEI  ALIGN LEFT X OTHER
*             GO TO TRYADDR.
*      * NONAME   EQU   *
*ZC    530         GO    TO,TRYADDR
         J     PG_TRYADDR
*         NONAME.
*      *  CLI   COMMNAME,X'00'     ANY PREVIOUS NAME ?
*      *  BE    TRYADDR            EXIT IF NONE
PG_SOMEDATA_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NONAME DS   0H
*             IF COMMNAME NOT = LOW-VALUES THEN
*      *  MVC   NAMEHDO,=C'NAME'   SHOW HEADER
*      *  MVC   NEWNAMEO,COMMNAME  SHOW PREVIOUS NAME
*ZC    535         IF    COMMNAME,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMNAME,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_49_1
*             MOVE 'NAME'   TO NAMEHDO
*ZC    538         MOVE  'NAME',TO,NAMEHDO
         LARL  ZC_R1,=CL4'NAME'
          MVC   NAMEHDO,0(ZC_R1)
*             MOVE COMMNAME TO NEWNAMEO.
*      * TRYADDR  EQU   *
*ZC    539         MOVE  COMMNAME,TO,NEWNAMEO
         MVC   NEWNAMEO,COMMNAME  ALIGN LEFT X OTHER
PG_IF_49_1   DS    0H  &TYPE
*         TRYADDR.
*      *  MVI   ADDRHDO,X'00'      ASSUME NO ADDR HEADER
*      *  MVI   NEWADDRO,X'00'     ASSUME NO ADDR
*      *  OC    ADDRL,ADDRL        ANY ADDR ENTERED ?
*      *  BZ    NOADDR             EXIT IF NOT
PG_NONAME_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_TRYADDR DS  0H
*             IF ADDRL = 0 THEN GO TO NOADDR.
*ZC    546         IF    ADDRL,=,0,THEN
         LH    0,ADDRL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_50_1
*      *  MVC   ADDRHDO,=C'ADDR'   SHOW HEADER
*      *  MVC   NEWADDRO,ADDRI     SHOW ADDR
*      *  MVC   COMMADDR,ADDRI     SAVE ADDR
*ZC    546         GO    TO,NOADDR
         J     PG_NOADDR
PG_IF_50_1   DS    0H  &TYPE
*             MOVE 'ADDR' TO ADDRHDO.
*ZC    550         MOVE  'ADDR',TO,ADDRHDO
         LARL  ZC_R1,=CL4'ADDR'
          MVC   ADDRHDO,0(ZC_R1)
*             MOVE ADDRI  TO NEWADDRO.
*ZC    551         MOVE  ADDRI,TO,NEWADDRO
         MVC   NEWADDRO,ADDRI  ALIGN LEFT X OTHER
*             MOVE ADDRI  TO COMMADDR.
*      *  B     TRYZIP             EXIT
*ZC    552         MOVE  ADDRI,TO,COMMADDR
         MVC   COMMADDR,ADDRI  ALIGN LEFT X OTHER
*             GO TO TRYZIP.
*      * NOADDR   EQU   *
*ZC    554         GO    TO,TRYZIP
         J     PG_TRYZIP
*         NOADDR.
*      *  CLI   COMMADDR,X'00'     ANY PREVIOUS ADDR ?
*      *  BE    TRYZIP             EXIT IF NONE
PG_TRYADDR_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOADDR DS   0H
*             IF COMMADDR NOT = LOW-VALUES THEN
*      *  MVC   ADDRHDO,=C'ADDR'   SHOW HEADER
*      *  MVC   NEWADDRO,COMMADDR  SHOW PREVIOUS ADDR
*ZC    559         IF    COMMADDR,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(40)X'00'
         CLC   COMMADDR,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_51_1
*             MOVE 'ADDR'   TO ADDRHDO
*ZC    562         MOVE  'ADDR',TO,ADDRHDO
         LARL  ZC_R1,=CL4'ADDR'
          MVC   ADDRHDO,0(ZC_R1)
*             MOVE COMMADDR TO NEWADDRO.
*      * TRYZIP   EQU   *
*ZC    563         MOVE  COMMADDR,TO,NEWADDRO
         MVC   NEWADDRO,COMMADDR  ALIGN LEFT X OTHER
PG_IF_51_1   DS    0H  &TYPE
*         TRYZIP.
*      *  MVI   ZIPHDO,X'00'       ASSUME NO ZIP HEADER
*      *  MVI   NEWZIPO,X'00'      ASSUME NO ZIP
PG_NOADDR_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_TRYZIP DS   0H
*             MOVE LOW-VALUES TO ZIPHDO.
*ZC    568         MOVE  LOW_VALUES,TO,ZIPHDO
         MVI   ZIPHDO,X'00'
         MVC   ZIPHDO+1(4-1),ZIPHDO
*             MOVE LOW-VALUES TO NEWZIPO.
*      *  OC    ZIPL,ZIPL          ANY ZIP ENTERED ?
*      *  BZ    NOZIP              EXIT IF NOT
*ZC    569         MOVE  LOW_VALUES,TO,NEWZIPO
         MVI   NEWZIPO,X'00'
         MVC   NEWZIPO+1(5-1),NEWZIPO
*             IF ZIPL = 0 THEN GO TO NOZIP.
*ZC    572         IF    ZIPL,=,0,THEN
         LH    0,ZIPL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_52_1
*      *  MVC   ZIPHDO,=C'ZIP '    SHOW HEADER
*      *  MVC   NEWZIPO,ZIPI       SHOW ZIP
*      *  MVC   COMMZIP,ZIPI       SAVE ZIP
*ZC    572         GO    TO,NOZIP
         J     PG_NOZIP
PG_IF_52_1   DS    0H  &TYPE
*             MOVE 'ZIP ' TO ZIPHDO.
*ZC    576         MOVE  'ZIP ',TO,ZIPHDO
         LARL  ZC_R1,=CL4'ZIP '
          MVC   ZIPHDO,0(ZC_R1)
*             MOVE ZIPI   TO NEWZIPO.
*ZC    577         MOVE  ZIPI,TO,NEWZIPO
         MVC   NEWZIPO,ZIPI  ALIGN LEFT X OTHER
*             MOVE ZIPI   TO COMMZIP.
*      *  B     TRYPAY             EXIT
*ZC    578         MOVE  ZIPI,TO,COMMZIP
         MVC   COMMZIP,ZIPI  ALIGN LEFT X OTHER
*             GO TO TRYPAY.
*      * NOZIP    EQU   *
*ZC    580         GO    TO,TRYPAY
         J     PG_TRYPAY
*         NOZIP.
*      *  CLI   COMMZIP,X'00'      ANY PREVIOUS ZIP ?
*      *  BE    TRYPAY             EXIT IF NONE
PG_TRYZIP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOZIP DS    0H
*             IF COMMZIP NOT = LOW-VALUES THEN
*      *  MVC   ZIPHDO,=C'ZIP '    SHOW HEADER
*      *  MVC   NEWZIPO,COMMZIP    SHOW PREVIOUS ZIP
*ZC    585         IF    COMMZIP,NOT,=,LOW_VALUES,THEN
         LARL  ZC_R1,=(5+1)X'00'
         CLC   COMMZIP,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_53_1
*             MOVE 'ZIP '  TO ZIPHDO
*ZC    588         MOVE  'ZIP ',TO,ZIPHDO
         LARL  ZC_R1,=CL4'ZIP '
          MVC   ZIPHDO,0(ZC_R1)
*             MOVE COMMZIP TO NEWZIPO.
*      * TRYPAY   EQU   *
*ZC    589         MOVE  COMMZIP,TO,NEWZIPO
         MVC   NEWZIPO,COMMZIP  ALIGN LEFT X OTHER
PG_IF_53_1   DS    0H  &TYPE
*         TRYPAY.
*      *  OC    TESTPCOL,TESTPCOL  ANY TESTPCO ?
*      *  BZ    DOGRP              EXIT IF NONE
PG_NOZIP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_TRYPAY DS   0H
*             IF TESTPCOL = 0 THEN GO TO DOGRP.
*ZC    594         IF    TESTPCOL,=,0,THEN
         LH    0,TESTPCOL
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_54_1
*      *  MVC   PAYMEO,=C'Pay the Author' MOVE MESSAGE
*      *  MVC   PAYME1O,TESTPCOI   MOVE INPUT DATA
*      *  XC    TESTPCOO,TESTPCOO  CLEAR THE INPUT DATA, NOT WANTED
*ZC    594         GO    TO,DOGRP
         J     PG_DOGRP
PG_IF_54_1   DS    0H  &TYPE
*             MOVE 'Pay the Author' TO PAYMEO.
*ZC    598         MOVE  'Pay the Author',TO,PAYMEO
         LARL  ZC_R1,=CL14'Pay the Author'
          MVC   PAYMEO,0(ZC_R1)
*             MOVE TESTPCOI         TO PAYME1O.
*ZC    599         MOVE  TESTPCOI,TO,PAYME1O
         PACK  ZCVT_PWORK(8),0+TESTPCOI(12) PACK #1 NORMAL
         LARL  ZC_R1,=AL1(C' ',X'20',X'20',X'20',X'20',X'20',C',',X'20'X
               ,X'20',X'20',C',',X'20',X'21',X'20')
         MVC   ZCVT_WORKAREA(14),0(ZC_R1) MOVE MASK FOR ED
         LA    ZC_R1,ZCVT_WORKAREA+1+1
         EDMK  ZCVT_WORKAREA(14),8-6+ZCVT_PWORK
         BCTR  ZC_R1,0
         MVI   0(ZC_R1),C'$'
         MVC   PAYME1O,ZCVT_WORKAREA+2
*             MOVE LOW-VALUES       TO TESTPCOO.
*      * DOGRP    EQU   *
*ZC    600         MOVE  LOW_VALUES,TO,TESTPCOO
         MVI   TESTPCOO,X'00'
         MVC   TESTPCOO+1(12-1),TESTPCOO
*         DOGRP.
*      * PROCESS GRPNAME
*      *  MVC   SHOWMDYO,=C'MO=.. DAY=.. YR=..' MOVE MESSAGE
*      *  MVC   SHOWMDYO+3(2),MOO  MOVE MONTH
*      *  MVC   SHOWMDYO+10(2),DAYO MOVE DAY
*      *  MVC   SHOWMDYO+16(2),YRO MOVE YEAR
PG_TRYPAY_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_DOGRP DS    0H
*             MOVE MOO TO SHOWMO.
*ZC    608         MOVE  MOO,TO,SHOWMO
         MVC   SHOWMO,MOO  ALIGN LEFT X OTHER
*             MOVE DAYO TO SHOWDAY.
*ZC    609         MOVE  DAYO,TO,SHOWDAY
         MVC   SHOWDAY,DAYO  ALIGN LEFT X OTHER
*             MOVE YRO TO SHOWYR.
*ZC    610         MOVE  YRO,TO,SHOWYR
         MVC   SHOWYR,YRO  ALIGN LEFT X OTHER
*             MOVE SHOWMSG TO SHOWMDYO.
*      * PROCESS OCCURS
*      *  SP    OCCSUM,OCCSUM      CLEAR OCCURS SUM
*ZC    611         MOVE  SHOWMSG,TO,SHOWMDYO
         MVC   SHOWMDYO,SHOWMSG  ALIGN LEFT X OTHER
*             MOVE 0 TO OCCSUM.
*      *  LA    R6,5               R6=NO. OF OCCURS
*ZC    614         MOVE  0,TO,OCCSUM
          LARL  ZC_R1,=PL4'0'
          MVC   OCCSUM,0(ZC_R1)
*             MOVE 1 TO LOOPCTRL.
*      *  LA    R7,TESTOCCO        OCCURS DATA
*      * OCCSUMLP EQU   *
*ZC    616         MOVE  1,TO,LOOPCTRL
          MVHHI LOOPCTRL,1
*         OCCSUMLP.
*      *  CLI   0(R7),X'00'        ANY DATA HERE ?
*      *  BE    OCCSUMIN           EXIT IF NONE
PG_DOGRP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_OCCSUMLP DS 0H
*             IF TESTOCCI IN TESTOCCD (LOOPCTRL) NOT = LOW-VALUES THEN
*      *  PACK  WORK,0(5,R7)       PACK DATA
*      *  AP    OCCSUM,WORK        SUM IT
*ZC    622         IF    TESTOCCI,IN,TESTOCCD,'(',LOOPCTRL,')',NOT,=,LOX
               W_VALUES,THEN
         IILF  ZC_R15,LOOPCTRL-ZC_WS
         AR    ZC_R15,ZC_R13
         LH    ZC_R15,0(ZC_R15)
         BCTR  ZC_R15,0
         MSFI  ZC_R15,8 L'&SYM_NAME(&SIX_OCCUR(&CUR_SIX)) RPI 1161 CORRX
               ECT CONTINUE RPI 1182
         LA    ZC_R2,TESTOCCI(ZC_R15)
         LARL  ZC_R1,=(5+1)X'00'
         CLC   0(5,ZC_R2),0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_55_1
*             ADD TESTOCCI IN TESTOCCD (LOOPCTRL) TO OCCSUM.
*      * OCCSUMIN EQU   *
*      *  AHI   R7,3+5             BUMP TO NEXT OCCURS
*      *  BCT   R6,OCCSUMLP        LOOP
*ZC    625         ADD   TESTOCCI,IN,TESTOCCD,'(',LOOPCTRL,')',TO,OCCSUX
                              M
         IILF  ZC_R15,LOOPCTRL-ZC_WS
         AR    ZC_R15,ZC_R13
         LH    ZC_R15,0(ZC_R15)
         BCTR  ZC_R15,0
         MSFI  ZC_R15,8 L'&SYM_NAME(&SIX_OCCUR(&CUR_SIX)) RPI 1161 CORRX
               ECT CONTINUE RPI 1182
         LA    ZC_R1,TESTOCCI(ZC_R15)
         PACK  ZCVT_PWORK1(3),0+0(5,ZC_R1) PACK #1 NORMAL
         AP    OCCSUM,ZCVT_PWORK1(3)
PG_IF_55_1   DS    0H  &TYPE
*             ADD 1 TO LOOPCTRL.
*ZC    629         ADD   1,TO,LOOPCTRL
         LH    ZC_R0,LOOPCTRL
         AHI   ZC_R0,1
         STH   ZC_R0,LOOPCTRL
*             IF LOOPCTRL NOT = 6 THEN GO TO OCCSUMLP.
*ZC    630         IF    LOOPCTRL,NOT,=,6,THEN
         LH    0,LOOPCTRL
         CHI   0,6
         BRC   15-ZC_NE,PG_IF_56_1
*      *  UNPK  OCCSUMO(7),OCCSUM  UNPACK RESULT
*ZC    630         GO    TO,OCCSUMLP
         J     PG_OCCSUMLP
PG_IF_56_1   DS    0H  &TYPE
*             MOVE OCCSUM TO OCCSUMO.
*      *  B     SENDIT             EXIT
*ZC    632         MOVE  OCCSUM,TO,OCCSUMO
         LARL  ZC_R1,=AL1(C' ',X'20',X'20',X'20',C',',X'20',X'20',X'20'X
               ,C',',X'20',X'21',X'20')
         MVC   ZCVT_WORKAREA(12),0(ZC_R1) MOVE MASK FOR ED
         ZAP   ZCVT_PWORK1(5),OCCSUM
         LA    ZC_R1,ZCVT_WORKAREA+1+1
         EDMK  ZCVT_WORKAREA(12),ZCVT_PWORK1
         MVC   OCCSUMO,ZCVT_WORKAREA+2
*             GO TO SENDIT.
*      * GUI6HELP EQU   *
*ZC    634         GO    TO,SENDIT
         J     PG_SENDIT
*         GUI6HELP.
*      * GUI6 HELP MAP
PG_OCCSUMLP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6HELP DS 0H
*             EXEC CICS SEND MAP('GUI6H') MAPSET('MAP01C') MAPONLY ERASX
                              E
*ZC    638         EXEC  CICS,SEND,MAP('GUI6H'),MAPSET('MAP01C'),MAPONLX
               Y,ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI6H'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1804MLN         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_2619 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_2619    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_2619   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_2619   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_2619) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_2619    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10010000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(4000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0C02EDF_2633 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_2633    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1804EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1804EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1804EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P1804EDF_2614 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1804EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
P1804EDF_2614    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_2614   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_2614   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_2614) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_2614    DS 0H
         LARL  R1,P1804RSP_2614 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1804RS2_2614 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C04NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0C04EDF_2651 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
P0C04EDF_2651    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_2651   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_2651   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_2651) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_2651    DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_2661 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_2661    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_2661   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_2661   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_2661) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_2661    DS 0H
         LARL  R1,P1804RSP_2614 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1804RS2_2614 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1804MRS_2614   EXIT
*
P1804RSP_2614    DS F             SAVED EIBRESP
P1804RS2_2614    DS F             SAVED EIBRESP2
P1804MRS_2614    DS 0H
*                       END-EXEC.
*      *  MVI   COMMIND,C'3'       SET GUI6 REENTRY POINT
*             MOVE '3' TO COMMIND.
*      * RETURN   EQU   *
*ZC    641         MOVE  '3',TO,COMMIND
         MVI   COMMIND,C'3'
*         ECRETURN.
PG_GUI6HELP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ECRETURN DS 0H
*             EXEC CICS RETURN TRANSID('BMC1') COMMAREA(MYCOMM)
*ZC    644         EXEC  CICS,RETURN,TRANSID('BMC1'),COMMAREA(MYCOMM),LX
               ENGTH(86)
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BMC1'         ADDRESS SOURCE
         LARL  R15,P0E08TRN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08TRN,R15),0(R1) MVC IT
         LA    R0,MYCOMM       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E08COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,86         SET NUMERIC COMMAREA LENGTH
         LARL  R1,P0E08CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E08EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E08EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E08EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E08EDF_2681 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E08EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_2681 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
P0E08EDF_2681    EQU *
         BR    R15                GO TO IT
*
P0E08RTN_2681    EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_2681   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08CHN DS    CL16               CHANNEL NAME
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E08EDS DS    AL4                DSA ADDRESS FOR EDF
P0E08EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E08EDL DS    XL2                DSA LENGTH FOR EDF
P0E08NED DS    X                  FF=NOEDF
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
*
P0E08BYP_2681    DS 0H
*                       LENGTH(86) END-EXEC.
*      * GUI6HRNT EQU   *
*         GUI6HRNT.
*      * RETURN FROM HELP SCREEN
*      *  MVI   COMMIND,C'2'       SET GUI6 REENTRY POINT
PG_ECRETURN_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GUI6HRNT DS 0H
*             MOVE '2' TO COMMIND.
*      *  CLI   EIBAID,DFHCLEAR    CLEAR ?
*      *  BE    GUI6               YES, EXIT TO REFRESH DISPLAY
*ZC    650         MOVE  '2',TO,COMMIND
         MVI   COMMIND,C'2'
*             IF EIBAID = DFHCLEAR THEN GO TO GUI6.
*ZC    653         IF    EIBAID,=,DFHCLEAR,THEN
         CLC   EIBAID,DFHCLEAR
         BRC   15-ZC_EQ,PG_IF_57_1
*      *  CLI   EIBAID,DFHPF3      PF3 ?
*      *  BNE   REDISP             EXIT IF NOT
*ZC    653         GO    TO,GUI6
         J     PG_GUI6
PG_IF_57_1   DS    0H  &TYPE
*             IF EIBAID NOT = DFHPF3 THEN GO TO REDISP.
*ZC    656         IF    EIBAID,NOT,=,DFHPF3,THEN
         CLC   EIBAID,DFHPF3
         BRC   15-ZC_NE,PG_IF_58_1
*      * ALLDONE  EQU   *
*ZC    656         GO    TO,REDISP
         J     PG_REDISP
PG_IF_58_1   DS    0H  &TYPE
*         ALLDONE.
*      *  MVC   ERRMSGO,ENDMSG     MOVE ENDING MESSAGE
PG_GUI6HRNT_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ALLDONE DS  0H
*             MOVE ENDMSG TO ERRMSGO.
*ZC    660         MOVE  ENDMSG,TO,ERRMSGO
         MVC   ERRMSGO,ENDMSG  ALIGN LEFT X OTHER
*             EXEC CICS SEND MAP('GUI6') MAPSET('MAP01C') END-EXEC.
*ZC    661         EXEC  CICS,SEND,MAP('GUI6'),MAPSET('MAP01C')
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'GUI6'         ADDRESS SOURCE
         LARL  R15,P1804MAP        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804MAP,R15),0(R1) MVC IT
         LAY   R0,GUI6O        R0=DEFAULT MAP STRUCTURE ADDRESS
         LARL  R1,P1804DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'GUI6O      SET DEFAULT MAP STRUC LENGTH (COBOL)
         LARL  R1,P1804DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1804MLN         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_2749 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_2749    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_2749   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_2749   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_2749) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_2749    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'00000000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(4000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0C02EDF_2763 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_2763    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1804EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1804EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1804EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P1804EDF_2742 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1804EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
P1804EDF_2742    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_2742   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_2742   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_2742) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_2742    DS 0H
         LARL  R1,P1804RSP_2742 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1804RS2_2742 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C04NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0C04EDF_2781 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
P0C04EDF_2781    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_2781   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_2781   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_2781) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_2781    DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_2791 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_2791    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_2791   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_2791   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_2791) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_2791    DS 0H
         LARL  R1,P1804RSP_2742 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1804RS2_2742 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1804MRS_2742   EXIT
*
P1804RSP_2742    DS F             SAVED EIBRESP
P1804RS2_2742    DS F             SAVED EIBRESP2
P1804MRS_2742    DS 0H
*             EXEC CICS RETURN END-EXEC.
*ZC    662         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,P0E08EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E08EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E08EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E08EDF_2803 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E08EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_2803 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
P0E08EDF_2803    EQU *
         BR    R15                GO TO IT
*
P0E08RTN_2803    EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_2803   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08BYP_2803    DS 0H
*      * SENDIT   EQU   *
*         SENDIT.
*      * TEST MAP AS LABEL WITH FROM AND LENGTH
PG_ALLDONE_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_SENDIT DS   0H
*             EXEC CICS SEND MAP(MYGUI6) MAPSET('MAP01C') FROM(GUI6O)
*ZC    666         EXEC  CICS,SEND,MAP(MYGUI6),MAPSET('MAP01C'),FROM(GUX
               I6O),LENGTH(LENGTH,OF,GUI6O),ERASE
         LARL  R1,P1804         ADDRESS SOURCE
         LARL  R15,P1804        ADDRESS TARGET
         XC    0(P1804END-P1804,R15),0(R1) XC IT
         LARL  R1,=X'1804'         ADDRESS SOURCE
         LARL  R15,P1804FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804FN,R15),0(R1) MVC IT
         LARL  R15,P1804MAP       ADDRESS TARGET
         MVC   0(7,R15),MYGUI6      MOVE MAPNAME FROM LABEL
         LAY   R0,GUI6O           R0=MAP STRUCTURE ADDRESS
         LARL  R1,P1804DSC         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,L'GUI6O       SET NUMERIC LENGTH
         LARL  R1,P1804DSL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R0,P1804MLN         R0=ADDRESS OF LENGTH
         LARL  R1,P0E06LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E06NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E06EDF_2821 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_2821    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_2821   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_2821   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_2821) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_2821    EQU *
         LRL   R14,P0E06ENT    SET ENTRY POINT
         LARL  R1,P1804MSA         ADDRESS TARGET
         ST    R14,0(R1)      ST IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P1804CRS        ADDRESS TARGET AS LABEL
         MVC   0(L'P1804CRS,R15),0(R1) MVC IT
         LARL  R1,P1804OPT         ADDRESS TARGET
         MVI   0(R1),B'10000000'      MVI IT
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(4000)   ADDRESS LITERAL
         LH    R0,0(R1)           SET LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02INM         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(0)  ADDRESS LITERAL
         LARL  R15,P0C02INT       ADDRESS TARGET
         MVC   0(1,R15),1(R1)     SET PADDING BYTE
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0C02EDF_2835 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_2835    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         LA    R15,8(R1)         SET GETMAIN ADDRESS FOR REQUESTOR
         LR    R0,R15             COPY OUTPUT AREA ADDRESS
         LARL  R1,P1804OUT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P1804EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P1804TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P1804EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P1804EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P1804EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P1804EDF_2815 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P1804EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P1804)       R1=LCL MODULE PARAMETER LIST
P1804EDF_2815    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P1804NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P1804BYP_2815   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P1804BYP_2815   EXIT IF NONE
* MAPFAIL, INVMPSZ, INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804BYP_2815) ENTRYPOINT FOR IGNORE CONDITION
*
P1804BYP_2815    DS 0H
         LARL  R1,P1804RSP_2815 ADDRESS EIBRESP SAVE AREA
         MVC   0(4,R1),EIBRESP    SAVE EIBRESP
         LARL  R1,P1804RS2_2815 ADDRESS EIBRESP2 SAVE AREA
         MVC   0(4,R1),EIBRESP2   SAVE EIBRESP2
         LARL  R1,P0C04         ADDRESS SOURCE
         LARL  R15,P0C04        ADDRESS TARGET
         XC    0(P0C04END-P0C04,R15),0(R1) XC IT
         LARL  R1,=X'0C04'         ADDRESS SOURCE
         LARL  R15,P0C04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C04FN,R15),0(R1) MVC IT
         LARL  R1,P0C04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C04NED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LRL   R0,P1804OUT           INDIRECT FREEMAIN ADDRESS
         LARL  R1,P0C04FMA         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0C04EDF_2853 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C04)       R1=LCL MODULE PARAMETER LIST
P0C04EDF_2853    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0C04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0C04BYP_2853   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0C04BYP_2853   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0C04BYP_2853) ENTRYPOINT FOR IGNORE CONDITION
*
P0C04BYP_2853    DS 0H
         LARL  R1,P0E0A         ADDRESS SOURCE
         LARL  R15,P0E0A        ADDRESS TARGET
         XC    0(P0E0AEND-P0E0A,R15),0(R1) XC IT
         LARL  R1,=X'0E0A'         ADDRESS SOURCE
         LARL  R15,P0E0AFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0AFN,R15),0(R1) MVC IT
         LARL  R1,P0E0AEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ATCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'TESTBMC1'         ADDRESS SOURCE
         LARL  R15,P0E0ACST        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0ACST,R15),0(R1) MVC IT
         LARL  R1,=CL8'MAP01C'         ADDRESS SOURCE
         LARL  R15,P0E0APGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0APGM,R15),0(R1) MVC IT
         LARL  R1,P0E0ANED         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R0,P0E0AEDF_2863 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0AEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0A)       R1=LCL MODULE PARAMETER LIST
P0E0AEDF_2863    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E0ANOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E0ABYP_2863   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E0ABYP_2863   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E0ABYP_2863) ENTRYPOINT FOR IGNORE CONDITION
P0E0ABYP_2863    DS 0H
         LARL  R1,P1804RSP_2815 ADDRESS EIBRESP SAVE AREA
         MVC   EIBRESP,0(R1)      RESTORE EIBRESP
         LARL  R1,P1804RS2_2815 ADDRESS EIBRESP2 SAVE AREA
         MVC   EIBRESP2,0(R1)     RESTORE EIBRESP2
         J     P1804MRS_2815   EXIT
*
P1804RSP_2815    DS F             SAVED EIBRESP
P1804RS2_2815    DS F             SAVED EIBRESP2
P1804MRS_2815    DS 0H
*                       LENGTH(LENGTH OF GUI6O) ERASE END-EXEC.
*      *  B     RETURN             EXIT
*             GO TO ECRETURN.
*      * MAPFAILS EQU   *
*ZC    669         GO    TO,ECRETURN
         J     PG_ECRETURN
*         MAPFAILS.
*      *  CLC   EIBRESP2,=F'2'     SHORT READ ?
*      *  BE    SHORTRD            EXIT IF IT IS
PG_SENDIT_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_MAPFAILS DS 0H
*             MOVE EIBRESP2 TO WORK1.
*ZC    674         MOVE  EIBRESP2,TO,WORK1
         MVC   WORK1,EIBRESP2  ALIGN LEFT X OTHER
*             IF RESP2 = X'02' THEN GO TO SHORTRD.
*ZC    675         IF    RESP2,=,X'02',THEN
         CLI   RESP2,X'02'
         BRC   15-ZC_EQ,PG_IF_59_1
*      *  MVC   FAILMSG+8(1),EIBRESP2+3 SET RESP2
*      *  OI    FAILMSG+8,X'F0'    CONVERT TO CHAR
*ZC    675         GO    TO,SHORTRD
         J     PG_SHORTRD
PG_IF_59_1   DS    0H  &TYPE
*             IF RESP2 = X'01' THEN MOVE '1' TO FAILIND.
*ZC    678         IF    RESP2,=,X'01',THEN
         CLI   RESP2,X'01'
         BRC   15-ZC_EQ,PG_IF_60_1
*ZC    678         MOVE  '1',TO,FAILIND
         MVI   FAILIND,C'1'
PG_IF_60_1   DS    0H  &TYPE
*             IF RESP2 = X'03' THEN MOVE '3' TO FAILIND.
*ZC    679         IF    RESP2,=,X'03',THEN
         CLI   RESP2,X'03'
         BRC   15-ZC_EQ,PG_IF_61_1
*ZC    679         MOVE  '3',TO,FAILIND
         MVI   FAILIND,C'3'
PG_IF_61_1   DS    0H  &TYPE
*             IF RESP2 = X'04' THEN MOVE '4' TO FAILIND.
*ZC    680         IF    RESP2,=,X'04',THEN
         CLI   RESP2,X'04'
         BRC   15-ZC_EQ,PG_IF_62_1
*ZC    680         MOVE  '4',TO,FAILIND
         MVI   FAILIND,C'4'
PG_IF_62_1   DS    0H  &TYPE
*             IF RESP2 = X'05' THEN MOVE '5' TO FAILIND.
*ZC    681         IF    RESP2,=,X'05',THEN
         CLI   RESP2,X'05'
         BRC   15-ZC_EQ,PG_IF_63_1
*ZC    681         MOVE  '5',TO,FAILIND
         MVI   FAILIND,C'5'
PG_IF_63_1   DS    0H  &TYPE
*             IF RESP2 = X'06' THEN MOVE '6' TO FAILIND.
*ZC    682         IF    RESP2,=,X'06',THEN
         CLI   RESP2,X'06'
         BRC   15-ZC_EQ,PG_IF_64_1
*ZC    682         MOVE  '6',TO,FAILIND
         MVI   FAILIND,C'6'
PG_IF_64_1   DS    0H  &TYPE
*             IF RESP2 = X'07' THEN MOVE '7' TO FAILIND.
*ZC    683         IF    RESP2,=,X'07',THEN
         CLI   RESP2,X'07'
         BRC   15-ZC_EQ,PG_IF_65_1
*ZC    683         MOVE  '7',TO,FAILIND
         MVI   FAILIND,C'7'
PG_IF_65_1   DS    0H  &TYPE
*             IF RESP2 = X'08' THEN MOVE '8' TO FAILIND.
*ZC    684         IF    RESP2,=,X'08',THEN
         CLI   RESP2,X'08'
         BRC   15-ZC_EQ,PG_IF_66_1
*      *  MVC   ERRMSGO,FAILMSG    MOVE FAILURE MESSAGE
*ZC    684         MOVE  '8',TO,FAILIND
         MVI   FAILIND,C'8'
PG_IF_66_1   DS    0H  &TYPE
*             MOVE FAILMSG TO ERRMSGO.
*      *  B     SENDIT             EXIT
*ZC    686         MOVE  FAILMSG,TO,ERRMSGO
         MVC   ERRMSGO,FAILMSG  ALIGN LEFT X OTHER
*             GO TO SENDIT.
*ZC    688         GO    TO,SENDIT
         J     PG_SENDIT
*         ABEND.
PG_MAPFAILS_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ABEND DS    0H
*             EXEC CICS ABEND ABCODE('BMC1') END-EXEC.
*ZC    690         EXEC  CICS,ABEND,ABCODE('BMC1')
         LARL  R1,P0E0C         ADDRESS SOURCE
         LARL  R15,P0E0C        ADDRESS TARGET
         XC    0(P0E0CEND-P0E0C,R15),0(R1) XC IT
         LARL  R1,=X'0E0C'         ADDRESS SOURCE
         LARL  R15,P0E0CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CFN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BMC1'         ADDRESS SOURCE
         LARL  R15,CICS_ABEND_3021_ABCODE        ADDRESS TARGET AS LABEX
               L
         MVC   0(L'CICS_ABEND_3021_ABCODE,R15),0(R1) MVC IT
         LARL  R1,=CL4'BMC1'         ADDRESS SOURCE
         LARL  R15,P0E0CABC        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CABC,R15),0(R1) MVC IT
         LARL  R1,P0E0CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0E0CEDF_3021 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0C)       R1=LCL MODULE PARAMETER LIST
P0E0CEDF_3021    EQU *
         BAKR  0,R15              STACK REGS AND GO
         DC    X'0000'            ABEND POINT
         DC    X'FE'              FE=TAKE DUMP  FF=NODUMP
         DC    C'ABEND'           MARKER
CICS_ABEND_3021_ABCODE     DC CL4' ' ABEND CODE IF ANY
*
P0E0C    DS    0H
P0E0CFN  DS    XL2                FUNCTION CODE
P0E0CEIB DS    AL4                EIB
P0E0CTCT DS    AL4                TCTTE
P0E0CABC DS    CL4                ABCODE
P0E0CNOD DS    X                  FF=NODUMP
         DS    X
P0E0CCAN DS    X                  FF=CANCEL
         DS    X
P0E0CEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E0CEDS DS    AL4                DSA ADDRESS FOR EDF
P0E0CEDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E0CEDL DS    XL2                DSA LENGTH FOR EDF
P0E0CNED DS    X                  FF=NOEDF
         DS    X
P0E0CNOH DS    X                  FF=NOHANDLE
         DS    X
P0E0CRSP DS    AL4                RESP
P0E0CRS2 DS    AL4                RESP2
P0E0CEND EQU   *                  END MARKER
*
PG_ABEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  GUI4I                          00000080 00000018 1   X        X
                      
*    02  FILLER                         00000080 0000000C 1   X   X(12)X
                      
*    02  FILLER                         0000008C 00000002 1   H   9(4) X
                      
*    02  FILLER                         0000008E 00000001 1   X   X    X
                      
*    02  INPUTI                         0000008F 00000003 1   X   X(3) X
                      
*    02  FILLER                         00000092 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000094 00000001 1   X   X    X
                      
*    02  REPLYI                         00000095 00000003 1   X   X(3) X
                      
*    02  FILLER                         00000095 00000003 1   X        X
                      
*    03  REPLYO                         00000095 00000003 1   X   X(3) X
                      
*    01  GUI4O                          00000080 00000018 1   X        X
                      
*    02  FILLER                         00000080 00000018 1   X   X(24)X
                      
*    01  GUI6I                          00000098 00000192 1   X        X
                      
*    02  FILLER                         00000098 0000000C 1   X   X(12)X
                      
*    02  NAMEL                          000000A4 00000002 1   H   9(4) X
                      
*    02  NAMEF                          000000A6 00000001 1   X   X    X
                      
*    02  NAMEI                          000000A7 00000028 1   X   X(40)X
                      
*    02  ADDRL                          000000CF 00000002 1   H   9(4) X
                      
*    02  ADDRF                          000000D1 00000001 1   X   X    X
                      
*    02  ADDRI                          000000D2 00000028 1   X   X(40)X
                      
*    02  ZIPL                           000000FA 00000002 1   H   9(4) X
                      
*    02  ZIPF                           000000FC 00000001 1   X   X    X
                      
*    02  ZIPI                           000000FD 00000005 1   X   X(5) X
                      
*    02  FILLER                         00000102 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000104 00000001 1   X   X    X
                      
*    02  NAMEHDI                        00000105 00000004 1   X   X(4) X
                      
*    02  FILLER                         00000105 00000004 1   X        X
                      
*    03  NAMEHDO                        00000105 00000004 1   X   X(4) X
                      
*    02  FILLER                         00000109 00000002 1   H   9(4) X
                      
*    02  FILLER                         0000010B 00000001 1   X   X    X
                      
*    02  NEWNAMEI                       0000010C 00000028 1   X   X(40)X
                      
*    02  FILLER                         0000010C 00000028 1   X        X
                      
*    03  NEWNAMEO                       0000010C 00000028 1   X   X(40)X
                      
*    02  FILLER                         00000134 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000136 00000001 1   X   X    X
                      
*    02  ADDRHDI                        00000137 00000004 1   X   X(4) X
                      
*    02  FILLER                         00000137 00000004 1   X        X
                      
*    03  ADDRHDO                        00000137 00000004 1   X   X(4) X
                      
*    02  FILLER                         0000013B 00000002 1   H   9(4) X
                      
*    02  FILLER                         0000013D 00000001 1   X   X    X
                      
*    02  NEWADDRI                       0000013E 00000028 1   X   X(40)X
                      
*    02  FILLER                         0000013E 00000028 1   X        X
                      
*    03  NEWADDRO                       0000013E 00000028 1   X   X(40)X
                      
*    02  FILLER                         00000166 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000168 00000001 1   X   X    X
                      
*    02  ZIPHDI                         00000169 00000004 1   X   X(4) X
                      
*    02  FILLER                         00000169 00000004 1   X        X
                      
*    03  ZIPHDO                         00000169 00000004 1   X   X(4) X
                      
*    02  FILLER                         0000016D 00000002 1   H   9(4) X
                      
*    02  FILLER                         0000016F 00000001 1   X   X    X
                      
*    02  NEWZIPI                        00000170 00000005 1   X   X(5) X
                      
*    02  FILLER                         00000170 00000005 1   X        X
                      
*    03  NEWZIPO                        00000170 00000005 1   X   X(5) X
                      
*    02  FILLER                         00000175 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000177 00000001 1   X   X    X
                      
*    02  ERRMSGI                        00000178 00000022 1   X   X(34)X
                      
*    02  FILLER                         00000178 00000022 1   X        X
                      
*    03  ERRMSGO                        00000178 00000022 1   X   X(34)X
                      
*    02  TESTOCCD                       0000019A 00000008 5   X        X
                      
*    03  FILLER                         0000019A 00000002 1   H   9(4) X
                      
*    03  TESTOCCF                       0000019C 00000001 1   X   X    X
                      
*    03  TESTOCCI                       0000019D 00000005 1   Z   9(5) X
                      
*    02  FILLER                         000001C2 00000002 1   H   9(4) X
                      
*    02  FILLER                         000001C4 00000001 1   X   X    X
                      
*    02  OCCSUMI                        000001C5 0000000A 1   X   X(10)X
                      
*    02  FILLER                         000001C5 0000000A 1   X        X
                      
*    03  OCCSUMO                        000001C5 0000000A 1   X   ZZ,ZZX
               Z,ZZ9  
*    02  FILLER                         000001CF 00000002 1   H   9(4) X
                      
*    02  DATEF                          000001D1 00000001 1   X   X    X
                      
*    02  DATEI                          000001D2 00000008 1   X        X
                      
*    02  DATEO                          000001D2 00000008 1   X        X
                      
*    03  MOI                            000001D2 00000002 1   X   X(2) X
                      
*    03  FILLER                         000001D2 00000002 1   X        X
                      
*    04  MOO                            000001D2 00000002 1   X   X(2) X
                      
*    03  SEP1I                          000001D4 00000001 1   X   X    X
                      
*    03  DAYI                           000001D5 00000002 1   X   X(2) X
                      
*    03  FILLER                         000001D5 00000002 1   X        X
                      
*    04  DAYO                           000001D5 00000002 1   X   X(2) X
                      
*    03  SEP2I                          000001D7 00000001 1   X   X    X
                      
*    03  YRI                            000001D8 00000002 1   X   X(2) X
                      
*    03  FILLER                         000001D8 00000002 1   X        X
                      
*    04  YRO                            000001D8 00000002 1   X   X(2) X
                      
*    02  FILLER                         000001DA 00000002 1   H   9(4) X
                      
*    02  FILLER                         000001DC 00000001 1   X   X    X
                      
*    02  SHOWMDYI                       000001DD 00000012 1   X   X(18)X
                      
*    02  FILLER                         000001DD 00000012 1   X        X
                      
*    03  SHOWMDYO                       000001DD 00000012 1   X   X(18)X
                      
*    02  TESTPCOL                       000001EF 00000002 1   H   9(4) X
                      
*    02  TESTPCOF                       000001F1 00000001 1   X   X    X
                      
*    02  TESTPCOI                       000001F2 0000000C 1   Z   9(12)X
                      
*    02  FILLER                         000001F2 0000000C 1   X        X
                      
*    03  TESTPCOO                       000001F2 0000000C 1   X   X(12)X
                      
*    02  FILLER                         000001FE 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000200 00000001 1   X   X    X
                      
*    02  PAYMEI                         00000201 0000000E 1   X   X(14)X
                      
*    02  FILLER                         00000201 0000000E 1   X        X
                      
*    03  PAYMEO                         00000201 0000000E 1   X   X(14)X
                      
*    02  FILLER                         0000020F 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000211 00000001 1   X   X    X
                      
*    02  PAYME1I                        00000212 0000000C 1   X   X(12)X
                      
*    02  FILLER                         00000212 0000000C 1   X        X
                      
*    03  PAYME1O                        00000212 0000000C 1   X   $$$$,X
               $$$,$  
*    02  FILLER                         0000021E 00000002 1   H   9(4) X
                      
*    02  FILLER                         00000220 00000001 1   X   X    X
                      
*    02  CURSI                          00000221 00000009 1   X   X(9) X
                      
*    02  FILLER                         00000221 00000009 1   X        X
                      
*    03  CURSO                          00000221 00000009 1   X   X(9) X
                      
*    01  GUI6O                          00000098 00000192 1   X        X
                      
*    02  FILLER                         00000098 00000192 1   X   X(402X
               )      
*    01  GUI6HI                         0000022A 0000000C 1   X        X
                      
*    02  FILLER                         0000022A 0000000C 1   X   X(12)X
                      
*    01  DFHAID                         00000236 0000001E 1   X        X
                      
*    02  DFHNULL                        00000236 00000001 1   X   X    X
                     X''00'' 
*    02  DFHENTER                       00000237 00000001 1   X   X    X
                     X''7D'' 
*    02  DFHPF1                         00000238 00000001 1   X   X    X
                     X''F1'' 
*    02  DFHPF2                         00000239 00000001 1   X   X    X
                     X''F2'' 
*    02  DFHPF3                         0000023A 00000001 1   X   X    X
                     X''F3'' 
*    02  DFHPF4                         0000023B 00000001 1   X   X    X
                     X''F4'' 
*    02  DFHPF5                         0000023C 00000001 1   X   X    X
                     X''F5'' 
*    02  DFHPF6                         0000023D 00000001 1   X   X    X
                     X''F6'' 
*    02  DFHPF7                         0000023E 00000001 1   X   X    X
                     X''F7'' 
*    02  DFHPF8                         0000023F 00000001 1   X   X    X
                     X''F8'' 
*    02  DFHPF9                         00000240 00000001 1   X   X    X
                     X''F9'' 
*    02  DFHPF10                        00000241 00000001 1   X   X    X
                     X''7A'' 
*    02  DFHPF11                        00000242 00000001 1   X   X    X
                     X''7B'' 
*    02  DFHPF12                        00000243 00000001 1   X   X    X
                     X''7C'' 
*    02  DFHPF13                        00000244 00000001 1   X   X    X
                     X''C1'' 
*    02  DFHPF14                        00000245 00000001 1   X   X    X
                     X''C2'' 
*    02  DFHPF15                        00000246 00000001 1   X   X    X
                     X''C3'' 
*    02  DFHPF16                        00000247 00000001 1   X   X    X
                     X''C4'' 
*    02  DFHPF17                        00000248 00000001 1   X   X    X
                     X''C5'' 
*    02  DFHPF18                        00000249 00000001 1   X   X    X
                     X''C6'' 
*    02  DFHPF19                        0000024A 00000001 1   X   X    X
                     X''C7'' 
*    02  DFHPF20                        0000024B 00000001 1   X   X    X
                     X''C8'' 
*    02  DFHPF21                        0000024C 00000001 1   X   X    X
                     X''C9'' 
*    02  DFHPF22                        0000024D 00000001 1   X   X    X
                     X''4A'' 
*    02  DFHPF23                        0000024E 00000001 1   X   X    X
                     X''4B'' 
*    02  DFHPF24                        0000024F 00000001 1   X   X    X
                     X''4C'' 
*    02  DFHPA1                         00000250 00000001 1   X   X    X
                     X''6C'' 
*    02  DFHPA2                         00000251 00000001 1   X   X    X
                     X''6E'' 
*    02  DFHPA3                         00000252 00000001 1   X   X    X
                     X''6B'' 
*    02  DFHCLEAR                       00000253 00000001 1   X   X    X
                     X''6D'' 
*    01  DFHBMSCA                       00000254 0000001D 1   X        X
                      
*    02  DFHBMUNP                       00000254 00000001 1   X   X    X
                     X''40'' 
*    02  DFHBMFSE                       00000255 00000001 1   X   X    X
                     X''C1'' 
*    02  DFHBMBRY                       00000256 00000001 1   X   X    X
                     X''C8'' 
*    02  DFHUNIMD                       00000257 00000001 1   X   X    X
                     X''C9'' 
*    02  DFHBMDAR                       00000258 00000001 1   X   X    X
                     X''4C'' 
*    02  DFHUNNOD                       00000259 00000001 1   X   X    X
                     X''4D'' 
*    02  DFHBMUNN                       0000025A 00000001 1   X   X    X
                     X''50'' 
*    02  DFHUNNUM                       0000025B 00000001 1   X   X    X
                     X''D1'' 
*    02  DFHUNNUB                       0000025C 00000001 1   X   X    X
                     X''D8'' 
*    02  DFHUNINT                       0000025D 00000001 1   X   X    X
                     X''D9'' 
*    02  DFHUNNON                       0000025E 00000001 1   X   X    X
                     X''5D'' 
*    02  DFHBMPRO                       0000025F 00000001 1   X   X    X
                     X''60'' 
*    02  DFHBMPRF                       00000260 00000001 1   X   X    X
                     X''61'' 
*    02  DFHPROTI                       00000261 00000001 1   X   X    X
                     X''E8'' 
*    02  DFHPROTN                       00000262 00000001 1   X   X    X
                     X''6C'' 
*    02  DFHBMASK                       00000263 00000001 1   X   X    X
                     X''F0'' 
*    02  DFHBMASF                       00000264 00000001 1   X   X    X
                     X''F1'' 
*    02  DFHBMASB                       00000265 00000001 1   X   X    X
                     X''F8'' 
*    02  DFHBMEOF                       00000266 00000001 1   X   X    X
                     X''80'' 
*    02  DFHBMCUR                       00000267 00000001 1   X   X    X
                     X''02'' 
*    02  DFHBMEF                        00000268 00000001 1   X   X    X
                     X''82'' 
*    02  DFHDFCOL                       00000269 00000001 1   X   X    X
                     X''00'' 
*    02  DFHBLUE                        0000026A 00000001 1   X   X    X
                     X''F1'' 
*    02  DFHRED                         0000026B 00000001 1   X   X    X
                     X''F2'' 
*    02  DFHPINK                        0000026C 00000001 1   X   X    X
                     X''F3'' 
*    02  DFHGREEN                       0000026D 00000001 1   X   X    X
                     X''F4'' 
*    02  DFHTURQ                        0000026E 00000001 1   X   X    X
                     X''F5'' 
*    02  DFHYELLO                       0000026F 00000001 1   X   X    X
                     X''F6'' 
*    02  DFHNEUTR                       00000270 00000001 1   X   X    X
                     X''F7'' 
*    01  MYCOMM                         00000271 00000056 1   X        X
                      
*    02  COMMIND                        00000271 00000001 1   X   X    X
                      
*    02  COMMNAME                       00000272 00000028 1   X   X(40)X
                      
*    02  COMMADDR                       0000029A 00000028 1   X   X(40)X
                      
*    02  COMMZIP                        000002C2 00000005 1   X   X(5) X
                      
*    01  MYGUI6                         000002C7 00000007 1   X   X(7) X
                     ''GUI6   '' 
*    01  OCCSUM                         000002CE 00000004 1   P   9(7) X
                      
*    01  OCCINDX                        000002D2 00000002 1   H   9(2) X
                      
*    01  LOOPCTRL                       000002D4 00000002 1   H   9(2) X
                      
*    01  SUMLEN                         000002D6 00000002 1   H   9(2) X
                      
*    01  OCCZONE                        000002D8 00000002 1   Z   99   X
                      
*    01  FILLER                         000002D8 00000002 1   X        X
                      
*    02  FILLER                         000002D8 00000001 1   X   X    X
                      
*    02  OCCZONE2                       000002D9 00000001 1   X   X    X
                      
*    01  OCCCURSO                       000002DA 00000009 1   X        X
                      
*    02  ZC_FILLER_V1                   000002DA 00000007 1   X   X(7) X
                     ''OCCURS('' 
*    02  OCCNUM                         000002E1 00000001 1   X   X    X
                      
*    02  ZC_FILLER_V2                   000002E2 00000001 1   X   X    X
                     '')'' 
*    01  SHOWMSG                        000002E3 00000012 1   X        X
                      
*    02  ZC_FILLER_V3                   000002E3 00000003 1   X   X(3) X
                     ''MO='' 
*    02  SHOWMO                         000002E6 00000002 1   X   XX   X
                      
*    02  ZC_FILLER_V4                   000002E8 00000005 1   X   X(5) X
                     '' DAY='' 
*    02  SHOWDAY                        000002ED 00000002 1   X   XX   X
                      
*    02  ZC_FILLER_V5                   000002EF 00000004 1   X   X(4) X
                     '' YR='' 
*    02  SHOWYR                         000002F3 00000002 1   X   XX   X
                      
*    01  BADKEY                         000002F5 00000022 1   X        X
                      
*    02  ZC_FILLER_V6                   000002F5 0000001A 1   X   X(26)X
                     ''NO ACTION FOR AID KEY HEX '' 
*    02  HEXKEY                         0000030F 00000002 1   X   X(2) X
                      
*    02  ZC_FILLER_V7                   00000311 00000006 1   X   X(6) X
                     SPACES 
*    01  NOMODS                         00000317 00000022 1   X   X(34)X
                     ''NO FIELDS CHANGED                 '' 
*    01  FAILMSG                        00000339 00000022 1   X        X
                      
*    02  ZC_FILLER_V8                   00000339 00000008 1   X   X(8) X
                     ''MAPFAIL/'' 
*    02  FAILIND                        00000341 00000001 1   X   X    X
                      
*    02  ZC_FILLER_V9                   00000342 00000019 1   X   X(25)X
                     '' HAS OCCURRED            '' 
*    01  ENDMSG                         0000035B 00000022 1   X   X(34)X
                     ''TRANSACTION COMPLETE - PRESS CLEAR'' 
*    01  WORK1                          0000037D 00000004 1   X        X
                      
*    02  FILLER                         0000037D 00000003 1   X   X(3) X
                      
*    02  RESP2                          00000380 00000001 1   X   X    X
                      
*    01  ZC_WS_ID1                      00000381 00000007 1   X   X(7) X
                     ''ZCWSID1'' 
*    01  DEBUG_ITEM                     00000388 00000058 1   X        X
                      
*    02  DEBUG_LINE                     00000388 00000006 1   X   X(6) X
                      
*    02  ZC_FILLER_V10                  0000038E 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     0000038F 0000001E 1   X   X(30)X
                      
*    02  ZC_FILLER_V11                  000003AD 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    000003AE 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V12                  000003B2 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    000003B3 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V13                  000003B7 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    000003B8 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V14                  000003BC 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 000003BD 00000023 1   X   X(35)X
                      
*    01  TRUE                           000003E0 00000001 1   Z   9    X
                     1 
*    01  FALSE                          000003E1 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    000003E2 00000002 1   H   9(4) X
                     0 
*    01  ZC_DFHCOMMAREA_PTR             000003E4 00000004 1   A        X
                      
*    01  ZC_DFHEIBLK_PTR                000003E8 00000004 1   A        X
                      
*    01  ZC_ZC_LK_END_PTR               000003EC 00000004 1   A        X
                      
DFHEISTG DSECT 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GUI4I    DS  0CL24
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL12
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
INPUTI   DS  CL3
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
REPLYI   DS  CL3
         ORG   REPLYI  START REDEFINE
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL3
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
REPLYO   DS  CL3
         ORG   GUI4I  START REDEFINE
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GUI4O    DS  0CL24
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL24
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GUI6I    DS  0CL402
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL12
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NAMEL    DS  HL2
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NAMEF    DS  CL1
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NAMEI    DS  CL40
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ADDRL    DS  HL2
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ADDRF    DS  CL1
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ADDRI    DS  CL40
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZIPL     DS  HL2
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZIPF     DS  CL1
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZIPI     DS  CL5
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NAMEHDI  DS  CL4
         ORG   NAMEHDI  START REDEFINE
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL4
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NAMEHDO  DS  CL4
ZC_WS_LOC_29 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_30 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_31 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NEWNAMEI DS  CL40
         ORG   NEWNAMEI  START REDEFINE
ZC_WS_LOC_32 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL40
ZC_WS_LOC_33 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NEWNAMEO DS  CL40
ZC_WS_LOC_34 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_35 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_36 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ADDRHDI  DS  CL4
         ORG   ADDRHDI  START REDEFINE
ZC_WS_LOC_37 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL4
ZC_WS_LOC_38 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ADDRHDO  DS  CL4
ZC_WS_LOC_39 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_40 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_41 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NEWADDRI DS  CL40
         ORG   NEWADDRI  START REDEFINE
ZC_WS_LOC_42 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL40
ZC_WS_LOC_43 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NEWADDRO DS  CL40
ZC_WS_LOC_44 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_45 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_46 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZIPHDI   DS  CL4
         ORG   ZIPHDI  START REDEFINE
ZC_WS_LOC_47 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL4
ZC_WS_LOC_48 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZIPHDO   DS  CL4
ZC_WS_LOC_49 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_50 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_51 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NEWZIPI  DS  CL5
         ORG   NEWZIPI  START REDEFINE
ZC_WS_LOC_52 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL5
ZC_WS_LOC_53 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NEWZIPO  DS  CL5
ZC_WS_LOC_54 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_55 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_56 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ERRMSGI  DS  CL34
         ORG   ERRMSGI  START REDEFINE
ZC_WS_LOC_57 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL34
ZC_WS_LOC_58 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ERRMSGO  DS  CL34
ZC_WS_LOC_59 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TESTOCCD DS  0CL8
ZC_WS_LOC_60 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_61 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TESTOCCF DS  CL1
ZC_WS_LOC_62 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TESTOCCI DS  ZL5
         DS    XL32 PAD FOR MULT OCCURS
ZC_WS_LOC_63 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_64 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_65 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCSUMI  DS  CL10
         ORG   OCCSUMI  START REDEFINE
ZC_WS_LOC_66 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL10
ZC_WS_LOC_67 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCSUMO  DS  CL10
ZC_WS_LOC_68 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_69 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DATEF    DS  CL1
ZC_WS_LOC_70 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DATEI    DS  0CL8
         ORG   DATEI  START REDEFINE
ZC_WS_LOC_71 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DATEO    DS  0CL8
ZC_WS_LOC_72 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MOI      DS  CL2
         ORG   MOI  START REDEFINE
ZC_WS_LOC_73 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL2
ZC_WS_LOC_74 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MOO      DS  CL2
ZC_WS_LOC_75 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SEP1I    DS  CL1
ZC_WS_LOC_76 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DAYI     DS  CL2
         ORG   DAYI  START REDEFINE
ZC_WS_LOC_77 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL2
ZC_WS_LOC_78 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DAYO     DS  CL2
ZC_WS_LOC_79 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SEP2I    DS  CL1
ZC_WS_LOC_80 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
YRI      DS  CL2
         ORG   YRI  START REDEFINE
ZC_WS_LOC_81 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL2
ZC_WS_LOC_82 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
YRO      DS  CL2
ZC_WS_LOC_83 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_84 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_85 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SHOWMDYI DS  CL18
         ORG   SHOWMDYI  START REDEFINE
ZC_WS_LOC_86 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL18
ZC_WS_LOC_87 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SHOWMDYO DS  CL18
ZC_WS_LOC_88 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TESTPCOL DS  HL2
ZC_WS_LOC_89 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TESTPCOF DS  CL1
ZC_WS_LOC_90 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TESTPCOI DS  ZL12
         ORG   TESTPCOI  START REDEFINE
ZC_WS_LOC_91 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL12
ZC_WS_LOC_92 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TESTPCOO DS  CL12
ZC_WS_LOC_93 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_94 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_95 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PAYMEI   DS  CL14
         ORG   PAYMEI  START REDEFINE
ZC_WS_LOC_96 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL14
ZC_WS_LOC_97 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PAYMEO   DS  CL14
ZC_WS_LOC_98 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_99 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_100 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PAYME1I  DS  CL12
         ORG   PAYME1I  START REDEFINE
ZC_WS_LOC_101 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL12
ZC_WS_LOC_102 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PAYME1O  DS  CL12
ZC_WS_LOC_103 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  HL2
ZC_WS_LOC_104 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_105 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CURSI    DS  CL9
         ORG   CURSI  START REDEFINE
ZC_WS_LOC_106 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL9
ZC_WS_LOC_107 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CURSO    DS  CL9
         ORG   GUI6I  START REDEFINE
ZC_WS_LOC_108 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GUI6O    DS  0CL402
ZC_WS_LOC_109 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL402
ZC_WS_LOC_110 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GUI6HI   DS  0CL12
ZC_WS_LOC_111 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL12
ZC_WS_LOC_112 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHAID   DS  0CL30
ZC_WS_LOC_113 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHNULL  DC XL1'00'
ZC_WS_LOC_114 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHENTER DC XL1'7D'
ZC_WS_LOC_115 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF1   DC XL1'F1'
ZC_WS_LOC_116 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF2   DC XL1'F2'
ZC_WS_LOC_117 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF3   DC XL1'F3'
ZC_WS_LOC_118 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF4   DC XL1'F4'
ZC_WS_LOC_119 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF5   DC XL1'F5'
ZC_WS_LOC_120 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF6   DC XL1'F6'
ZC_WS_LOC_121 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF7   DC XL1'F7'
ZC_WS_LOC_122 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF8   DC XL1'F8'
ZC_WS_LOC_123 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF9   DC XL1'F9'
ZC_WS_LOC_124 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF10  DC XL1'7A'
ZC_WS_LOC_125 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF11  DC XL1'7B'
ZC_WS_LOC_126 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF12  DC XL1'7C'
ZC_WS_LOC_127 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF13  DC XL1'C1'
ZC_WS_LOC_128 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF14  DC XL1'C2'
ZC_WS_LOC_129 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF15  DC XL1'C3'
ZC_WS_LOC_130 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF16  DC XL1'C4'
ZC_WS_LOC_131 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF17  DC XL1'C5'
ZC_WS_LOC_132 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF18  DC XL1'C6'
ZC_WS_LOC_133 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF19  DC XL1'C7'
ZC_WS_LOC_134 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF20  DC XL1'C8'
ZC_WS_LOC_135 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF21  DC XL1'C9'
ZC_WS_LOC_136 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF22  DC XL1'4A'
ZC_WS_LOC_137 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF23  DC XL1'4B'
ZC_WS_LOC_138 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPF24  DC XL1'4C'
ZC_WS_LOC_139 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPA1   DC XL1'6C'
ZC_WS_LOC_140 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPA2   DC XL1'6E'
ZC_WS_LOC_141 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPA3   DC XL1'6B'
ZC_WS_LOC_142 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHCLEAR DC XL1'6D'
ZC_WS_LOC_143 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMSCA DS  0CL29
ZC_WS_LOC_144 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMUNP DC XL1'40'
ZC_WS_LOC_145 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMFSE DC XL1'C1'
ZC_WS_LOC_146 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMBRY DC XL1'C8'
ZC_WS_LOC_147 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHUNIMD DC XL1'C9'
ZC_WS_LOC_148 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMDAR DC XL1'4C'
ZC_WS_LOC_149 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHUNNOD DC XL1'4D'
ZC_WS_LOC_150 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMUNN DC XL1'50'
ZC_WS_LOC_151 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHUNNUM DC XL1'D1'
ZC_WS_LOC_152 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHUNNUB DC XL1'D8'
ZC_WS_LOC_153 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHUNINT DC XL1'D9'
ZC_WS_LOC_154 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHUNNON DC XL1'5D'
ZC_WS_LOC_155 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMPRO DC XL1'60'
ZC_WS_LOC_156 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMPRF DC XL1'61'
ZC_WS_LOC_157 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPROTI DC XL1'E8'
ZC_WS_LOC_158 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPROTN DC XL1'6C'
ZC_WS_LOC_159 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMASK DC XL1'F0'
ZC_WS_LOC_160 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMASF DC XL1'F1'
ZC_WS_LOC_161 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMASB DC XL1'F8'
ZC_WS_LOC_162 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMEOF DC XL1'80'
ZC_WS_LOC_163 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMCUR DC XL1'02'
ZC_WS_LOC_164 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBMEF  DC XL1'82'
ZC_WS_LOC_165 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHDFCOL DC XL1'00'
ZC_WS_LOC_166 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHBLUE  DC XL1'F1'
ZC_WS_LOC_167 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHRED   DC XL1'F2'
ZC_WS_LOC_168 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHPINK  DC XL1'F3'
ZC_WS_LOC_169 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHGREEN DC XL1'F4'
ZC_WS_LOC_170 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHTURQ  DC XL1'F5'
ZC_WS_LOC_171 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHYELLO DC XL1'F6'
ZC_WS_LOC_172 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFHNEUTR DC XL1'F7'
ZC_WS_LOC_173 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYCOMM   DS  0CL86
ZC_WS_LOC_174 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
COMMIND  DS  CL1
ZC_WS_LOC_175 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
COMMNAME DS  CL40
ZC_WS_LOC_176 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
COMMADDR DS  CL40
ZC_WS_LOC_177 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
COMMZIP  DS  CL5
ZC_WS_LOC_178 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYGUI6   DC CL7'GUI6   '
ZC_WS_LOC_179 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCSUM   DS  PL4
ZC_WS_LOC_180 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCINDX  DS  HL2
ZC_WS_LOC_181 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LOOPCTRL DS  HL2
ZC_WS_LOC_182 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SUMLEN   DS  HL2
ZC_WS_LOC_183 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCZONE  DS  ZL2
         ORG   OCCZONE  START REDEFINE
ZC_WS_LOC_184 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL2
ZC_WS_LOC_185 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_186 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCZONE2 DS  CL1
ZC_WS_LOC_187 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCCURSO DS  0CL9
ZC_WS_LOC_188 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V1 DC CL7'OCCURS('
ZC_WS_LOC_189 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
OCCNUM   DS  CL1
ZC_WS_LOC_190 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V2 DC CL1')'
ZC_WS_LOC_191 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SHOWMSG  DS  0CL18
ZC_WS_LOC_192 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V3 DC CL3'MO='
ZC_WS_LOC_193 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SHOWMO   DS  CL2
ZC_WS_LOC_194 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V4 DC CL5' DAY='
ZC_WS_LOC_195 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SHOWDAY  DS  CL2
ZC_WS_LOC_196 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V5 DC CL4' YR='
ZC_WS_LOC_197 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SHOWYR   DS  CL2
ZC_WS_LOC_198 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BADKEY   DS  0CL34
ZC_WS_LOC_199 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V6 DC CL26'NO ACTION FOR AID KEY HEX '
ZC_WS_LOC_200 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HEXKEY   DS  CL2
ZC_WS_LOC_201 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V7 DC CL6' '
ZC_WS_LOC_202 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NOMODS   DC CL34'NO FIELDS CHANGED                 '
ZC_WS_LOC_203 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FAILMSG  DS  0CL34
ZC_WS_LOC_204 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V8 DC CL8'MAPFAIL/'
ZC_WS_LOC_205 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FAILIND  DS  CL1
ZC_WS_LOC_206 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V9 DC CL25' HAS OCCURRED            '
ZC_WS_LOC_207 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ENDMSG   DC CL34'TRANSACTION COMPLETE - PRESS CLEAR'
ZC_WS_LOC_208 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
WORK1    DS  0CL4
ZC_WS_LOC_209 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL3
ZC_WS_LOC_210 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RESP2    DS  CL1
ZC_WS_LOC_211 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID1 DC CL7'ZCWSID1'
ZC_WS_LOC_235 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_236 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_237 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V10 DC CL1' '
ZC_WS_LOC_238 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_239 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V11 DC CL1' '
ZC_WS_LOC_240 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_241 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V12 DC CL1' '
ZC_WS_LOC_242 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_243 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V13 DC CL1' '
ZC_WS_LOC_244 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_245 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V14 DC CL1' '
ZC_WS_LOC_246 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_247 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_248 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_249 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
ZC_WS_LOC_250 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHCOMMAREA_PTR DS AL4
ZC_WS_LOC_251 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHEIBLK_PTR DS AL4
ZC_WS_LOC_252 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_ZC_LK_END_PTR DS AL4
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  DFHCOMMAREA                    00000000 00000056 1   X        X
                      
*    02  FILLER                         00000000 00000056 1   X   X(86)X
                      
*    01  DFHEIBLK                       00000000 00000054 1   X        X
                      
*    02  EIBHEAD                        00000000 00000008 1   X   X(8) X
                      
*    02  EIBTIME                        00000008 00000004 1   P   9(7) X
                      
*    02  EIBDATE                        0000000C 00000004 1   P   9(7) X
                      
*    02  EIBTRNID                       00000010 00000004 1   X   X(4) X
                      
*    02  EIBTASKN                       00000014 00000004 1   P   9(7) X
                      
*    02  EIBTRMID                       00000018 00000004 1   X   X(4) X
                      
*    02  FILLER                         0000001C 00000002 1   X   X(2) X
                      
*    02  EIBCPOSN                       0000001E 00000002 1   H   9(4) X
                      
*    02  EIBCALEN                       00000020 00000002 1   H   9(4) X
                      
*    02  EIBAID                         00000022 00000001 1   X   X    X
                      
*    02  EIBFN                          00000023 00000002 1   H   9(4) X
                      
*    02  EIBRCODE                       00000025 00000006 1   X   X(6) X
                      
*    02  EIBREQID                       0000002B 00000008 1   X   X(8) X
                      
*    02  EIBDS                          00000033 00000008 1   X   X(8) X
                      
*    02  EIBRSRCE                       0000003B 00000008 1   X   X(8) X
                      
*    02  EIBRESP                        00000043 00000004 1   F   9(9) X
                      
*    02  EIBRESP2                       00000047 00000004 1   F   9(9) X
                      
*    02  EIBPROG                        0000004B 00000008 1   X   X(8) X
                      
*    02  EIBDTFRM                       00000053 00000001 1   X   X    X
                      
*    01  ZC_LK_END                      00000000 00000001 1   X   X    X
                      
DFHEISTG DSECT 
DFHCOMMAREA_DSECT DSECT 
ZC_LK_LOC_212 EQU *-DFHCOMMAREA CHECK &SYM_NAME(&I) LK LOC
DFHCOMMAREA DS 0CL86
ZC_LK_LOC_213 EQU *-DFHCOMMAREA CHECK &SYM_NAME(&I) LK LOC
         DS  CL86
DFHEIBLK_DSECT DSECT 
ZC_LK_LOC_214 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
DFHEIBLK DS  0CL84
ZC_LK_LOC_215 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBHEAD  DS  CL8
ZC_LK_LOC_216 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTIME  DS  PL4
ZC_LK_LOC_217 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDATE  DS  PL4
ZC_LK_LOC_218 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRNID DS  CL4
ZC_LK_LOC_219 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTASKN DS  PL4
ZC_LK_LOC_220 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRMID DS  CL4
ZC_LK_LOC_221 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
         DS  CL2
ZC_LK_LOC_222 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCPOSN DS  HL2
ZC_LK_LOC_223 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCALEN DS  HL2
ZC_LK_LOC_224 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBAID   DS  CL1
ZC_LK_LOC_225 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBFN    DS  HL2
ZC_LK_LOC_226 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRCODE DS  CL6
ZC_LK_LOC_227 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBREQID DS  CL8
ZC_LK_LOC_228 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDS    DS  CL8
ZC_LK_LOC_229 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRSRCE DS  CL8
ZC_LK_LOC_230 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP  DS  FL4
ZC_LK_LOC_231 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP2 DS  FL4
ZC_LK_LOC_232 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBPROG  DS  CL8
ZC_LK_LOC_233 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDTFRM DS  CL1
ZC_LK_END_DSECT DSECT 
ZC_LK_LOC_234 EQU *-ZC_LK_END CHECK &SYM_NAME(&I) LK LOC
ZC_LK_END DS CL1
DFHEISTG DSECT 
ZC_WS_DIFF EQU  *-ZC_WS-1008  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 252'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 29'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT 
         ORG 
DFHEIEND EQU   *
         END 
