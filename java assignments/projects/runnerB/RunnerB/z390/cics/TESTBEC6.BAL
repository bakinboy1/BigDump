*    ZCOBOL PGM='cics\TESTBEC6' VER=V1.5.06 05/21/12 13:47:43 
*    ZCOBOL OPTIONS=(CICS) 
         COPY  TESTBEC6_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST HANDLE ABEND
*      * TEST 1: HANDLE ASRA ABEND BY LABEL
*      *         PRETEND NOTHING HAPPENED
*      * TEST 2: RAISE PGMIDERR
*      *         HANDLE AEI0 ABEND BY LABEL
*      *         PRETEND NOTHING HAPPENED
*      * TEST 3: HANDLE ASRA ABEND BY PROGRAM TESTBEC7
*      *         PRETEND NOTHING HAPPENED
*      * THE FOLLOWING TESTS ARE DRIVEN BY TRANSID BEC5
*      * TEST 4: SET HANDLE ABEND LABEL HERE
*      *         LINK TO TESTBEC7 AND ABEND ASRA
*      *         RETURN IS AFTER OUR LINK
*      * TEST 5: LINK TO TESTBEC7 AND HANDLE ABEND AEI0 THERE BY PROGRAX
                              M
*      *         TESTBEC8
*      *         RETURN IS AFTER OUR LINK
*      * TEST 6: EXEC CICS ABEND WITH DUMP HANDLED HERE BY LABEL
*      *         PRETEND NOTHING HAPPENED
*         PROGRAM-ID. TESTBEC6.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT 
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEPCT DS    AL4         ADDRESS OF DFHPCT
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           CEDF INTERCEPT INDICATOR
*                             00='BEFORE'
*                             FE='AFTER' LINK/XCTL/RETURN FAIL
*                             FF='AFTER'
TCTTEEDL DS    X           CEDF LINKAGE INDICATOR
*                             00=NORMAL LINKAGE
*                             FE=SPECIAL LINKAGE
*                             FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
TCTTECHN DS    CL16        PASSED CHANNEL NAME
TCTTECAQ DS    AL4         ANCHOR FOR CHANNEL CHAIN
TCTTETKN DS    XL4         TOKEN FOR STARTBROWSE CONTAINER
TCTTECHW DS    AL4         ADDRESS OF CHWA (STARTBROWSE CONTAINER)
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0     EQU 0
R1     EQU 1
R2     EQU 2
R3     EQU 3
R4     EQU 4
R5     EQU 5
R6     EQU 6
R7     EQU 7
R8     EQU 8
R9     EQU 9
R10    EQU 10
R11    EQU 11
R12    EQU 12
R13    EQU 13
R14    EQU 14
R15    EQU 15
TESTBEC6 CSECT 
*            R1 >>> A(EIB,COMMAREA)
*            R2 >>> P0E02 (LINK) OR P0E04 (XCTL) PARMS
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         L     R2,0(R2)           R2=P0E02/P0E04 PARM POINTER
         STRL  R2,CICS_EIENT_0025_PARMPNTR SAVE IT
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
         LR    R2,R1              R2=SAVE USER PARM POINTER
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0025_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0025_NOSAVE     EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         IILF  R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH RPI 1181
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0025_NOSAVE2 EXIT IF IT IS
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
CICS_EIENT_0025_NOSAVE2     EQU *
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0025_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        NEW PARM POSITION FOR ZCOBOL
CICS_EIENT_0025_01     DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
         MVC   DFHEICHN,TCTTECHN  SET CHANNEL FOR ASSIGN
*
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         JNE   CICS_EIENT_0025_NOEDFA EXIT IF NOT
* PROGRAM INITIATION
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'FE'     SET SPECIAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
         J     CICS_EIENT_0025_NOEDFA EXIT
CICS_EIENT_0025_PARMPNTR     DS AL4 SAVE P0E02/P0E04 PARM POINTER
*
CICS_EIENT_0025_NOEDFA     DS 0H
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBEC6'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'05/21/12'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'13.47'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0035_EOT-*+1)/2*2
         DC    AL2(WTO#0035_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0035_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0036_EOT-*+1)/2*2
         DC    AL2(WTO#0036_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0036_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
DFHEISTG DSECT 
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEICHN DS    CL16 CHANNEL FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
         PRINT DATA
*         WORKING-STORAGE SECTION.
*         77  RECAREA  PIC X(80).
*         77  RECLEN   PIC 9(4) COMP.
*         01  TEST1.
*             02  FILLER  PIC X(4)  VALUE X'C311C1D1'.
*             02  FILLER  PIC X(59)
*                 VALUE 'TESTBEC6 TEST 1:PRESS AID KEY TO HANDLE ASRA AX
               BEN
*       -               'D BY LABEL'.
*       -               'D BY LABEL'.
*         77  TEST1L   PIC 9(4) COMP.
*         01  TEST1R.
*             02  FILLER  PIC X(4)  VALUE X'C311C261'.
*             02  FILLER  PIC X(33)
*                         VALUE 'TESTBEC6 ASRA HANDLED OK BY LABEL'.
*             02  FILLER  PIC X(3)  VALUE X'11C3F1'.
*             02  FILLER  PIC X(59)
*                 VALUE 'TESTBEC6 TEST 2:PRESS AID KEY TO HANDLE AEI0 AX
               BEN
*       -               'D BY LABEL'.
*       -               'D BY LABEL'.
*         77  TEST1RL  PIC 9(4) COMP.
*         01  TEST2R.
*             02  FILLER  PIC X(4)  VALUE X'C311C5C1'.
*             02  FILLER  PIC X(33)
*                         VALUE 'TESTBEC6 AEI0 HANDLED OK BY LABEL'.
*             02  FILLER  PIC X(3)  VALUE X'11C6D1'.
*             02  FILLER  PIC X(61)
*                 VALUE 'TESTBEC6 TEST 3:PRESS AID KEY TO HANDLE ASRA AX
               BEN
*       -               'D BY PROGRAM'.
*       -               'D BY PROGRAM'.
*         77  TEST2RL  PIC 9(4) COMP.
*         01  TEST4.
*             02  FILLER  PIC X(4)  VALUE X'C311C1D1'.
*             02  FILLER  PIC X(77)
*                 VALUE 'TESTBEC6 TEST 4:PRESS AID KEY TO HANDLE ASRA AX
               BEN
*       -               'D IN LINKED PROGRAM BY LABEL'.
*       -               'D IN LINKED PROGRAM BY LABEL'.
*         77  TEST4L   PIC 9(4) COMP.
*         01  TEST4R.
*             02  FILLER  PIC X(4)  VALUE X'C311C3F1'.
*             02  FILLER  PIC X(45)
*                 VALUE 'TESTBEC6 ASRA IN TESTBEC7 HANDLED OK BY LABEL'X
                              .
*         77  TEST4RL  PIC 9(4) COMP.
*         01  TEST4K.
*             02  FILLER  PIC X(4)  VALUE X'C311C5C1'.
*             02  FILLER  PIC X(43)
*                 VALUE 'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'.
*             02  FILLER  PIC X(3)  VALUE X'11C6D1'.
*             02  FILLER  PIC X(79)
*                 VALUE 'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 AX
               BEN
*       -               'D IN LINKED PROGRAM BY PROGRAM'.
*       -               'D IN LINKED PROGRAM BY PROGRAM'.
*         77  TEST4KL  PIC 9(4) COMP.
*         01  TEST5K.
*             02  FILLER  PIC X(4)  VALUE X'C3114AC1'.
*             02  FILLER  PIC X(43)
*                 VALUE 'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'.
*             02  FILLER  PIC X(3)  VALUE X'114BD1'.
*             02  FILLER  PIC X(55)
*                 VALUE 'TESTBEC6 TEST6:PRESS AID KEY TO ABEND, HANDLEDX
                BY
*       -               ' LABEL'.
*       -               ' LABEL'.
*         77  TEST5KL  PIC 9(4) COMP.
*         01  TEST6R.
*             02  FILLER  PIC X(4)  VALUE X'C3114C61'.
*             02  FILLER  PIC X(39)
*                 VALUE 'TESTBEC6 ABEND ZZZZ HANDLED OK BY LABEL'.
*             02  FILLER  PIC X(3)  VALUE X'114FC1'.
*             02  FILLER  PIC X(30)
*                 VALUE 'BEC5 ENDED OK, NOW PRESS CLEAR'.
*         77  TEST6RL  PIC 9(4) COMP.
*         77  ACOMM    PIC X(4) VALUE 'AEI0'.
*         77  BADFLD1  PIC 9(4) COMP VALUE 0.
*         77  BADFLD2  PIC S9(3) REDEFINES BADFLD1 COMP-3.
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBEC6 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         LARL  ZC_R1,=XL4'C311C1D1'
          MVC   ZC_FILLER_V1,0(ZC_R1)
         LARL  ZC_R1,=CL60'TESTBEC6 TEST 1:PRESS AID KEY TO HANDLE ASRAX
                ABEND BY LABEL'
          MVC   ZC_FILLER_V2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C261'
          MVC   ZC_FILLER_V3,0(ZC_R1)
         LARL  ZC_R1,=CL34'TESTBEC6 ASRA HANDLED OK BY LABEL'
          MVC   ZC_FILLER_V4,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C3F1'
          MVC   ZC_FILLER_V5,1(ZC_R1)
         LARL  ZC_R1,=CL60'TESTBEC6 TEST 2:PRESS AID KEY TO HANDLE AEI0X
                ABEND BY LABEL'
          MVC   ZC_FILLER_V6,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C5C1'
          MVC   ZC_FILLER_V7,0(ZC_R1)
         LARL  ZC_R1,=CL34'TESTBEC6 AEI0 HANDLED OK BY LABEL'
          MVC   ZC_FILLER_V8,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C6D1'
          MVC   ZC_FILLER_V9,1(ZC_R1)
         LARL  ZC_R1,=CL62'TESTBEC6 TEST 3:PRESS AID KEY TO HANDLE ASRAX
                ABEND BY PROGRAM'
          MVC   ZC_FILLER_V10,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C1D1'
          MVC   ZC_FILLER_V11,0(ZC_R1)
         LARL  ZC_R1,=CL78'TESTBEC6 TEST 4:PRESS AID KEY TO HANDLE ASRAX
                ABEND IN LINKED PROGRAM BY LABEL'
          MVC   ZC_FILLER_V12,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C3F1'
          MVC   ZC_FILLER_V13,0(ZC_R1)
         LARL  ZC_R1,=CL46'TESTBEC6 ASRA IN TESTBEC7 HANDLED OK BY LABEX
               L'
          MVC   ZC_FILLER_V14,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C5C1'
          MVC   ZC_FILLER_V15,0(ZC_R1)
         LARL  ZC_R1,=CL44'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'
          MVC   ZC_FILLER_V16,0(ZC_R1)
         LARL  ZC_R1,=XL4'11C6D1'
          MVC   ZC_FILLER_V17,1(ZC_R1)
         LARL  ZC_R1,=CL80'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0X
                ABEND IN LINKED PROGRAM BY PROGRAM'
          MVC   ZC_FILLER_V18,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114AC1'
          MVC   ZC_FILLER_V19,0(ZC_R1)
         LARL  ZC_R1,=CL44'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'
          MVC   ZC_FILLER_V20,0(ZC_R1)
         LARL  ZC_R1,=XL4'114BD1'
          MVC   ZC_FILLER_V21,1(ZC_R1)
         LARL  ZC_R1,=CL56'TESTBEC6 TEST6:PRESS AID KEY TO ABEND, HANDLX
               ED BY LABEL'
          MVC   ZC_FILLER_V22,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114C61'
          MVC   ZC_FILLER_V23,0(ZC_R1)
         LARL  ZC_R1,=CL40'TESTBEC6 ABEND ZZZZ HANDLED OK BY LABEL'
          MVC   ZC_FILLER_V24,0(ZC_R1)
         LARL  ZC_R1,=XL4'114FC1'
          MVC   ZC_FILLER_V25,1(ZC_R1)
         LARL  ZC_R1,=CL30'BEC5 ENDED OK, NOW PRESS CLEAR'
          MVC   ZC_FILLER_V26,0(ZC_R1)
         LARL  ZC_R1,=CL4'AEI0'
          MVC   ACOMM,0(ZC_R1)
          MVHHI BADFLD1,0
         LARL  ZC_R1,=CL8'ZCWSID1'
          MVC   ZC_WS_ID1,0(ZC_R1)
         MVI   ZC_FILLER_V27,C' '
         MVI   ZC_FILLER_V28,C' '
         MVI   ZC_FILLER_V29,C' '
         MVI   ZC_FILLER_V30,C' '
         MVI   ZC_FILLER_V31,C' '
          MVI   TRUE,C'1'
          MVI   FALSE,C'0'
          MVHHI RETURN_CODE,0
*
*             MOVE LENGTH OF TEST1   TO TEST1L.
*ZC    131         MOVE  LENGTH,OF,TEST1,TO,TEST1L
          MVHHI TEST1L,63
*             MOVE LENGTH OF TEST1R  TO TEST1RL.
*ZC    132         MOVE  LENGTH,OF,TEST1R,TO,TEST1RL
          MVHHI TEST1RL,99
*             MOVE LENGTH OF TEST2R  TO TEST2RL.
*ZC    133         MOVE  LENGTH,OF,TEST2R,TO,TEST2RL
          MVHHI TEST2RL,101
*             MOVE LENGTH OF TEST4   TO TEST4L.
*ZC    134         MOVE  LENGTH,OF,TEST4,TO,TEST4L
          MVHHI TEST4L,81
*             MOVE LENGTH OF TEST4R  TO TEST4RL.
*ZC    135         MOVE  LENGTH,OF,TEST4R,TO,TEST4RL
          MVHHI TEST4RL,49
*             MOVE LENGTH OF TEST4K  TO TEST4KL.
*ZC    136         MOVE  LENGTH,OF,TEST4K,TO,TEST4KL
          MVHHI TEST4KL,129
*             MOVE LENGTH OF TEST5K  TO TEST5KL.
*ZC    137         MOVE  LENGTH,OF,TEST5K,TO,TEST5KL
          MVHHI TEST5KL,105
*             MOVE LENGTH OF TEST6R  TO TEST6RL.
*      *  CLC   EIBTRNID,=C'BEC5'  SECOND TEST TRANSID ?
*      *  BE    BEC5               EXIT IF IT IS
*ZC    138         MOVE  LENGTH,OF,TEST6R,TO,TEST6RL
          MVHHI TEST6RL,76
*             IF EIBTRNID = 'BEC5' THEN GO TO BEC5.
*ZC    141         IF    EIBTRNID,=,'BEC5',THEN
         LARL  ZC_R1,=CL4'BEC5'
         CLC   EIBTRNID,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_1_1
*ZC    141         GO    TO,BEC5
         J     PG_BEC5
PG_IF_1_1    DS    0H  &TYPE
*             EXEC CICS SEND FROM(TEST1) LENGTH(TEST1L) END-EXEC.
*ZC    142         EXEC  CICS,SEND,FROM(TEST1),LENGTH(TEST1L)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST1L   SET LENGTH FROM LABEL
         LA    R0,TEST1           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0463 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0463    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0463   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0463   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0463) ENTRYPOINT FOR IGNORE CONDITION
*
         J     P0404BYP_0463   EXIT
*
P0404    DS    0H
P0404FN  DS    XL2                FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    XL2                LENGTH
P0404EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0404EDS DS    AL4                DSA ADDRESS FOR EDF
P0404EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0404EDL DS    XL2                DSA LENGTH FOR EDF
P0404NED DS    X                  FF=NOEDF
         DS    X
P0404NOH DS    X                  FF=NOHANDLE
         DS    X
P0404RSP DS    AL4                RESP
P0404RS2 DS    AL4                RESP2
P0404END EQU   *                  END MARKER
*
P0404BYP_0463    DS 0H
*      * CREATE AND MODIFY HANDLE ABEND BLOCK
*             EXEC CICS HANDLE ABEND LABEL(BEC6ASRA) END-EXEC.
*ZC    144         EXEC  CICS,HANDLE,ABEND,LABEL(BEC6ASRA)
         LARL  R1,P0E0E         ADDRESS SOURCE
         LARL  R15,P0E0E        ADDRESS TARGET
         XC    0(P0E0EEND-P0E0E,R15),0(R1) XC IT
         LARL  R1,=X'0E0E'         ADDRESS SOURCE
         LARL  R15,P0E0EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0EFN,R15),0(R1) MVC IT
         LARL  R1,P0E0EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,PG_BEC6ASRA       R0=LABEL (COBOL)
         LARL  R1,P0E0ELAB         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0E0EREG       ADDRESS TARGET
         STM   R2,R13,0(R15)      SAVE CALLERS REGS
         LARL  R0,P0E0EEDF_0477 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0E)       R1=LCL MODULE PARAMETER LIST
P0E0EEDF_0477    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         J     P0E0EBYP_0477   EXIT
*
P0E0E    DS    0H
P0E0EFN  DS    XL2                FUNCTION CODE
P0E0EEIB DS    AL4                EIB
P0E0ETCT DS    AL4                TCTTE
P0E0ECAN DS    X                  FF=CANCEL
         DS    X
P0E0ERES DS    X                  FF=RESET
         DS    X
P0E0ELAB DS    AL4                LABEL
P0E0EPGM DS    CL8                PROGRAM
P0E0ECAP DS    AL4                COMMAREA ADDRESS FROM DFHEICAP
P0E0EREG DS    12AL4              CALLERS REGS R2-R13
P0E0EEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E0EEDS DS    AL4                DSA ADDRESS FOR EDF
P0E0EEDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E0EEDL DS    XL2                DSA LENGTH FOR EDF
P0E0ENED DS    X                  FF=NOEDF
         DS    X
P0E0ERSP DS    AL4                RESP
P0E0ERS2 DS    AL4                RESP2
P0E0EEND EQU   *                  END MARKER
*
P0E0EBYP_0477    DS 0H
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    145         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0402EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0402EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0402EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0402EDF_0490 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0402EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
P0402EDF_0490    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0490   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0490   EXIT IF NONE
* NOTALLOC, LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0490) ENTRYPOINT FOR IGNORE CONDITION
*
P0402    DS    0H
P0402FN  DS    XL2                FUNCTION CODE
P0402EIB DS    AL4                EIB
P0402TCT DS    AL4                TCTTE
P0402ADB DS    AL4                ADBLK
P0402INT DS    AL4                A(INTO)
P0402INL DS    AL2                L'INTO
P0402LEN DS    AL4                A(LENGTH OF RECEIVED DATA)
P0402TGR DS    XL4                TGET RESPONSE
P0402HCN DS    AL4                A(DFHEIHCN)
P0402AID DS    AL4                HANDLE AID ADDRESS
P0402EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0402EDS DS    AL4                DSA ADDRESS FOR EDF
P0402EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0402EDL DS    XL2                DSA LENGTH FOR EDF
P0402NED DS    X                  FF=NOEDF
         DS    X
P0402NOW DS    X                  FF=NOWAIT
         DS    X
P0402NOH DS    X                  FF=NOHANDLE
         DS    X
P0402RSP DS    AL4                RESP
P0402RS2 DS    AL4                RESP2
P0402END EQU   *                  END MARKER
*
P0402BYP_0490    DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0490_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0490_01     EQU *
*      * CAUSE ASRA
*      * THIS IS 'REPLACED' BY SEND AND B AB2
*      *  DC    H'0'
*             ADD 1 TO BADFLD2.
*      * AB2      EQU   *
*ZC    149         ADD   1,TO,BADFLD2
         BRAS  ZC_R14,3 SET ZC_R1 TO A(INLINE LIT) AND SKIP OVER IT
         DC    PL2'1'
         AP    BADFLD2,0(2,ZC_R14)
*         AB2.
*      * ASRA HANDLED OK
*      * MODIFY HANDLE ABEND BLOCK
PG_AB2   DS    0H
*             EXEC CICS HANDLE ABEND LABEL(BEC6AEI0) END-EXEC.
*ZC    154         EXEC  CICS,HANDLE,ABEND,LABEL(BEC6AEI0)
         LARL  R1,P0E0E         ADDRESS SOURCE
         LARL  R15,P0E0E        ADDRESS TARGET
         XC    0(P0E0EEND-P0E0E,R15),0(R1) XC IT
         LARL  R1,=X'0E0E'         ADDRESS SOURCE
         LARL  R15,P0E0EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0EFN,R15),0(R1) MVC IT
         LARL  R1,P0E0EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,PG_BEC6AEI0       R0=LABEL (COBOL)
         LARL  R1,P0E0ELAB         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0E0EREG       ADDRESS TARGET
         STM   R2,R13,0(R15)      SAVE CALLERS REGS
         LARL  R0,P0E0EEDF_0516 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0E)       R1=LCL MODULE PARAMETER LIST
P0E0EEDF_0516    DS 0H
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    155         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0402EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0402EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0402EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0402EDF_0528 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0402EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
P0402EDF_0528    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0528   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0528   EXIT IF NONE
* NOTALLOC, LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0528) ENTRYPOINT FOR IGNORE CONDITION
*
P0402BYP_0528    DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0528_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0528_01     EQU *
*      * CAUSE AEI0
*      * THIS IS 'REPLACED' BY SEND AND B AB3
*             EXEC CICS LOAD PROGRAM('BADPROG') END-EXEC.
*ZC    158         EXEC  CICS,LOAD,PROGRAM('BADPROG')
         LARL  R1,P0E06         ADDRESS SOURCE
         LARL  R15,P0E06        ADDRESS TARGET
         XC    0(P0E06END-P0E06,R15),0(R1) XC IT
         LARL  R1,=X'0E06'         ADDRESS SOURCE
         LARL  R15,P0E06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06FN,R15),0(R1) MVC IT
         LARL  R1,P0E06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,=CL8'BADPROG'         ADDRESS SOURCE
         LARL  R15,P0E06PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E06PGM,R15),0(R1) MVC IT
         LARL  R1,P0E06EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E06EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E06EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0E06EDF_0544 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E06)       R1=LCL MODULE PARAMETER LIST
P0E06EDF_0544    EQU *
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0E06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E06IGN_0544   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E06IGN_0544   EXIT IF NONE
* PGMIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E06IGN_0544) ENTRYPOINT FOR IGNORE CONDITION
*
P0E06IGN_0544    EQU *
         J     P0E06BYP_0544   EXIT
*
P0E06    DS    0H
P0E06FN  DS    XL2                FUNCTION CODE
P0E06EIB DS    AL4                EIB
P0E06TCT DS    AL4                TCTTE
P0E06PGM DS    CL8                PROGRAM
P0E06LEN DS    AL4                ADDRESS OF LENGTH
P0E06FLN DS    AL4                ADDRESS OF FLENGTH
P0E06ENT DS    AL4                ENTRY POINT
P0E06EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E06EDS DS    AL4                DSA ADDRESS FOR EDF
P0E06EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E06EDL DS    XL2                DSA LENGTH FOR EDF
P0E06NED DS    X                  FF=NOEDF
         DS    X
P0E06NOH DS    X                  FF=NOHANDLE
         DS    X
P0E06RSP DS    AL4                RESP
P0E06RS2 DS    AL4                RESP2
P0E06END EQU   *                  END MARKER
*
P0E06BYP_0544    DS 0H
*      * AB3      EQU   *
*         AB3.
*      * AEI0 HANDLED OK
*      * MODIFY HANDLE ABEND BLOCK
PG_AB2_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_AB3   DS    0H
*             EXEC CICS HANDLE ABEND PROGRAM('TESTBEC7') END-EXEC.
*ZC    163         EXEC  CICS,HANDLE,ABEND,PROGRAM('TESTBEC7')
         LARL  R1,P0E0E         ADDRESS SOURCE
         LARL  R15,P0E0E        ADDRESS TARGET
         XC    0(P0E0EEND-P0E0E,R15),0(R1) XC IT
         LARL  R1,=X'0E0E'         ADDRESS SOURCE
         LARL  R15,P0E0EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0EFN,R15),0(R1) MVC IT
         LARL  R1,P0E0EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,=CL8'TESTBEC7'         ADDRESS SOURCE
         LARL  R15,P0E0EPGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0EPGM,R15),0(R1) MVC IT
         LARL  R15,P0E0ECAP       ADDRESS TARGET
         MVC   0(4,R15),DFHEICAP  SET ANY COMMAREA ADDRESS
         LARL  R15,P0E0EREG       ADDRESS TARGET
         STM   R2,R13,0(R15)      SAVE CALLERS REGS
         LARL  R0,P0E0EEDF_0561 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0E)       R1=LCL MODULE PARAMETER LIST
P0E0EEDF_0561    DS 0H
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    164         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0402EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0402EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0402EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0402EDF_0573 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0402EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
P0402EDF_0573    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0573   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0573   EXIT IF NONE
* NOTALLOC, LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0573) ENTRYPOINT FOR IGNORE CONDITION
*
P0402BYP_0573    DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0573_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0573_01     EQU *
*      * CAUSE ASRA
*      * THIS ACTS AS THOUGH WE HAD AN XCTL TO TESTBEC7 HERE
*      * THE RETURN IN TESTBEC7 ENDS THE TASK NORMALLY
*      *  DC    H'0'
*             MOVE 0 TO BADFLD1.
*ZC    169         MOVE  0,TO,BADFLD1
          MVHHI BADFLD1,0
*             ADD 1 TO BADFLD2.
*      * BEC6ASRA EQU   *
*ZC    170         ADD   1,TO,BADFLD2
         BRAS  ZC_R14,3 SET ZC_R1 TO A(INLINE LIT) AND SKIP OVER IT
         DC    PL2'1'
         AP    BADFLD2,0(2,ZC_R14)
*         BEC6ASRA.
PG_AB3_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC6ASRA DS 0H
*             EXEC CICS SEND FROM(TEST1R) LENGTH(TEST1RL) END-EXEC.
*ZC    173         EXEC  CICS,SEND,FROM(TEST1R),LENGTH(TEST1RL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST1RL   SET LENGTH FROM LABEL
         LA    R0,TEST1R           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0603 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0603    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0603   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0603   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0603) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0603    DS 0H
*      * B     AB2                CONTINUE TESTS
*             GO TO AB2.
*      * BEC6AEI0 EQU   *
*ZC    175         GO    TO,AB2
         J     PG_AB2
*         BEC6AEI0.
PG_BEC6ASRA_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC6AEI0 DS 0H
*             EXEC CICS SEND FROM(TEST2R) LENGTH(TEST2RL) END-EXEC.
*ZC    178         EXEC  CICS,SEND,FROM(TEST2R),LENGTH(TEST2RL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST2RL   SET LENGTH FROM LABEL
         LA    R0,TEST2R           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0622 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0622    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0622   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0622   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0622) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0622    DS 0H
*      * B     AB3                CONTINUE TESTS
*             GO TO AB3.
*      * BEC5 TESTS
*      * BEC5     EQU   *
*ZC    180         GO    TO,AB3
         J     PG_AB3
*         BEC5.
PG_BEC6AEI0_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC5  DS    0H
*             EXEC CICS SEND FROM(TEST4) LENGTH(TEST4L) END-EXEC.
*ZC    186         EXEC  CICS,SEND,FROM(TEST4),LENGTH(TEST4L)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST4L   SET LENGTH FROM LABEL
         LA    R0,TEST4           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0641 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0641    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0641   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0641   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0641) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0641    DS 0H
*             EXEC CICS HANDLE ABEND LABEL(BEC7ASRA) END-EXEC.
*ZC    187         EXEC  CICS,HANDLE,ABEND,LABEL(BEC7ASRA)
         LARL  R1,P0E0E         ADDRESS SOURCE
         LARL  R15,P0E0E        ADDRESS TARGET
         XC    0(P0E0EEND-P0E0E,R15),0(R1) XC IT
         LARL  R1,=X'0E0E'         ADDRESS SOURCE
         LARL  R15,P0E0EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0EFN,R15),0(R1) MVC IT
         LARL  R1,P0E0EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,PG_BEC7ASRA       R0=LABEL (COBOL)
         LARL  R1,P0E0ELAB         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0E0EREG       ADDRESS TARGET
         STM   R2,R13,0(R15)      SAVE CALLERS REGS
         LARL  R0,P0E0EEDF_0654 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0E)       R1=LCL MODULE PARAMETER LIST
P0E0EEDF_0654    DS 0H
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    188         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0402EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0402EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0402EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0402EDF_0666 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0402EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
P0402EDF_0666    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0666   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0666   EXIT IF NONE
* NOTALLOC, LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0666) ENTRYPOINT FOR IGNORE CONDITION
*
P0402BYP_0666    DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0666_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0666_01     EQU *
*      * TESTBEC7 WILL ABEND ASRA
*             EXEC CICS LINK PROGRAM('TESTBEC7') END-EXEC.
*ZC    190         EXEC  CICS,LINK,PROGRAM('TESTBEC7')
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'TESTBEC7'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E02EDF_0682 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E02           R1=PARAMETER LIST
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
P0E02EDF_0682    EQU *
         BALR  R14,R15            GO TO IT
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_0682   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_0682   EXIT IF NONE
* PGMIDERR, CHANNELERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_0682) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02    DS    0H
P0E02FN  DS    XL2                FUNCTION CODE
P0E02PGM DS    CL8                PROGRAM
P0E02EIB DS    AL4                EIB
P0E02COM DS    AL4                COMMAREA ADDRESS
P0E02CLN DS    XL2                COMMAREA LENGTH
P0E02CHN DS    CL16               CHANNEL NAME
P0E02EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E02EDS DS    AL4                DSA ADDRESS FOR EDF
P0E02EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E02EDL DS    XL2                DSA LENGTH FOR EDF
P0E02NED DS    X                  FF=NOEDF
         DS    X
P0E02LV0 DS    X                  FF=LINK LEVEL 0
         DS    X
P0E02NOH DS    X                  FF=NOHANDLE
         DS    X
P0E02RSP DS    AL4                RESP
P0E02RS2 DS    AL4                RESP2
P0E02END EQU   *                  END MARKER
*
P0E02BYP_0682    DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*         BEC7ASOK.
*      * RETURN HERE AFTER HANDLING ASRA ABEND
PG_BEC5_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC7ASOK DS 0H
*             EXEC CICS SEND FROM(TEST4K) LENGTH(TEST4KL) END-EXEC.
*ZC    194         EXEC  CICS,SEND,FROM(TEST4K),LENGTH(TEST4KL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST4KL   SET LENGTH FROM LABEL
         LA    R0,TEST4K           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0698 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0698    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0698   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0698   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0698) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0698    DS 0H
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    195         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0402EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0402EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0402EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0402EDF_0711 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0402EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
P0402EDF_0711    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0711   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0711   EXIT IF NONE
* NOTALLOC, LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0711) ENTRYPOINT FOR IGNORE CONDITION
*
P0402BYP_0711    DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0711_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0711_01     EQU *
*      * TESTBEC7 WILL ABEND AEI0
*             EXEC CICS LINK PROGRAM('TESTBEC7') COMMAREA(ACOMM)
*ZC    197         EXEC  CICS,LINK,PROGRAM('TESTBEC7'),COMMAREA(ACOMM)
         LARL  R1,P0E02         ADDRESS SOURCE
         LARL  R15,P0E02        ADDRESS TARGET
         XC    0(P0E02END-P0E02,R15),0(R1) XC IT
         LARL  R1,=X'0E02'         ADDRESS SOURCE
         LARL  R15,P0E02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E02FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'TESTBEC7'         ADDRESS SOURCE
         LARL  R15,P0E02PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E02PGM,R15),0(R1) MVC IT
         LA    R0,ACOMM       R0=COMMAREA ADDRESS FROM LABEL
         LARL  R1,P0E02COM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,L'ACOMM     R0=IMPLIED LENGTH OF COMMAREA
         LARL  R1,P0E02CLN         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R1,P0E02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E02EDF_0727 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E02           R1=PARAMETER LIST
         LRL   R15,=V(LCL0E02)    R15=EXTERNAL LINK MODULE ADDRESS
P0E02EDF_0727    EQU *
         BALR  R14,R15            GO TO IT
         LARL  R1,P0E02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E02BYP_0727   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E02BYP_0727   EXIT IF NONE
* PGMIDERR, CHANNELERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E02BYP_0727) ENTRYPOINT FOR IGNORE CONDITION
*
P0E02BYP_0727    DS 0H
         MVC   EIBCALEN,DFHEICAL  RESTORE EIB COMMAREA LENGTH
         MVC   EIBPROG,TCTTERET   RESTORE EIBPROG
         MVC   TCTTEINV,DFHEIINV  RESTORE INVOKINGPROG FOR ASSIGN
         MVC   TCTTERET,DFHEIRET  RESTORE RETURNPROG FOR ASSIGN
*                       END-EXEC.
*      * RETURN HERE AFTER HANDLING AEI0 ABEND
*             EXEC CICS SEND FROM(TEST5K) LENGTH(TEST5KL) END-EXEC.
*ZC    200         EXEC  CICS,SEND,FROM(TEST5K),LENGTH(TEST5KL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST5KL   SET LENGTH FROM LABEL
         LA    R0,TEST5K           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0741 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0741    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0741   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0741   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0741) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0741    DS 0H
*             EXEC CICS HANDLE ABEND LABEL(BEC6ZZZZ) END-EXEC.
*ZC    201         EXEC  CICS,HANDLE,ABEND,LABEL(BEC6ZZZZ)
         LARL  R1,P0E0E         ADDRESS SOURCE
         LARL  R15,P0E0E        ADDRESS TARGET
         XC    0(P0E0EEND-P0E0E,R15),0(R1) XC IT
         LARL  R1,=X'0E0E'         ADDRESS SOURCE
         LARL  R15,P0E0EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0EFN,R15),0(R1) MVC IT
         LARL  R1,P0E0EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,PG_BEC6ZZZZ       R0=LABEL (COBOL)
         LARL  R1,P0E0ELAB         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0E0EREG       ADDRESS TARGET
         STM   R2,R13,0(R15)      SAVE CALLERS REGS
         LARL  R0,P0E0EEDF_0754 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0E)       R1=LCL MODULE PARAMETER LIST
P0E0EEDF_0754    DS 0H
         BAKR  0,R15              STACK REGS AND GO
*             EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
*ZC    202         EXEC  CICS,RECEIVE,INTO(RECAREA),LENGTH(RECLEN)
         LARL  R1,P0402         ADDRESS SOURCE
         LARL  R15,P0402        ADDRESS TARGET
         XC    0(P0402END-P0402,R15),0(R1) XC IT
         LARL  R1,=X'0402'         ADDRESS SOURCE
         LARL  R15,P0402FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0402FN,R15),0(R1) MVC IT
         LARL  R1,P0402EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0402TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0402EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0402EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0402EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R15,P0402ADB       ADDRESS TARGET
         MVC   0(4,R15),DFHEIAID  SET AID BLOCK ADDRESS
         LA    R0,RECAREA           R0=ADDRESS OF INTO
         LARL  R1,P0402INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'RECAREA         R0=LENGTH OF INTO
         LARL  R1,P0402INL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,RECLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0402LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0402HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R0,P0402EDF_0766 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0402EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0402)       R1=LCL MODULE PARAMETER LIST
P0402EDF_0766    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0402NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0402BYP_0766   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0402BYP_0766   EXIT IF NONE
* NOTALLOC, LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0402BYP_0766) ENTRYPOINT FOR IGNORE CONDITION
*
P0402BYP_0766    DS 0H
         LARL  R15,P0402AID       ADDRESS TARGET
         ICM   R0,15,0(R15)       ANY HANDLE AID ?
         JZ    P0402_0766_01  EXIT IF NONE
         BR    R0                 GO TO HANDLE AID ROUTINE
*
P0402_0766_01     EQU *
*      * TAKE THE DUMP, IGNORE THE ABEND
*             EXEC CICS ABEND ABCODE('ZZZZ') END-EXEC.
*ZC    204         EXEC  CICS,ABEND,ABCODE('ZZZZ')
         LARL  R1,P0E0C         ADDRESS SOURCE
         LARL  R15,P0E0C        ADDRESS TARGET
         XC    0(P0E0CEND-P0E0C,R15),0(R1) XC IT
         LARL  R1,=X'0E0C'         ADDRESS SOURCE
         LARL  R15,P0E0CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CFN,R15),0(R1) MVC IT
         LARL  R1,=CL4'ZZZZ'         ADDRESS SOURCE
         LARL  R15,CICS_ABEND_0782_ABCODE        ADDRESS TARGET AS LABEX
               L
         MVC   0(L'CICS_ABEND_0782_ABCODE,R15),0(R1) MVC IT
         LARL  R1,=CL4'ZZZZ'         ADDRESS SOURCE
         LARL  R15,P0E0CABC        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CABC,R15),0(R1) MVC IT
         LARL  R1,P0E0CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0E0CEDF_0782 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0C)       R1=LCL MODULE PARAMETER LIST
P0E0CEDF_0782    EQU *
         BAKR  0,R15              STACK REGS AND GO
         DC    X'0000'            ABEND POINT
         DC    X'FE'              FE=TAKE DUMP  FF=NODUMP
         DC    C'ABEND'           MARKER
CICS_ABEND_0782_ABCODE     DC CL4' ' ABEND CODE IF ANY
*
P0E0C    DS    0H
P0E0CFN  DS    XL2                FUNCTION CODE
P0E0CEIB DS    AL4                EIB
P0E0CTCT DS    AL4                TCTTE
P0E0CABC DS    CL4                ABCODE
P0E0CNOD DS    X                  FF=NODUMP
         DS    X
P0E0CCAN DS    X                  FF=CANCEL
         DS    X
P0E0CEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E0CEDS DS    AL4                DSA ADDRESS FOR EDF
P0E0CEDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E0CEDL DS    XL2                DSA LENGTH FOR EDF
P0E0CNED DS    X                  FF=NOEDF
         DS    X
P0E0CNOH DS    X                  FF=NOHANDLE
         DS    X
P0E0CRSP DS    AL4                RESP
P0E0CRS2 DS    AL4                RESP2
P0E0CEND EQU   *                  END MARKER
*
*      * AB4      EQU   *
*         AB4.
PG_BEC7ASOK_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_AB4   DS    0H
*             EXEC CICS RETURN END-EXEC.
*ZC    207         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,P0E08EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E08EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E08EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E08EDF_0799 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E08EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_0799 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
P0E08EDF_0799    EQU *
         BR    R15                GO TO IT
*
P0E08RTN_0799    EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_0799   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08CHN DS    CL16               CHANNEL NAME
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E08EDS DS    AL4                DSA ADDRESS FOR EDF
P0E08EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E08EDL DS    XL2                DSA LENGTH FOR EDF
P0E08NED DS    X                  FF=NOEDF
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
*
P0E08BYP_0799    DS 0H
*      * BEC7ASRA EQU   *
*         BEC7ASRA.
PG_AB4_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC7ASRA DS 0H
*             EXEC CICS SEND FROM(TEST4R) LENGTH(TEST4RL) END-EXEC.
*ZC    210         EXEC  CICS,SEND,FROM(TEST4R),LENGTH(TEST4RL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST4RL   SET LENGTH FROM LABEL
         LA    R0,TEST4R           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0812 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0812    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0812   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0812   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0812) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0812    DS 0H
*             GO TO BEC7ASOK.
*      * BEC6ZZZZ EQU   *
*ZC    211         GO    TO,BEC7ASOK
         J     PG_BEC7ASOK
*         BEC6ZZZZ.
PG_BEC7ASRA_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC6ZZZZ DS 0H
*             EXEC CICS SEND FROM(TEST6R) LENGTH(TEST6RL) END-EXEC.
*ZC    214         EXEC  CICS,SEND,FROM(TEST6R),LENGTH(TEST6RL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),TEST6RL   SET LENGTH FROM LABEL
         LA    R0,TEST6R           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0831 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0831    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0831   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0831   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0831) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0831    DS 0H
*      *  B     AB4                EXIT
*             GO TO AB4.
*ZC    216         GO    TO,AB4
         J     PG_AB4
PG_BEC6ZZZZ_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  RECAREA                        00000080 00000050 1   X   X(80)X
                      
*    01  RECLEN                         000000D0 00000002 1   H   9(4) X
                      
*    01  TEST1                          000000D2 0000003F 1   X        X
                      
*    02  ZC_FILLER_V1                   000000D2 00000004 1   X   X(4) X
                     X''C311C1D1'' 
*    02  ZC_FILLER_V2                   000000D6 0000003B 1   X   X(59)X
                     ''TESTBEC6 TEST 1:PRESS AID KEY TO HANDLE ASRA ABEX
               ND BY LABEL'' 
*    01  TEST1L                         00000111 00000002 1   H   9(4) X
                      
*    01  TEST1R                         00000113 00000063 1   X        X
                      
*    02  ZC_FILLER_V3                   00000113 00000004 1   X   X(4) X
                     X''C311C261'' 
*    02  ZC_FILLER_V4                   00000117 00000021 1   X   X(33)X
                     ''TESTBEC6 ASRA HANDLED OK BY LABEL'' 
*    02  ZC_FILLER_V5                   00000138 00000003 1   X   X(3) X
                     X''11C3F1'' 
*    02  ZC_FILLER_V6                   0000013B 0000003B 1   X   X(59)X
                     ''TESTBEC6 TEST 2:PRESS AID KEY TO HANDLE AEI0 ABEX
               ND BY LABEL'' 
*    01  TEST1RL                        00000176 00000002 1   H   9(4) X
                      
*    01  TEST2R                         00000178 00000065 1   X        X
                      
*    02  ZC_FILLER_V7                   00000178 00000004 1   X   X(4) X
                     X''C311C5C1'' 
*    02  ZC_FILLER_V8                   0000017C 00000021 1   X   X(33)X
                     ''TESTBEC6 AEI0 HANDLED OK BY LABEL'' 
*    02  ZC_FILLER_V9                   0000019D 00000003 1   X   X(3) X
                     X''11C6D1'' 
*    02  ZC_FILLER_V10                  000001A0 0000003D 1   X   X(61)X
                     ''TESTBEC6 TEST 3:PRESS AID KEY TO HANDLE ASRA ABEX
               ND BY PROGRAM'' 
*    01  TEST2RL                        000001DD 00000002 1   H   9(4) X
                      
*    01  TEST4                          000001DF 00000051 1   X        X
                      
*    02  ZC_FILLER_V11                  000001DF 00000004 1   X   X(4) X
                     X''C311C1D1'' 
*    02  ZC_FILLER_V12                  000001E3 0000004D 1   X   X(77)X
                     ''TESTBEC6 TEST 4:PRESS AID KEY TO HANDLE ASRA ABEX
               ND IN LINKED PROGRAM BY LABEL'' 
*    01  TEST4L                         00000230 00000002 1   H   9(4) X
                      
*    01  TEST4R                         00000232 00000031 1   X        X
                      
*    02  ZC_FILLER_V13                  00000232 00000004 1   X   X(4) X
                     X''C311C3F1'' 
*    02  ZC_FILLER_V14                  00000236 0000002D 1   X   X(45)X
                     ''TESTBEC6 ASRA IN TESTBEC7 HANDLED OK BY LABEL'' 
*    01  TEST4RL                        00000263 00000002 1   H   9(4) X
                      
*    01  TEST4K                         00000265 00000081 1   X        X
                      
*    02  ZC_FILLER_V15                  00000265 00000004 1   X   X(4) X
                     X''C311C5C1'' 
*    02  ZC_FILLER_V16                  00000269 0000002B 1   X   X(43)X
                     ''TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'' 
*    02  ZC_FILLER_V17                  00000294 00000003 1   X   X(3) X
                     X''11C6D1'' 
*    02  ZC_FILLER_V18                  00000297 0000004F 1   X   X(79)X
                     ''TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 ABEX
               ND IN LINKED PROGRAM BY PROGRAM'' 
*    01  TEST4KL                        000002E6 00000002 1   H   9(4) X
                      
*    01  TEST5K                         000002E8 00000069 1   X        X
                      
*    02  ZC_FILLER_V19                  000002E8 00000004 1   X   X(4) X
                     X''C3114AC1'' 
*    02  ZC_FILLER_V20                  000002EC 0000002B 1   X   X(43)X
                     ''TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'' 
*    02  ZC_FILLER_V21                  00000317 00000003 1   X   X(3) X
                     X''114BD1'' 
*    02  ZC_FILLER_V22                  0000031A 00000037 1   X   X(55)X
                     ''TESTBEC6 TEST6:PRESS AID KEY TO ABEND, HANDLED BX
               Y LABEL'' 
*    01  TEST5KL                        00000351 00000002 1   H   9(4) X
                      
*    01  TEST6R                         00000353 0000004C 1   X        X
                      
*    02  ZC_FILLER_V23                  00000353 00000004 1   X   X(4) X
                     X''C3114C61'' 
*    02  ZC_FILLER_V24                  00000357 00000027 1   X   X(39)X
                     ''TESTBEC6 ABEND ZZZZ HANDLED OK BY LABEL'' 
*    02  ZC_FILLER_V25                  0000037E 00000003 1   X   X(3) X
                     X''114FC1'' 
*    02  ZC_FILLER_V26                  00000381 0000001E 1   X   X(30)X
                     ''BEC5 ENDED OK, NOW PRESS CLEAR'' 
*    01  TEST6RL                        0000039F 00000002 1   H   9(4) X
                      
*    01  ACOMM                          000003A1 00000004 1   X   X(4) X
                     ''AEI0'' 
*    01  BADFLD1                        000003A5 00000002 1   H   9(4) X
                     0 
*    01  BADFLD2                        000003A5 00000002 1   P   9(3) X
                      
*    01  ZC_WS_ID1                      000003A7 00000007 1   X   X(7) X
                     ''ZCWSID1'' 
*    01  DEBUG_ITEM                     000003AE 00000058 1   X        X
                      
*    02  DEBUG_LINE                     000003AE 00000006 1   X   X(6) X
                      
*    02  ZC_FILLER_V27                  000003B4 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     000003B5 0000001E 1   X   X(30)X
                      
*    02  ZC_FILLER_V28                  000003D3 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    000003D4 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V29                  000003D8 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    000003D9 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V30                  000003DD 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    000003DE 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V31                  000003E2 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 000003E3 00000023 1   X   X(35)X
                      
*    01  TRUE                           00000406 00000001 1   Z   9    X
                     1 
*    01  FALSE                          00000407 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    00000408 00000002 1   H   9(4) X
                     0 
*    01  ZC_DFHCOMMAREA_PTR             0000040A 00000004 1   A        X
                      
*    01  ZC_DFHEIBLK_PTR                0000040E 00000004 1   A        X
                      
*    01  ZC_ZC_LK_END_PTR               00000412 00000004 1   A        X
                      
DFHEISTG DSECT 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RECAREA  DS  CL80
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RECLEN   DS  HL2
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST1    DS  0CL63
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V1 DC XL4'C311C1D1'
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V2 DC CL59'TESTBEC6 TEST 1:PRESS AID KEY TO HANDLE ASRA ABENDX
                BY LABEL'
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST1L   DS  HL2
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST1R   DS  0CL99
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V3 DC XL4'C311C261'
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V4 DC CL33'TESTBEC6 ASRA HANDLED OK BY LABEL'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V5 DC XL3'11C3F1'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V6 DC CL59'TESTBEC6 TEST 2:PRESS AID KEY TO HANDLE AEI0 ABENDX
                BY LABEL'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST1RL  DS  HL2
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST2R   DS  0CL101
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V7 DC XL4'C311C5C1'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V8 DC CL33'TESTBEC6 AEI0 HANDLED OK BY LABEL'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V9 DC XL3'11C6D1'
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V10 DC CL61'TESTBEC6 TEST 3:PRESS AID KEY TO HANDLE ASRA ABENX
               D BY PROGRAM'
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST2RL  DS  HL2
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST4    DS  0CL81
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V11 DC XL4'C311C1D1'
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V12 DC CL77'TESTBEC6 TEST 4:PRESS AID KEY TO HANDLE ASRA ABENX
               D IN LINKED PROGRAM BY LABEL'
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST4L   DS  HL2
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST4R   DS  0CL49
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V13 DC XL4'C311C3F1'
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V14 DC CL45'TESTBEC6 ASRA IN TESTBEC7 HANDLED OK BY LABEL'
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST4RL  DS  HL2
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST4K   DS  0CL129
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V15 DC XL4'C311C5C1'
ZC_WS_LOC_29 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V16 DC CL43'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'
ZC_WS_LOC_30 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V17 DC XL3'11C6D1'
ZC_WS_LOC_31 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V18 DC CL79'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 ABENX
               D IN LINKED PROGRAM BY PROGRAM'
ZC_WS_LOC_32 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST4KL  DS  HL2
ZC_WS_LOC_33 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST5K   DS  0CL105
ZC_WS_LOC_34 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V19 DC XL4'C3114AC1'
ZC_WS_LOC_35 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V20 DC CL43'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'
ZC_WS_LOC_36 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V21 DC XL3'114BD1'
ZC_WS_LOC_37 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V22 DC CL55'TESTBEC6 TEST6:PRESS AID KEY TO ABEND, HANDLED BYX
                LABEL'
ZC_WS_LOC_38 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST5KL  DS  HL2
ZC_WS_LOC_39 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST6R   DS  0CL76
ZC_WS_LOC_40 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V23 DC XL4'C3114C61'
ZC_WS_LOC_41 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V24 DC CL39'TESTBEC6 ABEND ZZZZ HANDLED OK BY LABEL'
ZC_WS_LOC_42 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V25 DC XL3'114FC1'
ZC_WS_LOC_43 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V26 DC CL30'BEC5 ENDED OK, NOW PRESS CLEAR'
ZC_WS_LOC_44 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TEST6RL  DS  HL2
ZC_WS_LOC_45 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ACOMM    DC CL4'AEI0'
ZC_WS_LOC_46 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BADFLD1  DC AL2(0)                  RPI 1065
         ORG   BADFLD1  START REDEFINE
ZC_WS_LOC_47 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BADFLD2  DS  PL2
ZC_WS_LOC_48 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID1 DC CL7'ZCWSID1'
ZC_WS_LOC_71 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_72 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_73 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V27 DC CL1' '
ZC_WS_LOC_74 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_75 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V28 DC CL1' '
ZC_WS_LOC_76 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_77 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V29 DC CL1' '
ZC_WS_LOC_78 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_79 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V30 DC CL1' '
ZC_WS_LOC_80 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_81 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V31 DC CL1' '
ZC_WS_LOC_82 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_83 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_84 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_85 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
ZC_WS_LOC_86 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHCOMMAREA_PTR DS AL4
ZC_WS_LOC_87 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHEIBLK_PTR DS AL4
ZC_WS_LOC_88 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_ZC_LK_END_PTR DS AL4
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  DFHCOMMAREA                    00000000 00000054 1   X        X
                      
*    01  DFHEIBLK                       00000000 00000054 1   X        X
                      
*    02  EIBHEAD                        00000000 00000008 1   X   X(8) X
                      
*    02  EIBTIME                        00000008 00000004 1   P   9(7) X
                      
*    02  EIBDATE                        0000000C 00000004 1   P   9(7) X
                      
*    02  EIBTRNID                       00000010 00000004 1   X   X(4) X
                      
*    02  EIBTASKN                       00000014 00000004 1   P   9(7) X
                      
*    02  EIBTRMID                       00000018 00000004 1   X   X(4) X
                      
*    02  FILLER                         0000001C 00000002 1   X   X(2) X
                      
*    02  EIBCPOSN                       0000001E 00000002 1   H   9(4) X
                      
*    02  EIBCALEN                       00000020 00000002 1   H   9(4) X
                      
*    02  EIBAID                         00000022 00000001 1   X   X    X
                      
*    02  EIBFN                          00000023 00000002 1   H   9(4) X
                      
*    02  EIBRCODE                       00000025 00000006 1   X   X(6) X
                      
*    02  EIBREQID                       0000002B 00000008 1   X   X(8) X
                      
*    02  EIBDS                          00000033 00000008 1   X   X(8) X
                      
*    02  EIBRSRCE                       0000003B 00000008 1   X   X(8) X
                      
*    02  EIBRESP                        00000043 00000004 1   F   9(9) X
                      
*    02  EIBRESP2                       00000047 00000004 1   F   9(9) X
                      
*    02  EIBPROG                        0000004B 00000008 1   X   X(8) X
                      
*    02  EIBDTFRM                       00000053 00000001 1   X   X    X
                      
*    01  ZC_LK_END                      00000000 00000001 1   X   X    X
                      
DFHEISTG DSECT 
DFHCOMMAREA_DSECT DSECT 
ZC_LK_LOC_49 EQU *-DFHCOMMAREA CHECK &SYM_NAME(&I) LK LOC
DFHCOMMAREA DS 0CL84
DFHEIBLK_DSECT DSECT 
ZC_LK_LOC_50 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
DFHEIBLK DS  0CL84
ZC_LK_LOC_51 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBHEAD  DS  CL8
ZC_LK_LOC_52 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTIME  DS  PL4
ZC_LK_LOC_53 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDATE  DS  PL4
ZC_LK_LOC_54 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRNID DS  CL4
ZC_LK_LOC_55 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTASKN DS  PL4
ZC_LK_LOC_56 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRMID DS  CL4
ZC_LK_LOC_57 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
         DS  CL2
ZC_LK_LOC_58 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCPOSN DS  HL2
ZC_LK_LOC_59 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCALEN DS  HL2
ZC_LK_LOC_60 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBAID   DS  CL1
ZC_LK_LOC_61 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBFN    DS  HL2
ZC_LK_LOC_62 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRCODE DS  CL6
ZC_LK_LOC_63 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBREQID DS  CL8
ZC_LK_LOC_64 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDS    DS  CL8
ZC_LK_LOC_65 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRSRCE DS  CL8
ZC_LK_LOC_66 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP  DS  FL4
ZC_LK_LOC_67 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP2 DS  FL4
ZC_LK_LOC_68 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBPROG  DS  CL8
ZC_LK_LOC_69 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDTFRM DS  CL1
ZC_LK_END_DSECT DSECT 
ZC_LK_LOC_70 EQU *-ZC_LK_END CHECK &SYM_NAME(&I) LK LOC
ZC_LK_END DS CL1
DFHEISTG DSECT 
ZC_WS_DIFF EQU  *-ZC_WS-1046  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 88'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 9'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT 
         ORG 
DFHEIEND EQU   *
         END 
