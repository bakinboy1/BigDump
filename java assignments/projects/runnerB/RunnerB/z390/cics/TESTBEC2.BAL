*    ZCOBOL PGM='cics\TESTBEC2' VER=V1.5.06 05/21/12 13:47:21 
*    ZCOBOL OPTIONS=(CICS) 
         COPY  TESTBEC2_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST BED 2 (COBOL)
*      *    TESTBED3 HAS BEEN LEFT AS ASM TO PROVE LINKAGE
*      *    LINKED-TO FROM TESTBEC1
*      *    DISPLAYS ANOTHER QUOTE
*      *    IF A COMMAREA IS PASSED, ANOTHER QUOTE IS DISPLAYED DEPENDIX
               NG
*      *    ON COMMAREA PASSED
*      *    XCTL TO TESTBED3 FOR FINAL QUOTE
*      *    RETURN TO TESTBEC1
*         PROGRAM-ID. TESTBEC2.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT 
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEPCT DS    AL4         ADDRESS OF DFHPCT
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           CEDF INTERCEPT INDICATOR
*                             00='BEFORE'
*                             FE='AFTER' LINK/XCTL/RETURN FAIL
*                             FF='AFTER'
TCTTEEDL DS    X           CEDF LINKAGE INDICATOR
*                             00=NORMAL LINKAGE
*                             FE=SPECIAL LINKAGE
*                             FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
TCTTECHN DS    CL16        PASSED CHANNEL NAME
TCTTECAQ DS    AL4         ANCHOR FOR CHANNEL CHAIN
TCTTETKN DS    XL4         TOKEN FOR STARTBROWSE CONTAINER
TCTTECHW DS    AL4         ADDRESS OF CHWA (STARTBROWSE CONTAINER)
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0     EQU 0
R1     EQU 1
R2     EQU 2
R3     EQU 3
R4     EQU 4
R5     EQU 5
R6     EQU 6
R7     EQU 7
R8     EQU 8
R9     EQU 9
R10    EQU 10
R11    EQU 11
R12    EQU 12
R13    EQU 13
R14    EQU 14
R15    EQU 15
TESTBEC2 CSECT 
*            R1 >>> A(EIB,COMMAREA)
*            R2 >>> P0E02 (LINK) OR P0E04 (XCTL) PARMS
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         L     R2,0(R2)           R2=P0E02/P0E04 PARM POINTER
         STRL  R2,CICS_EIENT_0007_PARMPNTR SAVE IT
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
         LR    R2,R1              R2=SAVE USER PARM POINTER
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0007_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0007_NOSAVE     EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         IILF  R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH RPI 1181
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0007_NOSAVE2 EXIT IF IT IS
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
CICS_EIENT_0007_NOSAVE2     EQU *
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0007_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        NEW PARM POSITION FOR ZCOBOL
CICS_EIENT_0007_01     DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
         MVC   DFHEICHN,TCTTECHN  SET CHANNEL FOR ASSIGN
*
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         JNE   CICS_EIENT_0007_NOEDFA EXIT IF NOT
* PROGRAM INITIATION
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'FE'     SET SPECIAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
         J     CICS_EIENT_0007_NOEDFA EXIT
CICS_EIENT_0007_PARMPNTR     DS AL4 SAVE P0E02/P0E04 PARM POINTER
*
CICS_EIENT_0007_NOEDFA     DS 0H
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBEC2'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'05/21/12'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'13.47'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0017_EOT-*+1)/2*2
         DC    AL2(WTO#0017_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0017_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0018_EOT-*+1)/2*2
         DC    AL2(WTO#0018_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0018_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
DFHEISTG DSECT 
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEICHN DS    CL16 CHANNEL FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
         PRINT DATA
*         WORKING-STORAGE SECTION.
*         01 SENDLNS1.
*            02 FILLER PIC X      VALUE X'C3'.
*            02 FILLER PIC X(3)   VALUE X'114DF1'.
*            02 FILLER PIC X(55)  VALUE 'How sour sweet music is'.
*            02 FILLER PIC X(3)   VALUE X'114FC1'.
*            02 FILLER PIC X(55)  VALUE
*                          'When time is broke and no proportion kept'.
*            02 FILLER PIC X(3)   VALUE X'1150D1'.
*            02 FILLER PIC X(55)  VALUE
*                          'So is it in the music of men''s lives'.
*            02 FILLER PIC X(3)   VALUE X'11D161'.
*            02 FILLER PIC X(55)  VALUE 'END'.
*         01 SENDLNS2.
*            02 FILLER PIC X      VALUE X'C3'.
*            02 FILLER PIC X(3)   VALUE X'11D2F1'.
*            02 FILLER PIC X(55)  VALUE
*               'This blessed plot, this earth, this realm, this EnglanX
               d'.
*            02 FILLER PIC X(3)   VALUE X'11D4C1'.
*            02 FILLER PIC X(55)  VALUE 'END'.
*         01 SENDLNS3.
*            02 FILLER PIC X      VALUE X'C3'.
*            02 FILLER PIC X(3)   VALUE X'11D5D1'.
*            02 FILLER PIC X(55)  VALUE 'How beauteous mankind is!'.
*            02 FILLER PIC X(3)   VALUE X'11D661'.
*            02 FILLER PIC X(55)  VALUE
*               'O brave new world, that hath such people in''t!'.
*            02 FILLER PIC X(3)   VALUE X'11D7F1'.
*            02 FILLER PIC X(55)  VALUE 'END'.
*         LINKAGE SECTION.
*         01  DFHCOMMAREA.
*             02  INCOMM   PIC X(6).
*         PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBEC2 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         MVI   ZC_FILLER_V1,X'C3'
         LARL  ZC_R1,=XL4'114DF1'
          MVC   ZC_FILLER_V2,1(ZC_R1)
         LARL  ZC_R1,=CL56'How sour sweet music is'
          MVC   ZC_FILLER_V3,0(ZC_R1)
         LARL  ZC_R1,=XL4'114FC1'
          MVC   ZC_FILLER_V4,1(ZC_R1)
         LARL  ZC_R1,=CL56'When time is broke and no proportion kept'
          MVC   ZC_FILLER_V5,0(ZC_R1)
         LARL  ZC_R1,=XL4'1150D1'
          MVC   ZC_FILLER_V6,1(ZC_R1)
         LARL  ZC_R1,=CL56'So is it in the music of men''s lives'
          MVC   ZC_FILLER_V7,0(ZC_R1)
         LARL  ZC_R1,=XL4'11D161'
          MVC   ZC_FILLER_V8,1(ZC_R1)
         LARL  ZC_R1,=CL56'END'
          MVC   ZC_FILLER_V9,0(ZC_R1)
         MVI   ZC_FILLER_V10,X'C3'
         LARL  ZC_R1,=XL4'11D2F1'
          MVC   ZC_FILLER_V11,1(ZC_R1)
         LARL  ZC_R1,=CL56'This blessed plot, this earth, this realm, tX
               his England'
          MVC   ZC_FILLER_V12,0(ZC_R1)
         LARL  ZC_R1,=XL4'11D4C1'
          MVC   ZC_FILLER_V13,1(ZC_R1)
         LARL  ZC_R1,=CL56'END'
          MVC   ZC_FILLER_V14,0(ZC_R1)
         MVI   ZC_FILLER_V15,X'C3'
         LARL  ZC_R1,=XL4'11D5D1'
          MVC   ZC_FILLER_V16,1(ZC_R1)
         LARL  ZC_R1,=CL56'How beauteous mankind is!'
          MVC   ZC_FILLER_V17,0(ZC_R1)
         LARL  ZC_R1,=XL4'11D661'
          MVC   ZC_FILLER_V18,1(ZC_R1)
         LARL  ZC_R1,=CL56'O brave new world, that hath such people in'X
               't!'
          MVC   ZC_FILLER_V19,0(ZC_R1)
         LARL  ZC_R1,=XL4'11D7F1'
          MVC   ZC_FILLER_V20,1(ZC_R1)
         LARL  ZC_R1,=CL56'END'
          MVC   ZC_FILLER_V21,0(ZC_R1)
         LARL  ZC_R1,=CL8'ZCWSID1'
          MVC   ZC_WS_ID1,0(ZC_R1)
         MVI   ZC_FILLER_V22,C' '
         MVI   ZC_FILLER_V23,C' '
         MVI   ZC_FILLER_V24,C' '
         MVI   ZC_FILLER_V25,C' '
         MVI   ZC_FILLER_V26,C' '
          MVI   TRUE,C'1'
          MVI   FALSE,C'0'
          MVHHI RETURN_CODE,0
*
*      *  MVC   SENDLNS1(LINE1END),LINE1 MESSAGE
*             EXEC CICS SEND FROM(SENDLNS1) LENGTH(233) END-EXEC.
*ZC     85         EXEC  CICS,SEND,FROM(SENDLNS1),LENGTH(233)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(233)         ADDRESS SOURCE
         LARL  R15,P0404LEN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404LEN,R15),0(R1) MVC IT
         LA    R0,SENDLNS1           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0299 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0299    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0299   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0299   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0299) ENTRYPOINT FOR IGNORE CONDITION
*
         J     P0404BYP_0299   EXIT
*
P0404    DS    0H
P0404FN  DS    XL2                FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    XL2                LENGTH
P0404EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0404EDS DS    AL4                DSA ADDRESS FOR EDF
P0404EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0404EDL DS    XL2                DSA LENGTH FOR EDF
P0404NED DS    X                  FF=NOEDF
         DS    X
P0404NOH DS    X                  FF=NOHANDLE
         DS    X
P0404RSP DS    AL4                RESP
P0404RS2 DS    AL4                RESP2
P0404END EQU   *                  END MARKER
*
P0404BYP_0299    DS 0H
*      *  ICM   R4,15,DFHEICAP     ANY COMMAREA ?
*      *  BNZ   TRYCOMM1           EXIT IF THERE IS
*             IF EIBCALEN = 0 THEN EXEC CICS RETURN END-EXEC
*ZC     88         IF    EIBCALEN,=,0,THEN
         LH    0,EIBCALEN
         CHI   0,0
         BRC   15-ZC_EQ,PG_IF_1_1
*ZC     88         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,P0E08EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E08EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E08EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E08EDF_0320 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E08EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_0320 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
P0E08EDF_0320    EQU *
         BR    R15                GO TO IT
*
P0E08RTN_0320    EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_0320   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08CHN DS    CL16               CHANNEL NAME
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E08EDS DS    AL4                DSA ADDRESS FOR EDF
P0E08EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E08EDL DS    XL2                DSA LENGTH FOR EDF
P0E08NED DS    X                  FF=NOEDF
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
*
P0E08BYP_0320    DS 0H
*             ELSE
*      *  TRYCOMM1 EQU   *
*      *  CLC   0(6,R4),=C'QUOTE2' IS IT QUOTE 2 ?
*      *  BNE   TRYCOMM2           EXIT IF NOT
*ZC     93         ELSE
         J     PG_IF_1_E
PG_IF_1_1    DS    0H  &TYPE
*             IF INCOMM = 'QUOTE2' THEN
*      *  MVC   SENDLNS2(LINE2END),LINE2 MESSAGE
*ZC     93         IF    INCOMM,=,'QUOTE2',THEN
         L     ZC_R5,ZC_DFHCOMMAREA_PTR
         USING DFHCOMMAREA_DSECT,ZC_R5
         LARL  ZC_R1,=CL6'QUOTE2'
         CLC   INCOMM,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_2_1
*                EXEC CICS SEND FROM(SENDLNS2) LENGTH(117) END-EXEC
*ZC     95         EXEC  CICS,SEND,FROM(SENDLNS2),LENGTH(117)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(117)         ADDRESS SOURCE
         LARL  R15,P0404LEN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404LEN,R15),0(R1) MVC IT
         LA    R0,SENDLNS2           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0340 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0340    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0340   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0340   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0340) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0340    DS 0H
*                EXEC CICS RETURN END-EXEC
*ZC     96         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,P0E08EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E08EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E08EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E08EDF_0353 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E08EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_0353 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
P0E08EDF_0353    EQU *
         BR    R15                GO TO IT
*
P0E08RTN_0353    EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_0353   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08BYP_0353    DS 0H
*             ELSE
*             IF INCOMM = 'QUOTE3' THEN
*ZC     98         ELSE
         J     PG_IF_2_E
PG_IF_2_1    DS    0H  &TYPE
         DROP     ZC_R5
*      *  TRYCOMM2 EQU   *
*      *  CLC   0(6,R4),=C'QUOTE3' IS IT QUOTE 3 ?
*      *  BNE   ABORT              EXIT IF NOT
*      *  MVC   SENDLNS3(LINE3END),LINE3 MESSAGE
*ZC     98         IF    INCOMM,=,'QUOTE3',THEN
         L     ZC_R5,ZC_DFHCOMMAREA_PTR
         USING DFHCOMMAREA_DSECT,ZC_R5
         LARL  ZC_R1,=CL6'QUOTE3'
         CLC   INCOMM,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_3_1
*                EXEC CICS SEND FROM(SENDLNS3) LENGTH(174) END-EXEC
*      * XCTL WITH NO COMMAREA TO TESTBED3 FOR THE NEXT QUOTE
*      * CONTROL WILL RETURN TO TESTBEC1
*ZC    103         EXEC  CICS,SEND,FROM(SENDLNS3),LENGTH(174)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R1,=AL2(174)         ADDRESS SOURCE
         LARL  R15,P0404LEN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404LEN,R15),0(R1) MVC IT
         LA    R0,SENDLNS3           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0373 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0373    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0373   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0373   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0373) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0373    DS 0H
*                EXEC CICS XCTL PROGRAM('TESTBED3') END-EXEC
*ZC    108         EXEC  CICS,XCTL,PROGRAM('TESTBED3')
         LARL  R1,P0E04         ADDRESS SOURCE
         LARL  R15,P0E04        ADDRESS TARGET
         XC    0(P0E04END-P0E04,R15),0(R1) XC IT
         LARL  R1,=X'0E04'         ADDRESS SOURCE
         LARL  R15,P0E04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E04FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'TESTBED3'         ADDRESS SOURCE
         LARL  R15,P0E04PGM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E04PGM,R15),0(R1) MVC IT
         LARL  R1,P0E04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E04EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E04EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E04EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E04EDF_0386 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E04           R1=PARAMETER LIST
         LRL   R15,=V(LCL0E04)    R15=EXTERNAL XCTL MODULE ADDRESS
P0E04EDF_0386    EQU *
         BALR  R14,R15            GO TO IT
         LARL  R1,P0E04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0E04BYP_0386   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E04BYP_0386   EXIT IF NONE
* PGMIDERR, CHANNELERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0E04BYP_0386) ENTRYPOINT FOR IGNORE CONDITION
*
P0E04    DS    0H
P0E04FN  DS    XL2                FUNCTION CODE
P0E04PGM DS    CL8                PROGRAM
P0E04EIB DS    AL4                EIB
P0E04COM DS    AL4                COMMAREA ADDRESS
P0E04CLN DS    XL2                COMMAREA LENGTH
P0E04CHN DS    CL16               CHANNEL NAME
P0E04EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E04EDS DS    AL4                DSA ADDRESS FOR EDF
P0E04EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E04EDL DS    XL2                DSA LENGTH FOR EDF
P0E04NED DS    X                  FF=NOEDF
         DS    X
P0E04NOH DS    X                  FF=NOHANDLE
         DS    X
P0E04RSP DS    AL4                RESP
P0E04RS2 DS    AL4                RESP2
P0E04END EQU   *                  END MARKER
*
P0E04BYP_0386    DS 0H
*             ELSE
*      * ABORT    ABEND 999,DUMP
*ZC    111         ELSE
         J     PG_IF_3_E
PG_IF_3_1    DS    0H  &TYPE
         DROP     ZC_R5
*                EXEC CICS ABEND ABCODE(' 999') END-EXEC.
*ZC    111         EXEC  CICS,ABEND,ABCODE(' 999')
         LARL  R1,P0E0C         ADDRESS SOURCE
         LARL  R15,P0E0C        ADDRESS TARGET
         XC    0(P0E0CEND-P0E0C,R15),0(R1) XC IT
         LARL  R1,=X'0E0C'         ADDRESS SOURCE
         LARL  R15,P0E0CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CFN,R15),0(R1) MVC IT
         LARL  R1,=CL4' 999'         ADDRESS SOURCE
         LARL  R15,CICS_ABEND_0403_ABCODE        ADDRESS TARGET AS LABEX
               L
         MVC   0(L'CICS_ABEND_0403_ABCODE,R15),0(R1) MVC IT
         LARL  R1,=CL4' 999'         ADDRESS SOURCE
         LARL  R15,P0E0CABC        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CABC,R15),0(R1) MVC IT
         LARL  R1,P0E0CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0E0CEDF_0403 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0C)       R1=LCL MODULE PARAMETER LIST
P0E0CEDF_0403    EQU *
         BAKR  0,R15              STACK REGS AND GO
         DC    X'0000'            ABEND POINT
         DC    X'FE'              FE=TAKE DUMP  FF=NODUMP
         DC    C'ABEND'           MARKER
CICS_ABEND_0403_ABCODE     DC CL4' ' ABEND CODE IF ANY
*
P0E0C    DS    0H
P0E0CFN  DS    XL2                FUNCTION CODE
P0E0CEIB DS    AL4                EIB
P0E0CTCT DS    AL4                TCTTE
P0E0CABC DS    CL4                ABCODE
P0E0CNOD DS    X                  FF=NODUMP
         DS    X
P0E0CCAN DS    X                  FF=CANCEL
         DS    X
P0E0CEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E0CEDS DS    AL4                DSA ADDRESS FOR EDF
P0E0CEDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E0CEDL DS    XL2                DSA LENGTH FOR EDF
P0E0CNED DS    X                  FF=NOEDF
         DS    X
P0E0CNOH DS    X                  FF=NOHANDLE
         DS    X
P0E0CRSP DS    AL4                RESP
P0E0CRS2 DS    AL4                RESP2
P0E0CEND EQU   *                  END MARKER
*
PG_IF_3_E    DS    0H  &TYPE
PG_IF_2_E    DS    0H  &TYPE
PG_IF_1_E    DS    0H  &TYPE
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  SENDLNS1                       00000080 000000E9 1   X        X
                      
*    02  ZC_FILLER_V1                   00000080 00000001 1   X   X    X
                     X''C3'' 
*    02  ZC_FILLER_V2                   00000081 00000003 1   X   X(3) X
                     X''114DF1'' 
*    02  ZC_FILLER_V3                   00000084 00000037 1   X   X(55)X
                     ''How sour sweet music is'' 
*    02  ZC_FILLER_V4                   000000BB 00000003 1   X   X(3) X
                     X''114FC1'' 
*    02  ZC_FILLER_V5                   000000BE 00000037 1   X   X(55)X
                     ''When time is broke and no proportion kept'' 
*    02  ZC_FILLER_V6                   000000F5 00000003 1   X   X(3) X
                     X''1150D1'' 
*    02  ZC_FILLER_V7                   000000F8 00000037 1   X   X(55)X
                     ''So is it in the music of men''''s lives'' 
*    02  ZC_FILLER_V8                   0000012F 00000003 1   X   X(3) X
                     X''11D161'' 
*    02  ZC_FILLER_V9                   00000132 00000037 1   X   X(55)X
                     ''END'' 
*    01  SENDLNS2                       00000169 00000075 1   X        X
                      
*    02  ZC_FILLER_V10                  00000169 00000001 1   X   X    X
                     X''C3'' 
*    02  ZC_FILLER_V11                  0000016A 00000003 1   X   X(3) X
                     X''11D2F1'' 
*    02  ZC_FILLER_V12                  0000016D 00000037 1   X   X(55)X
                     ''This blessed plot, this earth, this realm, this X
               England'' 
*    02  ZC_FILLER_V13                  000001A4 00000003 1   X   X(3) X
                     X''11D4C1'' 
*    02  ZC_FILLER_V14                  000001A7 00000037 1   X   X(55)X
                     ''END'' 
*    01  SENDLNS3                       000001DE 000000AF 1   X        X
                      
*    02  ZC_FILLER_V15                  000001DE 00000001 1   X   X    X
                     X''C3'' 
*    02  ZC_FILLER_V16                  000001DF 00000003 1   X   X(3) X
                     X''11D5D1'' 
*    02  ZC_FILLER_V17                  000001E2 00000037 1   X   X(55)X
                     ''How beauteous mankind is!'' 
*    02  ZC_FILLER_V18                  00000219 00000003 1   X   X(3) X
                     X''11D661'' 
*    02  ZC_FILLER_V19                  0000021C 00000037 1   X   X(55)X
                     ''O brave new world, that hath such people in''''tX
               !'' 
*    02  ZC_FILLER_V20                  00000253 00000003 1   X   X(3) X
                     X''11D7F1'' 
*    02  ZC_FILLER_V21                  00000256 00000037 1   X   X(55)X
                     ''END'' 
*    01  ZC_WS_ID1                      0000028D 00000007 1   X   X(7) X
                     ''ZCWSID1'' 
*    01  DEBUG_ITEM                     00000294 00000058 1   X        X
                      
*    02  DEBUG_LINE                     00000294 00000006 1   X   X(6) X
                      
*    02  ZC_FILLER_V22                  0000029A 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     0000029B 0000001E 1   X   X(30)X
                      
*    02  ZC_FILLER_V23                  000002B9 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    000002BA 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V24                  000002BE 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    000002BF 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V25                  000002C3 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    000002C4 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V26                  000002C8 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 000002C9 00000023 1   X   X(35)X
                      
*    01  TRUE                           000002EC 00000001 1   Z   9    X
                     1 
*    01  FALSE                          000002ED 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    000002EE 00000002 1   H   9(4) X
                     0 
*    01  ZC_DFHCOMMAREA_PTR             000002F0 00000004 1   A        X
                      
*    01  ZC_DFHEIBLK_PTR                000002F4 00000004 1   A        X
                      
*    01  ZC_ZC_LK_END_PTR               000002F8 00000004 1   A        X
                      
DFHEISTG DSECT 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SENDLNS1 DS  0CL233
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V1 DC XL1'C3'
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V2 DC XL3'114DF1'
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V3 DC CL55'How sour sweet music is'
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V4 DC XL3'114FC1'
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V5 DC CL55'When time is broke and no proportion kept'
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V6 DC XL3'1150D1'
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V7 DC CL55'So is it in the music of men''s lives'
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V8 DC XL3'11D161'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V9 DC CL55'END'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SENDLNS2 DS  0CL117
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V10 DC XL1'C3'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V11 DC XL3'11D2F1'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V12 DC CL55'This blessed plot, this earth, this realm, this EX
               ngland'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V13 DC XL3'11D4C1'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V14 DC CL55'END'
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SENDLNS3 DS  0CL175
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V15 DC XL1'C3'
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V16 DC XL3'11D5D1'
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V17 DC CL55'How beauteous mankind is!'
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V18 DC XL3'11D661'
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V19 DC CL55'O brave new world, that hath such people in''t!'
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V20 DC XL3'11D7F1'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V21 DC CL55'END'
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID1 DC CL7'ZCWSID1'
ZC_WS_LOC_49 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_50 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_51 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V22 DC CL1' '
ZC_WS_LOC_52 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_53 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V23 DC CL1' '
ZC_WS_LOC_54 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_55 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V24 DC CL1' '
ZC_WS_LOC_56 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_57 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V25 DC CL1' '
ZC_WS_LOC_58 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_59 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V26 DC CL1' '
ZC_WS_LOC_60 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_61 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_62 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_63 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
ZC_WS_LOC_64 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHCOMMAREA_PTR DS AL4
ZC_WS_LOC_65 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHEIBLK_PTR DS AL4
ZC_WS_LOC_66 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_ZC_LK_END_PTR DS AL4
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  DFHCOMMAREA                    00000000 00000006 1   X        X
                      
*    02  INCOMM                         00000000 00000006 1   X   X(6) X
                      
*    01  DFHEIBLK                       00000000 00000054 1   X        X
                      
*    02  EIBHEAD                        00000000 00000008 1   X   X(8) X
                      
*    02  EIBTIME                        00000008 00000004 1   P   9(7) X
                      
*    02  EIBDATE                        0000000C 00000004 1   P   9(7) X
                      
*    02  EIBTRNID                       00000010 00000004 1   X   X(4) X
                      
*    02  EIBTASKN                       00000014 00000004 1   P   9(7) X
                      
*    02  EIBTRMID                       00000018 00000004 1   X   X(4) X
                      
*    02  FILLER                         0000001C 00000002 1   X   X(2) X
                      
*    02  EIBCPOSN                       0000001E 00000002 1   H   9(4) X
                      
*    02  EIBCALEN                       00000020 00000002 1   H   9(4) X
                      
*    02  EIBAID                         00000022 00000001 1   X   X    X
                      
*    02  EIBFN                          00000023 00000002 1   H   9(4) X
                      
*    02  EIBRCODE                       00000025 00000006 1   X   X(6) X
                      
*    02  EIBREQID                       0000002B 00000008 1   X   X(8) X
                      
*    02  EIBDS                          00000033 00000008 1   X   X(8) X
                      
*    02  EIBRSRCE                       0000003B 00000008 1   X   X(8) X
                      
*    02  EIBRESP                        00000043 00000004 1   F   9(9) X
                      
*    02  EIBRESP2                       00000047 00000004 1   F   9(9) X
                      
*    02  EIBPROG                        0000004B 00000008 1   X   X(8) X
                      
*    02  EIBDTFRM                       00000053 00000001 1   X   X    X
                      
*    01  ZC_LK_END                      00000000 00000001 1   X   X    X
                      
DFHEISTG DSECT 
DFHCOMMAREA_DSECT DSECT 
ZC_LK_LOC_26 EQU *-DFHCOMMAREA CHECK &SYM_NAME(&I) LK LOC
DFHCOMMAREA DS 0CL6
ZC_LK_LOC_27 EQU *-DFHCOMMAREA CHECK &SYM_NAME(&I) LK LOC
INCOMM   DS  CL6
DFHEIBLK_DSECT DSECT 
ZC_LK_LOC_28 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
DFHEIBLK DS  0CL84
ZC_LK_LOC_29 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBHEAD  DS  CL8
ZC_LK_LOC_30 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTIME  DS  PL4
ZC_LK_LOC_31 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDATE  DS  PL4
ZC_LK_LOC_32 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRNID DS  CL4
ZC_LK_LOC_33 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTASKN DS  PL4
ZC_LK_LOC_34 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRMID DS  CL4
ZC_LK_LOC_35 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
         DS  CL2
ZC_LK_LOC_36 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCPOSN DS  HL2
ZC_LK_LOC_37 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCALEN DS  HL2
ZC_LK_LOC_38 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBAID   DS  CL1
ZC_LK_LOC_39 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBFN    DS  HL2
ZC_LK_LOC_40 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRCODE DS  CL6
ZC_LK_LOC_41 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBREQID DS  CL8
ZC_LK_LOC_42 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDS    DS  CL8
ZC_LK_LOC_43 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRSRCE DS  CL8
ZC_LK_LOC_44 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP  DS  FL4
ZC_LK_LOC_45 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP2 DS  FL4
ZC_LK_LOC_46 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBPROG  DS  CL8
ZC_LK_LOC_47 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDTFRM DS  CL1
ZC_LK_END_DSECT DSECT 
ZC_LK_LOC_48 EQU *-ZC_LK_END CHECK &SYM_NAME(&I) LK LOC
ZC_LK_END DS CL1
DFHEISTG DSECT 
ZC_WS_DIFF EQU  *-ZC_WS-764  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 66'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT 
         ORG 
DFHEIEND EQU   *
         END 
