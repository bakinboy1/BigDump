         ZCOBOL PGM='zcobol\demo\UPROGRAM',VER=V1.5.06,CDATE=05/21/12,CX
               TIME=14:08:20,OPTIONS=(SYSCPY(+zcobol+zcobol\z390),NOTIMX
               E,GUAM)
         COPY  UPROGRAM_ZC_LABELS.CPY
*        IDENTIFICATION DIVISION.
         IDENTIFICATION DIVISION
*        PROGRAM-ID.  COPYFILE.
         PROGRAM_ID COPYFILE
*        ENVIRONMENT DIVISION.
         ENVIRONMENT DIVISION
*        INPUT-OUTPUT SECTION.
         INPUT_OUTPUT SECTION
* TTTTTT     SELECT LINE-FILE
* TTTTTT         ASSIGN TO 'ZCOBOL\DEMO\UPROGRAM.LIN'
* TTTTTT         ORGANIZATION IS LINE SEQUENTIAL.
         SELECT LINE_FILE,ASSIGN,TO,'ZCOBOL\DEMO\UPROGRAM.LIN',ORGANIZAX
               TION,IS,LINE,SEQUENTIAL
* TTTTTT     SELECT MZ-ARRAY-FILE
* TTTTTT         ASSIGN TO 'ZCOBOL\DEMO\MZARRAY.CBL'
* TTTTTT         ORGANIZATION IS LINE SEQUENTIAL.
         SELECT MZ_ARRAY_FILE,ASSIGN,TO,'ZCOBOL\DEMO\MZARRAY.CBL',ORGANX
               IZATION,IS,LINE,SEQUENTIAL
*            SELECT IN-FILE
*                ASSIGN TO 'ZCOBOL\DEMO\COPYFILE.IN'
*                ORGANIZATION IS LINE SEQUENTIAL.
         SELECT IN_FILE,ASSIGN,TO,'ZCOBOL\DEMO\COPYFILE.IN',ORGANIZATIOX
               N,IS,LINE,SEQUENTIAL
*            SELECT OUT-FILE
*                ASSIGN TO 'ZCOBOL\DEMO\COPYFILE.OUT'
*                ORGANIZATION IS LINE SEQUENTIAL.
         SELECT OUT_FILE,ASSIGN,TO,'ZCOBOL\DEMO\COPYFILE.OUT',ORGANIZATX
               ION,IS,LINE,SEQUENTIAL
*        DATA DIVISION.
         DATA  DIVISION
* TTTTTT FD  LINE-FILE
* TTTTTT     DATA RECORD IS LINE-RECORD.
         FD    LINE_FILE,DATA,RECORD,IS,LINE_RECORD
* TTTTTT 01  LINE-RECORD.
         WS      01,LINE_RECORD
* TTTTTT     03  LINE-LINE-NO          PIC X(06).
         WS        03,LINE_LINE_NO,PIC,X(06)
* TTTTTT     03  FILLER                PIC X(74).
         WS        03,FILLER,PIC,X(74)
* TTTTTT FD  MZ-ARRAY-FILE
* TTTTTT     DATA RECORD IS MZ-ARRAY-RECORD.
         FD    MZ_ARRAY_FILE,DATA,RECORD,IS,MZ_ARRAY_RECORD
* TTTTTT 01  MZ-ARRAY-RECORD           PIC X(80).
         WS      01,MZ_ARRAY_RECORD,PIC,X(80)
*        FD  IN-FILE
*            DATA RECORD IS IN-RECORD.
         FD    IN_FILE,DATA,RECORD,IS,IN_RECORD
*        01  IN-RECORD PIC X(80).
         WS      01,IN_RECORD,PIC,X(80)
*        FD  OUT-FILE
*            DATA RECORD IS OUT-RECORD.
         FD    OUT_FILE,DATA,RECORD,IS,OUT_RECORD
*        01  OUT-RECORD PIC X(80).
         WS      01,OUT_RECORD,PIC,X(80)
*        WORKING-STORAGE SECTION.
         WORKING_STORAGE SECTION
*        01  WS-LINE PIC X(80).
         WS      01,WS_LINE,PIC,X(80)
*        01  END-OF-FILE-FLAG PIC X VALUE 'F'.
         WS      01,END_OF_FILE_FLAG,PIC,X,VALUE,'F'
*        77  COUNT COMP-3 PIC S9(4) VALUE 0.
         WS      77,COUNT,COMP_3,PIC,S9(4),VALUE,0
* TTTTTT 01  D1 PIC X(52) VALUE
* TTTTTT       'U - Debugger for ZCOBOL by John Hennesy'.
         WS      01,D1,PIC,X(52),VALUE,'U - Debugger for ZCOBOL by JohnX
                Hennesy'
* TTTTTT 01  D2 PIC X(52) VALUE
* TTTTTT       'Enter - single step'.
         WS      01,D2,PIC,X(52),VALUE,'Enter - single step'
* TTTTTT 01  D3 PIC X(52) VALUE
* TTTTTT       'H     - Here'.
         WS      01,D3,PIC,X(52),VALUE,'H     - Here'
* TTTTTT 01  D4 PIC X(52) VALUE
* TTTTTT       'E     - Erase              - E nnnnnn'.
         WS      01,D4,PIC,X(52),VALUE,'E     - Erase              - E X
               nnnnnn'
* TTTTTT 01  D4B PIC X(52) VALUE
* TTTTTT       '                             E vvv...'.
         WS      01,D4B,PIC,X(52),VALUE,'                             EX
                vvv...'
* TTTTTT 01  D5 PIC X(52) VALUE
* TTTTTT       'M     - Monitor            - M vvv... (max 30 char)'.
         WS      01,D5,PIC,X(52),VALUE,'M     - Monitor            - M X
               vvv... (max 30 char)'
* TTTTTT 01  D6 PIC X(52) VALUE
* TTTTTT       '                             M         List variables'.
         WS      01,D6,PIC,X(52),VALUE,'                             M X
                       List variables'
* TTTTTT 01  D7 PIC X(52) VALUE
* TTTTTT       'B     - Break              - B nnnnnn'.
         WS      01,D7,PIC,X(52),VALUE,'B     - Break              - B X
               nnnnnn'
* TTTTTT 01  D8 PIC X(52) VALUE
* TTTTTT       '                             B         List lines'.
         WS      01,D8,PIC,X(52),VALUE,'                             B X
                       List lines'
* TTTTTT 01  D9 PIC X(52) VALUE
* TTTTTT       'G     - Go                 - G nnnnnn'.
         WS      01,D9,PIC,X(52),VALUE,'G     - Go                 - G X
               nnnnnn'
* TTTTTT 01  D9B PIC X(52) VALUE
* TTTTTT       '                             G vvv...'.
         WS      01,D9B,PIC,X(52),VALUE,'                             GX
                vvv...'
* TTTTTT 01  DA PIC X(52) VALUE
* TTTTTT       '                             G         Go next break'.
         WS      01,DA,PIC,X(52),VALUE,'                             G X
                       Go next break'
* TTTTTT 01  DB PIC X(52) VALUE
* TTTTTT       'W     - Working storage    - W         Show w/s'.
         WS      01,DB,PIC,X(52),VALUE,'W     - Working storage    - W X
                       Show w/s'
* TTTTTT 01  DC PIC X(52) VALUE
* TTTTTT       'P     - Procedure division - P         Show proc div'.
         WS      01,DC,PIC,X(52),VALUE,'P     - Procedure division - P X
                       Show proc div'
* TTTTTT 01  DD PIC X(52) VALUE
* TTTTTT       'D     - Display            - D vvv... (max 30 char)'.
         WS      01,DD,PIC,X(52),VALUE,'D     - Display            - D X
               vvv... (max 30 char)'
* TTTTTT 01  DE PIC X(52) VALUE
* TTTTTT       'X     - eXit               - X         Exit'.
         WS      01,DE,PIC,X(52),VALUE,'X     - eXit               - X X
                       Exit'
* TTTTTT 01  DF PIC X(52) VALUE
* TTTTTT       '+     - another screen     - +         of W or P'.
         WS      01,DF,PIC,X(52),VALUE,'+     - another screen     - + X
                       of W or P'
* TTTTTT 01  DG PIC X(52) VALUE
* TTTTTT       '?     - HELP'.
         WS      01,DG,PIC,X(52),VALUE,'?     - HELP'
* TTTTTT 01  DH PIC X(52) VALUE
* TTTTTT       'T     - Trace'.
         WS      01,DH,PIC,X(52),VALUE,'T     - Trace'
* TTTTTT 01  BREAKIT-ARRAY.
         WS      01,BREAKIT_ARRAY
* TTTTTT     03  BREAKIT-NUMBER OCCURS 9
* TTTTTT                               PIC X(06).
         WS        03,BREAKIT_NUMBER,OCCURS,9,PIC,X(06)
* TTTTTT 01  BUB                       PIC 9(06).
         WS      01,BUB,PIC,9(06)
* TTTTTT 01  BUB2                      PIC 9(06).
         WS      01,BUB2,PIC,9(06)
* TTTTTT 01  SIX-SPACES                PIC X(06) VALUE SPACES.
         WS      01,SIX_SPACES,PIC,X(06),VALUE,SPACES
* TTTTTT 01  SIX-LOW-VALUES            PIC X(06) VALUE LOW-VALUES.
         WS      01,SIX_LOW_VALUES,PIC,X(06),VALUE,LOW-VALUES
* TTTTTT 01  SIXCH                     PIC X(06).
         WS      01,SIXCH,PIC,X(06)
* TTTTTT 01  GOIT-FOUND                PIC X(01).
         WS      01,GOIT_FOUND,PIC,X(01)
* TTTTTT 01  MONITORIT-ARRAY.
         WS      01,MONITORIT_ARRAY
* TTTTTT     03  MONITORIT-ENTRY OCCURS 9.
         WS        03,MONITORIT_ENTRY,OCCURS,9
* TTTTTT         05  MONITORIT-VARIABLE
* TTTTTT                               PIC X(32).
         WS          05,MONITORIT_VARIABLE,PIC,X(32)
* TTTTTT         05  MONITORIT-FLAG    PIC X(01).
         WS          05,MONITORIT_FLAG,PIC,X(01)
* TTTTTT         05  MONITORIT-POINTER PIC 9(06).
         WS          05,MONITORIT_POINTER,PIC,9(06)
* TTTTTT         05  MONITORIT-LENGTH  PIC 9(06).
         WS          05,MONITORIT_LENGTH,PIC,9(06)
* TTTTTT         05  MONITORIT-SUB1    PIC X(30).
         WS          05,MONITORIT_SUB1,PIC,X(30)
* TTTTTT         05  MONITORIT-SUB2    PIC X(30).
         WS          05,MONITORIT_SUB2,PIC,X(30)
* TTTTTT         05  MONITORIT-SUB3    PIC X(30).
         WS          05,MONITORIT_SUB3,PIC,X(30)
* TTTTTT 01  MONITORIT-MAX             PIC 9(06) VALUE 1.
         WS      01,MONITORIT_MAX,PIC,9(06),VALUE,1
* TTTTTT 01  MONITORIT-CHUNK.
         WS      01,MONITORIT_CHUNK
* TTTTTT     03  MONITORIT-CHUNK-C     PIC X(01) OCCURS 60000.
         WS        03,MONITORIT_CHUNK_C,PIC,X(01),OCCURS,60000
* TTTTTT 01  MONITORIT-80              PIC X(80).
         WS      01,MONITORIT_80,PIC,X(80)
* TTTTTT 01  MONITORIT-SHORT           PIC X(30).
         WS      01,MONITORIT_SHORT,PIC,X(30)
* TTTTTT 01  EUB                       PIC 9(06).
         WS      01,EUB,PIC,9(06)
* TTTTTT 01  NUB                       PIC 9(06).
         WS      01,NUB,PIC,9(06)
* TTTTTT 01  NUB2                      PIC 9(06).
         WS      01,NUB2,PIC,9(06)
* TTTTTT 01  TH2-SPACES                PIC X(32) VALUE SPACES.
         WS      01,TH2_SPACES,PIC,X(32),VALUE,SPACES
* TTTTTT 01  TH2-LOW-VALUES            PIC X(32) VALUE LOW-VALUES.
         WS      01,TH2_LOW_VALUES,PIC,X(32),VALUE,LOW-VALUES
* TTTTTT 01  DUB                       PIC 9(06).
         WS      01,DUB,PIC,9(06)
* TTTTTT 01  MONITORIT-CHANGE          PIC X(01).
         WS      01,MONITORIT_CHANGE,PIC,X(01)
* TTTTTT 01  A-CHAR                    PIC X(01).
         WS      01,A_CHAR,PIC,X(01)
* TTTTTT 01  B-CHAR                    PIC X(01).
         WS      01,B_CHAR,PIC,X(01)
* TTTTTT 01  GOIT-OUTSTANDING          PIC X(01) VALUE 'N'.
         WS      01,GOIT_OUTSTANDING,PIC,X(01),VALUE,'N'
* TTTTTT 01  GOIT-NUMBER               PIC X(06).
         WS      01,GOIT_NUMBER,PIC,X(06)
* TTTTTT 01  WORKIT-END                PIC X(01).
         WS      01,WORKIT_END,PIC,X(01)
* TTTTTT 01  PROCIT-END                PIC X(01).
         WS      01,PROCIT_END,PIC,X(01)
* TTTTTT 01  PREV-COMMAND              PIC X(01).
         WS      01,PREV_COMMAND,PIC,X(01)
* TTTTTT 01  CARROTS                   PIC X(01).
         WS      01,CARROTS,PIC,X(01)
* TTTTTT 01  MUB2                      PIC 9(06).
         WS      01,MUB2,PIC,9(06)
* TTTTTT 01  MUB3                      PIC 9(06).
         WS      01,MUB3,PIC,9(06)
* TTTTTT 01  MUB4                      PIC 9(06).
         WS      01,MUB4,PIC,9(06)
* TTTTTT 01  LUMP.
         WS      01,LUMP
* TTTTT+     03  LUMP-C OCCURS 64000   PIC X(01).
         WS        03,LUMP_C,OCCURS,64000,PIC,X(01)
* TTTTTT 01  FILLER REDEFINES LUMP.
         WS      01,FILLER,REDEFINES,LUMP
* TTTTT+     03  LUMP-BLOCK OCCURS 2000 PIC X(32).
         WS        03,LUMP_BLOCK,OCCURS,2000,PIC,X(32)
* TTTTTT 01  LUMB                      PIC 9(06).
         WS      01,LUMB,PIC,9(06)
* TTTTTT 01  BLOC.
         WS      01,BLOC
* TTTTTT     03  BLOC-C OCCURS 32      PIC X(01).
         WS        03,BLOC_C,OCCURS,32,PIC,X(01)
* TTTTTT 01  BLOCH.
         WS      01,BLOCH
* TTTTTT     03  BLOCH-BI OCCURS 32.
         WS        03,BLOCH_BI,OCCURS,32
* TTTTTT         05  BLOCH-BI-LHS      PIC X(01).
         WS          05,BLOCH_BI_LHS,PIC,X(01)
* TTTTTT         05  BLOCH-BI-RHS      PIC X(01).
         WS          05,BLOCH_BI_RHS,PIC,X(01)
* TTTTTT 01  GUB                       PIC 9(06).
         WS      01,GUB,PIC,9(06)
* TTTTTT 01  HUB                       PIC 9(06).
         WS      01,HUB,PIC,9(06)
* TTTTTT 01  GUB2                      PIC 9(06).
         WS      01,GUB2,PIC,9(06)
* TTTTTT 01  BLOCG.
         WS      01,BLOCG
* TTTTTT     03  BLOCG-BI OCCURS 32.
         WS        03,BLOCG_BI,OCCURS,32
* TTTTTT         05  BLOCG-BI-LHS      PIC X(01).
         WS          05,BLOCG_BI_LHS,PIC,X(01)
* TTTTTT         05  BLOCG-BI-RHS      PIC X(01).
         WS          05,BLOCG_BI_RHS,PIC,X(01)
* TTTTTT 01  GUB3                      PIC 9(06).
         WS      01,GUB3,PIC,9(06)
* TTTTTT 01  GUB4                      PIC 9(06).
         WS      01,GUB4,PIC,9(06)
* TTTTTT 01  GUB5                      PIC 9(06).
         WS      01,GUB5,PIC,9(06)
* TTTTTT 01  GUB6                      PIC 9(06).
         WS      01,GUB6,PIC,9(06)
* TTTTTT 01  FLAGG                     PIC X(01).
         WS      01,FLAGG,PIC,X(01)
* TTTTTT 01  NINE-04-COMP              PIC 9(04) COMP.
         WS      01,NINE_04_COMP,PIC,9(04),COMP
* TTTTTT 01  FILLER REDEFINES NINE-04-COMP.
         WS      01,FILLER,REDEFINES,NINE_04_COMP
* TTTTTT     03  THE-1ST-CHAR          PIC X(01).
         WS        03,THE_1ST_CHAR,PIC,X(01)
* TTTTTT     03  THE-2ND-CHAR          PIC X(01).
         WS        03,THE_2ND_CHAR,PIC,X(01)
* TTTTTT 01  LHS                       PIC 9(03).
         WS      01,LHS,PIC,9(03)
* TTTTTT 01  RHS                       PIC 9(03).
         WS      01,RHS,PIC,9(03)
* TTTTTT 01  THE-ARRAY                 PIC X(16) VALUE '0123456789ABCDEX
               F'.
         WS      01,THE_ARRAY,PIC,X(16),VALUE,'0123456789ABCDEF'
* TTTTTT 01  FILLER REDEFINES THE-ARRAY.
         WS      01,FILLER,REDEFINES,THE_ARRAY
* TTTTTT     03  THE-ARRAY-C OCCURS 16 PIC X(01).
         WS        03,THE_ARRAY_C,OCCURS,16,PIC,X(01)
* TTTTTT 01  DISPLAYABLE               PIC X(01).
         WS      01,DISPLAYABLE,PIC,X(01)
* TTTTTT 01  NONDISPLAYABLE            PIC X(01).
         WS      01,NONDISPLAYABLE,PIC,X(01)
* TTTTTT 01  T-FIRST                   PIC X(01) VALUE SPACE.
         WS      01,T_FIRST,PIC,X(01),VALUE,SPACE
* TTTTTT 01  A-LINE                    PIC X(06).
         WS      01,A_LINE,PIC,X(06)
* TTTTTT 01  MUB                       PIC 9(06).
         WS      01,MUB,PIC,9(06)
* TTTTTT 01  THE-COMMAND.
         WS      01,THE_COMMAND
* TTTTTT     03  THE-COMMAND-1         PIC X(01).
         WS        03,THE_COMMAND_1,PIC,X(01)
* TTTTTT     03  FILLER                PIC X(01).
         WS        03,FILLER,PIC,X(01)
* TTTTTT     03  THE-COMMAND-3-32.
         WS        03,THE_COMMAND_3_32
* TTTTTT         05  THE-COMMAND-3-8   PIC X(06).
         WS          05,THE_COMMAND_3_8,PIC,X(06)
* TTTTTT         05  FILLER            PIC X(24).
         WS          05,FILLER,PIC,X(24)
* TTTTTT     03  FILLER                PIC X(148).
         WS        03,FILLER,PIC,X(148)
* TTTTTT 01  FILLER REDEFINES THE-COMMAND.
         WS      01,FILLER,REDEFINES,THE_COMMAND
* TTTTTT     03  THE-COMMAND-C OCCURS 180 PIC X(01).
         WS        03,THE_COMMAND_C,OCCURS,180,PIC,X(01)
* TTTTTT 01  THUB                      PIC 9(03).
         WS      01,THUB,PIC,9(03)
* TTTTTT 01  GLOB-COMMAND              PIC X(01).
         WS      01,GLOB_COMMAND,PIC,X(01)
* TTTTTT 01  GLOB-NAME.
         WS      01,GLOB_NAME
* TTTTTT     03  GLOB-NAME-C OCCURS 30 PIC X(01).
         WS        03,GLOB_NAME_C,OCCURS,30,PIC,X(01)
* TTTTTT 01  GLOB-SIX-DIGITS           PIC X(06).
         WS      01,GLOB_SIX_DIGITS,PIC,X(06)
* TTTTTT 01  GLUB1                     PIC 9(03).
         WS      01,GLUB1,PIC,9(03)
* TTTTTT 01  GLUB2                     PIC 9(03).
         WS      01,GLUB2,PIC,9(03)
* TTTTTT 01  GLUB3                     PIC 9(03).
         WS      01,GLUB3,PIC,9(03)
* TTTTTT 01  GLOB-SUB1                 PIC X(30).
         WS      01,GLOB_SUB1,PIC,X(30)
* TTTTTT 01  GLOB-SUB2                 PIC X(30).
         WS      01,GLOB_SUB2,PIC,X(30)
* TTTTTT 01  GLOB-SUB3                 PIC X(30).
         WS      01,GLOB_SUB3,PIC,X(30)
* TTTTTT 01  TEST-FIELD                PIC X(30).
         WS      01,TEST_FIELD,PIC,X(30)
* TTTTTT 01  FILLER REDEFINES TEST-FIELD.
         WS      01,FILLER,REDEFINES,TEST_FIELD
* TTTTTT     03  TEST-FIELD-C OCCURS 30 PIC X(01).
         WS        03,TEST_FIELD_C,OCCURS,30,PIC,X(01)
* TTTTTT 01  TEST-NAME                 PIC X(30).
         WS      01,TEST_NAME,PIC,X(30)
* TTTTTT 01  FUB                       PIC 9(02).
         WS      01,FUB,PIC,9(02)
* TTTTTT 01  FUB-NAME0                 PIC X(30).
         WS      01,FUB_NAME0,PIC,X(30)
* TTTTTT 01  FUB-NAME1                 PIC X(30).
         WS      01,FUB_NAME1,PIC,X(30)
* TTTTTT 01  FUB-NAME2                 PIC X(30).
         WS      01,FUB_NAME2,PIC,X(30)
* TTTTTT 01  FUB-NAME3                 PIC X(30).
         WS      01,FUB_NAME3,PIC,X(30)
* TTTTTT 01  FUB-NAME4                 PIC X(30).
         WS      01,FUB_NAME4,PIC,X(30)
* TTTTTT 01  FUB-NAME5                 PIC X(30).
         WS      01,FUB_NAME5,PIC,X(30)
* TTTTTT 01  FUB-NAME6                 PIC X(30).
         WS      01,FUB_NAME6,PIC,X(30)
* TTTTTT 01  LEN0                      PIC 9(02).
         WS      01,LEN0,PIC,9(02)
* TTTTTT 01  KEEP-LEN0                 PIC 9(02).
         WS      01,KEEP_LEN0,PIC,9(02)
* TTTTTT 01  LEN1                      PIC 9(02).
         WS      01,LEN1,PIC,9(02)
* TTTTTT 01  LEN2                      PIC 9(02).
         WS      01,LEN2,PIC,9(02)
* TTTTTT 01  LEN3                      PIC 9(02).
         WS      01,LEN3,PIC,9(02)
* TTTTTT 01  LEN4                      PIC 9(02).
         WS      01,LEN4,PIC,9(02)
* TTTTTT 01  LEN5                      PIC 9(02).
         WS      01,LEN5,PIC,9(02)
* TTTTTT 01  LEN6                      PIC 9(02).
         WS      01,LEN6,PIC,9(02)
* TTTTTT 01  THIRTY-SPACES             PIC X(30) VALUE SPACES.
         WS      01,THIRTY_SPACES,PIC,X(30),VALUE,SPACES
* TTTTTT 01  T-SERVICE.
         WS      01,T_SERVICE
* TTTTTT     03  T-PROG                PIC X(08).
         WS        03,T_PROG,PIC,X(08)
* TTTTTT     03  T-PARA                PIC X(30).
         WS        03,T_PARA,PIC,X(30)
* TTTTTT     03  T-LINE                PIC X(06).
*TTTTTT* AFTER T-SERVICE
*TTTTTT* BEGINNING AFTER T-SERVICE
         WS        03,T_LINE,PIC,X(06)
* TTTTTT 01  MZ-ARRAY.
         WS      01,MZ_ARRAY
* TTTTTT     03  MZ-ENTRY OCCURS 999.
         WS        03,MZ_ENTRY,OCCURS,999
* TTTTTT         05  MZ-LVL           PIC X(02).
         WS          05,MZ_LVL,PIC,X(02)
* TTTTTT         05  MZ-NAME          PIC X(30).
         WS          05,MZ_NAME,PIC,X(30)
* TTTTTT         05  MZ-ADDR          PIC 9(09).
         WS          05,MZ_ADDR,PIC,9(09)
* TTTTTT         05  MZ-LEN           PIC 9(09).
         WS          05,MZ_LEN,PIC,9(09)
* TTTTTT         05  MZ-DUP           PIC X(06).
         WS          05,MZ_DUP,PIC,X(06)
* TTTTTT         05  MZ-SUBS          PIC 9(01).
         WS          05,MZ_SUBS,PIC,9(01)
* TTTTTT         05  MZ-TYPE          PIC X(01).
         WS          05,MZ_TYPE,PIC,X(01)
* TTTTTT         05  MZ-PIC.
         WS          05,MZ_PIC
* TTTTTT             07  FILLER       PIC X(01).
         WS            07,FILLER,PIC,X(01)
* TTTTTT             07  MZ-PIC-2     PIC X(01).
         WS            07,MZ_PIC_2,PIC,X(01)
* TTTTTT             07  FILLER       PIC X(08).
         WS            07,FILLER,PIC,X(08)
* TTTTTT         05  MZ-SUBS-IDS OCCURS 3.
         WS          05,MZ_SUBS_IDS,OCCURS,3
* TTTTTT             07  MZ-SUBS-ID   PIC X(30).
         WS            07,MZ_SUBS_ID,PIC,X(30)
* TTTTTT 01  MZ-MAX                   PIC 9(03) VALUE 999.
         WS      01,MZ_MAX,PIC,9(03),VALUE,999
* TTTTTT 01  MZ-SUB                   PIC 9(03) VALUE 0.
         WS      01,MZ_SUB,PIC,9(03),VALUE,0
* TTTTTT 01  MZ-SUB2                  PIC 9(03).
         WS      01,MZ_SUB2,PIC,9(03)
* TTTTTT 01  MZ-SUB3                  PIC 9(03).
         WS      01,MZ_SUB3,PIC,9(03)
* TTTTTT 01  MZ-END-FILE-FLAG         PIC X(01).
         WS      01,MZ_END_FILE_FLAG,PIC,X(01)
* TTTTTT 01  A-NUMBER                  PIC X(06).
         WS      01,A_NUMBER,PIC,X(06)
* TTTTTT 01  B-NUMBER                  PIC X(06).
         WS      01,B_NUMBER,PIC,X(06)
* TTTTTT 01  LINE-COUNT                PIC 9(06) VALUE ZERO.
         WS      01,LINE_COUNT,PIC,9(06),VALUE,ZERO
* TTTTTT 01  LINE-COUNT2               PIC 9(06) VALUE ZERO.
         WS      01,LINE_COUNT2,PIC,9(06),VALUE,ZERO
* TTTTTT 01  LINE-ARRAY.
         WS      01,LINE_ARRAY
* TTTTTT     03  LINE-ENTRY OCCURS 999.
         WS        03,LINE_ENTRY,OCCURS,999
* TTTTTT         05  LINE-NUMBER       PIC X(06).
         WS          05,LINE_NUMBER,PIC,X(06)
* TTTTTT         05  LINE-ASTER        PIC X(01).
         WS          05,LINE_ASTER,PIC,X(01)
* TTTTTT         05  LINE-30           PIC X(30).
         WS          05,LINE_30,PIC,X(30)
* TTTTTT         05  FILLER            PIC X(35).
         WS          05,FILLER,PIC,X(35)
* TTTTTT 01  LUB                       PIC 9(06).
         WS      01,LUB,PIC,9(06)
* TTTTTT 01  LUB2                      PIC 9(06).
         WS      01,LUB2,PIC,9(06)
* TTTTTT 01  LUB-MAX                   PIC 9(06).
         WS      01,LUB_MAX,PIC,9(06)
* TTTTTT 01  LUB3                      PIC 9(06).
         WS      01,LUB3,PIC,9(06)
* TTTTTT 01  LUB4                      PIC 9(06).
         WS      01,LUB4,PIC,9(06)
* TTTTTT 01  ONECH                     PIC X(01).
         WS      01,ONECH,PIC,X(01)
* TTTTTT 01  THIRTYCH                  PIC X(30).
         WS      01,THIRTYCH,PIC,X(30)
* TTTTTT 01  PARA-FOUND                PIC X(01).
         WS      01,PARA_FOUND,PIC,X(01)
* TTTTTT 01  LINE-FILE-ENDED           PIC X(01).
         WS      01,LINE_FILE_ENDED,PIC,X(01)
* TTTTTT 01  MATCH-FOUND               PIC X(01).
         WS      01,MATCH_FOUND,PIC,X(01)
* TTTTTT 01  SCREEN-ARRAY.
         WS      01,SCREEN_ARRAY
* TTTTTT     03  SCREEN-ENTRY OCCURS 17.
         WS        03,SCREEN_ENTRY,OCCURS,17
* TTTTTT         05  SCREEN-NUMBER     PIC X(06).
         WS          05,SCREEN_NUMBER,PIC,X(06)
* TTTTTT         05  SCREEN-POINTER    PIC X(01).
         WS          05,SCREEN_POINTER,PIC,X(01)
* TTTTTT         05  SCREEN-REST       PIC X(66).
         WS          05,SCREEN_REST,PIC,X(66)
* TTTTTT 01  SCUB                      PIC 9(06).
         WS      01,SCUB,PIC,9(06)
* TTTTTT 01  SCREEN-FIRST              PIC 9(06).
         WS      01,SCREEN_FIRST,PIC,9(06)
* TTTTTT 01  SCUB2                     PIC 9(06).
         WS      01,SCUB2,PIC,9(06)
* TTTTTT 01  SCREEN-LAST               PIC 9(06).
         WS      01,SCREEN_LAST,PIC,9(06)
* TTTTTT 01  SCREEN-1ST-FLAG           PIC X(01).
         WS      01,SCREEN_1ST_FLAG,PIC,X(01)
* TTTTTT 01  LEFFED                    PIC X(06).
         WS      01,LEFFED,PIC,X(06)
* TTTTTT 01  RITE                      PIC X(06).
         WS      01,RITE,PIC,X(06)
* TTTTTT 01  SEVENT2                   PIC X(72).
         WS      01,SEVENT2,PIC,X(72)
* TTTTTT 01  THIRSTY.
         WS      01,THIRSTY
* TTTTTT     03  THIRSTY-C OCCURS 30   PIC X(01).
         WS        03,THIRSTY_C,OCCURS,30,PIC,X(01)
* TTTTTT 01  NINE06                    PIC 9(06).
         WS      01,NINE06,PIC,9(06)
* TTTTTT 01  DISP-SUB1                 PIC 9(06).
         WS      01,DISP_SUB1,PIC,9(06)
* TTTTTT 01  DISP-SUB2                 PIC 9(06).
         WS      01,DISP_SUB2,PIC,9(06)
* TTTTTT 01  DISP-SUB3                 PIC 9(06).
         WS      01,DISP_SUB3,PIC,9(06)
* TTTTTT 01  TEMP-SUB1                 PIC X(30).
         WS      01,TEMP_SUB1,PIC,X(30)
* TTTTTT 01  TEMP-NAME                 PIC X(30).
         WS      01,TEMP_NAME,PIC,X(30)
* TTTTTT 01  DIZPLAY                   PIC X(01).
         WS      01,DIZPLAY,PIC,X(01)
* TTTTTT 01  MONITORING                PIC X(01).
         WS      01,MONITORING,PIC,X(01)
* TTTTTT 01  GOIT-NAME                 PIC X(30).
         WS      01,GOIT_NAME,PIC,X(30)
* TTTTTT 01  GOIT-NAME-MATCHED         PIC X(01).
         WS      01,GOIT_NAME_MATCHED,PIC,X(01)
* TTTTTT 01  SUBS-NUM                  PIC 9(01).
         WS      01,SUBS_NUM,PIC,9(01)
* TTTTTT 01  TRACE-ARRAY.
         WS      01,TRACE_ARRAY
* TTTTTT     03  TRACE-ENTRY OCCURS 15 PIC X(30).
         WS        03,TRACE_ENTRY,OCCURS,15,PIC,X(30)
* TTTTTT 01  TUB                       PIC 9(06).
         WS      01,TUB,PIC,9(06)
* TTTTTT 01  TUB2                      PIC 9(06).
         WS      01,TUB2,PIC,9(06)
* TTTTTT 01  TUB3                      PIC 9(06).
         WS      01,TUB3,PIC,9(06)
* TTTTTT 01  XOK                       PIC X(01).
         WS      01,XOK,PIC,X(01)
*        LINKAGE SECTION.
         LINKAGE SECTION
         DATA  END
*        PROCEDURE DIVISION.
*ZC     14         PROCEDURE DIVISION
         PROCEDURE DIVISION
*        MAINLINE.
         LABEL MAINLINE
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    275 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    276 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000001' TO T-LINE
*ZC    277 TTTTTT  MOVE  '000001',TO,T_LINE
         MOVE  '000001',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    278 TTTTTT  PERFORM T
         PERFORM T
* 000001     DISPLAY 'COPYFILE STARTED'
*ZC    279 000001  DISPLAY 'COPYFILE STARTED'
         DISPLAY 'COPYFILE STARTED'
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    280 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    281 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000002' TO T-LINE
*ZC    282 TTTTTT  MOVE  '000002',TO,T_LINE
         MOVE  '000002',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    283 TTTTTT  PERFORM T
         PERFORM T
* 000002     PERFORM INITIALIZATION-ROUTINE.
*ZC    284 000002  PERFORM INITIALIZATION_ROUTINE
         PERFORM INITIALIZATION_ROUTINE
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    285 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    286 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000003' TO T-LINE
*ZC    287 TTTTTT  MOVE  '000003',TO,T_LINE
         MOVE  '000003',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    288 TTTTTT  PERFORM T
         PERFORM T
* 000003     PERFORM THE-LOOP
*                    UNTIL END-OF-FILE-FLAG = 'Y'.
*ZC    289 000003  PERFORM THE_LOOP,UNTIL,END_OF_FILE_FLAG,=,'Y'
         PERFORM THE_LOOP,UNTIL,END_OF_FILE_FLAG,=,'Y'
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    291 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    292 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000004' TO T-LINE
*ZC    293 TTTTTT  MOVE  '000004',TO,T_LINE
         MOVE  '000004',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    294 TTTTTT  PERFORM T
         PERFORM T
* 000004     PERFORM EOJ-ROUTINE.
*ZC    295 000004  PERFORM EOJ_ROUTINE
         PERFORM EOJ_ROUTINE
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    296 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    297 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000005' TO T-LINE
*ZC    298 TTTTTT  MOVE  '000005',TO,T_LINE
         MOVE  '000005',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    299 TTTTTT  PERFORM T
         PERFORM T
* 000005     DISPLAY 'COPYFILE RECORDS COPIED = ' COUNT.
*ZC    300 000005  DISPLAY 'COPYFILE RECORDS COPIED = ',COUNT
         DISPLAY 'COPYFILE RECORDS COPIED = ',COUNT
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    301 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    302 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000006' TO T-LINE
*ZC    303 TTTTTT  MOVE  '000006',TO,T_LINE
         MOVE  '000006',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    304 TTTTTT  PERFORM T
         PERFORM T
* 000006     IF COUNT NOT = 17
*ZC    305 000006  IF    COUNT,NOT,=,17
         IF    COUNT,NOT,=,17
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    306 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    307 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000007' TO T-LINE
*ZC    308 TTTTTT  MOVE  '000007',TO,T_LINE
         MOVE  '000007',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    309 TTTTTT  PERFORM T
         PERFORM T
* 000007        DISPLAY 'COPYFILE RECORD COUNT ERROR'
*ZC    310 000007  DISPLAY 'COPYFILE RECORD COUNT ERROR'
         DISPLAY 'COPYFILE RECORD COUNT ERROR'
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    311 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    312 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000008' TO T-LINE
*ZC    313 TTTTTT  MOVE  '000008',TO,T_LINE
         MOVE  '000008',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    314 TTTTTT  PERFORM T
         PERFORM T
* 000008        MOVE 16 TO RETURN-CODE
*ZC    315 000008  MOVE  16,TO,RETURN_CODE
         MOVE  16,TO,RETURN_CODE
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    316 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    317 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000009' TO T-LINE
*ZC    318 TTTTTT  MOVE  '000009',TO,T_LINE
         MOVE  '000009',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    319 TTTTTT  PERFORM T
         PERFORM T
* 000009        STOP RUN
*            END-IF
*ZC    320 000009  STOP  RUN
         STOP  RUN
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    322 TTTTTT  END_IF 
         END_IF 
*ZC    322 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    323 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000010' TO T-LINE
*ZC    324 TTTTTT  MOVE  '000010',TO,T_LINE
         MOVE  '000010',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    325 TTTTTT  PERFORM T
         PERFORM T
* 000010     DISPLAY 'COPYFILE ENDED OK'
*ZC    326 000010  DISPLAY 'COPYFILE ENDED OK'
         DISPLAY 'COPYFILE ENDED OK'
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    327 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'MAINLINE                      ' TO T-PARA
*ZC    328 TTTTTT  MOVE  'MAINLINE                      ',TO,T_PARA
         MOVE  'MAINLINE                      ',TO,T_PARA
* TTTTTT     MOVE '000011' TO T-LINE
*ZC    329 TTTTTT  MOVE  '000011',TO,T_LINE
         MOVE  '000011',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    330 TTTTTT  PERFORM T
         PERFORM T
* 000011     STOP RUN.
*ZC    331 000011  STOP  RUN
         STOP  RUN
         PERIOD 
*        INITIALIZATION-ROUTINE.
         LABEL INITIALIZATION_ROUTINE
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    333 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'INITIALIZATION-ROUTINE        ' TO T-PARA
*ZC    334 TTTTTT  MOVE  'INITIALIZATION-ROUTINE        ',TO,T_PARA
         MOVE  'INITIALIZATION-ROUTINE        ',TO,T_PARA
* TTTTTT     MOVE '000012' TO T-LINE
*ZC    335 TTTTTT  MOVE  '000012',TO,T_LINE
         MOVE  '000012',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    336 TTTTTT  PERFORM T
         PERFORM T
* 000012     OPEN INPUT IN-FILE.
*ZC    337 000012  OPEN  INPUT,IN_FILE
         OPEN  INPUT,IN_FILE
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    338 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'INITIALIZATION-ROUTINE        ' TO T-PARA
*ZC    339 TTTTTT  MOVE  'INITIALIZATION-ROUTINE        ',TO,T_PARA
         MOVE  'INITIALIZATION-ROUTINE        ',TO,T_PARA
* TTTTTT     MOVE '000013' TO T-LINE
*ZC    340 TTTTTT  MOVE  '000013',TO,T_LINE
         MOVE  '000013',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    341 TTTTTT  PERFORM T
         PERFORM T
* 000013     OPEN OUTPUT OUT-FILE.
*ZC    342 000013  OPEN  OUTPUT,OUT_FILE
         OPEN  OUTPUT,OUT_FILE
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    343 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'INITIALIZATION-ROUTINE        ' TO T-PARA
*ZC    344 TTTTTT  MOVE  'INITIALIZATION-ROUTINE        ',TO,T_PARA
         MOVE  'INITIALIZATION-ROUTINE        ',TO,T_PARA
* TTTTTT     MOVE '000014' TO T-LINE
*ZC    345 TTTTTT  MOVE  '000014',TO,T_LINE
         MOVE  '000014',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    346 TTTTTT  PERFORM T
         PERFORM T
* 000014     READ IN-FILE INTO OUT-RECORD
*ZC    348         READ  IN_FILE,INTO,OUT_RECORD,AT,END
         READ  IN_FILE,INTO,OUT_RECORD,AT,END
*                 AT END MOVE 'Y' TO END-OF-FILE-FLAG.
*ZC    348         MOVE  'Y',TO,END_OF_FILE_FLAG
         MOVE  'Y',TO,END_OF_FILE_FLAG
         PERIOD 
*        THE-LOOP.
         LABEL THE_LOOP
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    350 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'THE-LOOP                      ' TO T-PARA
*ZC    351 TTTTTT  MOVE  'THE-LOOP                      ',TO,T_PARA
         MOVE  'THE-LOOP                      ',TO,T_PARA
* TTTTTT     MOVE '000015' TO T-LINE
*ZC    352 TTTTTT  MOVE  '000015',TO,T_LINE
         MOVE  '000015',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    353 TTTTTT  PERFORM T
         PERFORM T
* 000015     WRITE OUT-RECORD.
*ZC    354 000015  WRITE OUT_RECORD
         WRITE OUT_RECORD
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    355 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'THE-LOOP                      ' TO T-PARA
*ZC    356 TTTTTT  MOVE  'THE-LOOP                      ',TO,T_PARA
         MOVE  'THE-LOOP                      ',TO,T_PARA
* TTTTTT     MOVE '000016' TO T-LINE
*ZC    357 TTTTTT  MOVE  '000016',TO,T_LINE
         MOVE  '000016',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    358 TTTTTT  PERFORM T
         PERFORM T
* 000016     ADD 1 TO COUNT
*ZC    359 000016  ADD   1,TO,COUNT
         ADD   1,TO,COUNT
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    360 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'THE-LOOP                      ' TO T-PARA
*ZC    361 TTTTTT  MOVE  'THE-LOOP                      ',TO,T_PARA
         MOVE  'THE-LOOP                      ',TO,T_PARA
* TTTTTT     MOVE '000017' TO T-LINE
*ZC    362 TTTTTT  MOVE  '000017',TO,T_LINE
         MOVE  '000017',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    363 TTTTTT  PERFORM T
         PERFORM T
* 000017     READ IN-FILE INTO OUT-RECORD
*ZC    365         READ  IN_FILE,INTO,OUT_RECORD,AT,END
         READ  IN_FILE,INTO,OUT_RECORD,AT,END
*                 AT END MOVE 'Y' TO END-OF-FILE-FLAG.
*ZC    365         MOVE  'Y',TO,END_OF_FILE_FLAG
         MOVE  'Y',TO,END_OF_FILE_FLAG
         PERIOD 
*        EOJ-ROUTINE.
         LABEL EOJ_ROUTINE
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    367 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'EOJ-ROUTINE                   ' TO T-PARA
*ZC    368 TTTTTT  MOVE  'EOJ-ROUTINE                   ',TO,T_PARA
         MOVE  'EOJ-ROUTINE                   ',TO,T_PARA
* TTTTTT     MOVE '000018' TO T-LINE
*ZC    369 TTTTTT  MOVE  '000018',TO,T_LINE
         MOVE  '000018',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    370 TTTTTT  PERFORM T
         PERFORM T
* 000018     CLOSE IN-FILE.
*ZC    371 000018  CLOSE IN_FILE
         CLOSE IN_FILE
         PERIOD 
* TTTTTT     MOVE 'COPYFILE' TO T-PROG
*ZC    372 TTTTTT  MOVE  'COPYFILE',TO,T_PROG
         MOVE  'COPYFILE',TO,T_PROG
* TTTTTT     MOVE 'EOJ-ROUTINE                   ' TO T-PARA
*ZC    373 TTTTTT  MOVE  'EOJ-ROUTINE                   ',TO,T_PARA
         MOVE  'EOJ-ROUTINE                   ',TO,T_PARA
* TTTTTT     MOVE '000019' TO T-LINE
*ZC    374 TTTTTT  MOVE  '000019',TO,T_LINE
         MOVE  '000019',TO,T_LINE
* TTTTTT     PERFORM T
*ZC    375 TTTTTT  PERFORM T
         PERFORM T
* 000019     CLOSE OUT-FILE.
* TTTTTT/
*ZC    376 000019  CLOSE OUT_FILE
         CLOSE OUT_FILE
         PERIOD 
* TTTTTT T SECTION.
         LABEL T,SECTION
* TTTTTT     MOVE T-LINE               TO A-LINE.
*ZC    379 TTTTTT  MOVE  T_LINE,TO,A_LINE
         MOVE  T_LINE,TO,A_LINE
         PERIOD 
* TTTTTT     IF T-FIRST = SPACE
*ZC    380 TTTTTT  IF    T_FIRST,=,SPACE
         IF    T_FIRST,=,SPACE
* TTTTTT         MOVE SPACES           TO BREAKIT-ARRAY
*ZC    381 TTTTTT  MOVE  SPACES,TO,BREAKIT_ARRAY
         MOVE  SPACES,TO,BREAKIT_ARRAY
* TTTTTT         MOVE SPACES           TO MONITORIT-ARRAY
*ZC    382 TTTTTT  MOVE  SPACES,TO,MONITORIT_ARRAY
         MOVE  SPACES,TO,MONITORIT_ARRAY
* TTTTTT         MOVE SPACES           TO TRACE-ARRAY
*ZC    383 TTTTTT  MOVE  SPACES,TO,TRACE_ARRAY
         MOVE  SPACES,TO,TRACE_ARRAY
* TTTTTT         MOVE 1                TO TUB
*ZC    384 TTTTTT  MOVE  1,TO,TUB
         MOVE  1,TO,TUB
* TTTTTT         MOVE ZEROES           TO BUB
*ZC    385 TTTTTT  MOVE  ZEROES,TO,BUB
         MOVE  ZEROES,TO,BUB
* TTTTTT         MOVE ZEROES           TO NUB
*ZC    386 TTTTTT  MOVE  ZEROES,TO,NUB
         MOVE  ZEROES,TO,NUB
* TTTTTT         MOVE 'N'              TO T-FIRST
* TTTTTT                                  MZ-END-FILE-FLAG
*ZC    387 TTTTTT  MOVE  'N',TO,T_FIRST,MZ_END_FILE_FLAG
         MOVE  'N',TO,T_FIRST,MZ_END_FILE_FLAG
* TTTTTT         OPEN INPUT MZ-ARRAY-FILE
*ZC    389 TTTTTT  OPEN  INPUT,MZ_ARRAY_FILE
         OPEN  INPUT,MZ_ARRAY_FILE
* TTTTTT         PERFORM VARYING MZ-SUB
* TTTTTT            FROM 1 BY 1
* TTTTTT           UNTIL MZ-END-FILE-FLAG = 'Y'
*ZC    390 TTTTTT  PERFORM VARYING,MZ_SUB,FROM,1,BY,1,UNTIL,MZ_END_FILEX
               _FLAG,=,'Y'
         PERFORM VARYING,MZ_SUB,FROM,1,BY,1,UNTIL,MZ_END_FILE_FLAG,=,'YX
               '
* TTTTTT               READ MZ-ARRAY-FILE AT END
*ZC    393 TTTTTT  READ  MZ_ARRAY_FILE,AT,END
         READ  MZ_ARRAY_FILE,AT,END
* TTTTTT                       MOVE 'Y' TO MZ-END-FILE-FLAG
* TTTTTT               END-READ
*ZC    394 TTTTTT  MOVE  'Y',TO,MZ_END_FILE_FLAG
         MOVE  'Y',TO,MZ_END_FILE_FLAG
* TTTTTT               IF MZ-END-FILE-FLAG = 'N'
*ZC    396 TTTTTT  END_READ 
         END_READ 
*ZC    396 TTTTTT  IF    MZ_END_FILE_FLAG,=,'N'
         IF    MZ_END_FILE_FLAG,=,'N'
* TTTTTT                   MOVE MZ-ARRAY-RECORD
* TTTTTT                     TO MZ-ENTRY (MZ-SUB)
* TTTTTT               END-IF
*ZC    397 TTTTTT  MOVE  MZ_ARRAY_RECORD,TO,MZ_ENTRY,'(',MZ_SUB,')'
         MOVE  MZ_ARRAY_RECORD,TO,MZ_ENTRY,'(',MZ_SUB,')'
* TTTTTT         END-PERFORM
*ZC    400 TTTTTT  END_IF 
         END_IF 
* TTTTTT         SUBTRACT 2          FROM MZ-SUB
*ZC    401 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC    401 TTTTTT  SUBTRACT 2,FROM,MZ_SUB
         SUBTRACT 2,FROM,MZ_SUB
* TTTTTT         CLOSE MZ-ARRAY-FILE
*ZC    402 TTTTTT  CLOSE MZ_ARRAY_FILE
         CLOSE MZ_ARRAY_FILE
* TTTTTT         OPEN INPUT LINE-FILE
*ZC    403 TTTTTT  OPEN  INPUT,LINE_FILE
         OPEN  INPUT,LINE_FILE
* TTTTTT         MOVE 'N'              TO LINE-FILE-ENDED
*ZC    404 TTTTTT  MOVE  'N',TO,LINE_FILE_ENDED
         MOVE  'N',TO,LINE_FILE_ENDED
* TTTTTT         PERFORM READ-LINE-FILE
* TTTTTT           UNTIL LINE-FILE-ENDED = 'Y'
*ZC    405 TTTTTT  PERFORM READ_LINE_FILE,UNTIL,LINE_FILE_ENDED,=,'Y'
         PERFORM READ_LINE_FILE,UNTIL,LINE_FILE_ENDED,=,'Y'
* TTTTTT         CLOSE LINE-FILE
*ZC    407 TTTTTT  CLOSE LINE_FILE
         CLOSE LINE_FILE
* TTTTTT         DISPLAY D1
*ZC    408 TTTTTT  DISPLAY D1
         DISPLAY D1
* TTTTTT         DISPLAY D2
*ZC    409 TTTTTT  DISPLAY D2
         DISPLAY D2
* TTTTTT         DISPLAY D3
*ZC    410 TTTTTT  DISPLAY D3
         DISPLAY D3
* TTTTTT         DISPLAY D4
*ZC    411 TTTTTT  DISPLAY D4
         DISPLAY D4
* TTTTTT         DISPLAY D4B
*ZC    412 TTTTTT  DISPLAY D4B
         DISPLAY D4B
* TTTTTT         DISPLAY D5
*ZC    413 TTTTTT  DISPLAY D5
         DISPLAY D5
* TTTTTT         DISPLAY D6
*ZC    414 TTTTTT  DISPLAY D6
         DISPLAY D6
* TTTTTT         DISPLAY D7
*ZC    415 TTTTTT  DISPLAY D7
         DISPLAY D7
* TTTTTT         DISPLAY D8
*ZC    416 TTTTTT  DISPLAY D8
         DISPLAY D8
* TTTTTT         DISPLAY D9
*ZC    417 TTTTTT  DISPLAY D9
         DISPLAY D9
* TTTTTT         DISPLAY D9B
*ZC    418 TTTTTT  DISPLAY D9B
         DISPLAY D9B
* TTTTTT         DISPLAY DA
*ZC    419 TTTTTT  DISPLAY DA
         DISPLAY DA
* TTTTTT         DISPLAY DB
*ZC    420 TTTTTT  DISPLAY DB
         DISPLAY DB
* TTTTTT         DISPLAY DC
*ZC    421 TTTTTT  DISPLAY DC
         DISPLAY DC
* TTTTTT         DISPLAY DD
*ZC    422 TTTTTT  DISPLAY DD
         DISPLAY DD
* TTTTTT         DISPLAY DE
*ZC    423 TTTTTT  DISPLAY DE
         DISPLAY DE
* TTTTTT         DISPLAY DF
*ZC    424 TTTTTT  DISPLAY DF
         DISPLAY DF
* TTTTTT         DISPLAY DG
*ZC    425 TTTTTT  DISPLAY DG
         DISPLAY DG
* TTTTTT         DISPLAY DH
*ZC    426 TTTTTT  DISPLAY DH
         DISPLAY DH
* TTTTTT         ACCEPT THE-COMMAND FROM CONSOLE
*ZC    427 TTTTTT  ACCEPT THE_COMMAND,FROM,CONSOLE
         ACCEPT THE_COMMAND,FROM,CONSOLE
* TTTTTT     END-IF.
*ZC    428 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF TRACE-ENTRY (TUB) = T-PARA
* TTTTTT         CONTINUE
*ZC    430 TTTTTT  IF    TRACE_ENTRY,'(',TUB,')',=,T_PARA
         IF    TRACE_ENTRY,'(',TUB,')',=,T_PARA
* TTTTTT     ELSE
*ZC    432 TTTTTT  CONTINUE 
         CONTINUE 
* TTTTTT         ADD 1                 TO TUB
*ZC    433 TTTTTT  ELSE  
         ELSE  
*ZC    433 TTTTTT  ADD   1,TO,TUB
         ADD   1,TO,TUB
* TTTTTT         IF TUB > 15
*ZC    434 TTTTTT  IF    TUB,>,15
         IF    TUB,>,15
* TTTTTT             MOVE 1            TO TUB
* TTTTTT         END-IF
*ZC    435 TTTTTT  MOVE  1,TO,TUB
         MOVE  1,TO,TUB
* TTTTTT         MOVE T-PARA           TO TRACE-ENTRY (TUB)
*ZC    437 TTTTTT  END_IF 
         END_IF 
*ZC    437 TTTTTT  MOVE  T_PARA,TO,TRACE_ENTRY,'(',TUB,')'
         MOVE  T_PARA,TO,TRACE_ENTRY,'(',TUB,')'
* TTTTTT     END-IF.
*ZC    438 TTTTTT  END_IF 
         END_IF 
* TTTTTT
* TTTTTT     PERFORM
         PERIOD 
* TTTTTT         VARYING LINE-COUNT2
* TTTTTT            FROM 1 BY 1
* TTTTTT           UNTIL LINE-NUMBER (LINE-COUNT2) = A-LINE
* TTTTTT              OR LINE-COUNT2 > LINE-COUNT
*ZC    441 TTTTTT  PERFORM VARYING,LINE_COUNT2,FROM,1,BY,1,UNTIL,LINE_NX
               UMBER,'(',LINE_COUNT2,')',=,A_LINE,OR,LINE_COUNT2,>,LINEX
               _COUNT
         PERFORM VARYING,LINE_COUNT2,FROM,1,BY,1,UNTIL,LINE_NUMBER,'(',X
               LINE_COUNT2,')',=,A_LINE,OR,LINE_COUNT2,>,LINE_COUNT
* TTTTTT     END-PERFORM.
*ZC    445 TTTTTT  END_PERFORM 
         END_PERFORM 
         PERIOD 
* TTTTTT     IF LINE-COUNT2 > LINE-COUNT
*ZC    446 TTTTTT  IF    LINE_COUNT2,>,LINE_COUNT
         IF    LINE_COUNT2,>,LINE_COUNT
* TTTTTT         DISPLAY 'T-LINE (' T-LINE ') NOT FOUND'
*ZC    447 TTTTTT  DISPLAY 'T-LINE (',T_LINE,') NOT FOUND'
         DISPLAY 'T-LINE (',T_LINE,') NOT FOUND'
* TTTTTT         STOP RUN
*ZC    448 TTTTTT  STOP  RUN
         STOP  RUN
* TTTTTT     END-IF.
*ZC    449 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     PERFORM MONITORIT-FIND
* TTTTTT         VARYING NUB2 FROM 1 BY 1 UNTIL NUB2 > NUB.
*ZC    450 TTTTTT  PERFORM MONITORIT_FIND,VARYING,NUB2,FROM,1,BY,1,UNTIX
               L,NUB2,>,NUB
         PERFORM MONITORIT_FIND,VARYING,NUB2,FROM,1,BY,1,UNTIL,NUB2,>,NX
               UB
         PERIOD 
* TTTTTT     IF GOIT-NAME-MATCHED = 'Y'
*ZC    452 TTTTTT  IF    GOIT_NAME_MATCHED,=,'Y'
         IF    GOIT_NAME_MATCHED,=,'Y'
* TTTTTT         MOVE 'N' TO GOIT-NAME-MATCHED
*ZC    453 TTTTTT  MOVE  'N',TO,GOIT_NAME_MATCHED
         MOVE  'N',TO,GOIT_NAME_MATCHED
* TTTTTT         MOVE SPACES TO GOIT-NAME
*ZC    454 TTTTTT  MOVE  SPACES,TO,GOIT_NAME
         MOVE  SPACES,TO,GOIT_NAME
* TTTTTT         MOVE 'N' TO GOIT-OUTSTANDING
*ZC    455 TTTTTT  MOVE  'N',TO,GOIT_OUTSTANDING
         MOVE  'N',TO,GOIT_OUTSTANDING
* TTTTTT     END-IF.
*ZC    456 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GOIT-OUTSTANDING = 'Y'
*ZC    458 TTTTTT  IF    GOIT_OUTSTANDING,=,'Y'
         IF    GOIT_OUTSTANDING,=,'Y'
* TTTTTT         IF GOIT-NUMBER = 'BREAK'
*ZC    459 TTTTTT  IF    GOIT_NUMBER,=,'BREAK'
         IF    GOIT_NUMBER,=,'BREAK'
* TTTTTT             PERFORM BREAKIT-FIND
*ZC    460 TTTTTT  PERFORM BREAKIT_FIND
         PERFORM BREAKIT_FIND
* TTTTTT             IF A-NUMBER
* TTTTTT              = B-NUMBER
*ZC    461 TTTTTT  IF    A_NUMBER,=,B_NUMBER
         IF    A_NUMBER,=,B_NUMBER
* TTTTTT                 MOVE 'N'          TO GOIT-OUTSTANDING
* TTTTTT             ELSE
*ZC    463 TTTTTT  MOVE  'N',TO,GOIT_OUTSTANDING
         MOVE  'N',TO,GOIT_OUTSTANDING
* TTTTTT                 GO TO T-EXIT
*ZC    465 TTTTTT  ELSE  
         ELSE  
* TTTTTT             END-IF
*ZC    465 TTTTTT  GO    TO,T_EXIT
         GO    TO,T_EXIT
* TTTTTT         ELSE
*ZC    467 TTTTTT  END_IF 
         END_IF 
* TTTTTT             IF GOIT-NUMBER = LINE-NUMBER (LINE-COUNT2)
*ZC    468 TTTTTT  ELSE  
         ELSE  
*ZC    468 TTTTTT  IF    GOIT_NUMBER,=,LINE_NUMBER,'(',LINE_COUNT2,')'
         IF    GOIT_NUMBER,=,LINE_NUMBER,'(',LINE_COUNT2,')'
* TTTTTT                 MOVE 'N'          TO GOIT-OUTSTANDING
* TTTTTT             ELSE
*ZC    469 TTTTTT  MOVE  'N',TO,GOIT_OUTSTANDING
         MOVE  'N',TO,GOIT_OUTSTANDING
* TTTTTT                 GO TO T-EXIT
*ZC    471 TTTTTT  ELSE  
         ELSE  
* TTTTTT             END-IF
*ZC    471 TTTTTT  GO    TO,T_EXIT
         GO    TO,T_EXIT
* TTTTTT         END-IF
*ZC    473 TTTTTT  END_IF 
         END_IF 
* TTTTTT     END-IF.
*ZC    474 TTTTTT  END_IF 
         END_IF 
*ZC    474 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     MOVE  1                   TO LUB.
*ZC    475 TTTTTT  MOVE  1,TO,LUB
         MOVE  1,TO,LUB
         PERIOD 
* TTTTTT     MOVE 'Y'                  TO SCREEN-1ST-FLAG.
*ZC    476 TTTTTT  MOVE  'Y',TO,SCREEN_1ST_FLAG
         MOVE  'Y',TO,SCREEN_1ST_FLAG
         PERIOD 
* TTTTTT     MOVE ZEROES               TO SCREEN-FIRST.
*ZC    477 TTTTTT  MOVE  ZEROES,TO,SCREEN_FIRST
         MOVE  ZEROES,TO,SCREEN_FIRST
         PERIOD 
* TTTTTT     MOVE ZEROES               TO SCREEN-LAST.
*ZC    478 TTTTTT  MOVE  ZEROES,TO,SCREEN_LAST
         MOVE  ZEROES,TO,SCREEN_LAST
         PERIOD 
* TTTTTT     MOVE SPACES               TO SCREEN-ARRAY.
*ZC    479 TTTTTT  MOVE  SPACES,TO,SCREEN_ARRAY
         MOVE  SPACES,TO,SCREEN_ARRAY
         PERIOD 
* TTTTTT     MOVE  15                  TO LUB-MAX.
*ZC    480 TTTTTT  MOVE  15,TO,LUB_MAX
         MOVE  15,TO,LUB_MAX
         PERIOD 
* TTTTTT     DISPLAY '*-------------------------------*'.
*ZC    481 TTTTTT  DISPLAY '*-------------------------------*'
         DISPLAY '*-------------------------------*'
         PERIOD 
* TTTTTT     DISPLAY 'PROG=' T-PROG ' PARA=' T-PARA.
*ZC    482 TTTTTT  DISPLAY 'PROG=',T_PROG,' PARA=',T_PARA
         DISPLAY 'PROG=',T_PROG,' PARA=',T_PARA
         PERIOD 
* TTTTTT     DISPLAY ' '.
*ZC    483 TTTTTT  DISPLAY ' '
         DISPLAY ' '
         PERIOD 
* TTTTTT     PERFORM SCREENIT.
*ZC    484 TTTTTT  PERFORM SCREENIT
         PERFORM SCREENIT
         PERIOD 
* TTTTTT     DISPLAY '*-------------------------------*'.
*ZC    485 TTTTTT  DISPLAY '*-------------------------------*'
         DISPLAY '*-------------------------------*'
         PERIOD 
* TTTTTT T-ACCEPT.
* TTTTTT
         LABEL T_ACCEPT
* TTTTTT     IF TRACE-ENTRY (TUB) = T-PARA
* TTTTTT         CONTINUE
*ZC    488 TTTTTT  IF    TRACE_ENTRY,'(',TUB,')',=,T_PARA
         IF    TRACE_ENTRY,'(',TUB,')',=,T_PARA
* TTTTTT     ELSE
*ZC    490 TTTTTT  CONTINUE 
         CONTINUE 
* TTTTTT         ADD 1                 TO TUB
*ZC    491 TTTTTT  ELSE  
         ELSE  
*ZC    491 TTTTTT  ADD   1,TO,TUB
         ADD   1,TO,TUB
* TTTTTT         IF TUB > 15
*ZC    492 TTTTTT  IF    TUB,>,15
         IF    TUB,>,15
* TTTTTT             MOVE 1            TO TUB
* TTTTTT         END-IF
*ZC    493 TTTTTT  MOVE  1,TO,TUB
         MOVE  1,TO,TUB
* TTTTTT         MOVE T-PARA           TO TRACE-ENTRY (TUB)
*ZC    495 TTTTTT  END_IF 
         END_IF 
*ZC    495 TTTTTT  MOVE  T_PARA,TO,TRACE_ENTRY,'(',TUB,')'
         MOVE  T_PARA,TO,TRACE_ENTRY,'(',TUB,')'
* TTTTTT     END-IF.
*ZC    496 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     ACCEPT THE-COMMAND      FROM CONSOLE.
*ZC    498 TTTTTT  ACCEPT THE_COMMAND,FROM,CONSOLE
         ACCEPT THE_COMMAND,FROM,CONSOLE
         PERIOD 
* TTTTTT     PERFORM LOWER-TO-UPPER.
*ZC    499 TTTTTT  PERFORM LOWER_TO_UPPER
         PERFORM LOWER_TO_UPPER
         PERIOD 
* TTTTTT     MOVE SPACES               TO GLOB-COMMAND
* TTTTTT                                  GLOB-NAME
* TTTTTT                                  GLOB-SUB1
* TTTTTT                                  GLOB-SUB2
* TTTTTT                                  GLOB-SUB3.
*ZC    500 TTTTTT  MOVE  SPACES,TO,GLOB_COMMAND,GLOB_NAME,GLOB_SUB1,GLOX
               B_SUB2,GLOB_SUB3
         MOVE  SPACES,TO,GLOB_COMMAND,GLOB_NAME,GLOB_SUB1,GLOB_SUB2,GLOX
               B_SUB3
         PERIOD 
* TTTTTT     MOVE THE-COMMAND-1        TO GLOB-COMMAND.
*ZC    505 TTTTTT  MOVE  THE_COMMAND_1,TO,GLOB_COMMAND
         MOVE  THE_COMMAND_1,TO,GLOB_COMMAND
         PERIOD 
* TTTTTT     MOVE 2                    TO GLUB1.
*ZC    506 TTTTTT  MOVE  2,TO,GLUB1
         MOVE  2,TO,GLUB1
         PERIOD 
* TTTTTT TA1.
         LABEL TA1
* TTTTTT     ADD  1                    TO GLUB1.
*ZC    508 TTTTTT  ADD   1,TO,GLUB1
         ADD   1,TO,GLUB1
         PERIOD 
* TTTTTT     IF GLUB1 > 180
*ZC    509 TTTTTT  IF    GLUB1,>,180
         IF    GLUB1,>,180
* TTTTTT         GO TO TA2
*ZC    510 TTTTTT  GO    TO,TA2
         GO    TO,TA2
* TTTTTT     END-IF.
*ZC    511 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = SPACE
*ZC    512 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
         IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
* TTTTTT         GO TO TA2
*ZC    513 TTTTTT  GO    TO,TA2
         GO    TO,TA2
* TTTTTT     END-IF.
*ZC    514 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = '('
*ZC    515 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,'('
         IF    THE_COMMAND_C,'(',GLUB1,')',=,'('
* TTTTTT         GO TO TA2
*ZC    516 TTTTTT  GO    TO,TA2
         GO    TO,TA2
* TTTTTT     END-IF.
*ZC    517 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     GO TO TA1.
*ZC    518 TTTTTT  GO    TO,TA1
         GO    TO,TA1
         PERIOD 
* TTTTTT TA2.
         LABEL TA2
* TTTTTT     MOVE SPACES TO GLOB-NAME.
*ZC    520 TTTTTT  MOVE  SPACES,TO,GLOB_NAME
         MOVE  SPACES,TO,GLOB_NAME
         PERIOD 
* TTTTTT     IF GLUB1 NOT > 180
*ZC    521 TTTTTT  IF    GLUB1,NOT,>,180
         IF    GLUB1,NOT,>,180
* TTTTTT         MOVE SPACES TO GLOB-NAME
*ZC    522 TTTTTT  MOVE  SPACES,TO,GLOB_NAME
         MOVE  SPACES,TO,GLOB_NAME
* TTTTTT         SUBTRACT 3 FROM GLUB1 GIVING GLUB2
*ZC    523 TTTTTT  SUBTRACT 3,FROM,GLUB1,GIVING,GLUB2
         SUBTRACT 3,FROM,GLUB1,GIVING,GLUB2
* TTTTTT         MOVE THE-COMMAND (3:GLUB2)
* TTTTTT           TO GLOB-NAME
*ZC    524 TTTTTT  MOVE  THE_COMMAND,'(',3,:,GLUB2,')',TO,GLOB_NAME
         MOVE  THE_COMMAND,'(',3,:,GLUB2,')',TO,GLOB_NAME
* TTTTTT     END-IF.
*ZC    526 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF  GLOB-NAME (1:1) NOT GREATER THAN '9'
* TTTTTT     AND GLOB-NAME (1:1) NOT LESS    THAN '0'
*ZC    527 TTTTTT  IF    GLOB_NAME,'(',1,:,1,')',NOT,GREATER,THAN,'9',AX
               ND,GLOB_NAME,'(',1,:,1,')',NOT,LESS,THAN,'0'
         IF    GLOB_NAME,'(',1,:,1,')',NOT,GREATER,THAN,'9',AND,GLOB_NAX
               ME,'(',1,:,1,')',NOT,LESS,THAN,'0'
* TTTTTT         MOVE '000000' TO SIXCH
*ZC    529 TTTTTT  MOVE  '000000',TO,SIXCH
         MOVE  '000000',TO,SIXCH
* TTTTTT         COMPUTE GLUB3 = 7 - GLUB2
*ZC    530 TTTTTT  COMPUTE GLUB3,=,7,-,GLUB2
         COMPUTE GLUB3,=,7,-,GLUB2
* TTTTTT         MOVE GLOB-NAME (1:GLUB2)
* TTTTTT           TO SIXCH (GLUB3:GLUB2)
*ZC    531 TTTTTT  MOVE  GLOB_NAME,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3X
               ,:,GLUB2,')'
         MOVE  GLOB_NAME,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3,:,GLUB2,'X
               )'
* TTTTTT         MOVE SIXCH TO GLOB-NAME
*ZC    533 TTTTTT  MOVE  SIXCH,TO,GLOB_NAME
         MOVE  SIXCH,TO,GLOB_NAME
* TTTTTT     END-IF.
*ZC    534 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT TA3.
         LABEL TA3
* TTTTTT     ADD 1 TO GLUB1
*ZC    536 TTTTTT  ADD   1,TO,GLUB1
         ADD   1,TO,GLUB1
* TTTTTT     IF GLUB1 > 180
*ZC    537 TTTTTT  IF    GLUB1,>,180
         IF    GLUB1,>,180
* TTTTTT         GO TO TA4
*ZC    538 TTTTTT  GO    TO,TA4
         GO    TO,TA4
* TTTTTT     END-IF.
*ZC    539 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (THE-COMMAND-C (GLUB1) NOT < 'A'
* TTTTTT         AND
* TTTTTT         THE-COMMAND-C (GLUB1) NOT > 'Z')
*ZC    540 TTTTTT  IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'A',AND,X
               THE_COMMAND_C,'(',GLUB1,')',NOT,>,'Z',')'
         IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'A',AND,THE_COMMANX
               D_C,'(',GLUB1,')',NOT,>,'Z',')'
* TTTTTT             GO TO TA4
*ZC    543 TTTTTT  GO    TO,TA4
         GO    TO,TA4
* TTTTTT     END-IF.
*ZC    544 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (THE-COMMAND-C (GLUB1) NOT < '0'
* TTTTTT         AND
* TTTTTT         THE-COMMAND-C (GLUB1) NOT > '9')
*ZC    545 TTTTTT  IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'0',AND,X
               THE_COMMAND_C,'(',GLUB1,')',NOT,>,'9',')'
         IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'0',AND,THE_COMMANX
               D_C,'(',GLUB1,')',NOT,>,'9',')'
* TTTTTT             GO TO TA4
*ZC    548 TTTTTT  GO    TO,TA4
         GO    TO,TA4
* TTTTTT     END-IF.
*ZC    549 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     GO TO TA3.
*ZC    550 TTTTTT  GO    TO,TA3
         GO    TO,TA3
         PERIOD 
* TTTTTT TA4.
         LABEL TA4
* TTTTTT     MOVE GLUB1 TO GLUB3.
*ZC    552 TTTTTT  MOVE  GLUB1,TO,GLUB3
         MOVE  GLUB1,TO,GLUB3
         PERIOD 
* TTTTTT TA5.
         LABEL TA5
* TTTTTT     IF GLUB1 > 180
*ZC    554 TTTTTT  IF    GLUB1,>,180
         IF    GLUB1,>,180
* TTTTTT         GO TO TA6
*ZC    555 TTTTTT  GO    TO,TA6
         GO    TO,TA6
* TTTTTT     END-IF.
*ZC    556 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = SPACE
*ZC    557 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
         IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
* TTTTTT         GO TO TA6
*ZC    558 TTTTTT  GO    TO,TA6
         GO    TO,TA6
* TTTTTT     END-IF.
*ZC    559 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = ')'
*ZC    560 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,')'
         IF    THE_COMMAND_C,'(',GLUB1,')',=,')'
* TTTTTT         GO TO TA6
*ZC    561 TTTTTT  GO    TO,TA6
         GO    TO,TA6
* TTTTTT     END-IF.
*ZC    562 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = ','
*ZC    563 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,','
         IF    THE_COMMAND_C,'(',GLUB1,')',=,','
* TTTTTT         GO TO TA6
*ZC    564 TTTTTT  GO    TO,TA6
         GO    TO,TA6
* TTTTTT     END-IF.
*ZC    565 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD  1 TO GLUB1
*ZC    566 TTTTTT  ADD   1,TO,GLUB1
         ADD   1,TO,GLUB1
* TTTTTT     GO TO TA5.
* TTTTTT
*ZC    567 TTTTTT  GO    TO,TA5
         GO    TO,TA5
         PERIOD 
* TTTTTT TA6.
         LABEL TA6
* TTTTTT     MOVE SPACES TO GLOB-SUB1.
*ZC    570 TTTTTT  MOVE  SPACES,TO,GLOB_SUB1
         MOVE  SPACES,TO,GLOB_SUB1
         PERIOD 
* TTTTTT     IF GLUB1 NOT > 180
*ZC    571 TTTTTT  IF    GLUB1,NOT,>,180
         IF    GLUB1,NOT,>,180
* TTTTTT         MOVE SPACES TO GLOB-SUB1
*ZC    572 TTTTTT  MOVE  SPACES,TO,GLOB_SUB1
         MOVE  SPACES,TO,GLOB_SUB1
* TTTTTT         SUBTRACT GLUB3 FROM GLUB1 GIVING GLUB2
*ZC    573 TTTTTT  SUBTRACT GLUB3,FROM,GLUB1,GIVING,GLUB2
         SUBTRACT GLUB3,FROM,GLUB1,GIVING,GLUB2
* TTTTTT         MOVE THE-COMMAND (GLUB3:GLUB2)
* TTTTTT           TO GLOB-SUB1
*ZC    574 TTTTTT  MOVE  THE_COMMAND,'(',GLUB3,:,GLUB2,')',TO,GLOB_SUB1
         MOVE  THE_COMMAND,'(',GLUB3,:,GLUB2,')',TO,GLOB_SUB1
* TTTTTT     END-IF.
*ZC    576 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF  GLOB-SUB1 (1:1) NOT GREATER THAN '9'
* TTTTTT     AND GLOB-SUB1 (1:1) NOT LESS    THAN '0'
*ZC    577 TTTTTT  IF    GLOB_SUB1,'(',1,:,1,')',NOT,GREATER,THAN,'9',AX
               ND,GLOB_SUB1,'(',1,:,1,')',NOT,LESS,THAN,'0'
         IF    GLOB_SUB1,'(',1,:,1,')',NOT,GREATER,THAN,'9',AND,GLOB_SUX
               B1,'(',1,:,1,')',NOT,LESS,THAN,'0'
* TTTTTT         MOVE '000000' TO SIXCH
*ZC    579 TTTTTT  MOVE  '000000',TO,SIXCH
         MOVE  '000000',TO,SIXCH
* TTTTTT         COMPUTE GLUB3 = 7 - GLUB2
*ZC    580 TTTTTT  COMPUTE GLUB3,=,7,-,GLUB2
         COMPUTE GLUB3,=,7,-,GLUB2
* TTTTTT         MOVE GLOB-SUB1 (1:GLUB2)
* TTTTTT           TO SIXCH (GLUB3:GLUB2)
*ZC    581 TTTTTT  MOVE  GLOB_SUB1,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3X
               ,:,GLUB2,')'
         MOVE  GLOB_SUB1,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3,:,GLUB2,'X
               )'
* TTTTTT         MOVE SIXCH TO GLOB-SUB1
*ZC    583 TTTTTT  MOVE  SIXCH,TO,GLOB_SUB1
         MOVE  SIXCH,TO,GLOB_SUB1
* TTTTTT     END-IF.
*ZC    584 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT TA7.
         LABEL TA7
* TTTTTT     ADD 1 TO GLUB1.
*ZC    586 TTTTTT  ADD   1,TO,GLUB1
         ADD   1,TO,GLUB1
         PERIOD 
* TTTTTT     IF GLUB1 > 180
*ZC    587 TTTTTT  IF    GLUB1,>,180
         IF    GLUB1,>,180
* TTTTTT         GO TO TA8
*ZC    588 TTTTTT  GO    TO,TA8
         GO    TO,TA8
* TTTTTT     END-IF.
*ZC    589 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (THE-COMMAND-C (GLUB1) NOT < 'A'
* TTTTTT         AND
* TTTTTT         THE-COMMAND-C (GLUB1) NOT > 'Z')
*ZC    590 TTTTTT  IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'A',AND,X
               THE_COMMAND_C,'(',GLUB1,')',NOT,>,'Z',')'
         IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'A',AND,THE_COMMANX
               D_C,'(',GLUB1,')',NOT,>,'Z',')'
* TTTTTT             GO TO TA8
*ZC    593 TTTTTT  GO    TO,TA8
         GO    TO,TA8
* TTTTTT     END-IF.
*ZC    594 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (THE-COMMAND-C (GLUB1) NOT < '0'
* TTTTTT         AND
* TTTTTT         THE-COMMAND-C (GLUB1) NOT > '9')
*ZC    595 TTTTTT  IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'0',AND,X
               THE_COMMAND_C,'(',GLUB1,')',NOT,>,'9',')'
         IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'0',AND,THE_COMMANX
               D_C,'(',GLUB1,')',NOT,>,'9',')'
* TTTTTT             GO TO TA8
*ZC    598 TTTTTT  GO    TO,TA8
         GO    TO,TA8
* TTTTTT     END-IF.
*ZC    599 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     GO TO TA7.
* TTTTTT
*ZC    600 TTTTTT  GO    TO,TA7
         GO    TO,TA7
         PERIOD 
* TTTTTT TA8.
         LABEL TA8
* TTTTTT     MOVE GLUB1 TO GLUB3.
*ZC    603 TTTTTT  MOVE  GLUB1,TO,GLUB3
         MOVE  GLUB1,TO,GLUB3
         PERIOD 
* TTTTTT TA9.
         LABEL TA9
* TTTTTT     IF GLUB1 > 180
*ZC    605 TTTTTT  IF    GLUB1,>,180
         IF    GLUB1,>,180
* TTTTTT         GO TO TA10
*ZC    606 TTTTTT  GO    TO,TA10
         GO    TO,TA10
* TTTTTT     END-IF.
*ZC    607 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = SPACE
*ZC    608 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
         IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
* TTTTTT         GO TO TA10
*ZC    609 TTTTTT  GO    TO,TA10
         GO    TO,TA10
* TTTTTT     END-IF,
*ZC    610 TTTTTT  END_IF 
         END_IF 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = ','
*ZC    611 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,','
         IF    THE_COMMAND_C,'(',GLUB1,')',=,','
* TTTTTT         GO TO TA10
*ZC    612 TTTTTT  GO    TO,TA10
         GO    TO,TA10
* TTTTTT     END-IF.
*ZC    613 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = ')'
*ZC    614 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,')'
         IF    THE_COMMAND_C,'(',GLUB1,')',=,')'
* TTTTTT         GO TO TA10
*ZC    615 TTTTTT  GO    TO,TA10
         GO    TO,TA10
* TTTTTT     END-IF.
*ZC    616 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD  1 TO GLUB1.
*ZC    617 TTTTTT  ADD   1,TO,GLUB1
         ADD   1,TO,GLUB1
         PERIOD 
* TTTTTT     GO TO TA9.
* TTTTTT
*ZC    618 TTTTTT  GO    TO,TA9
         GO    TO,TA9
         PERIOD 
* TTTTTT TA10.
         LABEL TA10
* TTTTTT     MOVE SPACES TO GLOB-SUB2.
*ZC    621 TTTTTT  MOVE  SPACES,TO,GLOB_SUB2
         MOVE  SPACES,TO,GLOB_SUB2
         PERIOD 
* TTTTTT     IF GLUB1 NOT > 180
*ZC    622 TTTTTT  IF    GLUB1,NOT,>,180
         IF    GLUB1,NOT,>,180
* TTTTTT         MOVE SPACES TO GLOB-SUB2
*ZC    623 TTTTTT  MOVE  SPACES,TO,GLOB_SUB2
         MOVE  SPACES,TO,GLOB_SUB2
* TTTTTT         SUBTRACT GLUB3 FROM GLUB1 GIVING GLUB2
*ZC    624 TTTTTT  SUBTRACT GLUB3,FROM,GLUB1,GIVING,GLUB2
         SUBTRACT GLUB3,FROM,GLUB1,GIVING,GLUB2
* TTTTTT         MOVE THE-COMMAND (GLUB3:GLUB2)
* TTTTTT           TO GLOB-SUB2
*ZC    625 TTTTTT  MOVE  THE_COMMAND,'(',GLUB3,:,GLUB2,')',TO,GLOB_SUB2
         MOVE  THE_COMMAND,'(',GLUB3,:,GLUB2,')',TO,GLOB_SUB2
* TTTTTT     END-IF.
*ZC    627 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF  GLOB-SUB2 (1:1) NOT GREATER THAN '9'
* TTTTTT     AND GLOB-SUB2 (1:1) NOT LESS    THAN '0'
*ZC    628 TTTTTT  IF    GLOB_SUB2,'(',1,:,1,')',NOT,GREATER,THAN,'9',AX
               ND,GLOB_SUB2,'(',1,:,1,')',NOT,LESS,THAN,'0'
         IF    GLOB_SUB2,'(',1,:,1,')',NOT,GREATER,THAN,'9',AND,GLOB_SUX
               B2,'(',1,:,1,')',NOT,LESS,THAN,'0'
* TTTTTT         MOVE '000000' TO SIXCH
*ZC    630 TTTTTT  MOVE  '000000',TO,SIXCH
         MOVE  '000000',TO,SIXCH
* TTTTTT         COMPUTE GLUB3 = 7 - GLUB2
*ZC    631 TTTTTT  COMPUTE GLUB3,=,7,-,GLUB2
         COMPUTE GLUB3,=,7,-,GLUB2
* TTTTTT         MOVE GLOB-SUB2 (1:GLUB2)
* TTTTTT           TO SIXCH (GLUB3:GLUB2)
*ZC    632 TTTTTT  MOVE  GLOB_SUB2,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3X
               ,:,GLUB2,')'
         MOVE  GLOB_SUB2,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3,:,GLUB2,'X
               )'
* TTTTTT         MOVE SIXCH TO GLOB-SUB2
*ZC    634 TTTTTT  MOVE  SIXCH,TO,GLOB_SUB2
         MOVE  SIXCH,TO,GLOB_SUB2
* TTTTTT     END-IF.
*ZC    635 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT TA11.
         LABEL TA11
* TTTTTT     ADD 1 TO GLUB1.
*ZC    637 TTTTTT  ADD   1,TO,GLUB1
         ADD   1,TO,GLUB1
         PERIOD 
* TTTTTT     IF GLUB1 > 180
*ZC    638 TTTTTT  IF    GLUB1,>,180
         IF    GLUB1,>,180
* TTTTTT         GO TO TA12
*ZC    639 TTTTTT  GO    TO,TA12
         GO    TO,TA12
* TTTTTT     END-IF.
*ZC    640 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (THE-COMMAND-C (GLUB1) NOT < 'A'
* TTTTTT         AND
* TTTTTT         THE-COMMAND-C (GLUB1) NOT > 'Z')
*ZC    641 TTTTTT  IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'A',AND,X
               THE_COMMAND_C,'(',GLUB1,')',NOT,>,'Z',')'
         IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'A',AND,THE_COMMANX
               D_C,'(',GLUB1,')',NOT,>,'Z',')'
* TTTTTT             GO TO TA12
*ZC    644 TTTTTT  GO    TO,TA12
         GO    TO,TA12
* TTTTTT     END-IF.
*ZC    645 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (THE-COMMAND-C (GLUB1) NOT < '0'
* TTTTTT         AND
* TTTTTT         THE-COMMAND-C (GLUB1) NOT > '9')
*ZC    646 TTTTTT  IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'0',AND,X
               THE_COMMAND_C,'(',GLUB1,')',NOT,>,'9',')'
         IF    '(',THE_COMMAND_C,'(',GLUB1,')',NOT,<,'0',AND,THE_COMMANX
               D_C,'(',GLUB1,')',NOT,>,'9',')'
* TTTTTT             GO TO TA12
*ZC    649 TTTTTT  GO    TO,TA12
         GO    TO,TA12
* TTTTTT     END-IF.
*ZC    650 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     GO TO TA11.
* TTTTTT
*ZC    651 TTTTTT  GO    TO,TA11
         GO    TO,TA11
         PERIOD 
* TTTTTT TA12.
         LABEL TA12
* TTTTTT     MOVE GLUB1 TO GLUB3.
*ZC    654 TTTTTT  MOVE  GLUB1,TO,GLUB3
         MOVE  GLUB1,TO,GLUB3
         PERIOD 
* TTTTTT TA13.
         LABEL TA13
* TTTTTT     IF GLUB1 > 180
*ZC    656 TTTTTT  IF    GLUB1,>,180
         IF    GLUB1,>,180
* TTTTTT         GO TO TA14
*ZC    657 TTTTTT  GO    TO,TA14
         GO    TO,TA14
* TTTTTT     END-IF.
*ZC    658 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = SPACE
*ZC    659 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
         IF    THE_COMMAND_C,'(',GLUB1,')',=,SPACE
* TTTTTT         GO TO TA14
*ZC    660 TTTTTT  GO    TO,TA14
         GO    TO,TA14
* TTTTTT     END-IF,
*ZC    661 TTTTTT  END_IF 
         END_IF 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = ','
*ZC    662 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,','
         IF    THE_COMMAND_C,'(',GLUB1,')',=,','
* TTTTTT         GO TO TA14
*ZC    663 TTTTTT  GO    TO,TA14
         GO    TO,TA14
* TTTTTT     END-IF.
*ZC    664 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF THE-COMMAND-C (GLUB1) = ')'
*ZC    665 TTTTTT  IF    THE_COMMAND_C,'(',GLUB1,')',=,')'
         IF    THE_COMMAND_C,'(',GLUB1,')',=,')'
* TTTTTT         GO TO TA14
*ZC    666 TTTTTT  GO    TO,TA14
         GO    TO,TA14
* TTTTTT     END-IF.
*ZC    667 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD  1 TO GLUB1.
*ZC    668 TTTTTT  ADD   1,TO,GLUB1
         ADD   1,TO,GLUB1
         PERIOD 
* TTTTTT     GO TO TA13.
* TTTTTT
*ZC    669 TTTTTT  GO    TO,TA13
         GO    TO,TA13
         PERIOD 
* TTTTTT TA14.
         LABEL TA14
* TTTTTT     MOVE SPACES TO GLOB-SUB3.
*ZC    672 TTTTTT  MOVE  SPACES,TO,GLOB_SUB3
         MOVE  SPACES,TO,GLOB_SUB3
         PERIOD 
* TTTTTT     IF GLUB1 NOT > 180
*ZC    673 TTTTTT  IF    GLUB1,NOT,>,180
         IF    GLUB1,NOT,>,180
* TTTTTT         MOVE SPACES TO GLOB-SUB3
*ZC    674 TTTTTT  MOVE  SPACES,TO,GLOB_SUB3
         MOVE  SPACES,TO,GLOB_SUB3
* TTTTTT         SUBTRACT GLUB3 FROM GLUB1 GIVING GLUB2
*ZC    675 TTTTTT  SUBTRACT GLUB3,FROM,GLUB1,GIVING,GLUB2
         SUBTRACT GLUB3,FROM,GLUB1,GIVING,GLUB2
* TTTTTT         MOVE THE-COMMAND (GLUB3:GLUB2)
* TTTTTT           TO GLOB-SUB3
*ZC    676 TTTTTT  MOVE  THE_COMMAND,'(',GLUB3,:,GLUB2,')',TO,GLOB_SUB3
         MOVE  THE_COMMAND,'(',GLUB3,:,GLUB2,')',TO,GLOB_SUB3
* TTTTTT     END-IF.
*ZC    678 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF  GLOB-SUB3 (1:1) NOT GREATER THAN '9'
* TTTTTT     AND GLOB-SUB3 (1:1) NOT LESS    THAN '0'
*ZC    679 TTTTTT  IF    GLOB_SUB3,'(',1,:,1,')',NOT,GREATER,THAN,'9',AX
               ND,GLOB_SUB3,'(',1,:,1,')',NOT,LESS,THAN,'0'
         IF    GLOB_SUB3,'(',1,:,1,')',NOT,GREATER,THAN,'9',AND,GLOB_SUX
               B3,'(',1,:,1,')',NOT,LESS,THAN,'0'
* TTTTTT         MOVE '000000' TO SIXCH
*ZC    681 TTTTTT  MOVE  '000000',TO,SIXCH
         MOVE  '000000',TO,SIXCH
* TTTTTT         COMPUTE GLUB3 = 7 - GLUB2
*ZC    682 TTTTTT  COMPUTE GLUB3,=,7,-,GLUB2
         COMPUTE GLUB3,=,7,-,GLUB2
* TTTTTT         MOVE GLOB-SUB3 (1:GLUB2)
* TTTTTT           TO SIXCH (GLUB3:GLUB2)
*ZC    683 TTTTTT  MOVE  GLOB_SUB3,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3X
               ,:,GLUB2,')'
         MOVE  GLOB_SUB3,'(',1,:,GLUB2,')',TO,SIXCH,'(',GLUB3,:,GLUB2,'X
               )'
* TTTTTT         MOVE SIXCH TO GLOB-SUB3
*ZC    685 TTTTTT  MOVE  SIXCH,TO,GLOB_SUB3
         MOVE  SIXCH,TO,GLOB_SUB3
* TTTTTT     END-IF.
*ZC    686 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT TA15.
*TTTTTT*     DISPLAY '>>>> GLOB-COMMAND=' GLOB-COMMAND
*TTTTTT*     DISPLAY '>>>+ GLOB-NAME====' GLOB-NAME
*TTTTTT*     DISPLAY '>>>+ GLOB-SUB1====' GLOB-SUB1
*TTTTTT*     DISPLAY '>>>+ GLOB-SUB2====' GLOB-SUB2
*TTTTTT*     DISPLAY '>>>. GLOB-SUB3====' GLOB-SUB3
         LABEL TA15
* TTTTTT     IF  GLOB-NAME (1:1) NOT GREATER THAN '9'
* TTTTTT     AND GLOB-NAME (1:1) NOT LESS    THAN '0'
*ZC    693 TTTTTT  IF    GLOB_NAME,'(',1,:,1,')',NOT,GREATER,THAN,'9',AX
               ND,GLOB_NAME,'(',1,:,1,')',NOT,LESS,THAN,'0'
         IF    GLOB_NAME,'(',1,:,1,')',NOT,GREATER,THAN,'9',AND,GLOB_NAX
               ME,'(',1,:,1,')',NOT,LESS,THAN,'0'
* TTTTTT         MOVE GLOB-NAME (1:6)
* TTTTTT           TO THE-COMMAND-3-8
*ZC    695 TTTTTT  MOVE  GLOB_NAME,'(',1,:,6,')',TO,THE_COMMAND_3_8
         MOVE  GLOB_NAME,'(',1,:,6,')',TO,THE_COMMAND_3_8
* TTTTTT     END-IF.
*ZC    697 TTTTTT  END_IF 
         END_IF 
* TTTTTT
*TTTTTT*---------------------------------------------------------------
*TTTTTT*       'H     - Here'.
*TTTTTT*       'E     - Erase              - E nnnnnn'.
*TTTTTT*       'M     - Monitor            - M vvv... (max 30 char)'.
*TTTTTT*       '                             M         List variables'.
*TTTTTT*       'B     - Break              - B nnnnnn'.
*TTTTTT*       '                             B         List lines'.
*TTTTTT*       'G     - Go                 - G nnnnnn'.
*TTTTTT*       '                             G         Go next break'.
*TTTTTT*       'W     - Working storage    - W         Show w/s'.
*TTTTTT*       'P     - Procedure division - P         Show proc div'.
*TTTTTT*       'D     - Display            - D vvv... (max 30 char)'.
*TTTTTT*       'X     - eXit               - X         Exit'.
*TTTTTT*       '+     - another screen     - +         of W or P'.
*TTTTTT*--1---------2---------3---------4---------5---------6---------7X
               12
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = '?'
*ZC    714 TTTTTT  IF    GLOB_COMMAND,=,'?'
         IF    GLOB_COMMAND,=,'?'
* TTTTTT         IF THE-COMMAND-C (3) = 'H'
*ZC    715 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'H'
         IF    THE_COMMAND_C,'(',3,')',=,'H'
* TTTTTT             DISPLAY 'H    Here'
*ZC    716 TTTTTT  DISPLAY 'H    Here'
         DISPLAY 'H    Here'
* TTTTTT             DISPLAY ' '
*ZC    717 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'Redisplay the page of your code upon'
*ZC    718 TTTTTT  DISPLAY 'Redisplay the page of your code upon'
         DISPLAY 'Redisplay the page of your code upon'
* TTTTTT             DISPLAY 'which your current statement occurs'
*ZC    719 TTTTTT  DISPLAY 'which your current statement occurs'
         DISPLAY 'which your current statement occurs'
* TTTTTT             DISPLAY ' '
*ZC    720 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    721 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    722 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    723 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    724 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    725 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    726 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    727 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    728 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    729 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    730 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    731 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    732 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    733 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    734 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = 'E'
*ZC    736 TTTTTT  END_IF 
         END_IF 
*ZC    736 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'E'
         IF    THE_COMMAND_C,'(',3,')',=,'E'
* TTTTTT             DISPLAY 'E    Erase'
*ZC    737 TTTTTT  DISPLAY 'E    Erase'
         DISPLAY 'E    Erase'
* TTTTTT             DISPLAY ' '
*ZC    738 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'E nnnnnn'
*ZC    739 TTTTTT  DISPLAY 'E nnnnnn'
         DISPLAY 'E nnnnnn'
* TTTTTT             DISPLAY 'Erases a breakpoint'
*ZC    740 TTTTTT  DISPLAY 'Erases a breakpoint'
         DISPLAY 'Erases a breakpoint'
* TTTTTT             DISPLAY '  You do not need leading zeroes now'
*ZC    741 TTTTTT  DISPLAY '  You do not need leading zeroes now'
         DISPLAY '  You do not need leading zeroes now'
* TTTTTT             DISPLAY ' '
*ZC    742 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'E vvv... (max 30 char)'
*ZC    743 TTTTTT  DISPLAY 'E vvv... (max 30 char)'
         DISPLAY 'E vvv... (max 30 char)'
* TTTTTT             DISPLAY 'Erases a monitor'
*ZC    744 TTTTTT  DISPLAY 'Erases a monitor'
         DISPLAY 'Erases a monitor'
* TTTTTT             DISPLAY '  it is not necessary to enter the whole'
*ZC    745 TTTTTT  DISPLAY '  it is not necessary to enter the whole'
         DISPLAY '  it is not necessary to enter the whole'
* TTTTTT             DISPLAY '  variable name, just enter sufficient'
*ZC    746 TTTTTT  DISPLAY '  variable name, just enter sufficient'
         DISPLAY '  variable name, just enter sufficient'
* TTTTTT             DISPLAY '  characters to uniquely identify the'
*ZC    747 TTTTTT  DISPLAY '  characters to uniquely identify the'
         DISPLAY '  characters to uniquely identify the'
* TTTTTT             DISPLAY '  monitor to be erased'
*ZC    748 TTTTTT  DISPLAY '  monitor to be erased'
         DISPLAY '  monitor to be erased'
* TTTTTT             DISPLAY ' '
*ZC    749 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    750 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    751 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    752 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    753 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    754 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    755 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = 'M'
*ZC    757 TTTTTT  END_IF 
         END_IF 
*ZC    757 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'M'
         IF    THE_COMMAND_C,'(',3,')',=,'M'
* TTTTTT             DISPLAY 'M    Monitor'
*ZC    758 TTTTTT  DISPLAY 'M    Monitor'
         DISPLAY 'M    Monitor'
* TTTTTT             DISPLAY ' '
*ZC    759 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'M vvv... (max 30 char)'
*ZC    760 TTTTTT  DISPLAY 'M vvv... (max 30 char)'
         DISPLAY 'M vvv... (max 30 char)'
* TTTTTT             DISPLAY '  the identified field is monitored and'
*ZC    761 TTTTTT  DISPLAY '  the identified field is monitored and'
         DISPLAY '  the identified field is monitored and'
* TTTTTT             DISPLAY '  will be displayed when its value changeX
               s'
*ZC    762 TTTTTT  DISPLAY '  will be displayed when its value changes'
         DISPLAY '  will be displayed when its value changes'
* TTTTTT             DISPLAY ' '
*ZC    763 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY '  the field identified may be followed'
*ZC    764 TTTTTT  DISPLAY '  the field identified may be followed'
         DISPLAY '  the field identified may be followed'
* TTTTTT             DISPLAY '  by 1 thru 3 subscripts'
*ZC    765 TTTTTT  DISPLAY '  by 1 thru 3 subscripts'
         DISPLAY '  by 1 thru 3 subscripts'
* TTTTTT             DISPLAY '  starting with an open bracket "("'
*ZC    766 TTTTTT  DISPLAY '  starting with an open bracket "("'
         DISPLAY '  starting with an open bracket "("'
* TTTTTT             DISPLAY '  ending with a close bracket ")"'
*ZC    767 TTTTTT  DISPLAY '  ending with a close bracket ")"'
         DISPLAY '  ending with a close bracket ")"'
* TTTTTT             DISPLAY '  and separated by a comma ","'
*ZC    768 TTTTTT  DISPLAY '  and separated by a comma ","'
         DISPLAY '  and separated by a comma ","'
* TTTTTT             DISPLAY '  if the subscript is numeric, it doesnt'
*ZC    769 TTTTTT  DISPLAY '  if the subscript is numeric, it doesnt'
         DISPLAY '  if the subscript is numeric, it doesnt'
* TTTTTT             DISPLAY '  require leading zeroes now'
*ZC    770 TTTTTT  DISPLAY '  require leading zeroes now'
         DISPLAY '  require leading zeroes now'
* TTTTTT             DISPLAY '  the subscript may be the name of a '
*ZC    771 TTTTTT  DISPLAY '  the subscript may be the name of a '
         DISPLAY '  the subscript may be the name of a '
* TTTTTT             DISPLAY '  variable'
*ZC    772 TTTTTT  DISPLAY '  variable'
         DISPLAY '  variable'
* TTTTTT             DISPLAY '  e.g. M FRED(1, MY-SUBSCRIPT, 2)'
*ZC    773 TTTTTT  DISPLAY '  e.g. M FRED(1, MY-SUBSCRIPT, 2)'
         DISPLAY '  e.g. M FRED(1, MY-SUBSCRIPT, 2)'
* TTTTTT             DISPLAY ' '
*ZC    774 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'M'
*ZC    775 TTTTTT  DISPLAY 'M'
         DISPLAY 'M'
* TTTTTT             DISPLAY '  displays a list of the current monitorsX
               '
* TTTTTT         END-IF
*ZC    776 TTTTTT  DISPLAY '  displays a list of the current monitors'
         DISPLAY '  displays a list of the current monitors'
* TTTTTT         IF THE-COMMAND-C (3) = 'B'
*ZC    778 TTTTTT  END_IF 
         END_IF 
*ZC    778 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'B'
         IF    THE_COMMAND_C,'(',3,')',=,'B'
* TTTTTT             DISPLAY 'B    Break'
*ZC    779 TTTTTT  DISPLAY 'B    Break'
         DISPLAY 'B    Break'
* TTTTTT             DISPLAY ' '
*ZC    780 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'B nnnnnn'
*ZC    781 TTTTTT  DISPLAY 'B nnnnnn'
         DISPLAY 'B nnnnnn'
* TTTTTT             DISPLAY '  a breakpoint is created for the '
*ZC    782 TTTTTT  DISPLAY '  a breakpoint is created for the '
         DISPLAY '  a breakpoint is created for the '
* TTTTTT             DISPLAY '  identified line. You dont need leading X
               0s'
*ZC    783 TTTTTT  DISPLAY '  identified line. You dont need leading 0sX
               '
         DISPLAY '  identified line. You dont need leading 0s'
* TTTTTT             DISPLAY '  you can issue a G (Go) command without X
               a'
*ZC    784 TTTTTT  DISPLAY '  you can issue a G (Go) command without a'
         DISPLAY '  you can issue a G (Go) command without a'
* TTTTTT             DISPLAY '  line number to go to the next breakpoinX
               t'
*ZC    785 TTTTTT  DISPLAY '  line number to go to the next breakpoint'
         DISPLAY '  line number to go to the next breakpoint'
* TTTTTT             DISPLAY ' '
*ZC    786 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'B'
*ZC    787 TTTTTT  DISPLAY 'B'
         DISPLAY 'B'
* TTTTTT             DISPLAY '  displays a list of the current '
*ZC    788 TTTTTT  DISPLAY '  displays a list of the current '
         DISPLAY '  displays a list of the current '
* TTTTTT             DISPLAY '  breakpoints'
*ZC    789 TTTTTT  DISPLAY '  breakpoints'
         DISPLAY '  breakpoints'
* TTTTTT             DISPLAY ' '
*ZC    790 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    791 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    792 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    793 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    794 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    795 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    796 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    797 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = 'G'
*ZC    799 TTTTTT  END_IF 
         END_IF 
*ZC    799 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'G'
         IF    THE_COMMAND_C,'(',3,')',=,'G'
* TTTTTT             DISPLAY 'G    Go'
*ZC    800 TTTTTT  DISPLAY 'G    Go'
         DISPLAY 'G    Go'
* TTTTTT             DISPLAY ' '
*ZC    801 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'G nnnnnn'
*ZC    802 TTTTTT  DISPLAY 'G nnnnnn'
         DISPLAY 'G nnnnnn'
* TTTTTT             DISPLAY '  go to the identified line number'
*ZC    803 TTTTTT  DISPLAY '  go to the identified line number'
         DISPLAY '  go to the identified line number'
* TTTTTT             DISPLAY ' (no leading zeroes)'
*ZC    804 TTTTTT  DISPLAY ' (no leading zeroes)'
         DISPLAY ' (no leading zeroes)'
* TTTTTT             DISPLAY '  it still performs all the statements tiX
               l'
*ZC    805 TTTTTT  DISPLAY '  it still performs all the statements til'
         DISPLAY '  it still performs all the statements til'
* TTTTTT             DISPLAY '  it reaches the chosen line number but iX
               t'
*ZC    806 TTTTTT  DISPLAY '  it reaches the chosen line number but it'
         DISPLAY '  it reaches the chosen line number but it'
* TTTTTT             DISPLAY '  doesnt show the pages of code'
*ZC    807 TTTTTT  DISPLAY '  doesnt show the pages of code'
         DISPLAY '  doesnt show the pages of code'
* TTTTTT             DISPLAY ' '
*ZC    808 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'G vvv...'
*ZC    809 TTTTTT  DISPLAY 'G vvv...'
         DISPLAY 'G vvv...'
* TTTTTT             DISPLAY '  go until the monitored variable changesX
               '
*ZC    810 TTTTTT  DISPLAY '  go until the monitored variable changes'
         DISPLAY '  go until the monitored variable changes'
* TTTTTT             DISPLAY '  value'
*ZC    811 TTTTTT  DISPLAY '  value'
         DISPLAY '  value'
* TTTTTT             DISPLAY ' '
*ZC    812 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'G'
*ZC    813 TTTTTT  DISPLAY 'G'
         DISPLAY 'G'
* TTTTTT             DISPLAY '  go to the next breakpoint'
*ZC    814 TTTTTT  DISPLAY '  go to the next breakpoint'
         DISPLAY '  go to the next breakpoint'
* TTTTTT             DISPLAY '  it, too, still performs all the'
*ZC    815 TTTTTT  DISPLAY '  it, too, still performs all the'
         DISPLAY '  it, too, still performs all the'
* TTTTTT             DISPLAY '  statements that are in between'
*ZC    816 TTTTTT  DISPLAY '  statements that are in between'
         DISPLAY '  statements that are in between'
* TTTTTT             DISPLAY ' '
*ZC    817 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY '  you have to single-step (ie Hit Enter) X
               to'
*ZC    818 TTTTTT  DISPLAY '  you have to single-step (ie Hit Enter) toX
               '
         DISPLAY '  you have to single-step (ie Hit Enter) to'
* TTTTTT             DISPLAY '  the next instruction before you can G '
*ZC    819 TTTTTT  DISPLAY '  the next instruction before you can G '
         DISPLAY '  the next instruction before you can G '
* TTTTTT             DISPLAY '  again'
* TTTTTT         END-IF
*ZC    820 TTTTTT  DISPLAY '  again'
         DISPLAY '  again'
* TTTTTT         IF THE-COMMAND-C (3) = 'W'
*ZC    822 TTTTTT  END_IF 
         END_IF 
*ZC    822 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'W'
         IF    THE_COMMAND_C,'(',3,')',=,'W'
* TTTTTT             DISPLAY 'W    Working-Storage'
*ZC    823 TTTTTT  DISPLAY 'W    Working-Storage'
         DISPLAY 'W    Working-Storage'
* TTTTTT             DISPLAY ' '
*ZC    824 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'Actually lists the fields that are '
*ZC    825 TTTTTT  DISPLAY 'Actually lists the fields that are '
         DISPLAY 'Actually lists the fields that are '
* TTTTTT             DISPLAY 'accessible for display, a page at a time,X
               '
*ZC    826 TTTTTT  DISPLAY 'accessible for display, a page at a time,'
         DISPLAY 'accessible for display, a page at a time,'
* TTTTTT             DISPLAY 'see "+" command'
*ZC    827 TTTTTT  DISPLAY 'see "+" command'
         DISPLAY 'see "+" command'
* TTTTTT             DISPLAY ' '
*ZC    828 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'these fields may occur in the File SectioX
               n'
*ZC    829 TTTTTT  DISPLAY 'these fields may occur in the File Section'
         DISPLAY 'these fields may occur in the File Section'
* TTTTTT             DISPLAY 'or Working Storage Section'
*ZC    830 TTTTTT  DISPLAY 'or Working Storage Section'
         DISPLAY 'or Working Storage Section'
* TTTTTT             DISPLAY ' '
*ZC    831 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    832 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    833 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    834 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    835 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    836 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    837 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    838 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    839 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    840 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    841 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = 'P'
*ZC    843 TTTTTT  END_IF 
         END_IF 
*ZC    843 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'P'
         IF    THE_COMMAND_C,'(',3,')',=,'P'
* TTTTTT             DISPLAY 'P    Procedure Division'
*ZC    844 TTTTTT  DISPLAY 'P    Procedure Division'
         DISPLAY 'P    Procedure Division'
* TTTTTT             DISPLAY ' '
*ZC    845 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'lists the code, a page at a time, with liX
               ne'
*ZC    846 TTTTTT  DISPLAY 'lists the code, a page at a time, with lineX
               '
         DISPLAY 'lists the code, a page at a time, with line'
* TTTTTT             DISPLAY 'numbers against the verbs'
*ZC    847 TTTTTT  DISPLAY 'numbers against the verbs'
         DISPLAY 'numbers against the verbs'
* TTTTTT             DISPLAY ' '
*ZC    848 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'P nnnnnn '
*ZC    849 TTTTTT  DISPLAY 'P nnnnnn '
         DISPLAY 'P nnnnnn '
* TTTTTT             DISPLAY ' '
*ZC    850 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'lists the code, starting at or above '
*ZC    851 TTTTTT  DISPLAY 'lists the code, starting at or above '
         DISPLAY 'lists the code, starting at or above '
* TTTTTT             DISPLAY 'given line number (no leading zeroes)'
*ZC    852 TTTTTT  DISPLAY 'given line number (no leading zeroes)'
         DISPLAY 'given line number (no leading zeroes)'
* TTTTTT             DISPLAY ' '
*ZC    853 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    854 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'P pppsss... '
*ZC    855 TTTTTT  DISPLAY 'P pppsss... '
         DISPLAY 'P pppsss... '
* TTTTTT             DISPLAY 'lists the code, starting at the paragraphX
                '
*ZC    856 TTTTTT  DISPLAY 'lists the code, starting at the paragraph '
         DISPLAY 'lists the code, starting at the paragraph '
* TTTTTT             DISPLAY 'or section given'
*ZC    857 TTTTTT  DISPLAY 'or section given'
         DISPLAY 'or section given'
* TTTTTT             DISPLAY ' '
*ZC    858 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    859 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    860 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    861 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = 'D'
*ZC    863 TTTTTT  END_IF 
         END_IF 
*ZC    863 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'D'
         IF    THE_COMMAND_C,'(',3,')',=,'D'
* TTTTTT             DISPLAY 'D    Display'
*ZC    864 TTTTTT  DISPLAY 'D    Display'
         DISPLAY 'D    Display'
* TTTTTT             DISPLAY ' '
*ZC    865 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'D vvv... (max 30 char)'
*ZC    866 TTTTTT  DISPLAY 'D vvv... (max 30 char)'
         DISPLAY 'D vvv... (max 30 char)'
* TTTTTT             DISPLAY '  the identified field is displayed'
*ZC    867 TTTTTT  DISPLAY '  the identified field is displayed'
         DISPLAY '  the identified field is displayed'
* TTTTTT             DISPLAY ' '
*ZC    868 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY '  the field identified may be followed'
*ZC    869 TTTTTT  DISPLAY '  the field identified may be followed'
         DISPLAY '  the field identified may be followed'
* TTTTTT             DISPLAY '  by 1 thru 3 subscripts'
*ZC    870 TTTTTT  DISPLAY '  by 1 thru 3 subscripts'
         DISPLAY '  by 1 thru 3 subscripts'
* TTTTTT             DISPLAY '  starting with an open bracket "("'
*ZC    871 TTTTTT  DISPLAY '  starting with an open bracket "("'
         DISPLAY '  starting with an open bracket "("'
* TTTTTT             DISPLAY '  ending with a close bracket ")"'
*ZC    872 TTTTTT  DISPLAY '  ending with a close bracket ")"'
         DISPLAY '  ending with a close bracket ")"'
* TTTTTT             DISPLAY '  and separated by a comma ","'
*ZC    873 TTTTTT  DISPLAY '  and separated by a comma ","'
         DISPLAY '  and separated by a comma ","'
* TTTTTT             DISPLAY '  if the subscript is numeric, it doesnt'
*ZC    874 TTTTTT  DISPLAY '  if the subscript is numeric, it doesnt'
         DISPLAY '  if the subscript is numeric, it doesnt'
* TTTTTT             DISPLAY '  need leading zeroes'
*ZC    875 TTTTTT  DISPLAY '  need leading zeroes'
         DISPLAY '  need leading zeroes'
* TTTTTT             DISPLAY '  the subscript may be the name of a '
*ZC    876 TTTTTT  DISPLAY '  the subscript may be the name of a '
         DISPLAY '  the subscript may be the name of a '
* TTTTTT             DISPLAY '  variable'
*ZC    877 TTTTTT  DISPLAY '  variable'
         DISPLAY '  variable'
* TTTTTT             DISPLAY '  e.g. D ARTHUR(MY-SUB1, MY-SUB2, MY-SUB3X
               )'
*ZC    878 TTTTTT  DISPLAY '  e.g. D ARTHUR(MY-SUB1, MY-SUB2, MY-SUB3)'
         DISPLAY '  e.g. D ARTHUR(MY-SUB1, MY-SUB2, MY-SUB3)'
* TTTTTT             DISPLAY ' '
*ZC    879 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    880 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    881 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    882 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = 'X'
*ZC    884 TTTTTT  END_IF 
         END_IF 
*ZC    884 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'X'
         IF    THE_COMMAND_C,'(',3,')',=,'X'
* TTTTTT             DISPLAY 'X    eXit'
*ZC    885 TTTTTT  DISPLAY 'X    eXit'
         DISPLAY 'X    eXit'
* TTTTTT             DISPLAY 'exit from your program'
*ZC    886 TTTTTT  DISPLAY 'exit from your program'
         DISPLAY 'exit from your program'
* TTTTTT             DISPLAY ' '
*ZC    887 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    888 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    889 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    890 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    891 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    892 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    893 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    894 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    895 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    896 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    897 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    898 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    899 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    900 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    901 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    902 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    903 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = '+'
*ZC    905 TTTTTT  END_IF 
         END_IF 
*ZC    905 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'+'
         IF    THE_COMMAND_C,'(',3,')',=,'+'
* TTTTTT             DISPLAY '+    another page'
*ZC    906 TTTTTT  DISPLAY '+    another page'
         DISPLAY '+    another page'
* TTTTTT             DISPLAY ' '
*ZC    907 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'if previous command was W, then another'
*ZC    908 TTTTTT  DISPLAY 'if previous command was W, then another'
         DISPLAY 'if previous command was W, then another'
* TTTTTT             DISPLAY 'page of Working Storage is displayed'
*ZC    909 TTTTTT  DISPLAY 'page of Working Storage is displayed'
         DISPLAY 'page of Working Storage is displayed'
* TTTTTT             DISPLAY ' '
*ZC    910 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY 'if previous command was P, then another'
*ZC    911 TTTTTT  DISPLAY 'if previous command was P, then another'
         DISPLAY 'if previous command was P, then another'
* TTTTTT             DISPLAY 'page of the Procedure Division is displayX
               ed'
*      *  1         2         3         4         5         6         7X
               12
*ZC    912 TTTTTT  DISPLAY 'page of the Procedure Division is displayedX
               '
         DISPLAY 'page of the Procedure Division is displayed'
* TTTTTT             DISPLAY ' '
*ZC    914 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    915 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    916 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    917 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    918 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    919 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    920 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    921 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    922 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    923 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    924 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    925 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         IF THE-COMMAND-C (3) = 'T'
*ZC    927 TTTTTT  END_IF 
         END_IF 
*ZC    927 TTTTTT  IF    THE_COMMAND_C,'(',3,')',=,'T'
         IF    THE_COMMAND_C,'(',3,')',=,'T'
* TTTTTT             DISPLAY 'T    Trace'
*ZC    928 TTTTTT  DISPLAY 'T    Trace'
         DISPLAY 'T    Trace'
* TTTTTT             DISPLAY 'shows you the last 15 para/sections'
*ZC    929 TTTTTT  DISPLAY 'shows you the last 15 para/sections'
         DISPLAY 'shows you the last 15 para/sections'
* TTTTTT             DISPLAY 'executed '
*ZC    930 TTTTTT  DISPLAY 'executed '
         DISPLAY 'executed '
* TTTTTT             DISPLAY ' '
*ZC    931 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    932 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    933 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    934 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    935 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    936 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    937 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    938 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    939 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    940 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    941 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    942 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    943 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    944 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
*ZC    945 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             DISPLAY ' '
* TTTTTT         END-IF
*ZC    946 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT         GO TO T-ACCEPT
*ZC    948 TTTTTT  END_IF 
         END_IF 
*ZC    948 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC    949 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'H'
*ZC    951 TTTTTT  IF    GLOB_COMMAND,=,'H'
         IF    GLOB_COMMAND,=,'H'
* TTTTTT         MOVE 'H'              TO PREV-COMMAND
*ZC    952 TTTTTT  MOVE  'H',TO,PREV_COMMAND
         MOVE  'H',TO,PREV_COMMAND
* TTTTTT         GO TO T
*ZC    953 TTTTTT  GO    TO,T
         GO    TO,T
* TTTTTT     END-IF.
*ZC    954 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'T'
*ZC    956 TTTTTT  IF    GLOB_COMMAND,=,'T'
         IF    GLOB_COMMAND,=,'T'
* TTTTTT         ADD 1 TO TUB GIVING TUB3
*ZC    957 TTTTTT  ADD   1,TO,TUB,GIVING,TUB3
         ADD   1,TO,TUB,GIVING,TUB3
* TTTTTT         PERFORM VARYING TUB2 FROM 1 BY 1 UNTIL TUB2 > 15
*ZC    958 TTTTTT  PERFORM VARYING,TUB2,FROM,1,BY,1,UNTIL,TUB2,>,15
         PERFORM VARYING,TUB2,FROM,1,BY,1,UNTIL,TUB2,>,15
* TTTTTT             IF TUB3 > 15
*ZC    959 TTTTTT  IF    TUB3,>,15
         IF    TUB3,>,15
* TTTTTT                 MOVE 1 TO TUB3
* TTTTTT             END-IF
*ZC    960 TTTTTT  MOVE  1,TO,TUB3
         MOVE  1,TO,TUB3
* TTTTTT             IF TRACE-ENTRY (TUB3) NOT = SPACES
*ZC    962 TTTTTT  END_IF 
         END_IF 
*ZC    962 TTTTTT  IF    TRACE_ENTRY,'(',TUB3,')',NOT,=,SPACES
         IF    TRACE_ENTRY,'(',TUB3,')',NOT,=,SPACES
* TTTTTT                 DISPLAY TRACE-ENTRY (TUB3)
* TTTTTT             END-IF
*ZC    963 TTTTTT  DISPLAY TRACE_ENTRY,'(',TUB3,')'
         DISPLAY TRACE_ENTRY,'(',TUB3,')'
* TTTTTT             ADD 1 TO TUB3
*ZC    965 TTTTTT  END_IF 
         END_IF 
* TTTTTT         END-PERFORM
*ZC    965 TTTTTT  ADD   1,TO,TUB3
         ADD   1,TO,TUB3
* TTTTTT         MOVE 'T'              TO PREV-COMMAND
*ZC    967 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC    967 TTTTTT  MOVE  'T',TO,PREV_COMMAND
         MOVE  'T',TO,PREV_COMMAND
* TTTTTT         GO TO T-ACCEPT
*ZC    968 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC    969 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'E'
*ZC    971 TTTTTT  IF    GLOB_COMMAND,=,'E'
         IF    GLOB_COMMAND,=,'E'
* TTTTTT         IF THE-COMMAND-3-8 = SIX-SPACES
*ZC    972 TTTTTT  IF    THE_COMMAND_3_8,=,SIX_SPACES
         IF    THE_COMMAND_3_8,=,SIX_SPACES
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         END-IF
*ZC    973 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT         PERFORM VARYING BUB2
*ZC    975 TTTTTT  END_IF 
         END_IF 
* TTTTTT            FROM 1 BY 1
* TTTTTT           UNTIL BREAKIT-NUMBER (BUB2) = THE-COMMAND-3-8
* TTTTTT              OR BUB2 > 8
* TTTTTT         END-PERFORM
*ZC    975 TTTTTT  PERFORM VARYING,BUB2,FROM,1,BY,1,UNTIL,BREAKIT_NUMBEX
               R,'(',BUB2,')',=,THE_COMMAND_3_8,OR,BUB2,>,8
         PERFORM VARYING,BUB2,FROM,1,BY,1,UNTIL,BREAKIT_NUMBER,'(',BUB2X
               ,')',=,THE_COMMAND_3_8,OR,BUB2,>,8
* TTTTTT         IF BUB2 NOT > 8
*ZC    980 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC    980 TTTTTT  IF    BUB2,NOT,>,8
         IF    BUB2,NOT,>,8
* TTTTTT              DISPLAY 'Erasing ' BREAKIT-NUMBER (BUB2)
*ZC    981 TTTTTT  DISPLAY 'Erasing ',BREAKIT_NUMBER,'(',BUB2,')'
         DISPLAY 'Erasing ',BREAKIT_NUMBER,'(',BUB2,')'
* TTTTTT              MOVE SIX-LOW-VALUES   TO BREAKIT-NUMBER (BUB2)
* TTTTTT         END-IF
*ZC    982 TTTTTT  MOVE  SIX_LOW_VALUES,TO,BREAKIT_NUMBER,'(',BUB2,')'
         MOVE  SIX_LOW_VALUES,TO,BREAKIT_NUMBER,'(',BUB2,')'
* TTTTTT         IF  BUB2 > 8
*ZC    984 TTTTTT  END_IF 
         END_IF 
* TTTTTT         AND GLOB-NAME (1:1) NOT GREATER THAN '9'
* TTTTTT         AND GLOB-NAME (1:1) NOT LESS    THAN '0'
*ZC    984 TTTTTT  IF    BUB2,>,8,AND,GLOB_NAME,'(',1,:,1,')',NOT,GREATX
               ER,THAN,'9',AND,GLOB_NAME,'(',1,:,1,')',NOT,LESS,THAN,'0X
               '
         IF    BUB2,>,8,AND,GLOB_NAME,'(',1,:,1,')',NOT,GREATER,THAN,'9X
               ',AND,GLOB_NAME,'(',1,:,1,')',NOT,LESS,THAN,'0'
* TTTTTT             DISPLAY 'INVALID BREAK LINE NUMBER'
*ZC    987 TTTTTT  DISPLAY 'INVALID BREAK LINE NUMBER'
         DISPLAY 'INVALID BREAK LINE NUMBER'
* TTTTTT             MOVE 'E' TO PREV-COMMAND
*ZC    988 TTTTTT  MOVE  'E',TO,PREV_COMMAND
         MOVE  'E',TO,PREV_COMMAND
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         END-IF
*ZC    989 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT         PERFORM VARYING NUB2
*ZC    991 TTTTTT  END_IF 
         END_IF 
* TTTTTT            FROM 1 BY 1
* TTTTTT           UNTIL MONITORIT-VARIABLE (NUB2) = GLOB-NAME
* TTTTTT              OR NUB2 > 8
* TTTTTT         END-PERFORM
*ZC    991 TTTTTT  PERFORM VARYING,NUB2,FROM,1,BY,1,UNTIL,MONITORIT_VARX
               IABLE,'(',NUB2,')',=,GLOB_NAME,OR,NUB2,>,8
         PERFORM VARYING,NUB2,FROM,1,BY,1,UNTIL,MONITORIT_VARIABLE,'(',X
               NUB2,')',=,GLOB_NAME,OR,NUB2,>,8
* TTTTTT         IF  NUB2 NOT > 8
*ZC    996 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC    996 TTTTTT  IF    NUB2,NOT,>,8
         IF    NUB2,NOT,>,8
* TTTTTT             MOVE TH2-LOW-VALUES   TO MONITORIT-VARIABLE (NUB2)
* TTTTTT         ELSE
*ZC    997 TTTTTT  MOVE  TH2_LOW_VALUES,TO,MONITORIT_VARIABLE,'(',NUB2,X
               ')'
         MOVE  TH2_LOW_VALUES,TO,MONITORIT_VARIABLE,'(',NUB2,')'
* TTTTTT             PERFORM VARYING MUB2
*ZC    999 TTTTTT  ELSE  
         ELSE  
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL GLOB-NAME-C (MUB2) = ' '
* TTTTTT                  OR GLOB-NAME-C (MUB2) = '('
* TTTTTT             END-PERFORM
*ZC    999 TTTTTT  PERFORM VARYING,MUB2,FROM,1,BY,1,UNTIL,GLOB_NAME_C,'X
               (',MUB2,')',=,' ',OR,GLOB_NAME_C,'(',MUB2,')',=,'('
         PERFORM VARYING,MUB2,FROM,1,BY,1,UNTIL,GLOB_NAME_C,'(',MUB2,')X
               ',=,' ',OR,GLOB_NAME_C,'(',MUB2,')',=,'('
* TTTTTT             SUBTRACT 1 FROM MUB2
*ZC   1004 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC   1004 TTTTTT  SUBTRACT 1,FROM,MUB2
         SUBTRACT 1,FROM,MUB2
* TTTTTT             PERFORM VARYING NUB2
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL NUB2 > 8
*ZC   1005 TTTTTT  PERFORM VARYING,NUB2,FROM,1,BY,1,UNTIL,NUB2,>,8
         PERFORM VARYING,NUB2,FROM,1,BY,1,UNTIL,NUB2,>,8
* TTTTTT                 MOVE SPACES TO MONITORIT-SHORT
*ZC   1008 TTTTTT  MOVE  SPACES,TO,MONITORIT_SHORT
         MOVE  SPACES,TO,MONITORIT_SHORT
* TTTTTT                 MOVE MONITORIT-VARIABLE (NUB2) (1:MUB2)
* TTTTTT                   TO MONITORIT-SHORT
*ZC   1009 TTTTTT  MOVE  MONITORIT_VARIABLE,'(',NUB2,')','(',1,:,MUB2,'X
               )',TO,MONITORIT_SHORT
         MOVE  MONITORIT_VARIABLE,'(',NUB2,')','(',1,:,MUB2,')',TO,MONIX
               TORIT_SHORT
* TTTTTT                 IF GLOB-NAME = MONITORIT-SHORT
*ZC   1011 TTTTTT  IF    GLOB_NAME,=,MONITORIT_SHORT
         IF    GLOB_NAME,=,MONITORIT_SHORT
* TTTTTT                     DISPLAY 'Erasing '
* TTTTTT                              MONITORIT-VARIABLE (NUB2)
*ZC   1012 TTTTTT  DISPLAY 'Erasing ',MONITORIT_VARIABLE,'(',NUB2,')'
         DISPLAY 'Erasing ',MONITORIT_VARIABLE,'(',NUB2,')'
* TTTTTT                     MOVE TH2-LOW-VALUES
* TTTTTT                       TO MONITORIT-VARIABLE (NUB2)
* TTTTTT                 END-IF
*ZC   1014 TTTTTT  MOVE  TH2_LOW_VALUES,TO,MONITORIT_VARIABLE,'(',NUB2,X
               ')'
         MOVE  TH2_LOW_VALUES,TO,MONITORIT_VARIABLE,'(',NUB2,')'
* TTTTTT             END-PERFORM
*ZC   1017 TTTTTT  END_IF 
         END_IF 
* TTTTTT         END-IF
*ZC   1018 TTTTTT  END_PERFORM 
         END_PERFORM 
* TTTTTT         MOVE 'E'              TO PREV-COMMAND
*ZC   1019 TTTTTT  END_IF 
         END_IF 
*ZC   1019 TTTTTT  MOVE  'E',TO,PREV_COMMAND
         MOVE  'E',TO,PREV_COMMAND
* TTTTTT         GO TO T-ACCEPT
*ZC   1020 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC   1021 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'M'
*ZC   1023 TTTTTT  IF    GLOB_COMMAND,=,'M'
         IF    GLOB_COMMAND,=,'M'
* TTTTTT         IF THE-COMMAND-3-8 = SIX-SPACES
*ZC   1024 TTTTTT  IF    THE_COMMAND_3_8,=,SIX_SPACES
         IF    THE_COMMAND_3_8,=,SIX_SPACES
* TTTTTT             DISPLAY '*----------------------------*'
*ZC   1025 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
* TTTTTT             DISPLAY 'MONITOR LIST'
*ZC   1026 TTTTTT  DISPLAY 'MONITOR LIST'
         DISPLAY 'MONITOR LIST'
* TTTTTT             DISPLAY ' '
*ZC   1027 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             PERFORM MONITORIT-LIST VARYING NUB2
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL MONITORIT-VARIABLE (NUB2) = TH2-SPACES
* TTTTTT                  OR NUB2 > 9
*ZC   1028 TTTTTT  PERFORM MONITORIT_LIST,VARYING,NUB2,FROM,1,BY,1,UNTIX
               L,MONITORIT_VARIABLE,'(',NUB2,')',=,TH2_SPACES,OR,NUB2,>X
               ,9
         PERFORM MONITORIT_LIST,VARYING,NUB2,FROM,1,BY,1,UNTIL,MONITORIX
               T_VARIABLE,'(',NUB2,')',=,TH2_SPACES,OR,NUB2,>,9
* TTTTTT             DISPLAY '*----------------------------*'
*ZC   1032 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
* TTTTTT             MOVE 'M'          TO PREV-COMMAND
*ZC   1033 TTTTTT  MOVE  'M',TO,PREV_COMMAND
         MOVE  'M',TO,PREV_COMMAND
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         ELSE
*ZC   1034 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT             PERFORM MATCHIT
*ZC   1036 TTTTTT  ELSE  
         ELSE  
*ZC   1036 TTTTTT  PERFORM MATCHIT
         PERFORM MATCHIT
* TTTTTT             IF MATCH-FOUND = 'N'
*ZC   1037 TTTTTT  IF    MATCH_FOUND,=,'N'
         IF    MATCH_FOUND,=,'N'
* TTTTTT                 MOVE 'M'      TO PREV-COMMAND
*ZC   1038 TTTTTT  MOVE  'M',TO,PREV_COMMAND
         MOVE  'M',TO,PREV_COMMAND
* TTTTTT                 GO TO T-ACCEPT
* TTTTTT             END-IF
*ZC   1039 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT             PERFORM VARYING NUB
*ZC   1041 TTTTTT  END_IF 
         END_IF 
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL MONITORIT-VARIABLE (NUB) = TH2-SPACES
* TTTTTT                  OR MONITORIT-VARIABLE (NUB) = GLOB-NAME
* TTTTTT                  OR MONITORIT-VARIABLE (NUB) = TH2-LOW-VALUES
* TTTTTT                  OR NUB > 8
* TTTTTT             END-PERFORM
*ZC   1041 TTTTTT  PERFORM VARYING,NUB,FROM,1,BY,1,UNTIL,MONITORIT_VARIX
               ABLE,'(',NUB,')',=,TH2_SPACES,OR,MONITORIT_VARIABLE,'(',X
               NUB,')',=,GLOB_NAME,OR,MONITORIT_VARIABLE,'(',NUB,')',=,X
               TH2_LOW_VALUES,OR,NUB,>,8
         PERFORM VARYING,NUB,FROM,1,BY,1,UNTIL,MONITORIT_VARIABLE,'(',NX
               UB,')',=,TH2_SPACES,OR,MONITORIT_VARIABLE,'(',NUB,')',=,X
               GLOB_NAME,OR,MONITORIT_VARIABLE,'(',NUB,')',=,TH2_LOW_VAX
               LUES,OR,NUB,>,8
* TTTTTT             IF NUB > 8
*ZC   1048 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC   1048 TTTTTT  IF    NUB,>,8
         IF    NUB,>,8
* TTTTTT                 DISPLAY 'MAX MONITORS EXCEEDED'
* TTTTTT             ELSE
*ZC   1049 TTTTTT  DISPLAY 'MAX MONITORS EXCEEDED'
         DISPLAY 'MAX MONITORS EXCEEDED'
* TTTTTT                 MOVE GLOB-NAME TO MONITORIT-VARIABLE (NUB)
*ZC   1051 TTTTTT  ELSE  
         ELSE  
*ZC   1051 TTTTTT  MOVE  GLOB_NAME,TO,MONITORIT_VARIABLE,'(',NUB,')'
         MOVE  GLOB_NAME,TO,MONITORIT_VARIABLE,'(',NUB,')'
* TTTTTT                 MOVE GLOB-SUB1 TO MONITORIT-SUB1     (NUB)
*ZC   1052 TTTTTT  MOVE  GLOB_SUB1,TO,MONITORIT_SUB1,'(',NUB,')'
         MOVE  GLOB_SUB1,TO,MONITORIT_SUB1,'(',NUB,')'
* TTTTTT                 MOVE GLOB-SUB2 TO MONITORIT-SUB2     (NUB)
*ZC   1053 TTTTTT  MOVE  GLOB_SUB2,TO,MONITORIT_SUB2,'(',NUB,')'
         MOVE  GLOB_SUB2,TO,MONITORIT_SUB2,'(',NUB,')'
* TTTTTT                 MOVE GLOB-SUB3 TO MONITORIT-SUB3     (NUB)
*ZC   1054 TTTTTT  MOVE  GLOB_SUB3,TO,MONITORIT_SUB3,'(',NUB,')'
         MOVE  GLOB_SUB3,TO,MONITORIT_SUB3,'(',NUB,')'
* TTTTTT                 MOVE 'N'              TO MONITORIT-FLAG     (NX
               UB)
*ZC   1055 TTTTTT  MOVE  'N',TO,MONITORIT_FLAG,'(',NUB,')'
         MOVE  'N',TO,MONITORIT_FLAG,'(',NUB,')'
* TTTTTT                 MOVE ZEROES           TO MONITORIT-POINTER  (NX
               UB)
*ZC   1056 TTTTTT  MOVE  ZEROES,TO,MONITORIT_POINTER,'(',NUB,')'
         MOVE  ZEROES,TO,MONITORIT_POINTER,'(',NUB,')'
* TTTTTT                 MOVE ZEROES           TO MONITORIT-LENGTH   (NX
               UB)
* TTTTTT             END-IF
*ZC   1057 TTTTTT  MOVE  ZEROES,TO,MONITORIT_LENGTH,'(',NUB,')'
         MOVE  ZEROES,TO,MONITORIT_LENGTH,'(',NUB,')'
* TTTTTT             PERFORM VARYING NUB
*ZC   1059 TTTTTT  END_IF 
         END_IF 
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL MONITORIT-VARIABLE (NUB) = TH2-SPACES
* TTTTTT             END-PERFORM
*ZC   1059 TTTTTT  PERFORM VARYING,NUB,FROM,1,BY,1,UNTIL,MONITORIT_VARIX
               ABLE,'(',NUB,')',=,TH2_SPACES
         PERFORM VARYING,NUB,FROM,1,BY,1,UNTIL,MONITORIT_VARIABLE,'(',NX
               UB,')',=,TH2_SPACES
* TTTTTT             MOVE 'M'              TO PREV-COMMAND
*ZC   1063 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC   1063 TTTTTT  MOVE  'M',TO,PREV_COMMAND
         MOVE  'M',TO,PREV_COMMAND
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         END-IF
*ZC   1064 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC   1066 TTTTTT  END_IF 
         END_IF 
*ZC   1066 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'B'
*ZC   1068 TTTTTT  IF    GLOB_COMMAND,=,'B'
         IF    GLOB_COMMAND,=,'B'
* TTTTTT         IF THE-COMMAND-3-8 = SIX-SPACES
*ZC   1069 TTTTTT  IF    THE_COMMAND_3_8,=,SIX_SPACES
         IF    THE_COMMAND_3_8,=,SIX_SPACES
* TTTTTT             DISPLAY '*----------------------------*'
*ZC   1070 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
* TTTTTT             DISPLAY 'BREAK LIST'
*ZC   1071 TTTTTT  DISPLAY 'BREAK LIST'
         DISPLAY 'BREAK LIST'
* TTTTTT             DISPLAY ' '
*ZC   1072 TTTTTT  DISPLAY ' '
         DISPLAY ' '
* TTTTTT             PERFORM BREAKIT-LIST VARYING BUB2
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL BREAKIT-NUMBER (BUB2) = SIX-SPACES
* TTTTTT                  OR BUB2 > 9
*ZC   1073 TTTTTT  PERFORM BREAKIT_LIST,VARYING,BUB2,FROM,1,BY,1,UNTIL,X
               BREAKIT_NUMBER,'(',BUB2,')',=,SIX_SPACES,OR,BUB2,>,9
         PERFORM BREAKIT_LIST,VARYING,BUB2,FROM,1,BY,1,UNTIL,BREAKIT_NUX
               MBER,'(',BUB2,')',=,SIX_SPACES,OR,BUB2,>,9
* TTTTTT             DISPLAY '*----------------------------*'
*ZC   1077 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
* TTTTTT             MOVE 'B'          TO PREV-COMMAND
*ZC   1078 TTTTTT  MOVE  'B',TO,PREV_COMMAND
         MOVE  'B',TO,PREV_COMMAND
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         ELSE
*ZC   1079 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT             MOVE 'BREAK'      TO GOIT-NUMBER
*ZC   1081 TTTTTT  ELSE  
         ELSE  
*ZC   1081 TTTTTT  MOVE  'BREAK',TO,GOIT_NUMBER
         MOVE  'BREAK',TO,GOIT_NUMBER
* TTTTTT             PERFORM VARYING BUB
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL BREAKIT-NUMBER (BUB) = SIX-SPACES
* TTTTTT                  OR BREAKIT-NUMBER (BUB) = THE-COMMAND-3-8
* TTTTTT                  OR BREAKIT-NUMBER (BUB) = SIX-LOW-VALUES
* TTTTTT                  OR BUB > 8
* TTTTTT             END-PERFORM
*ZC   1082 TTTTTT  PERFORM VARYING,BUB,FROM,1,BY,1,UNTIL,BREAKIT_NUMBERX
               ,'(',BUB,')',=,SIX_SPACES,OR,BREAKIT_NUMBER,'(',BUB,')',X
               =,THE_COMMAND_3_8,OR,BREAKIT_NUMBER,'(',BUB,')',=,SIX_LOX
               W_VALUES,OR,BUB,>,8
         PERFORM VARYING,BUB,FROM,1,BY,1,UNTIL,BREAKIT_NUMBER,'(',BUB,'X
               )',=,SIX_SPACES,OR,BREAKIT_NUMBER,'(',BUB,')',=,THE_COMMX
               AND_3_8,OR,BREAKIT_NUMBER,'(',BUB,')',=,SIX_LOW_VALUES,OX
               R,BUB,>,8
* TTTTTT             IF BUB > 8
*ZC   1089 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC   1089 TTTTTT  IF    BUB,>,8
         IF    BUB,>,8
* TTTTTT                 DISPLAY 'MAX BREAKS EXCEEDED'
* TTTTTT             ELSE
*ZC   1090 TTTTTT  DISPLAY 'MAX BREAKS EXCEEDED'
         DISPLAY 'MAX BREAKS EXCEEDED'
* TTTTTT                 MOVE THE-COMMAND-3-8 TO BREAKIT-NUMBER (BUB)
*ZC   1092 TTTTTT  ELSE  
         ELSE  
* TTTTTT             END-IF
*ZC   1092 TTTTTT  MOVE  THE_COMMAND_3_8,TO,BREAKIT_NUMBER,'(',BUB,')'
         MOVE  THE_COMMAND_3_8,TO,BREAKIT_NUMBER,'(',BUB,')'
* TTTTTT             PERFORM VARYING BUB
*ZC   1094 TTTTTT  END_IF 
         END_IF 
* TTTTTT                FROM 1 BY 1
* TTTTTT               UNTIL BREAKIT-NUMBER (BUB) = SIX-SPACES
* TTTTTT             END-PERFORM
*ZC   1094 TTTTTT  PERFORM VARYING,BUB,FROM,1,BY,1,UNTIL,BREAKIT_NUMBERX
               ,'(',BUB,')',=,SIX_SPACES
         PERFORM VARYING,BUB,FROM,1,BY,1,UNTIL,BREAKIT_NUMBER,'(',BUB,'X
               )',=,SIX_SPACES
* TTTTTT             MOVE 'B'              TO PREV-COMMAND
*ZC   1098 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC   1098 TTTTTT  MOVE  'B',TO,PREV_COMMAND
         MOVE  'B',TO,PREV_COMMAND
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         END-IF
*ZC   1099 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC   1101 TTTTTT  END_IF 
         END_IF 
*ZC   1101 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'G'
*ZC   1103 TTTTTT  IF    GLOB_COMMAND,=,'G'
         IF    GLOB_COMMAND,=,'G'
* TTTTTT         MOVE 'Y'              TO GOIT-OUTSTANDING
*ZC   1104 TTTTTT  MOVE  'Y',TO,GOIT_OUTSTANDING
         MOVE  'Y',TO,GOIT_OUTSTANDING
* TTTTTT         MOVE GLOB-NAME        TO GOIT-NAME
*ZC   1105 TTTTTT  MOVE  GLOB_NAME,TO,GOIT_NAME
         MOVE  GLOB_NAME,TO,GOIT_NAME
* TTTTTT         MOVE 'N'              TO GOIT-NAME-MATCHED
*ZC   1106 TTTTTT  MOVE  'N',TO,GOIT_NAME_MATCHED
         MOVE  'N',TO,GOIT_NAME_MATCHED
* TTTTTT         IF THE-COMMAND-3-8 NOT = SIX-SPACES
*ZC   1107 TTTTTT  IF    THE_COMMAND_3_8,NOT,=,SIX_SPACES
         IF    THE_COMMAND_3_8,NOT,=,SIX_SPACES
* TTTTTT             MOVE GLOB-NAME (1:6) TO GOIT-NUMBER
* TTTTTT         END-IF
*ZC   1108 TTTTTT  MOVE  GLOB_NAME,'(',1,:,6,')',TO,GOIT_NUMBER
         MOVE  GLOB_NAME,'(',1,:,6,')',TO,GOIT_NUMBER
* TTTTTT         MOVE GLOB-COMMAND    TO PREV-COMMAND
*ZC   1110 TTTTTT  END_IF 
         END_IF 
*ZC   1110 TTTTTT  MOVE  GLOB_COMMAND,TO,PREV_COMMAND
         MOVE  GLOB_COMMAND,TO,PREV_COMMAND
* TTTTTT         GO TO T
*ZC   1111 TTTTTT  GO    TO,T
         GO    TO,T
* TTTTTT     END-IF.
*ZC   1112 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'W'
*ZC   1114 TTTTTT  IF    GLOB_COMMAND,=,'W'
         IF    GLOB_COMMAND,=,'W'
* TTTTTT         PERFORM WORKIT
*ZC   1115 TTTTTT  PERFORM WORKIT
         PERFORM WORKIT
* TTTTTT         MOVE GLOB-COMMAND    TO PREV-COMMAND
*ZC   1116 TTTTTT  MOVE  GLOB_COMMAND,TO,PREV_COMMAND
         MOVE  GLOB_COMMAND,TO,PREV_COMMAND
* TTTTTT         GO TO T-ACCEPT
*ZC   1117 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC   1118 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'P'
*ZC   1120 TTTTTT  IF    GLOB_COMMAND,=,'P'
         IF    GLOB_COMMAND,=,'P'
* TTTTTT         PERFORM PROCIT
*ZC   1121 TTTTTT  PERFORM PROCIT
         PERFORM PROCIT
* TTTTTT         MOVE GLOB-COMMAND    TO PREV-COMMAND
*ZC   1122 TTTTTT  MOVE  GLOB_COMMAND,TO,PREV_COMMAND
         MOVE  GLOB_COMMAND,TO,PREV_COMMAND
* TTTTTT         GO TO T-ACCEPT
*ZC   1123 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC   1124 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'D'
*ZC   1126 TTTTTT  IF    GLOB_COMMAND,=,'D'
         IF    GLOB_COMMAND,=,'D'
* TTTTTT         MOVE 'N' TO MONITORING
*ZC   1127 TTTTTT  MOVE  'N',TO,MONITORING
         MOVE  'N',TO,MONITORING
* TTTTTT         MOVE 'Y' TO DIZPLAY
*ZC   1128 TTTTTT  MOVE  'Y',TO,DIZPLAY
         MOVE  'Y',TO,DIZPLAY
* TTTTTT         MOVE 1 TO NUB2
*ZC   1129 TTTTTT  MOVE  1,TO,NUB2
         MOVE  1,TO,NUB2
* TTTTTT         PERFORM PROCESS-DISPLAY
*ZC   1130 TTTTTT  PERFORM PROCESS_DISPLAY
         PERFORM PROCESS_DISPLAY
* TTTTTT         GO TO T-ACCEPT
*ZC   1131 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC   1132 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = 'X'
*ZC   1134 TTTTTT  IF    GLOB_COMMAND,=,'X'
         IF    GLOB_COMMAND,=,'X'
* TTTTTT         DISPLAY 'EXITING'
*ZC   1135 TTTTTT  DISPLAY 'EXITING'
         DISPLAY 'EXITING'
* TTTTTT         STOP RUN
*ZC   1136 TTTTTT  STOP  RUN
         STOP  RUN
* TTTTIT     END-IF.
*ZC   1137 TTTTIT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF GLOB-COMMAND = '+'
*ZC   1139 TTTTTT  IF    GLOB_COMMAND,=,'+'
         IF    GLOB_COMMAND,=,'+'
* TTTTTT         IF PREV-COMMAND = 'W'
*ZC   1140 TTTTTT  IF    PREV_COMMAND,=,'W'
         IF    PREV_COMMAND,=,'W'
* TTTTTT             PERFORM WORKIT-PLUS
*ZC   1141 TTTTTT  PERFORM WORKIT_PLUS
         PERFORM WORKIT_PLUS
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         END-IF
*ZC   1142 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT         IF PREV-COMMAND = 'P'
*ZC   1144 TTTTTT  END_IF 
         END_IF 
*ZC   1144 TTTTTT  IF    PREV_COMMAND,=,'P'
         IF    PREV_COMMAND,=,'P'
* TTTTTT             PERFORM PROCIT-PLUS
*ZC   1145 TTTTTT  PERFORM PROCIT_PLUS
         PERFORM PROCIT_PLUS
* TTTTTT             GO TO T-ACCEPT
* TTTTTT         END-IF
*ZC   1146 TTTTTT  GO    TO,T_ACCEPT
         GO    TO,T_ACCEPT
* TTTTTT     END-IF.
*ZC   1148 TTTTTT  END_IF 
         END_IF 
*ZC   1148 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
         LABEL T_EXIT
*ZC   1150 TTTTTT  EXIT  
         EXIT  
* TTTTTT T-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT PROCESS-DISPLAY SECTION.
         LABEL PROCESS_DISPLAY,SECTION
* TTTTTT     PERFORM VARYING MZ-SUB2
* TTTTTT        FROM 1 BY 1
* TTTTTT       UNTIL MZ-SUB2 > MZ-SUB
* TTTTTT          OR GLOB-NAME = MZ-NAME (MZ-SUB2)
*ZC   1153 TTTTTT  PERFORM VARYING,MZ_SUB2,FROM,1,BY,1,UNTIL,MZ_SUB2,>,X
               MZ_SUB,OR,GLOB_NAME,=,MZ_NAME,'(',MZ_SUB2,')'
         PERFORM VARYING,MZ_SUB2,FROM,1,BY,1,UNTIL,MZ_SUB2,>,MZ_SUB,OR,X
               GLOB_NAME,=,MZ_NAME,'(',MZ_SUB2,')'
* TTTTTT     END-PERFORM.
*ZC   1157 TTTTTT  END_PERFORM 
         END_PERFORM 
         PERIOD 
* TTTTTT     IF MZ-SUB2 > MZ-SUB
*ZC   1158 TTTTTT  IF    MZ_SUB2,>,MZ_SUB
         IF    MZ_SUB2,>,MZ_SUB
* TTTTTT         DISPLAY 'VARIABLE NOT FOUND '
* TTTTTT                  GLOB-NAME
* TTTTTT     ELSE
*ZC   1159 TTTTTT  DISPLAY 'VARIABLE NOT FOUND ',GLOB_NAME
         DISPLAY 'VARIABLE NOT FOUND ',GLOB_NAME
* TTTTTT         IF MZ-PIC-2 (MZ-SUB2) = '9'
*ZC   1162 TTTTTT  ELSE  
         ELSE  
* TTTTTT         OR MZ-PIC-2 (MZ-SUB2) = 'Z'
*ZC   1162 TTTTTT  IF    MZ_PIC_2,'(',MZ_SUB2,')',=,'9',OR,MZ_PIC_2,'('X
               ,MZ_SUB2,')',=,'Z'
         IF    MZ_PIC_2,'(',MZ_SUB2,')',=,'9',OR,MZ_PIC_2,'(',MZ_SUB2,'X
               )',=,'Z'
* TTTTTT             PERFORM NAME9-PROCESS
* TTTTTT         ELSE
*ZC   1164 TTTTTT  PERFORM NAME9_PROCESS
         PERFORM NAME9_PROCESS
* TTTTTT             IF MZ-PIC-2 (MZ-SUB2)
*ZC   1166 TTTTTT  ELSE  
         ELSE  
* TTTTTT             NOT ='A'
*ZC   1166 TTTTTT  IF    MZ_PIC_2,'(',MZ_SUB2,')',NOT,=,'A'
         IF    MZ_PIC_2,'(',MZ_SUB2,')',NOT,=,'A'
* TTTTTT                 PERFORM NAMEX-PROCESS
*ZC   1168 TTTTTT  PERFORM NAMEX_PROCESS
         PERFORM NAMEX_PROCESS
* TTTTTT                 IF XOK = 'Y'
*ZC   1169 TTTTTT  IF    XOK,=,'Y'
         IF    XOK,=,'Y'
* TTTTTT                     MOVE 'N' TO NONDISPLAYABLE
*ZC   1170 TTTTTT  MOVE  'N',TO,NONDISPLAYABLE
         MOVE  'N',TO,NONDISPLAYABLE
* TTTTTT                     MOVE 'N' TO DISPLAYABLE
*ZC   1171 TTTTTT  MOVE  'N',TO,DISPLAYABLE
         MOVE  'N',TO,DISPLAYABLE
* TTTTTT                     PERFORM DISPLAYIT
* TTTTTT                         VARYING LUMB FROM 1 BY 1
* TTTTTT                           UNTIL LUMB > MZ-LEN (MZ-SUB2)
* TTTTTT                              OR LUMB > 64000
*ZC   1172 TTTTTT  PERFORM DISPLAYIT,VARYING,LUMB,FROM,1,BY,1,UNTIL,LUMX
               B,>,MZ_LEN,'(',MZ_SUB2,')',OR,LUMB,>,64000
         PERFORM DISPLAYIT,VARYING,LUMB,FROM,1,BY,1,UNTIL,LUMB,>,MZ_LENX
               ,'(',MZ_SUB2,')',OR,LUMB,>,64000
* TTTTTT                     MOVE MZ-LEN (MZ-SUB2) TO MUB2
*ZC   1176 TTTTTT  MOVE  MZ_LEN,'(',MZ_SUB2,')',TO,MUB2
         MOVE  MZ_LEN,'(',MZ_SUB2,')',TO,MUB2
* TTTTTT                     COMPUTE GUB = (MUB2 / 32)
*ZC   1177 TTTTTT  COMPUTE GUB,=,'(',MUB2,/,32,')'
         COMPUTE GUB,=,'(',MUB2,/,32,')'
* TTTTTT                     COMPUTE HUB = MUB2 - (GUB * 32)
*ZC   1178 TTTTTT  COMPUTE HUB,=,MUB2,-,'(',GUB,*,32,')'
         COMPUTE HUB,=,MUB2,-,'(',GUB,*,32,')'
* TTTTTT                     COMPUTE GUB = GUB + 1
*ZC   1179 TTTTTT  COMPUTE GUB,=,GUB,+,1
         COMPUTE GUB,=,GUB,+,1
* TTTTTT                     MOVE 1                    TO GUB2
*ZC   1180 TTTTTT  MOVE  1,TO,GUB2
         MOVE  1,TO,GUB2
* TTTTTT                     MOVE 1                    TO GUB6
*ZC   1181 TTTTTT  MOVE  1,TO,GUB6
         MOVE  1,TO,GUB6
* TTTTTT                     IF DIZPLAY = 'Y'
*ZC   1182 TTTTTT  IF    DIZPLAY,=,'Y'
         IF    DIZPLAY,=,'Y'
* TTTTTT                     IF DISPLAYABLE = 'Y'
*ZC   1183 TTTTTT  IF    DISPLAYABLE,=,'Y'
         IF    DISPLAYABLE,=,'Y'
* TTTTTT                         IF NONDISPLAYABLE = 'N'
*ZC   1184 TTTTTT  IF    NONDISPLAYABLE,=,'N'
         IF    NONDISPLAYABLE,=,'N'
* TTTTTT                             PERFORM DISPLAYABLE-LUMP GUB TIMES
* TTTTTT                         ELSE
*ZC   1185 TTTTTT  PERFORM DISPLAYABLE_LUMP,GUB,TIMES
         PERFORM DISPLAYABLE_LUMP,GUB,TIMES
* TTTTTT                             MOVE 1            TO GUB3
*ZC   1187 TTTTTT  ELSE  
         ELSE  
*ZC   1187 TTTTTT  MOVE  1,TO,GUB3
         MOVE  1,TO,GUB3
* TTTTTT                             PERFORM NONDISP-LUMP
* TTTTTT                         END-IF
*ZC   1188 TTTTTT  PERFORM NONDISP_LUMP
         PERFORM NONDISP_LUMP
* TTTTTT                     ELSE
*ZC   1190 TTTTTT  END_IF 
         END_IF 
* TTTTTT                         MOVE 1            TO GUB3
*ZC   1191 TTTTTT  ELSE  
         ELSE  
*ZC   1191 TTTTTT  MOVE  1,TO,GUB3
         MOVE  1,TO,GUB3
* TTTTTT                         PERFORM NONDISP-LUMP
* TTTTTT                     END-IF
*ZC   1192 TTTTTT  PERFORM NONDISP_LUMP
         PERFORM NONDISP_LUMP
* TTTTTT                     END-IF
*ZC   1194 TTTTTT  END_IF 
         END_IF 
* TTTTTT                 END-IF
*ZC   1195 TTTTTT  END_IF 
         END_IF 
* TTTTTT             END-IF
*ZC   1196 TTTTTT  END_IF 
         END_IF 
* TTTTTT         END-IF
*ZC   1197 TTTTTT  END_IF 
         END_IF 
* TTTTTT         MOVE GLOB-COMMAND    TO PREV-COMMAND
*ZC   1198 TTTTTT  END_IF 
         END_IF 
*ZC   1198 TTTTTT  MOVE  GLOB_COMMAND,TO,PREV_COMMAND
         MOVE  GLOB_COMMAND,TO,PREV_COMMAND
* TTTTTT     END-IF.
*ZC   1199 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL PROCESS_DISPLAY_EXIT
*ZC   1200 TTTTTT  EXIT  
         EXIT  
* TTTTTT PROCESS-DISPLAY-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT BREAKIT-LIST SECTION.
         LABEL BREAKIT_LIST,SECTION
* TTTTTT     IF BREAKIT-NUMBER (BUB2) NOT = SIX-LOW-VALUES
*ZC   1203 TTTTTT  IF    BREAKIT_NUMBER,'(',BUB2,')',NOT,=,SIX_LOW_VALUX
               ES
         IF    BREAKIT_NUMBER,'(',BUB2,')',NOT,=,SIX_LOW_VALUES
* TTTTTT         DISPLAY BREAKIT-NUMBER (BUB2)
*ZC   1204 TTTTTT  DISPLAY BREAKIT_NUMBER,'(',BUB2,')'
         DISPLAY BREAKIT_NUMBER,'(',BUB2,')'
* TTTTTT     END-IF.
*ZC   1205 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL BREAKIT_LIST_EXIT
*ZC   1206 TTTTTT  EXIT  
         EXIT  
* TTTTTT BREAKIT-LIST-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT BREAKIT-FIND SECTION.
         LABEL BREAKIT_FIND,SECTION
* TTTTTT     MOVE 1                    TO BUB2.
*ZC   1209 TTTTTT  MOVE  1,TO,BUB2
         MOVE  1,TO,BUB2
         PERIOD 
* TTTTTT BREAKIT-FIND-LOOP.
         LABEL BREAKIT_FIND_LOOP
* TTTTTT     IF BUB2 > BUB
*ZC   1211 TTTTTT  IF    BUB2,>,BUB
         IF    BUB2,>,BUB
* TTTTTT        GO TO BREAKIT-FIND-EXIT
*ZC   1212 TTTTTT  GO    TO,BREAKIT_FIND_EXIT
         GO    TO,BREAKIT_FIND_EXIT
* TTTTTT     END-IF.
*ZC   1213 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     MOVE BREAKIT-NUMBER (BUB2) TO A-NUMBER.
*ZC   1214 TTTTTT  MOVE  BREAKIT_NUMBER,'(',BUB2,')',TO,A_NUMBER
         MOVE  BREAKIT_NUMBER,'(',BUB2,')',TO,A_NUMBER
         PERIOD 
* TTTTTT     MOVE LINE-NUMBER (LINE-COUNT2) TO B-NUMBER.
*ZC   1215 TTTTTT  MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,B_NUMBER
         MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,B_NUMBER
         PERIOD 
* TTTTTT     IF A-NUMBER = B-NUMBER
*ZC   1216 TTTTTT  IF    A_NUMBER,=,B_NUMBER
         IF    A_NUMBER,=,B_NUMBER
* TTTTTT         NEXT SENTENCE
* TTTTTT     ELSE
*ZC   1217 TTTTTT  NEXT  SENTENCE
         NEXT  SENTENCE
* TTTTTT         ADD 1                 TO BUB2
*ZC   1219 TTTTTT  ELSE  
         ELSE  
*ZC   1219 TTTTTT  ADD   1,TO,BUB2
         ADD   1,TO,BUB2
* TTTTTT         GO TO BREAKIT-FIND-LOOP
*ZC   1220 TTTTTT  GO    TO,BREAKIT_FIND_LOOP
         GO    TO,BREAKIT_FIND_LOOP
* TTTTTT     END-IF.
*ZC   1221 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL BREAKIT_FIND_EXIT
*ZC   1222 TTTTTT  EXIT  
         EXIT  
* TTTTTT BREAKIT-FIND-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT MONITORIT-FIND SECTION.
         LABEL MONITORIT_FIND,SECTION
* TTTTTT     MOVE 'Y' TO MONITORING.
*ZC   1225 TTTTTT  MOVE  'Y',TO,MONITORING
         MOVE  'Y',TO,MONITORING
         PERIOD 
* TTTTTT     MOVE 'N' TO DIZPLAY.
*ZC   1226 TTTTTT  MOVE  'N',TO,DIZPLAY
         MOVE  'N',TO,DIZPLAY
         PERIOD 
* TTTTTT     MOVE MONITORIT-VARIABLE (NUB2)
* TTTTTT       TO GLOB-NAME.
*ZC   1227 TTTTTT  MOVE  MONITORIT_VARIABLE,'(',NUB2,')',TO,GLOB_NAME
         MOVE  MONITORIT_VARIABLE,'(',NUB2,')',TO,GLOB_NAME
         PERIOD 
* TTTTTT     PERFORM MATCHIT.
* TTTTTT
*ZC   1229 TTTTTT  PERFORM MATCHIT
         PERFORM MATCHIT
         PERIOD 
* TTTTTT     IF MATCH-FOUND = 'Y'
*ZC   1231 TTTTTT  IF    MATCH_FOUND,=,'Y'
         IF    MATCH_FOUND,=,'Y'
* TTTTTT         MOVE MONITORIT-SUB1 (NUB2) TO GLOB-SUB1
*ZC   1232 TTTTTT  MOVE  MONITORIT_SUB1,'(',NUB2,')',TO,GLOB_SUB1
         MOVE  MONITORIT_SUB1,'(',NUB2,')',TO,GLOB_SUB1
* TTTTTT         MOVE MONITORIT-SUB2 (NUB2) TO GLOB-SUB2
*ZC   1233 TTTTTT  MOVE  MONITORIT_SUB2,'(',NUB2,')',TO,GLOB_SUB2
         MOVE  MONITORIT_SUB2,'(',NUB2,')',TO,GLOB_SUB2
* TTTTTT         MOVE MONITORIT-SUB3 (NUB2) TO GLOB-SUB3
*ZC   1234 TTTTTT  MOVE  MONITORIT_SUB3,'(',NUB2,')',TO,GLOB_SUB3
         MOVE  MONITORIT_SUB3,'(',NUB2,')',TO,GLOB_SUB3
* TTTTTT         PERFORM PROCESS-DISPLAY
*ZC   1235 TTTTTT  PERFORM PROCESS_DISPLAY
         PERFORM PROCESS_DISPLAY
* TTTTTT         IF MONITORIT-FLAG (NUB2) = 'N'
*ZC   1236 TTTTTT  IF    MONITORIT_FLAG,'(',NUB2,')',=,'N'
         IF    MONITORIT_FLAG,'(',NUB2,')',=,'N'
* TTTTTT             MOVE MONITORIT-MAX
* TTTTTT               TO MONITORIT-POINTER (NUB2)
*ZC   1237 TTTTTT  MOVE  MONITORIT_MAX,TO,MONITORIT_POINTER,'(',NUB2,')X
               '
         MOVE  MONITORIT_MAX,TO,MONITORIT_POINTER,'(',NUB2,')'
* TTTTTT             ADD  MZ-LEN (MZ-SUB2) TO MONITORIT-MAX
*ZC   1239 TTTTTT  ADD   MZ_LEN,'(',MZ_SUB2,')',TO,MONITORIT_MAX
         ADD   MZ_LEN,'(',MZ_SUB2,')',TO,MONITORIT_MAX
* TTTTTT             MOVE MZ-LEN (MZ-SUB2)
* TTTTTT               TO MONITORIT-LENGTH  (NUB2)
*ZC   1240 TTTTTT  MOVE  MZ_LEN,'(',MZ_SUB2,')',TO,MONITORIT_LENGTH,'('X
               ,NUB2,')'
         MOVE  MZ_LEN,'(',MZ_SUB2,')',TO,MONITORIT_LENGTH,'(',NUB2,')'
* TTTTTT             MOVE 'Y'
* TTTTTT               TO MONITORIT-FLAG    (NUB2)
* TTTTTT         END-IF
*ZC   1242 TTTTTT  MOVE  'Y',TO,MONITORIT_FLAG,'(',NUB2,')'
         MOVE  'Y',TO,MONITORIT_FLAG,'(',NUB2,')'
* TTTTTT         PERFORM MONITORIT-CHECK
*ZC   1245 TTTTTT  END_IF 
         END_IF 
*ZC   1245 TTTTTT  PERFORM MONITORIT_CHECK
         PERFORM MONITORIT_CHECK
* TTTTTT         IF MONITORIT-CHANGE = 'Y'
*ZC   1246 TTTTTT  IF    MONITORIT_CHANGE,=,'Y'
         IF    MONITORIT_CHANGE,=,'Y'
* TTTTTT             MOVE 'Y' TO DIZPLAY
*ZC   1247 TTTTTT  MOVE  'Y',TO,DIZPLAY
         MOVE  'Y',TO,DIZPLAY
* TTTTTT             PERFORM PROCESS-DISPLAY
*ZC   1248 TTTTTT  PERFORM PROCESS_DISPLAY
         PERFORM PROCESS_DISPLAY
* TTTTTT             IF GLOB-NAME = GOIT-NAME
*ZC   1249 TTTTTT  IF    GLOB_NAME,=,GOIT_NAME
         IF    GLOB_NAME,=,GOIT_NAME
* TTTTTT                 MOVE 'Y' TO GOIT-NAME-MATCHED
* TTTTTT             ELSE
*ZC   1250 TTTTTT  MOVE  'Y',TO,GOIT_NAME_MATCHED
         MOVE  'Y',TO,GOIT_NAME_MATCHED
* TTTTTT                 MOVE 'N' TO GOIT-NAME-MATCHED
*ZC   1252 TTTTTT  ELSE  
         ELSE  
* TTTTTT             END-IF
*ZC   1252 TTTTTT  MOVE  'N',TO,GOIT_NAME_MATCHED
         MOVE  'N',TO,GOIT_NAME_MATCHED
* TTTTTT         END-IF
*ZC   1254 TTTTTT  END_IF 
         END_IF 
* TTTTTT         PERFORM MONITORIT-UPDATE
*ZC   1255 TTTTTT  END_IF 
         END_IF 
*ZC   1255 TTTTTT  PERFORM MONITORIT_UPDATE
         PERFORM MONITORIT_UPDATE
* TTTTTT     END-IF.
*ZC   1256 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL MONITORIT_FIND_EXIT
*ZC   1257 TTTTTT  EXIT  
         EXIT  
* TTTTTT MONITORIT-FIND-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT MONITORIT-CHECK SECTION.
         LABEL MONITORIT_CHECK,SECTION
* TTTTTT     MOVE 1                     TO DUB.
*ZC   1260 TTTTTT  MOVE  1,TO,DUB
         MOVE  1,TO,DUB
         PERIOD 
* TTTTTT     MOVE MONITORIT-POINTER (NUB2)
* TTTTTT                                TO EUB.
*ZC   1261 TTTTTT  MOVE  MONITORIT_POINTER,'(',NUB2,')',TO,EUB
         MOVE  MONITORIT_POINTER,'(',NUB2,')',TO,EUB
         PERIOD 
* TTTTTT     MOVE 'N'                   TO MONITORIT-CHANGE.
*ZC   1263 TTTTTT  MOVE  'N',TO,MONITORIT_CHANGE
         MOVE  'N',TO,MONITORIT_CHANGE
         PERIOD 
* TTTTTT MONITORIT-CHECK-LOOP.
         LABEL MONITORIT_CHECK_LOOP
* TTTTTT     IF DUB > MONITORIT-LENGTH (NUB2)
*ZC   1265 TTTTTT  IF    DUB,>,MONITORIT_LENGTH,'(',NUB2,')'
         IF    DUB,>,MONITORIT_LENGTH,'(',NUB2,')'
* TTTTTT         GO TO MONITORIT-CHECK-EXIT
*ZC   1266 TTTTTT  GO    TO,MONITORIT_CHECK_EXIT
         GO    TO,MONITORIT_CHECK_EXIT
* TTTTTT     END-IF.
*ZC   1267 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     MOVE MONITORIT-CHUNK-C (EUB) TO A-CHAR.
*ZC   1268 TTTTTT  MOVE  MONITORIT_CHUNK_C,'(',EUB,')',TO,A_CHAR
         MOVE  MONITORIT_CHUNK_C,'(',EUB,')',TO,A_CHAR
         PERIOD 
* TTTTTT     MOVE LUMP-C (DUB)            TO B-CHAR.
*ZC   1269 TTTTTT  MOVE  LUMP_C,'(',DUB,')',TO,B_CHAR
         MOVE  LUMP_C,'(',DUB,')',TO,B_CHAR
         PERIOD 
* TTTTTT     IF A-CHAR NOT = B-CHAR
*ZC   1270 TTTTTT  IF    A_CHAR,NOT,=,B_CHAR
         IF    A_CHAR,NOT,=,B_CHAR
* TTTTTT         MOVE 'Y'                 TO MONITORIT-CHANGE
*ZC   1271 TTTTTT  MOVE  'Y',TO,MONITORIT_CHANGE
         MOVE  'Y',TO,MONITORIT_CHANGE
* TTTTTT         GO TO MONITORIT-CHECK-EXIT
*ZC   1272 TTTTTT  GO    TO,MONITORIT_CHECK_EXIT
         GO    TO,MONITORIT_CHECK_EXIT
* TTTTTT     END-IF.
*ZC   1273 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD 1                        TO DUB.
*ZC   1274 TTTTTT  ADD   1,TO,DUB
         ADD   1,TO,DUB
         PERIOD 
* TTTTTT     ADD 1                        TO EUB.
*ZC   1275 TTTTTT  ADD   1,TO,EUB
         ADD   1,TO,EUB
         PERIOD 
* TTTTTT     GO TO MONITORIT-CHECK-LOOP.
*ZC   1276 TTTTTT  GO    TO,MONITORIT_CHECK_LOOP
         GO    TO,MONITORIT_CHECK_LOOP
         PERIOD 
         LABEL MONITORIT_CHECK_EXIT
*ZC   1277 TTTTTT  EXIT  
         EXIT  
* TTTTTT MONITORIT-CHECK-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT MONITORIT-UPDATE SECTION.
         LABEL MONITORIT_UPDATE,SECTION
* TTTTTT     MOVE 1                     TO DUB.
*ZC   1280 TTTTTT  MOVE  1,TO,DUB
         MOVE  1,TO,DUB
         PERIOD 
* TTTTTT     MOVE MONITORIT-POINTER (NUB2)
* TTTTTT                                TO EUB.
*ZC   1281 TTTTTT  MOVE  MONITORIT_POINTER,'(',NUB2,')',TO,EUB
         MOVE  MONITORIT_POINTER,'(',NUB2,')',TO,EUB
         PERIOD 
* TTTTTT     MOVE 'N'                   TO MONITORIT-CHANGE.
*ZC   1283 TTTTTT  MOVE  'N',TO,MONITORIT_CHANGE
         MOVE  'N',TO,MONITORIT_CHANGE
         PERIOD 
* TTTTTT MONITORIT-UPDATE-LOOP.
         LABEL MONITORIT_UPDATE_LOOP
* TTTTTT     IF DUB > MONITORIT-LENGTH (NUB2)
*ZC   1285 TTTTTT  IF    DUB,>,MONITORIT_LENGTH,'(',NUB2,')'
         IF    DUB,>,MONITORIT_LENGTH,'(',NUB2,')'
* TTTTTT         GO TO MONITORIT-UPDATE-EXIT
*ZC   1286 TTTTTT  GO    TO,MONITORIT_UPDATE_EXIT
         GO    TO,MONITORIT_UPDATE_EXIT
* TTTTTT     END-IF.
*ZC   1287 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     MOVE LUMP-C (DUB)
* TTTTTT       TO MONITORIT-CHUNK-C (EUB).
*ZC   1288 TTTTTT  MOVE  LUMP_C,'(',DUB,')',TO,MONITORIT_CHUNK_C,'(',EUX
               B,')'
         MOVE  LUMP_C,'(',DUB,')',TO,MONITORIT_CHUNK_C,'(',EUB,')'
         PERIOD 
* TTTTTT     ADD 1                        TO DUB.
*ZC   1290 TTTTTT  ADD   1,TO,DUB
         ADD   1,TO,DUB
         PERIOD 
* TTTTTT     ADD 1                        TO EUB.
*ZC   1291 TTTTTT  ADD   1,TO,EUB
         ADD   1,TO,EUB
         PERIOD 
* TTTTTT     GO TO MONITORIT-UPDATE-LOOP.
*ZC   1292 TTTTTT  GO    TO,MONITORIT_UPDATE_LOOP
         GO    TO,MONITORIT_UPDATE_LOOP
         PERIOD 
         LABEL MONITORIT_UPDATE_EXIT
*ZC   1293 TTTTTT  EXIT  
         EXIT  
* TTTTTT MONITORIT-UPDATE-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT MONITORIT-LIST SECTION.
         LABEL MONITORIT_LIST,SECTION
* TTTTTT     IF MONITORIT-VARIABLE (NUB2) = TH2-LOW-VALUES
*ZC   1296 TTTTTT  IF    MONITORIT_VARIABLE,'(',NUB2,')',=,TH2_LOW_VALUX
               ES
         IF    MONITORIT_VARIABLE,'(',NUB2,')',=,TH2_LOW_VALUES
* TTTTTT         GO MONITORIT-LIST-EXIT
*ZC   1297 TTTTTT  GO    MONITORIT_LIST_EXIT
         GO    MONITORIT_LIST_EXIT
* TTTTTT     END-IF.
*ZC   1298 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF MONITORIT-SUB1 (NUB2) = SPACES
*ZC   1300 TTTTTT  IF    MONITORIT_SUB1,'(',NUB2,')',=,SPACES
         IF    MONITORIT_SUB1,'(',NUB2,')',=,SPACES
* TTTTTT         DISPLAY MONITORIT-VARIABLE (NUB2)
*ZC   1301 TTTTTT  DISPLAY MONITORIT_VARIABLE,'(',NUB2,')'
         DISPLAY MONITORIT_VARIABLE,'(',NUB2,')'
* TTTTTT         GO MONITORIT-LIST-EXIT
*ZC   1302 TTTTTT  GO    MONITORIT_LIST_EXIT
         GO    MONITORIT_LIST_EXIT
* TTTTTT     END-IF.
*ZC   1303 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF MONITORIT-SUB2 (NUB2) = THIRTY-SPACES
*ZC   1305 TTTTTT  IF    MONITORIT_SUB2,'(',NUB2,')',=,THIRTY_SPACES
         IF    MONITORIT_SUB2,'(',NUB2,')',=,THIRTY_SPACES
* TTTTTT         DISPLAY MONITORIT-VARIABLE (NUB2)
* TTTTTT                ' WITH 1 SUBSCRIPT'
*ZC   1306 TTTTTT  DISPLAY MONITORIT_VARIABLE,'(',NUB2,')',' WITH 1 SUBX
               SCRIPT'
         DISPLAY MONITORIT_VARIABLE,'(',NUB2,')',' WITH 1 SUBSCRIPT'
* TTTTTT         GO MONITORIT-LIST-EXIT
*ZC   1308 TTTTTT  GO    MONITORIT_LIST_EXIT
         GO    MONITORIT_LIST_EXIT
* TTTTTT     END-IF.
*ZC   1309 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     IF MONITORIT-SUB3 (NUB2) = THIRTY-SPACES
*ZC   1311 TTTTTT  IF    MONITORIT_SUB3,'(',NUB2,')',=,THIRTY_SPACES
         IF    MONITORIT_SUB3,'(',NUB2,')',=,THIRTY_SPACES
* TTTTTT         DISPLAY MONITORIT-VARIABLE (NUB2)
* TTTTTT                ' WITH 2 SUBSCRIPTS'
*ZC   1312 TTTTTT  DISPLAY MONITORIT_VARIABLE,'(',NUB2,')',' WITH 2 SUBX
               SCRIPTS'
         DISPLAY MONITORIT_VARIABLE,'(',NUB2,')',' WITH 2 SUBSCRIPTS'
* TTTTTT         GO MONITORIT-LIST-EXIT
*ZC   1314 TTTTTT  GO    MONITORIT_LIST_EXIT
         GO    MONITORIT_LIST_EXIT
* TTTTTT     END-IF.
*ZC   1315 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     DISPLAY MONITORIT-VARIABLE (NUB2)
* TTTTTT            ' WITH 3 SUBSCRIPTS'.
* TTTTTT
*ZC   1317 TTTTTT  DISPLAY MONITORIT_VARIABLE,'(',NUB2,')',' WITH 3 SUBX
               SCRIPTS'
         DISPLAY MONITORIT_VARIABLE,'(',NUB2,')',' WITH 3 SUBSCRIPTS'
         PERIOD 
         LABEL MONITORIT_LIST_EXIT
*ZC   1320 TTTTTT  EXIT  
         EXIT  
* TTTTTT MONITORIT-LIST-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT MATCHIT SECTION.
         LABEL MATCHIT,SECTION
* TTTTTT     MOVE 'N'                  TO MATCH-FOUND.
*ZC   1323 TTTTTT  MOVE  'N',TO,MATCH_FOUND
         MOVE  'N',TO,MATCH_FOUND
         PERIOD 
* TTTTTT     PERFORM VARYING MZ-SUB2
* TTTTTT        FROM 1 BY 1
* TTTTTT       UNTIL MZ-SUB2 > MZ-SUB
* TTTTTT          OR GLOB-NAME = MZ-NAME (MZ-SUB2)
*ZC   1324 TTTTTT  PERFORM VARYING,MZ_SUB2,FROM,1,BY,1,UNTIL,MZ_SUB2,>,X
               MZ_SUB,OR,GLOB_NAME,=,MZ_NAME,'(',MZ_SUB2,')'
         PERFORM VARYING,MZ_SUB2,FROM,1,BY,1,UNTIL,MZ_SUB2,>,MZ_SUB,OR,X
               GLOB_NAME,=,MZ_NAME,'(',MZ_SUB2,')'
* TTTTTT     END-PERFORM.
*ZC   1328 TTTTTT  END_PERFORM 
         END_PERFORM 
         PERIOD 
* TTTTTT     IF GLOB-NAME = MZ-NAME (MZ-SUB2)
*ZC   1329 TTTTTT  IF    GLOB_NAME,=,MZ_NAME,'(',MZ_SUB2,')'
         IF    GLOB_NAME,=,MZ_NAME,'(',MZ_SUB2,')'
* TTTTTT         MOVE 'Y' TO MATCH-FOUND
*ZC   1330 TTTTTT  MOVE  'Y',TO,MATCH_FOUND
         MOVE  'Y',TO,MATCH_FOUND
* TTTTTT     END-IF.
*ZC   1331 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL MATCHIT_EXIT
*ZC   1332 TTTTTT  EXIT  
         EXIT  
* TTTTTT MATCHIT-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT DISPLAYABLE-LUMP SECTION.
         LABEL DISPLAYABLE_LUMP,SECTION
* TTTTTT     IF MZ-LEN (MZ-SUB2) < 32
*ZC   1335 TTTTTT  IF    MZ_LEN,'(',MZ_SUB2,')',<,32
         IF    MZ_LEN,'(',MZ_SUB2,')',<,32
* TTTTTT         DISPLAY LUMP-BLOCK (GUB2)
* TTTTTT     ELSE
*ZC   1336 TTTTTT  DISPLAY LUMP_BLOCK,'(',GUB2,')'
         DISPLAY LUMP_BLOCK,'(',GUB2,')'
* TTTTTT         DISPLAY GUB6 ' ' LUMP-BLOCK (GUB2)
*ZC   1338 TTTTTT  ELSE  
         ELSE  
*ZC   1338 TTTTTT  DISPLAY GUB6,' ',LUMP_BLOCK,'(',GUB2,')'
         DISPLAY GUB6,' ',LUMP_BLOCK,'(',GUB2,')'
* TTTTTT     END-IF.
*ZC   1339 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD 1                     TO GUB2.
*ZC   1340 TTTTTT  ADD   1,TO,GUB2
         ADD   1,TO,GUB2
         PERIOD 
* TTTTTT     ADD 32                    TO GUB6.
*ZC   1341 TTTTTT  ADD   32,TO,GUB6
         ADD   32,TO,GUB6
         PERIOD 
         LABEL DISPLAYABLE_LUMP_EXIT
*ZC   1342 TTTTTT  EXIT  
         EXIT  
* TTTTTT DISPLAYABLE-LUMP-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT NONDISP-LUMP SECTION.
         LABEL NONDISP_LUMP,SECTION
* TTTTTT     MOVE LUMP-BLOCK (GUB3)    TO BLOC.
*ZC   1345 TTTTTT  MOVE  LUMP_BLOCK,'(',GUB3,')',TO,BLOC
         MOVE  LUMP_BLOCK,'(',GUB3,')',TO,BLOC
         PERIOD 
* TTTTTT     MOVE 1                    TO GUB4.
*ZC   1346 TTTTTT  MOVE  1,TO,GUB4
         MOVE  1,TO,GUB4
         PERIOD 
* TTTTTT     MOVE SPACES               TO BLOCG.
*ZC   1347 TTTTTT  MOVE  SPACES,TO,BLOCG
         MOVE  SPACES,TO,BLOCG
         PERIOD 
* TTTTTT     MOVE SPACES               TO BLOCH.
*ZC   1348 TTTTTT  MOVE  SPACES,TO,BLOCH
         MOVE  SPACES,TO,BLOCH
         PERIOD 
* TTTTTT     PERFORM EACH-ND-LUMP 32 TIMES.
*ZC   1349 TTTTTT  PERFORM EACH_ND_LUMP,32,TIMES
         PERFORM EACH_ND_LUMP,32,TIMES
         PERIOD 
* TTTTTT     IF MZ-LEN (MZ-SUB2) < 32
*ZC   1350 TTTTTT  IF    MZ_LEN,'(',MZ_SUB2,')',<,32
         IF    MZ_LEN,'(',MZ_SUB2,')',<,32
* TTTTTT         DISPLAY BLOCG
*ZC   1351 TTTTTT  DISPLAY BLOCG
         DISPLAY BLOCG
* TTTTTT         DISPLAY BLOCH
* TTTTTT     ELSE
*ZC   1352 TTTTTT  DISPLAY BLOCH
         DISPLAY BLOCH
* TTTTTT         DISPLAY GUB6  ' ' BLOCG
*ZC   1354 TTTTTT  ELSE  
         ELSE  
*ZC   1354 TTTTTT  DISPLAY GUB6,' ',BLOCG
         DISPLAY GUB6,' ',BLOCG
* TTTTTT         DISPLAY '       ' BLOCH
*ZC   1355 TTTTTT  DISPLAY '       ',BLOCH
         DISPLAY '       ',BLOCH
* TTTTTT     END-IF.
*ZC   1356 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD 1                     TO GUB3.
*ZC   1357 TTTTTT  ADD   1,TO,GUB3
         ADD   1,TO,GUB3
         PERIOD 
* TTTTTT     IF GUB3 > GUB
*ZC   1358 TTTTTT  IF    GUB3,>,GUB
         IF    GUB3,>,GUB
* TTTTTT         GO TO NONDISP-LUMP-EXIT
* TTTTTT     ELSE
*ZC   1359 TTTTTT  GO    TO,NONDISP_LUMP_EXIT
         GO    TO,NONDISP_LUMP_EXIT
* TTTTTT         ADD 32                TO GUB6
*ZC   1361 TTTTTT  ELSE  
         ELSE  
*ZC   1361 TTTTTT  ADD   32,TO,GUB6
         ADD   32,TO,GUB6
* TTTTTT         GO TO NONDISP-LUMP
*ZC   1362 TTTTTT  GO    TO,NONDISP_LUMP
         GO    TO,NONDISP_LUMP
* TTTTTT     END-IF.
*ZC   1363 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL NONDISP_LUMP_EXIT
*ZC   1364 TTTTTT  EXIT  
         EXIT  
* TTTTTT NONDISP-LUMP-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT EACH-ND-LUMP SECTION.
         LABEL EACH_ND_LUMP,SECTION
* TTTTTT     IF GUB3 = GUB
*ZC   1367 TTTTTT  IF    GUB3,=,GUB
         IF    GUB3,=,GUB
* TTTTTT         IF GUB4 > HUB
*ZC   1368 TTTTTT  IF    GUB4,>,HUB
         IF    GUB4,>,HUB
* TTTTTT             ADD 1             TO GUB4
*ZC   1369 TTTTTT  ADD   1,TO,GUB4
         ADD   1,TO,GUB4
* TTTTTT             GO TO EACH-ND-LUMP-EXIT
* TTTTTT         END-IF
*ZC   1370 TTTTTT  GO    TO,EACH_ND_LUMP_EXIT
         GO    TO,EACH_ND_LUMP_EXIT
* TTTTTT     END-IF.
*ZC   1372 TTTTTT  END_IF 
         END_IF 
*ZC   1372 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     MOVE '. '                 TO BLOCG-BI (GUB4).
*ZC   1373 TTTTTT  MOVE  '. ',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  '. ',TO,BLOCG_BI,'(',GUB4,')'
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = SPACE)
*ZC   1374 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,SPACE,')'
         IF    '(',BLOC_C,'(',GUB4,')',=,SPACE,')'
* TTTTTT         MOVE '  '             TO BLOCG-BI (GUB4)
*ZC   1375 TTTTTT  MOVE  '  ',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  '  ',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1376 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1377 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) NOT < 'A' AND  BLOC-C (GUB4) NOT > 'Z')
*ZC   1378 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',NOT,<,'A',AND,BLOC_C,'X
               (',GUB4,')',NOT,>,'Z',')'
         IF    '(',BLOC_C,'(',GUB4,')',NOT,<,'A',AND,BLOC_C,'(',GUB4,')X
               ',NOT,>,'Z',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1379 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1380 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1381 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) NOT < 'a' AND BLOC-C (GUB4) NOT > 'z')
*ZC   1382 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',NOT,<,'a',AND,BLOC_C,'X
               (',GUB4,')',NOT,>,'z',')'
         IF    '(',BLOC_C,'(',GUB4,')',NOT,<,'a',AND,BLOC_C,'(',GUB4,')X
               ',NOT,>,'z',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1383 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1384 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1385 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = '@' OR '$' OR '*' OR '&' OR '%' OR '+'X
               )
*ZC   1386 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,'@',OR,'$',OR,'*',ORX
               ,'&&',OR,'%',OR,'+',')'
         IF    '(',BLOC_C,'(',GUB4,')',=,'@',OR,'$',OR,'*',OR,'&&',OR,'X
               %',OR,'+',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1387 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1388 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1389 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = X'4D')
*ZC   1390 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,X'4D',')'
         IF    '(',BLOC_C,'(',GUB4,')',=,X'4D',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1391 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1392 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1393 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = X'5D')
*ZC   1394 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,X'5D',')'
         IF    '(',BLOC_C,'(',GUB4,')',=,X'5D',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1395 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1396 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1397 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = X'6B')
*ZC   1398 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,X'6B',')'
         IF    '(',BLOC_C,'(',GUB4,')',=,X'6B',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1399 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1400 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1401 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = '-' OR '=' OR '{' OR '}' OR '[' OR ']'X
               )
*ZC   1402 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,'-',OR,'=',OR,'{',ORX
               ,'}',OR,'[',OR,']',')'
         IF    '(',BLOC_C,'(',GUB4,')',=,'-',OR,'=',OR,'{',OR,'}',OR,'[X
               ',OR,']',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1403 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1404 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1405 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = ':' OR '"' OR '<' OR '>' OR '?' OR '.'X
               )
*ZC   1406 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,':',OR,'"',OR,'<',ORX
               ,'>',OR,'?',OR,'.',')'
         IF    '(',BLOC_C,'(',GUB4,')',=,':',OR,'"',OR,'<',OR,'>',OR,'?X
               ',OR,'.',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1407 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1408 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1409 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (BLOC-C (GUB4) = '/' OR '''')
*ZC   1410 TTTTTT  IF    '(',BLOC_C,'(',GUB4,')',=,'/',OR,'''',')'
         IF    '(',BLOC_C,'(',GUB4,')',=,'/',OR,'''',')'
* TTTTTT         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1411 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTTT         GO TO EACH-ND
*ZC   1412 TTTTTT  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTTT     END-IF.
*ZC   1413 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTT+     IF (BLOC-C (GUB4) NOT < '0' AND BLOC-C (GUB4) NOT > '9')
*ZC   1414 TTTTT+  IF    '(',BLOC_C,'(',GUB4,')',NOT,<,'0',AND,BLOC_C,'X
               (',GUB4,')',NOT,>,'9',')'
         IF    '(',BLOC_C,'(',GUB4,')',NOT,<,'0',AND,BLOC_C,'(',GUB4,')X
               ',NOT,>,'9',')'
* TTTTT+         MOVE BLOC-C (GUB4)    TO BLOCG-BI (GUB4)
*ZC   1415 TTTTT+  MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
         MOVE  BLOC_C,'(',GUB4,')',TO,BLOCG_BI,'(',GUB4,')'
* TTTTT+         GO TO EACH-ND
*ZC   1416 TTTTT+  GO    TO,EACH_ND
         GO    TO,EACH_ND
* TTTTT+     END-IF.
*ZC   1417 TTTTT+  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT EACH-ND.
         LABEL EACH_ND
* TTTTTT     MOVE LOW-VALUES           TO THE-1ST-CHAR.
*ZC   1420 TTTTTT  MOVE  LOW_VALUES,TO,THE_1ST_CHAR
         MOVE  LOW_VALUES,TO,THE_1ST_CHAR
         PERIOD 
* TTTTTT     MOVE BLOC-C (GUB4)        TO THE-2ND-CHAR.
*ZC   1421 TTTTTT  MOVE  BLOC_C,'(',GUB4,')',TO,THE_2ND_CHAR
         MOVE  BLOC_C,'(',GUB4,')',TO,THE_2ND_CHAR
         PERIOD 
* TTTTTT     COMPUTE LHS = NINE-04-COMP / 16.
*ZC   1422 TTTTTT  COMPUTE LHS,=,NINE_04_COMP,/,16
         COMPUTE LHS,=,NINE_04_COMP,/,16
         PERIOD 
* TTTTTT     COMPUTE RHS = NINE-04-COMP - (LHS * 16).
*ZC   1423 TTTTTT  COMPUTE RHS,=,NINE_04_COMP,-,'(',LHS,*,16,')'
         COMPUTE RHS,=,NINE_04_COMP,-,'(',LHS,*,16,')'
         PERIOD 
* TTTTTT     ADD 1                     TO LHS.
*ZC   1424 TTTTTT  ADD   1,TO,LHS
         ADD   1,TO,LHS
         PERIOD 
* TTTTTT     ADD 1                     TO RHS.
*ZC   1425 TTTTTT  ADD   1,TO,RHS
         ADD   1,TO,RHS
         PERIOD 
* TTTTTT     MOVE THE-ARRAY-C (LHS)    TO BLOCH-BI-LHS (GUB4).
*ZC   1426 TTTTTT  MOVE  THE_ARRAY_C,'(',LHS,')',TO,BLOCH_BI_LHS,'(',GUX
               B4,')'
         MOVE  THE_ARRAY_C,'(',LHS,')',TO,BLOCH_BI_LHS,'(',GUB4,')'
         PERIOD 
* TTTTTT     MOVE THE-ARRAY-C (RHS)    TO BLOCH-BI-RHS (GUB4).
*ZC   1427 TTTTTT  MOVE  THE_ARRAY_C,'(',RHS,')',TO,BLOCH_BI_RHS,'(',GUX
               B4,')'
         MOVE  THE_ARRAY_C,'(',RHS,')',TO,BLOCH_BI_RHS,'(',GUB4,')'
         PERIOD 
* TTTTTT     ADD 1                     TO GUB4.
*ZC   1428 TTTTTT  ADD   1,TO,GUB4
         ADD   1,TO,GUB4
         PERIOD 
         LABEL EACH_ND_LUMP_EXIT
*ZC   1429 TTTTTT  EXIT  
         EXIT  
* TTTTTT EACH-ND-LUMP-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT DISPLAYIT SECTION.
         LABEL DISPLAYIT,SECTION
* TTTTTT     IF (LUMP-C (LUMB) = SPACE)
*ZC   1432 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,SPACE,')'
         IF    '(',LUMP_C,'(',LUMB,')',=,SPACE,')'
* TTTTTT         GO TO D-ADD
*ZC   1433 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1434 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) NOT < 'A' AND LUMP-C (LUMB) NOT > 'Z')
*ZC   1435 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',NOT,<,'A',AND,LUMP_C,'X
               (',LUMB,')',NOT,>,'Z',')'
         IF    '(',LUMP_C,'(',LUMB,')',NOT,<,'A',AND,LUMP_C,'(',LUMB,')X
               ',NOT,>,'Z',')'
* TTTTTT         GO TO D-ADD
*ZC   1436 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1437 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) NOT < 'a' AND LUMP-C (LUMB) NOT > 'z')
*ZC   1438 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',NOT,<,'a',AND,LUMP_C,'X
               (',LUMB,')',NOT,>,'z',')'
         IF    '(',LUMP_C,'(',LUMB,')',NOT,<,'a',AND,LUMP_C,'(',LUMB,')X
               ',NOT,>,'z',')'
* TTTTTT         GO TO D-ADD
*ZC   1439 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1440 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) = '@' OR '$' OR '*' OR '&' OR '%' OR '+'X
               )
*ZC   1441 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,'@',OR,'$',OR,'*',ORX
               ,'&&',OR,'%',OR,'+',')'
         IF    '(',LUMP_C,'(',LUMB,')',=,'@',OR,'$',OR,'*',OR,'&&',OR,'X
               %',OR,'+',')'
* TTTTTT         GO TO D-ADD
*ZC   1442 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1443 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) = X'4D')
*ZC   1444 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,X'4D',')'
         IF    '(',LUMP_C,'(',LUMB,')',=,X'4D',')'
* TTTTTT         GO TO D-ADD
*ZC   1445 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1446 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) = X'5D')
*ZC   1447 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,X'5D',')'
         IF    '(',LUMP_C,'(',LUMB,')',=,X'5D',')'
* TTTTTT         GO TO D-ADD
*ZC   1448 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1449 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) = X'6B')
*ZC   1450 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,X'6B',')'
         IF    '(',LUMP_C,'(',LUMB,')',=,X'6B',')'
* TTTTTT         GO TO D-ADD
*ZC   1451 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1452 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) = '-' OR '=' OR '{' OR '}' OR '[' OR ']'X
               )
*ZC   1453 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,'-',OR,'=',OR,'{',ORX
               ,'}',OR,'[',OR,']',')'
         IF    '(',LUMP_C,'(',LUMB,')',=,'-',OR,'=',OR,'{',OR,'}',OR,'[X
               ',OR,']',')'
* TTTTTT         GO TO D-ADD
*ZC   1454 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1455 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) = ':' OR '"' OR '<' OR '>' OR '?' OR '.'X
               )
*ZC   1456 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,':',OR,'"',OR,'<',ORX
               ,'>',OR,'?',OR,'.',')'
         IF    '(',LUMP_C,'(',LUMB,')',=,':',OR,'"',OR,'<',OR,'>',OR,'?X
               ',OR,'.',')'
* TTTTTT         GO TO D-ADD
*ZC   1457 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1458 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF (LUMP-C (LUMB) = '/' OR '''')
*ZC   1459 TTTTTT  IF    '(',LUMP_C,'(',LUMB,')',=,'/',OR,'''',')'
         IF    '(',LUMP_C,'(',LUMB,')',=,'/',OR,'''',')'
* TTTTTT         GO TO D-ADD
*ZC   1460 TTTTTT  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTTT     END-IF.
*ZC   1461 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTT+     IF (LUMP-C (LUMB) NOT < '0' AND LUMP-C (LUMB) NOT > '9')
*ZC   1462 TTTTT+  IF    '(',LUMP_C,'(',LUMB,')',NOT,<,'0',AND,LUMP_C,'X
               (',LUMB,')',NOT,>,'9',')'
         IF    '(',LUMP_C,'(',LUMB,')',NOT,<,'0',AND,LUMP_C,'(',LUMB,')X
               ',NOT,>,'9',')'
* TTTTT+         GO TO D-ADD
*ZC   1463 TTTTT+  GO    TO,D_ADD
         GO    TO,D_ADD
* TTTTT+     END-IF.
*ZC   1464 TTTTT+  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     MOVE 'Y'                  TO NONDISPLAYABLE.
*ZC   1466 TTTTTT  MOVE  'Y',TO,NONDISPLAYABLE
         MOVE  'Y',TO,NONDISPLAYABLE
         PERIOD 
* TTTTTT     GO TO DISPLAYIT-EXIT.
*ZC   1467 TTTTTT  GO    TO,DISPLAYIT_EXIT
         GO    TO,DISPLAYIT_EXIT
         PERIOD 
* TTTTTT D-ADD.
         LABEL D_ADD
* TTTTTT     MOVE 'Y'                  TO DISPLAYABLE.
*ZC   1469 TTTTTT  MOVE  'Y',TO,DISPLAYABLE
         MOVE  'Y',TO,DISPLAYABLE
         PERIOD 
* TTTTTT     GO TO DISPLAYIT-EXIT.
*ZC   1470 TTTTTT  GO    TO,DISPLAYIT_EXIT
         GO    TO,DISPLAYIT_EXIT
         PERIOD 
         LABEL DISPLAYIT_EXIT
*ZC   1471 TTTTTT  EXIT  
         EXIT  
* TTTTTT DISPLAYIT-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT READ-LINE-FILE SECTION.
         LABEL READ_LINE_FILE,SECTION
* TTTTTT     READ LINE-FILE
* TTTTTT         AT END
*ZC   1474 TTTTTT  READ  LINE_FILE,AT,END
         READ  LINE_FILE,AT,END
* TTTTTT             MOVE 'Y' TO LINE-FILE-ENDED.
*ZC   1476 TTTTTT  MOVE  'Y',TO,LINE_FILE_ENDED
         MOVE  'Y',TO,LINE_FILE_ENDED
         PERIOD 
* TTTTTT     DISPLAY LINE-COUNT ' ' LINE-FILE-ENDED.
*ZC   1477 TTTTTT  DISPLAY LINE_COUNT,' ',LINE_FILE_ENDED
         DISPLAY LINE_COUNT,' ',LINE_FILE_ENDED
         PERIOD 
* TTTTTT     IF LINE-FILE-ENDED = 'N'
*ZC   1478 TTTTTT  IF    LINE_FILE_ENDED,=,'N'
         IF    LINE_FILE_ENDED,=,'N'
* TTTTTT         ADD 1                 TO LINE-COUNT
*ZC   1479 TTTTTT  ADD   1,TO,LINE_COUNT
         ADD   1,TO,LINE_COUNT
* TTTTTT         IF LINE-COUNT > 999
*ZC   1480 TTTTTT  IF    LINE_COUNT,>,999
         IF    LINE_COUNT,>,999
* TTTTTT             DISPLAY 'MAX OF 999 LINES EXCEEDED'
*ZC   1481 TTTTTT  DISPLAY 'MAX OF 999 LINES EXCEEDED'
         DISPLAY 'MAX OF 999 LINES EXCEEDED'
* TTTTTT             DISPLAY 'BOMBING'
*ZC   1482 TTTTTT  DISPLAY 'BOMBING'
         DISPLAY 'BOMBING'
* TTTTTT             STOP RUN
* TTTTTT         END-IF
*ZC   1483 TTTTTT  STOP  RUN
         STOP  RUN
* TTTTTT         MOVE LINE-RECORD      TO LINE-ENTRY (LINE-COUNT)
*ZC   1485 TTTTTT  END_IF 
         END_IF 
*ZC   1485 TTTTTT  MOVE  LINE_RECORD,TO,LINE_ENTRY,'(',LINE_COUNT,')'
         MOVE  LINE_RECORD,TO,LINE_ENTRY,'(',LINE_COUNT,')'
* TTTTTT     END-IF.
*ZC   1486 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL READ_LINE_FILE_EXIT
*ZC   1487 TTTTTT  EXIT  
         EXIT  
* TTTTTT READ-LINE-FILE-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT WORKIT SECTION.
         LABEL WORKIT,SECTION
* TTTTTT     MOVE  1                   TO MUB4.
*ZC   1490 TTTTTT  MOVE  1,TO,MUB4
         MOVE  1,TO,MUB4
         PERIOD 
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1491 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
* TTTTTT     PERFORM VARYING MZ-SUB2
* TTTTTT        FROM 1 BY 1
* TTTTTT       UNTIL MZ-SUB2 > MZ-SUB
* TTTTTT          OR MUB4 > 15
*ZC   1492 TTTTTT  PERFORM VARYING,MZ_SUB2,FROM,1,BY,1,UNTIL,MZ_SUB2,>,X
               MZ_SUB,OR,MUB4,>,15
         PERFORM VARYING,MZ_SUB2,FROM,1,BY,1,UNTIL,MZ_SUB2,>,MZ_SUB,OR,X
               MUB4,>,15
* TTTTTT           IF MZ-NAME (MZ-SUB2) (1:6) NOT = 'FILLER'
*ZC   1496 TTTTTT  IF    MZ_NAME,'(',MZ_SUB2,')','(',1,:,6,')',NOT,=,'FX
               ILLER'
         IF    MZ_NAME,'(',MZ_SUB2,')','(',1,:,6,')',NOT,=,'FILLER'
* TTTTTT              DISPLAY '>>>>' MZ-NAME (MZ-SUB2)
*ZC   1497 TTTTTT  DISPLAY '>>>>',MZ_NAME,'(',MZ_SUB2,')'
         DISPLAY '>>>>',MZ_NAME,'(',MZ_SUB2,')'
* TTTTTT              ADD 1 TO MUB4
* TTTTTT           END-IF
*ZC   1498 TTTTTT  ADD   1,TO,MUB4
         ADD   1,TO,MUB4
* TTTTTT     END-PERFORM.
*ZC   1500 TTTTTT  END_IF 
         END_IF 
*ZC   1500 TTTTTT  END_PERFORM 
         END_PERFORM 
         PERIOD 
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1501 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
         LABEL WORKIT_EXIT
*ZC   1502 TTTTTT  EXIT  
         EXIT  
* TTTTTT WORKIT-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT WORKIT-PLUS SECTION.
         LABEL WORKIT_PLUS,SECTION
* TTTTTT     MOVE  1                   TO MUB4.
*ZC   1505 TTTTTT  MOVE  1,TO,MUB4
         MOVE  1,TO,MUB4
         PERIOD 
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1506 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
* TTTTTT     PERFORM VARYING MZ-SUB2
* TTTTTT        FROM MZ-SUB2 BY 1
* TTTTTT       UNTIL MZ-SUB2 > MZ-SUB
* TTTTTT          OR MUB4 > 15
*ZC   1507 TTTTTT  PERFORM VARYING,MZ_SUB2,FROM,MZ_SUB2,BY,1,UNTIL,MZ_SX
               UB2,>,MZ_SUB,OR,MUB4,>,15
         PERFORM VARYING,MZ_SUB2,FROM,MZ_SUB2,BY,1,UNTIL,MZ_SUB2,>,MZ_SX
               UB,OR,MUB4,>,15
* TTTTTT           IF MZ-NAME (MZ-SUB2) (1:6) NOT = 'FILLER'
*ZC   1511 TTTTTT  IF    MZ_NAME,'(',MZ_SUB2,')','(',1,:,6,')',NOT,=,'FX
               ILLER'
         IF    MZ_NAME,'(',MZ_SUB2,')','(',1,:,6,')',NOT,=,'FILLER'
* TTTTTT              DISPLAY '>>>>' MZ-NAME (MZ-SUB2)
*ZC   1512 TTTTTT  DISPLAY '>>>>',MZ_NAME,'(',MZ_SUB2,')'
         DISPLAY '>>>>',MZ_NAME,'(',MZ_SUB2,')'
* TTTTTT              ADD 1 TO MUB4
* TTTTTT           END-IF
*ZC   1513 TTTTTT  ADD   1,TO,MUB4
         ADD   1,TO,MUB4
* TTTTTT     END-PERFORM.
*ZC   1515 TTTTTT  END_IF 
         END_IF 
*ZC   1515 TTTTTT  END_PERFORM 
         END_PERFORM 
         PERIOD 
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1516 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
         LABEL WORKIT_PLUS_EXIT
*ZC   1517 TTTTTT  EXIT  
         EXIT  
* TTTTTT WORKIT-PLUS-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT PROCIT SECTION.
         LABEL PROCIT,SECTION
* TTTTTT     MOVE  1                    TO LUB.
*ZC   1520 TTTTTT  MOVE  1,TO,LUB
         MOVE  1,TO,LUB
         PERIOD 
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1521 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
* TTTTTT     IF THE-COMMAND-3-8 NOT = SIX-SPACES
*ZC   1522 TTTTTT  IF    THE_COMMAND_3_8,NOT,=,SIX_SPACES
         IF    THE_COMMAND_3_8,NOT,=,SIX_SPACES
* TTTTTT         PERFORM VARYING LUB2 FROM 1 BY 1
* TTTTTT           UNTIL LUB2 > LINE-COUNT
* TTTTTT              OR THE-COMMAND-3-8  = LINE-NUMBER (LUB2)
* TTTTTT              OR THE-COMMAND-3-8  < LINE-NUMBER (LUB2)
* TTTTTT         END-PERFORM
*ZC   1523 TTTTTT  PERFORM VARYING,LUB2,FROM,1,BY,1,UNTIL,LUB2,>,LINE_CX
               OUNT,OR,THE_COMMAND_3_8,=,LINE_NUMBER,'(',LUB2,')',OR,THX
               E_COMMAND_3_8,<,LINE_NUMBER,'(',LUB2,')'
         PERFORM VARYING,LUB2,FROM,1,BY,1,UNTIL,LUB2,>,LINE_COUNT,OR,THX
               E_COMMAND_3_8,=,LINE_NUMBER,'(',LUB2,')',OR,THE_COMMAND_X
               3_8,<,LINE_NUMBER,'(',LUB2,')'
* TTTTTT         IF LUB2 NOT > LINE-COUNT
*ZC   1528 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC   1528 TTTTTT  IF    LUB2,NOT,>,LINE_COUNT
         IF    LUB2,NOT,>,LINE_COUNT
* TTTTTT             MOVE LUB2 TO LUB
* TTTTTT         END-IF
*ZC   1529 TTTTTT  MOVE  LUB2,TO,LUB
         MOVE  LUB2,TO,LUB
* TTTTTT     END-IF.
*ZC   1531 TTTTTT  END_IF 
         END_IF 
*ZC   1531 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     MOVE 'N'          TO PARA-FOUND.
*ZC   1533 TTTTTT  MOVE  'N',TO,PARA_FOUND
         MOVE  'N',TO,PARA_FOUND
         PERIOD 
* TTTTTT     IF GLOB-NAME NOT = SPACES
*ZC   1534 TTTTTT  IF    GLOB_NAME,NOT,=,SPACES
         IF    GLOB_NAME,NOT,=,SPACES
* TTTTTT         PERFORM VARYING LUB2 FROM 1 BY 1
* TTTTTT           UNTIL LUB2 > LINE-COUNT
* TTTTTT              OR PARA-FOUND = 'Y'
*ZC   1535 TTTTTT  PERFORM VARYING,LUB2,FROM,1,BY,1,UNTIL,LUB2,>,LINE_CX
               OUNT,OR,PARA_FOUND,=,'Y'
         PERFORM VARYING,LUB2,FROM,1,BY,1,UNTIL,LUB2,>,LINE_COUNT,OR,PAX
               RA_FOUND,=,'Y'
* TTTTTT                 IF  LINE-NUMBER (LUB2) = SPACES
* TTTTTT                 AND LINE-ASTER  (LUB2) = SPACES
* TTTTTT                 AND LINE-30     (LUB2) NOT = SPACES
*ZC   1538 TTTTTT  IF    LINE_NUMBER,'(',LUB2,')',=,SPACES,AND,LINE_ASTX
               ER,'(',LUB2,')',=,SPACES,AND,LINE_30,'(',LUB2,')',NOT,=,X
               SPACES
         IF    LINE_NUMBER,'(',LUB2,')',=,SPACES,AND,LINE_ASTER,'(',LUBX
               2,')',=,SPACES,AND,LINE_30,'(',LUB2,')',NOT,=,SPACES
* TTTTTT                   MOVE 0 TO LUB4
*ZC   1541 TTTTTT  MOVE  0,TO,LUB4
         MOVE  0,TO,LUB4
* TTTTTT                   PERFORM VARYING LUB3
* TTTTTT                      FROM 1 BY 1
* TTTTTT                     UNTIL LUB3 > 30
*ZC   1542 TTTTTT  PERFORM VARYING,LUB3,FROM,1,BY,1,UNTIL,LUB3,>,30
         PERFORM VARYING,LUB3,FROM,1,BY,1,UNTIL,LUB3,>,30
* TTTTTT                       MOVE LINE-30 (LUB2) (LUB3:1)
* TTTTTT                         TO ONECH
*ZC   1545 TTTTTT  MOVE  LINE_30,'(',LUB2,')','(',LUB3,:,1,')',TO,ONECH
         MOVE  LINE_30,'(',LUB2,')','(',LUB3,:,1,')',TO,ONECH
* TTTTTT                       IF ONECH = ' ' OR '.'
*ZC   1547 TTTTTT  IF    ONECH,=,' ',OR,'.'
         IF    ONECH,=,' ',OR,'.'
* TTTTTT                         MOVE SPACES TO THIRTYCH
*ZC   1548 TTTTTT  MOVE  SPACES,TO,THIRTYCH
         MOVE  SPACES,TO,THIRTYCH
* TTTTTT                         MOVE LINE-30 (LUB2)
* TTTTTT                             (1:LUB4)
* TTTTTT                           TO THIRTYCH
*ZC   1549 TTTTTT  MOVE  LINE_30,'(',LUB2,')','(',1,:,LUB4,')',TO,THIRTX
               YCH
         MOVE  LINE_30,'(',LUB2,')','(',1,:,LUB4,')',TO,THIRTYCH
* TTTTTT                         IF THIRTYCH = GLOB-NAME
*ZC   1552 TTTTTT  IF    THIRTYCH,=,GLOB_NAME
         IF    THIRTYCH,=,GLOB_NAME
* TTTTTT                             MOVE 'Y' TO PARA-FOUND
*ZC   1553 TTTTTT  MOVE  'Y',TO,PARA_FOUND
         MOVE  'Y',TO,PARA_FOUND
* TTTTTT                             MOVE 98  TO LUB3
* TTTTTT                         END-IF
*ZC   1554 TTTTTT  MOVE  98,TO,LUB3
         MOVE  98,TO,LUB3
* TTTTTT                       END-IF
*ZC   1556 TTTTTT  END_IF 
         END_IF 
* TTTTTT                       ADD 1 TO LUB4
*ZC   1557 TTTTTT  END_IF 
         END_IF 
* TTTTTT                   END-PERFORM
*ZC   1557 TTTTTT  ADD   1,TO,LUB4
         ADD   1,TO,LUB4
* TTTTTT                 END-IF
*ZC   1559 TTTTTT  END_PERFORM 
         END_PERFORM 
* TTTTTT         END-PERFORM
*ZC   1560 TTTTTT  END_IF 
         END_IF 
* TTTTTT         IF PARA-FOUND = 'Y'
*ZC   1561 TTTTTT  END_PERFORM 
         END_PERFORM 
*ZC   1561 TTTTTT  IF    PARA_FOUND,=,'Y'
         IF    PARA_FOUND,=,'Y'
* TTTTTT             SUBTRACT 1 FROM LUB2
*ZC   1562 TTTTTT  SUBTRACT 1,FROM,LUB2
         SUBTRACT 1,FROM,LUB2
* TTTTTT             MOVE LUB2 TO LUB
* TTTTTT         END-IF
*ZC   1563 TTTTTT  MOVE  LUB2,TO,LUB
         MOVE  LUB2,TO,LUB
* TTTTTT     END-IF.
*ZC   1565 TTTTTT  END_IF 
         END_IF 
*ZC   1565 TTTTTT  END_IF 
         END_IF 
* TTTTTT
         PERIOD 
* TTTTTT     MOVE 1                     TO LUB2.
*ZC   1567 TTTTTT  MOVE  1,TO,LUB2
         MOVE  1,TO,LUB2
         PERIOD 
* TTTTTT PROCIT-LOOP.
         LABEL PROCIT_LOOP
* TTTTTT     DISPLAY LINE-ENTRY (LUB).
*ZC   1569 TTTTTT  DISPLAY LINE_ENTRY,'(',LUB,')'
         DISPLAY LINE_ENTRY,'(',LUB,')'
         PERIOD 
* TTTTTT     IF LUB = LINE-COUNT
*ZC   1570 TTTTTT  IF    LUB,=,LINE_COUNT
         IF    LUB,=,LINE_COUNT
* TTTTTT         GO TO PROCIT-LAST
*ZC   1571 TTTTTT  GO    TO,PROCIT_LAST
         GO    TO,PROCIT_LAST
* TTTTTT     END-IF.
*ZC   1572 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD  1                     TO LUB.
*ZC   1573 TTTTTT  ADD   1,TO,LUB
         ADD   1,TO,LUB
         PERIOD 
* TTTTTT     ADD  1                     TO LUB2.
*ZC   1574 TTTTTT  ADD   1,TO,LUB2
         ADD   1,TO,LUB2
         PERIOD 
* TTTTTT     IF LUB2 > 15
*ZC   1575 TTTTTT  IF    LUB2,>,15
         IF    LUB2,>,15
* TTTTTT         GO TO PROCIT-LAST
*ZC   1576 TTTTTT  GO    TO,PROCIT_LAST
         GO    TO,PROCIT_LAST
* TTTTTT     END-IF.
*ZC   1577 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     GO TO PROCIT-LOOP.
*ZC   1578 TTTTTT  GO    TO,PROCIT_LOOP
         GO    TO,PROCIT_LOOP
         PERIOD 
* TTTTTT PROCIT-LAST.
         LABEL PROCIT_LAST
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1580 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
         LABEL PROCIT_EXIT
*ZC   1581 TTTTTT  EXIT  
         EXIT  
* TTTTTT PROCIT-EXIT. EXIT.
         PERIOD 
* TTTTTT PROCIT-PLUS SECTION.
         LABEL PROCIT_PLUS,SECTION
* TTTTTT     MOVE 1                     TO LUB2.
*ZC   1583 TTTTTT  MOVE  1,TO,LUB2
         MOVE  1,TO,LUB2
         PERIOD 
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1584 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
* TTTTTT PROCIT-PLUS-LOOP.
         LABEL PROCIT_PLUS_LOOP
* TTTTTT     DISPLAY LINE-ENTRY (LUB).
*ZC   1586 TTTTTT  DISPLAY LINE_ENTRY,'(',LUB,')'
         DISPLAY LINE_ENTRY,'(',LUB,')'
         PERIOD 
* TTTTTT     IF LUB = LINE-COUNT
*ZC   1587 TTTTTT  IF    LUB,=,LINE_COUNT
         IF    LUB,=,LINE_COUNT
* TTTTTT         GO TO PROCIT-PLUS-LAST
*ZC   1588 TTTTTT  GO    TO,PROCIT_PLUS_LAST
         GO    TO,PROCIT_PLUS_LAST
* TTTTTT     END-IF.
*ZC   1589 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD  1                     TO LUB.
*ZC   1590 TTTTTT  ADD   1,TO,LUB
         ADD   1,TO,LUB
         PERIOD 
* TTTTTT     ADD  1                     TO LUB2.
*ZC   1591 TTTTTT  ADD   1,TO,LUB2
         ADD   1,TO,LUB2
         PERIOD 
* TTTTTT     IF LUB2 > 15
*ZC   1592 TTTTTT  IF    LUB2,>,15
         IF    LUB2,>,15
* TTTTTT         GO TO PROCIT-PLUS-LAST
*ZC   1593 TTTTTT  GO    TO,PROCIT_PLUS_LAST
         GO    TO,PROCIT_PLUS_LAST
* TTTTTT     END-IF.
*ZC   1594 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     GO TO PROCIT-PLUS-LOOP.
*ZC   1595 TTTTTT  GO    TO,PROCIT_PLUS_LOOP
         GO    TO,PROCIT_PLUS_LOOP
         PERIOD 
* TTTTTT PROCIT-PLUS-LAST.
         LABEL PROCIT_PLUS_LAST
* TTTTTT     DISPLAY '*----------------------------*'.
*ZC   1597 TTTTTT  DISPLAY '*----------------------------*'
         DISPLAY '*----------------------------*'
         PERIOD 
         LABEL PROCIT_PLUS_EXIT
*ZC   1598 TTTTTT  EXIT  
         EXIT  
* TTTTTT PROCIT-PLUS-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT SCREENIT SECTION.
         LABEL SCREENIT,SECTION
* TTTTTT     MOVE  1                    TO SCUB.
*ZC   1601 TTTTTT  MOVE  1,TO,SCUB
         MOVE  1,TO,SCUB
         PERIOD 
* TTTTTT SCREENIT-LOOP.
         LABEL SCREENIT_LOOP
* TTTTTT     MOVE LINE-ENTRY (LUB)      TO SCREEN-ENTRY (SCUB).
*ZC   1603 TTTTTT  MOVE  LINE_ENTRY,'(',LUB,')',TO,SCREEN_ENTRY,'(',SCUX
               B,')'
         MOVE  LINE_ENTRY,'(',LUB,')',TO,SCREEN_ENTRY,'(',SCUB,')'
         PERIOD 
* TTTTTT     IF SCREEN-NUMBER (SCUB) IS NUMERIC
*ZC   1604 TTTTTT  IF    SCREEN_NUMBER,'(',SCUB,')',IS,NUMERIC
         IF    SCREEN_NUMBER,'(',SCUB,')',IS,NUMERIC
* TTTTTT         IF SCREEN-1ST-FLAG = 'Y'
*ZC   1605 TTTTTT  IF    SCREEN_1ST_FLAG,=,'Y'
         IF    SCREEN_1ST_FLAG,=,'Y'
* TTTTTT             MOVE SCREEN-NUMBER (SCUB)
* TTTTTT                                TO SCREEN-FIRST
*ZC   1606 TTTTTT  MOVE  SCREEN_NUMBER,'(',SCUB,')',TO,SCREEN_FIRST
         MOVE  SCREEN_NUMBER,'(',SCUB,')',TO,SCREEN_FIRST
* TTTTTT             MOVE 'N'           TO SCREEN-1ST-FLAG
* TTTTTT         END-IF
*ZC   1608 TTTTTT  MOVE  'N',TO,SCREEN_1ST_FLAG
         MOVE  'N',TO,SCREEN_1ST_FLAG
* TTTTTT     END-IF.
*ZC   1610 TTTTTT  END_IF 
         END_IF 
*ZC   1610 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF SCREEN-NUMBER (SCUB) IS NUMERIC
*ZC   1611 TTTTTT  IF    SCREEN_NUMBER,'(',SCUB,')',IS,NUMERIC
         IF    SCREEN_NUMBER,'(',SCUB,')',IS,NUMERIC
* TTTTTT         MOVE SCREEN-NUMBER (SCUB)
* TTTTTT                                TO SCREEN-LAST
*ZC   1612 TTTTTT  MOVE  SCREEN_NUMBER,'(',SCUB,')',TO,SCREEN_LAST
         MOVE  SCREEN_NUMBER,'(',SCUB,')',TO,SCREEN_LAST
* TTTTTT     END-IF.
*ZC   1614 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF LUB = LINE-COUNT
*ZC   1615 TTTTTT  IF    LUB,=,LINE_COUNT
         IF    LUB,=,LINE_COUNT
* TTTTTT         GO TO SCREENIT-DISPLAY
*ZC   1616 TTTTTT  GO    TO,SCREENIT_DISPLAY
         GO    TO,SCREENIT_DISPLAY
* TTTTTT     END-IF.
*ZC   1617 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD  1                     TO LUB.
*ZC   1618 TTTTTT  ADD   1,TO,LUB
         ADD   1,TO,LUB
         PERIOD 
* TTTTTT     IF LUB > LUB-MAX
*ZC   1619 TTTTTT  IF    LUB,>,LUB_MAX
         IF    LUB,>,LUB_MAX
* TTTTTT         ADD 15                 TO LUB-MAX
*ZC   1620 TTTTTT  ADD   15,TO,LUB_MAX
         ADD   15,TO,LUB_MAX
* TTTTTT         GO TO SCREENIT-LAST
*ZC   1621 TTTTTT  GO    TO,SCREENIT_LAST
         GO    TO,SCREENIT_LAST
* TTTTTT     END-IF.
*ZC   1622 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     ADD  1                     TO SCUB.
*ZC   1623 TTTTTT  ADD   1,TO,SCUB
         ADD   1,TO,SCUB
         PERIOD 
* TTTTTT     GO TO SCREENIT-LOOP.
*ZC   1624 TTTTTT  GO    TO,SCREENIT_LOOP
         GO    TO,SCREENIT_LOOP
         PERIOD 
* TTTTTT SCREENIT-LAST.
         LABEL SCREENIT_LAST
* TTTTTT     IF LINE-NUMBER (LINE-COUNT2) NOT LESS THAN SCREEN-FIRST
*ZC   1626 TTTTTT  IF    LINE_NUMBER,'(',LINE_COUNT2,')',NOT,LESS,THAN,X
               SCREEN_FIRST
         IF    LINE_NUMBER,'(',LINE_COUNT2,')',NOT,LESS,THAN,SCREEN_FIRX
               ST
* TTTTTT        IF LINE-NUMBER (LINE-COUNT2) NOT GREATER THAN SCREEN-LAX
               ST
*ZC   1627 TTTTTT  IF    LINE_NUMBER,'(',LINE_COUNT2,')',NOT,GREATER,THX
               AN,SCREEN_LAST
         IF    LINE_NUMBER,'(',LINE_COUNT2,')',NOT,GREATER,THAN,SCREEN_X
               LAST
* TTTTTT            GO TO SCREENIT-DISPLAY
* TTTTTT        ELSE
*ZC   1628 TTTTTT  GO    TO,SCREENIT_DISPLAY
         GO    TO,SCREENIT_DISPLAY
* TTTTTT            MOVE 'Y'            TO SCREEN-1ST-FLAG
*ZC   1630 TTTTTT  ELSE  
         ELSE  
*ZC   1630 TTTTTT  MOVE  'Y',TO,SCREEN_1ST_FLAG
         MOVE  'Y',TO,SCREEN_1ST_FLAG
* TTTTTT            MOVE ZEROES         TO SCREEN-FIRST
*ZC   1631 TTTTTT  MOVE  ZEROES,TO,SCREEN_FIRST
         MOVE  ZEROES,TO,SCREEN_FIRST
* TTTTTT            MOVE ZEROES         TO SCREEN-LAST
*ZC   1632 TTTTTT  MOVE  ZEROES,TO,SCREEN_LAST
         MOVE  ZEROES,TO,SCREEN_LAST
* TTTTTT            MOVE SPACES         TO SCREEN-ARRAY
*ZC   1633 TTTTTT  MOVE  SPACES,TO,SCREEN_ARRAY
         MOVE  SPACES,TO,SCREEN_ARRAY
* TTTTTT            GO TO SCREENIT
* TTTTTT        END-IF
*ZC   1634 TTTTTT  GO    TO,SCREENIT
         GO    TO,SCREENIT
* TTTTTT     ELSE
*ZC   1636 TTTTTT  END_IF 
         END_IF 
* TTTTTT        MOVE 'Y'                TO SCREEN-1ST-FLAG
*ZC   1637 TTTTTT  ELSE  
         ELSE  
*ZC   1637 TTTTTT  MOVE  'Y',TO,SCREEN_1ST_FLAG
         MOVE  'Y',TO,SCREEN_1ST_FLAG
* TTTTTT        MOVE ZEROES             TO SCREEN-FIRST
*ZC   1638 TTTTTT  MOVE  ZEROES,TO,SCREEN_FIRST
         MOVE  ZEROES,TO,SCREEN_FIRST
* TTTTTT        MOVE ZEROES             TO SCREEN-LAST
*ZC   1639 TTTTTT  MOVE  ZEROES,TO,SCREEN_LAST
         MOVE  ZEROES,TO,SCREEN_LAST
* TTTTTT        MOVE SPACES             TO SCREEN-ARRAY
*ZC   1640 TTTTTT  MOVE  SPACES,TO,SCREEN_ARRAY
         MOVE  SPACES,TO,SCREEN_ARRAY
* TTTTTT        GO TO SCREENIT
*ZC   1641 TTTTTT  GO    TO,SCREENIT
         GO    TO,SCREENIT
* TTTTTT     END-IF.
*ZC   1642 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT SCREENIT-DISPLAY.
         LABEL SCREENIT_DISPLAY
* TTTTTT     MOVE 1                     TO SCUB2.
*ZC   1644 TTTTTT  MOVE  1,TO,SCUB2
         MOVE  1,TO,SCUB2
         PERIOD 
* TTTTTT SCREEN-D-LOOP.
         LABEL SCREEN_D_LOOP
* TTTTTT     MOVE LINE-NUMBER (LINE-COUNT2) TO LEFFED.
*ZC   1646 TTTTTT  MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,LEFFED
         MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,LEFFED
         PERIOD 
* TTTTTT     MOVE SCREEN-NUMBER (SCUB2)     TO RITE.
*ZC   1647 TTTTTT  MOVE  SCREEN_NUMBER,'(',SCUB2,')',TO,RITE
         MOVE  SCREEN_NUMBER,'(',SCUB2,')',TO,RITE
         PERIOD 
* TTTTTT     MOVE SPACE                 TO SCREEN-POINTER (SCUB2).
*ZC   1648 TTTTTT  MOVE  SPACE,TO,SCREEN_POINTER,'(',SCUB2,')'
         MOVE  SPACE,TO,SCREEN_POINTER,'(',SCUB2,')'
         PERIOD 
* TTTTTT     IF LEFFED = RITE
*ZC   1649 TTTTTT  IF    LEFFED,=,RITE
         IF    LEFFED,=,RITE
* TTTTTT         MOVE '>'               TO SCREEN-POINTER (SCUB2)
*ZC   1650 TTTTTT  MOVE  '>',TO,SCREEN_POINTER,'(',SCUB2,')'
         MOVE  '>',TO,SCREEN_POINTER,'(',SCUB2,')'
* TTTTTT     END-IF.
*ZC   1651 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     MOVE SCREEN-ENTRY (SCUB2)  TO SEVENT2.
*ZC   1652 TTTTTT  MOVE  SCREEN_ENTRY,'(',SCUB2,')',TO,SEVENT2
         MOVE  SCREEN_ENTRY,'(',SCUB2,')',TO,SEVENT2
         PERIOD 
* TTTTTT     DISPLAY SEVENT2.
*ZC   1653 TTTTTT  DISPLAY SEVENT2
         DISPLAY SEVENT2
         PERIOD 
* TTTTTT     ADD 1                      TO SCUB2.
*ZC   1654 TTTTTT  ADD   1,TO,SCUB2
         ADD   1,TO,SCUB2
         PERIOD 
* TTTTTT     IF SCUB2 > SCUB
*ZC   1655 TTTTTT  IF    SCUB2,>,SCUB
         IF    SCUB2,>,SCUB
* TTTTTT         IF SCUB2 < 16
*ZC   1656 TTTTTT  IF    SCUB2,<,16
         IF    SCUB2,<,16
* TTTTTT             MOVE '*------- END OF PROGRAM - -----*'
* TTTTTT                                TO SCREEN-ENTRY (SCUB2)
*ZC   1657 TTTTTT  MOVE  '*------- END OF PROGRAM - -----*',TO,SCREEN_EX
               NTRY,'(',SCUB2,')'
         MOVE  '*------- END OF PROGRAM - -----*',TO,SCREEN_ENTRY,'(',SX
               CUB2,')'
* TTTTTT             GO TO SCREEN-D-LOOP
* TTTTTT         ELSE
*ZC   1659 TTTTTT  GO    TO,SCREEN_D_LOOP
         GO    TO,SCREEN_D_LOOP
* TTTTTT             GO TO SCREENIT-EXIT
*ZC   1661 TTTTTT  ELSE  
         ELSE  
* TTTTTT         END-IF
*ZC   1661 TTTTTT  GO    TO,SCREENIT_EXIT
         GO    TO,SCREENIT_EXIT
* TTTTTT     ELSE
*ZC   1663 TTTTTT  END_IF 
         END_IF 
* TTTTTT         GO TO SCREEN-D-LOOP
*ZC   1664 TTTTTT  ELSE  
         ELSE  
*ZC   1664 TTTTTT  GO    TO,SCREEN_D_LOOP
         GO    TO,SCREEN_D_LOOP
* TTTTTT     END-IF.
*ZC   1665 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL SCREENIT_EXIT
*ZC   1666 TTTTTT  EXIT  
         EXIT  
* TTTTTT SCREENIT-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT FIND-LENGTH SECTION.
         LABEL FIND_LENGTH,SECTION
* TTTTTT     PERFORM VARYING FUB FROM 1 BY 1
* TTTTTT       UNTIL FUB > 30
* TTTTTT          OR TEST-FIELD-C (FUB) = SPACES
*ZC   1669 TTTTTT  PERFORM VARYING,FUB,FROM,1,BY,1,UNTIL,FUB,>,30,OR,TEX
               ST_FIELD_C,'(',FUB,')',=,SPACES
         PERFORM VARYING,FUB,FROM,1,BY,1,UNTIL,FUB,>,30,OR,TEST_FIELD_CX
               ,'(',FUB,')',=,SPACES
* TTTTTT     END-PERFORM.
*ZC   1672 TTTTTT  END_PERFORM 
         END_PERFORM 
         PERIOD 
* TTTTTT     IF FUB > 30
*ZC   1673 TTTTTT  IF    FUB,>,30
         IF    FUB,>,30
* TTTTTT         SUBTRACT 1 FROM FUB
*ZC   1674 TTTTTT  SUBTRACT 1,FROM,FUB
         SUBTRACT 1,FROM,FUB
* TTTTTT     END-IF.
*ZC   1675 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF TEST-FIELD-C (FUB) = SPACES
*ZC   1676 TTTTTT  IF    TEST_FIELD_C,'(',FUB,')',=,SPACES
         IF    TEST_FIELD_C,'(',FUB,')',=,SPACES
* TTTTTT         SUBTRACT 1 FROM FUB
*ZC   1677 TTTTTT  SUBTRACT 1,FROM,FUB
         SUBTRACT 1,FROM,FUB
* TTTTTT     END-IF.
*ZC   1678 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL FIND_LENGTH_EXIT
*ZC   1679 TTTTTT  EXIT  
         EXIT  
* TTTTTT FIND-LENGTH-EXIT. EXIT.
* TTTTTT
         PERIOD 
* TTTTTT LOWER-TO-UPPER SECTION.
         LABEL LOWER_TO_UPPER,SECTION
* TTTTTT     PERFORM VARYING THUB FROM 1 BY 1
* TTTTTT       UNTIL THUB > 180
*ZC   1682 TTTTTT  PERFORM VARYING,THUB,FROM,1,BY,1,UNTIL,THUB,>,180
         PERFORM VARYING,THUB,FROM,1,BY,1,UNTIL,THUB,>,180
* TTTTTT           IF THE-COMMAND-C (THUB) = 'a'
*ZC   1684 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'a'
         IF    THE_COMMAND_C,'(',THUB,')',=,'a'
* TTTTTT              MOVE 'A' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1685 TTTTTT  MOVE  'A',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'A',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'b'
*ZC   1687 TTTTTT  END_IF 
         END_IF 
*ZC   1687 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'b'
         IF    THE_COMMAND_C,'(',THUB,')',=,'b'
* TTTTTT              MOVE 'B' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1688 TTTTTT  MOVE  'B',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'B',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'c'
*ZC   1690 TTTTTT  END_IF 
         END_IF 
*ZC   1690 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'c'
         IF    THE_COMMAND_C,'(',THUB,')',=,'c'
* TTTTTT              MOVE 'C' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1691 TTTTTT  MOVE  'C',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'C',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'd'
*ZC   1693 TTTTTT  END_IF 
         END_IF 
*ZC   1693 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'d'
         IF    THE_COMMAND_C,'(',THUB,')',=,'d'
* TTTTTT              MOVE 'D' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1694 TTTTTT  MOVE  'D',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'D',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'e'
*ZC   1696 TTTTTT  END_IF 
         END_IF 
*ZC   1696 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'e'
         IF    THE_COMMAND_C,'(',THUB,')',=,'e'
* TTTTTT              MOVE 'E' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1697 TTTTTT  MOVE  'E',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'E',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'f'
*ZC   1699 TTTTTT  END_IF 
         END_IF 
*ZC   1699 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'f'
         IF    THE_COMMAND_C,'(',THUB,')',=,'f'
* TTTTTT              MOVE 'F' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1700 TTTTTT  MOVE  'F',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'F',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'g'
*ZC   1702 TTTTTT  END_IF 
         END_IF 
*ZC   1702 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'g'
         IF    THE_COMMAND_C,'(',THUB,')',=,'g'
* TTTTTT              MOVE 'G' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1703 TTTTTT  MOVE  'G',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'G',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'h'
*ZC   1705 TTTTTT  END_IF 
         END_IF 
*ZC   1705 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'h'
         IF    THE_COMMAND_C,'(',THUB,')',=,'h'
* TTTTTT              MOVE 'H' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1706 TTTTTT  MOVE  'H',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'H',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'i'
*ZC   1708 TTTTTT  END_IF 
         END_IF 
*ZC   1708 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'i'
         IF    THE_COMMAND_C,'(',THUB,')',=,'i'
* TTTTTT              MOVE 'I' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1709 TTTTTT  MOVE  'I',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'I',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'j'
*ZC   1711 TTTTTT  END_IF 
         END_IF 
*ZC   1711 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'j'
         IF    THE_COMMAND_C,'(',THUB,')',=,'j'
* TTTTTT              MOVE 'J' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1712 TTTTTT  MOVE  'J',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'J',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'k'
*ZC   1714 TTTTTT  END_IF 
         END_IF 
*ZC   1714 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'k'
         IF    THE_COMMAND_C,'(',THUB,')',=,'k'
* TTTTTT              MOVE 'K' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1715 TTTTTT  MOVE  'K',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'K',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'l'
*ZC   1717 TTTTTT  END_IF 
         END_IF 
*ZC   1717 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'l'
         IF    THE_COMMAND_C,'(',THUB,')',=,'l'
* TTTTTT              MOVE 'L' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1718 TTTTTT  MOVE  'L',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'L',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'm'
*ZC   1720 TTTTTT  END_IF 
         END_IF 
*ZC   1720 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'m'
         IF    THE_COMMAND_C,'(',THUB,')',=,'m'
* TTTTTT              MOVE 'M' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1721 TTTTTT  MOVE  'M',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'M',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'n'
*ZC   1723 TTTTTT  END_IF 
         END_IF 
*ZC   1723 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'n'
         IF    THE_COMMAND_C,'(',THUB,')',=,'n'
* TTTTTT              MOVE 'N' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1724 TTTTTT  MOVE  'N',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'N',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'o'
*ZC   1726 TTTTTT  END_IF 
         END_IF 
*ZC   1726 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'o'
         IF    THE_COMMAND_C,'(',THUB,')',=,'o'
* TTTTTT              MOVE 'O' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1727 TTTTTT  MOVE  'O',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'O',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'p'
*ZC   1729 TTTTTT  END_IF 
         END_IF 
*ZC   1729 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'p'
         IF    THE_COMMAND_C,'(',THUB,')',=,'p'
* TTTTTT              MOVE 'P' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1730 TTTTTT  MOVE  'P',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'P',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'q'
*ZC   1732 TTTTTT  END_IF 
         END_IF 
*ZC   1732 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'q'
         IF    THE_COMMAND_C,'(',THUB,')',=,'q'
* TTTTTT              MOVE 'Q' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1733 TTTTTT  MOVE  'Q',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'Q',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'r'
*ZC   1735 TTTTTT  END_IF 
         END_IF 
*ZC   1735 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'r'
         IF    THE_COMMAND_C,'(',THUB,')',=,'r'
* TTTTTT              MOVE 'R' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1736 TTTTTT  MOVE  'R',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'R',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 's'
*ZC   1738 TTTTTT  END_IF 
         END_IF 
*ZC   1738 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'s'
         IF    THE_COMMAND_C,'(',THUB,')',=,'s'
* TTTTTT              MOVE 'S' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1739 TTTTTT  MOVE  'S',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'S',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 't'
*ZC   1741 TTTTTT  END_IF 
         END_IF 
*ZC   1741 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'t'
         IF    THE_COMMAND_C,'(',THUB,')',=,'t'
* TTTTTT              MOVE 'T' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1742 TTTTTT  MOVE  'T',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'T',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'u'
*ZC   1744 TTTTTT  END_IF 
         END_IF 
*ZC   1744 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'u'
         IF    THE_COMMAND_C,'(',THUB,')',=,'u'
* TTTTTT              MOVE 'U' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1745 TTTTTT  MOVE  'U',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'U',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'v'
*ZC   1747 TTTTTT  END_IF 
         END_IF 
*ZC   1747 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'v'
         IF    THE_COMMAND_C,'(',THUB,')',=,'v'
* TTTTTT              MOVE 'V' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1748 TTTTTT  MOVE  'V',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'V',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'w'
*ZC   1750 TTTTTT  END_IF 
         END_IF 
*ZC   1750 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'w'
         IF    THE_COMMAND_C,'(',THUB,')',=,'w'
* TTTTTT              MOVE 'W' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1751 TTTTTT  MOVE  'W',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'W',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'x'
*ZC   1753 TTTTTT  END_IF 
         END_IF 
*ZC   1753 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'x'
         IF    THE_COMMAND_C,'(',THUB,')',=,'x'
* TTTTTT              MOVE 'X' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1754 TTTTTT  MOVE  'X',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'X',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'y'
*ZC   1756 TTTTTT  END_IF 
         END_IF 
*ZC   1756 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'y'
         IF    THE_COMMAND_C,'(',THUB,')',=,'y'
* TTTTTT              MOVE 'Y' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1757 TTTTTT  MOVE  'Y',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'Y',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT           IF THE-COMMAND-C (THUB) = 'z'
*ZC   1759 TTTTTT  END_IF 
         END_IF 
*ZC   1759 TTTTTT  IF    THE_COMMAND_C,'(',THUB,')',=,'z'
         IF    THE_COMMAND_C,'(',THUB,')',=,'z'
* TTTTTT              MOVE 'Z' TO THE-COMMAND-C (THUB)
* TTTTTT           END-IF
*ZC   1760 TTTTTT  MOVE  'Z',TO,THE_COMMAND_C,'(',THUB,')'
         MOVE  'Z',TO,THE_COMMAND_C,'(',THUB,')'
* TTTTTT     END-PERFORM.
*ZC   1762 TTTTTT  END_IF 
         END_IF 
*ZC   1762 TTTTTT  END_PERFORM 
         END_PERFORM 
         PERIOD 
         LABEL LOWER_TO_UPPER_EXIT
*ZC   1763 TTTTTT  EXIT  
         EXIT  
* TTTTTT LOWER-TO-UPPER-EXIT. EXIT.
*TTTTTT*--1---------2--------3---------4---------5---------6---------7-X
               *
         PERIOD 
* TTTTTT SUBS-PROCESS SECTION.
         LABEL SUBS_PROCESS,SECTION
* TTTTTT     IF TEMP-NAME = 'COUNT                         '
*ZC   1766 TTTTTT  IF    TEMP_NAME,=,'COUNT                         '
         IF    TEMP_NAME,=,'COUNT                         '
* TTTTTT         MOVE COUNT                         TO NINE06
*ZC   1767 TTTTTT  MOVE  COUNT,TO,NINE06
         MOVE  COUNT,TO,NINE06
* TTTTTT     END-IF.
*ZC   1768 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL SUBS_PROCESS_EXIT
*ZC   1769 TTTTTT  EXIT  
         EXIT  
* TTTTTT SUBS-PROCESS-EXIT. EXIT.
         PERIOD 
* TTTTTT NAME9-PROCESS SECTION.
         LABEL NAME9_PROCESS,SECTION
* TTTTTT     IF GLOB-NAME = 'COUNT                         '
*ZC   1771 TTTTTT  IF    GLOB_NAME,=,'COUNT                         '
         IF    GLOB_NAME,=,'COUNT                         '
* TTTTTT         MOVE 0         TO SUBS-NUM
*ZC   1772 TTTTTT  MOVE  0,TO,SUBS_NUM
         MOVE  0,TO,SUBS_NUM
* TTTTTT         MOVE GLOB-NAME TO TEST-FIELD
* TTTTTT                           FUB-NAME0
*ZC   1773 TTTTTT  MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
         MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
* TTTTTT         PERFORM FIND-LENGTH
*ZC   1775 TTTTTT  PERFORM FIND_LENGTH
         PERFORM FIND_LENGTH
* TTTTTT         MOVE FUB TO LEN0 KEEP-LEN0
* TTTTTT
*ZC   1776 TTTTTT  MOVE  FUB,TO,LEN0,KEEP_LEN0
         MOVE  FUB,TO,LEN0,KEEP_LEN0
* TTTTTT         IF  GLOB-SUB1 = SPACES
* TTTTTT         AND GLOB-SUB2 = SPACES
* TTTTTT         AND GLOB-SUB3 = SPACES
* TTTTTT             CONTINUE
*ZC   1778 TTTTTT  IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,X
               GLOB_SUB3,=,SPACES
         IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,GLOB_SUB3,X
               =,SPACES
* TTTTTT         ELSE
*ZC   1782 TTTTTT  CONTINUE 
         CONTINUE 
* TTTTTT             DISPLAY GLOB-NAME
*ZC   1783 TTTTTT  ELSE  
         ELSE  
* TTTTTT                   ' SHOULD NOT HAVE SUBSCRIPTS'
*ZC   1783 TTTTTT  DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
         DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
* TTTTTT             GO TO NAME9-PROCESS-EXIT
* TTTTTT         END-IF
* TTTTTT
*ZC   1785 TTTTTT  GO    TO,NAME9_PROCESS_EXIT
         GO    TO,NAME9_PROCESS_EXIT
*ZC   1788 TTTTTT  END_IF 
         END_IF 
* TTTTTT         IF  MONITORING = 'Y'
*ZC   1788 TTTTTT  IF    MONITORING,=,'Y'
         IF    MONITORING,=,'Y'
* TTTTTT           IF DIZPLAY = 'Y'
*ZC   1789 TTTTTT  IF    DIZPLAY,=,'Y'
         IF    DIZPLAY,=,'Y'
* TTTTTT            MOVE SPACES        TO MONITORIT-80
*ZC   1790 TTTTTT  MOVE  SPACES,TO,MONITORIT_80
         MOVE  SPACES,TO,MONITORIT_80
* TTTTTT            MOVE 'MONITORING ' TO MONITORIT-80
*ZC   1791 TTTTTT  MOVE  'MONITORING ',TO,MONITORIT_80
         MOVE  'MONITORING ',TO,MONITORIT_80
* TTTTTT            MOVE FUB-NAME0 (1:KEEP-LEN0)
* TTTTTT                               TO MONITORIT-80 (12:KEEP-LEN0)
*ZC   1792 TTTTTT  MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_8X
               0,'(',12,:,KEEP_LEN0,')'
         MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_80,'(',12,:X
               ,KEEP_LEN0,')'
* TTTTTT            ADD  12            TO LEN0
*ZC   1794 TTTTTT  ADD   12,TO,LEN0
         ADD   12,TO,LEN0
* TTTTTT            MOVE ' AT LINE '   TO MONITORIT-80 (LEN0:9)
*ZC   1795 TTTTTT  MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
         MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
* TTTTTT            ADD   9            TO LEN0
*ZC   1796 TTTTTT  ADD   9,TO,LEN0
         ADD   9,TO,LEN0
* TTTTTT            MOVE LINE-NUMBER (LINE-COUNT2)
* TTTTTT                               TO MONITORIT-80 (LEN0:6)
*ZC   1797 TTTTTT  MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_8X
               0,'(',LEN0,:,6,')'
         MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_80,'(',LEN0X
               ,:,6,')'
* TTTTTT            DISPLAY MONITORIT-80 (1:72)
*ZC   1799 TTTTTT  DISPLAY MONITORIT_80,'(',1,:,72,')'
         DISPLAY MONITORIT_80,'(',1,:,72,')'
* TTTTTT            DISPLAY  COUNT
* TTTTTT           ELSE
*ZC   1800 TTTTTT  DISPLAY COUNT
         DISPLAY COUNT
* TTTTTT            MOVE     COUNT
*ZC   1802 TTTTTT  ELSE  
         ELSE  
* TTTTTT              TO LUMP
* TTTTTT           END-IF
*ZC   1802 TTTTTT  MOVE  COUNT,TO,LUMP
         MOVE  COUNT,TO,LUMP
* TTTTTT         ELSE
*ZC   1805 TTTTTT  END_IF 
         END_IF 
* TTTTTT            DISPLAY FUB-NAME0
*ZC   1806 TTTTTT  ELSE  
         ELSE  
*ZC   1806 TTTTTT  DISPLAY FUB_NAME0
         DISPLAY FUB_NAME0
* TTTTTT            DISPLAY  COUNT
* TTTTTT         END-IF
*ZC   1807 TTTTTT  DISPLAY COUNT
         DISPLAY COUNT
* TTTTTT     END-IF.
*ZC   1809 TTTTTT  END_IF 
         END_IF 
*ZC   1809 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL NAME9_PROCESS_EXIT
*ZC   1810 TTTTTT  EXIT  
         EXIT  
* TTTTTT NAME9-PROCESS-EXIT. EXIT.
         PERIOD 
* TTTTTT NAMEX-PROCESS SECTION.
         LABEL NAMEX_PROCESS,SECTION
* TTTTTT     IF GLOB-NAME = 'IN-RECORD                     '
*ZC   1812 TTTTTT  IF    GLOB_NAME,=,'IN-RECORD                     '
         IF    GLOB_NAME,=,'IN-RECORD                     '
* TTTTTT         MOVE 0         TO SUBS-NUM
*ZC   1813 TTTTTT  MOVE  0,TO,SUBS_NUM
         MOVE  0,TO,SUBS_NUM
* TTTTTT         MOVE GLOB-NAME TO TEST-FIELD
* TTTTTT                           FUB-NAME0
*ZC   1814 TTTTTT  MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
         MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
* TTTTTT         PERFORM FIND-LENGTH
*ZC   1816 TTTTTT  PERFORM FIND_LENGTH
         PERFORM FIND_LENGTH
* TTTTTT         MOVE FUB TO LEN0 KEEP-LEN0
* TTTTTT
*ZC   1817 TTTTTT  MOVE  FUB,TO,LEN0,KEEP_LEN0
         MOVE  FUB,TO,LEN0,KEEP_LEN0
* TTTTTT         IF  GLOB-SUB1 = SPACES
* TTTTTT         AND GLOB-SUB2 = SPACES
* TTTTTT         AND GLOB-SUB3 = SPACES
*ZC   1819 TTTTTT  IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,X
               GLOB_SUB3,=,SPACES
         IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,GLOB_SUB3,X
               =,SPACES
* TTTTTT             MOVE 'Y' TO XOK
* TTTTTT         ELSE
*ZC   1822 TTTTTT  MOVE  'Y',TO,XOK
         MOVE  'Y',TO,XOK
* TTTTTT             DISPLAY GLOB-NAME
*ZC   1824 TTTTTT  ELSE  
         ELSE  
* TTTTTT                   ' SHOULD NOT HAVE SUBSCRIPTS'
*ZC   1824 TTTTTT  DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
         DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
* TTTTTT             MOVE 'N' TO XOK
* TTTTTT         END-IF
*ZC   1826 TTTTTT  MOVE  'N',TO,XOK
         MOVE  'N',TO,XOK
* TTTTTT         IF XOK = 'Y'
*ZC   1828 TTTTTT  END_IF 
         END_IF 
*ZC   1828 TTTTTT  IF    XOK,=,'Y'
         IF    XOK,=,'Y'
* TTTTTT         IF  MONITORING = 'Y'
*ZC   1829 TTTTTT  IF    MONITORING,=,'Y'
         IF    MONITORING,=,'Y'
* TTTTTT           IF DIZPLAY = 'Y'
*ZC   1830 TTTTTT  IF    DIZPLAY,=,'Y'
         IF    DIZPLAY,=,'Y'
* TTTTTT            MOVE SPACES        TO MONITORIT-80
*ZC   1831 TTTTTT  MOVE  SPACES,TO,MONITORIT_80
         MOVE  SPACES,TO,MONITORIT_80
* TTTTTT            MOVE 'MONITORING ' TO MONITORIT-80
*ZC   1832 TTTTTT  MOVE  'MONITORING ',TO,MONITORIT_80
         MOVE  'MONITORING ',TO,MONITORIT_80
* TTTTTT            MOVE FUB-NAME0 (1:KEEP-LEN0)
* TTTTTT                               TO MONITORIT-80 (12:LEN0)
*ZC   1833 TTTTTT  MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_8X
               0,'(',12,:,LEN0,')'
         MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_80,'(',12,:X
               ,LEN0,')'
* TTTTTT            ADD  12            TO LEN0
*ZC   1835 TTTTTT  ADD   12,TO,LEN0
         ADD   12,TO,LEN0
* TTTTTT            MOVE ' AT LINE '   TO MONITORIT-80 (LEN0:9)
*ZC   1836 TTTTTT  MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
         MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
* TTTTTT            ADD   9            TO LEN0
*ZC   1837 TTTTTT  ADD   9,TO,LEN0
         ADD   9,TO,LEN0
* TTTTTT            MOVE LINE-NUMBER (LINE-COUNT2)
* TTTTTT                               TO MONITORIT-80 (LEN0:6)
*ZC   1838 TTTTTT  MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_8X
               0,'(',LEN0,:,6,')'
         MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_80,'(',LEN0X
               ,:,6,')'
* TTTTTT            DISPLAY MONITORIT-80 (1:72)
*ZC   1840 TTTTTT  DISPLAY MONITORIT_80,'(',1,:,72,')'
         DISPLAY MONITORIT_80,'(',1,:,72,')'
* TTTTTT            MOVE     IN-RECORD
* TTTTTT             TO LUMP
* TTTTTT           ELSE
*ZC   1841 TTTTTT  MOVE  IN_RECORD,TO,LUMP
         MOVE  IN_RECORD,TO,LUMP
* TTTTTT            MOVE     IN-RECORD
*ZC   1844 TTTTTT  ELSE  
         ELSE  
* TTTTTT             TO LUMP
* TTTTTT           END-IF
*ZC   1844 TTTTTT  MOVE  IN_RECORD,TO,LUMP
         MOVE  IN_RECORD,TO,LUMP
* TTTTTT         ELSE
*ZC   1847 TTTTTT  END_IF 
         END_IF 
* TTTTTT            DISPLAY FUB-NAME0
*ZC   1848 TTTTTT  ELSE  
         ELSE  
*ZC   1848 TTTTTT  DISPLAY FUB_NAME0
         DISPLAY FUB_NAME0
* TTTTTT            MOVE     IN-RECORD
* TTTTTT              TO LUMP
* TTTTTT         END-IF
*ZC   1849 TTTTTT  MOVE  IN_RECORD,TO,LUMP
         MOVE  IN_RECORD,TO,LUMP
* TTTTTT         END-IF
*ZC   1852 TTTTTT  END_IF 
         END_IF 
* TTTTTT     END-IF.
*ZC   1853 TTTTTT  END_IF 
         END_IF 
*ZC   1853 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF GLOB-NAME = 'OUT-RECORD                    '
*ZC   1854 TTTTTT  IF    GLOB_NAME,=,'OUT-RECORD                    '
         IF    GLOB_NAME,=,'OUT-RECORD                    '
* TTTTTT         MOVE 0         TO SUBS-NUM
*ZC   1855 TTTTTT  MOVE  0,TO,SUBS_NUM
         MOVE  0,TO,SUBS_NUM
* TTTTTT         MOVE GLOB-NAME TO TEST-FIELD
* TTTTTT                           FUB-NAME0
*ZC   1856 TTTTTT  MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
         MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
* TTTTTT         PERFORM FIND-LENGTH
*ZC   1858 TTTTTT  PERFORM FIND_LENGTH
         PERFORM FIND_LENGTH
* TTTTTT         MOVE FUB TO LEN0 KEEP-LEN0
* TTTTTT
*ZC   1859 TTTTTT  MOVE  FUB,TO,LEN0,KEEP_LEN0
         MOVE  FUB,TO,LEN0,KEEP_LEN0
* TTTTTT         IF  GLOB-SUB1 = SPACES
* TTTTTT         AND GLOB-SUB2 = SPACES
* TTTTTT         AND GLOB-SUB3 = SPACES
*ZC   1861 TTTTTT  IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,X
               GLOB_SUB3,=,SPACES
         IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,GLOB_SUB3,X
               =,SPACES
* TTTTTT             MOVE 'Y' TO XOK
* TTTTTT         ELSE
*ZC   1864 TTTTTT  MOVE  'Y',TO,XOK
         MOVE  'Y',TO,XOK
* TTTTTT             DISPLAY GLOB-NAME
*ZC   1866 TTTTTT  ELSE  
         ELSE  
* TTTTTT                   ' SHOULD NOT HAVE SUBSCRIPTS'
*ZC   1866 TTTTTT  DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
         DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
* TTTTTT             MOVE 'N' TO XOK
* TTTTTT         END-IF
*ZC   1868 TTTTTT  MOVE  'N',TO,XOK
         MOVE  'N',TO,XOK
* TTTTTT         IF XOK = 'Y'
*ZC   1870 TTTTTT  END_IF 
         END_IF 
*ZC   1870 TTTTTT  IF    XOK,=,'Y'
         IF    XOK,=,'Y'
* TTTTTT         IF  MONITORING = 'Y'
*ZC   1871 TTTTTT  IF    MONITORING,=,'Y'
         IF    MONITORING,=,'Y'
* TTTTTT           IF DIZPLAY = 'Y'
*ZC   1872 TTTTTT  IF    DIZPLAY,=,'Y'
         IF    DIZPLAY,=,'Y'
* TTTTTT            MOVE SPACES        TO MONITORIT-80
*ZC   1873 TTTTTT  MOVE  SPACES,TO,MONITORIT_80
         MOVE  SPACES,TO,MONITORIT_80
* TTTTTT            MOVE 'MONITORING ' TO MONITORIT-80
*ZC   1874 TTTTTT  MOVE  'MONITORING ',TO,MONITORIT_80
         MOVE  'MONITORING ',TO,MONITORIT_80
* TTTTTT            MOVE FUB-NAME0 (1:KEEP-LEN0)
* TTTTTT                               TO MONITORIT-80 (12:LEN0)
*ZC   1875 TTTTTT  MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_8X
               0,'(',12,:,LEN0,')'
         MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_80,'(',12,:X
               ,LEN0,')'
* TTTTTT            ADD  12            TO LEN0
*ZC   1877 TTTTTT  ADD   12,TO,LEN0
         ADD   12,TO,LEN0
* TTTTTT            MOVE ' AT LINE '   TO MONITORIT-80 (LEN0:9)
*ZC   1878 TTTTTT  MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
         MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
* TTTTTT            ADD   9            TO LEN0
*ZC   1879 TTTTTT  ADD   9,TO,LEN0
         ADD   9,TO,LEN0
* TTTTTT            MOVE LINE-NUMBER (LINE-COUNT2)
* TTTTTT                               TO MONITORIT-80 (LEN0:6)
*ZC   1880 TTTTTT  MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_8X
               0,'(',LEN0,:,6,')'
         MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_80,'(',LEN0X
               ,:,6,')'
* TTTTTT            DISPLAY MONITORIT-80 (1:72)
*ZC   1882 TTTTTT  DISPLAY MONITORIT_80,'(',1,:,72,')'
         DISPLAY MONITORIT_80,'(',1,:,72,')'
* TTTTTT            MOVE     OUT-RECORD
* TTTTTT             TO LUMP
* TTTTTT           ELSE
*ZC   1883 TTTTTT  MOVE  OUT_RECORD,TO,LUMP
         MOVE  OUT_RECORD,TO,LUMP
* TTTTTT            MOVE     OUT-RECORD
*ZC   1886 TTTTTT  ELSE  
         ELSE  
* TTTTTT             TO LUMP
* TTTTTT           END-IF
*ZC   1886 TTTTTT  MOVE  OUT_RECORD,TO,LUMP
         MOVE  OUT_RECORD,TO,LUMP
* TTTTTT         ELSE
*ZC   1889 TTTTTT  END_IF 
         END_IF 
* TTTTTT            DISPLAY FUB-NAME0
*ZC   1890 TTTTTT  ELSE  
         ELSE  
*ZC   1890 TTTTTT  DISPLAY FUB_NAME0
         DISPLAY FUB_NAME0
* TTTTTT            MOVE     OUT-RECORD
* TTTTTT              TO LUMP
* TTTTTT         END-IF
*ZC   1891 TTTTTT  MOVE  OUT_RECORD,TO,LUMP
         MOVE  OUT_RECORD,TO,LUMP
* TTTTTT         END-IF
*ZC   1894 TTTTTT  END_IF 
         END_IF 
* TTTTTT     END-IF.
*ZC   1895 TTTTTT  END_IF 
         END_IF 
*ZC   1895 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF GLOB-NAME = 'WS-LINE                       '
*ZC   1896 TTTTTT  IF    GLOB_NAME,=,'WS-LINE                       '
         IF    GLOB_NAME,=,'WS-LINE                       '
* TTTTTT         MOVE 0         TO SUBS-NUM
*ZC   1897 TTTTTT  MOVE  0,TO,SUBS_NUM
         MOVE  0,TO,SUBS_NUM
* TTTTTT         MOVE GLOB-NAME TO TEST-FIELD
* TTTTTT                           FUB-NAME0
*ZC   1898 TTTTTT  MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
         MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
* TTTTTT         PERFORM FIND-LENGTH
*ZC   1900 TTTTTT  PERFORM FIND_LENGTH
         PERFORM FIND_LENGTH
* TTTTTT         MOVE FUB TO LEN0 KEEP-LEN0
* TTTTTT
*ZC   1901 TTTTTT  MOVE  FUB,TO,LEN0,KEEP_LEN0
         MOVE  FUB,TO,LEN0,KEEP_LEN0
* TTTTTT         IF  GLOB-SUB1 = SPACES
* TTTTTT         AND GLOB-SUB2 = SPACES
* TTTTTT         AND GLOB-SUB3 = SPACES
*ZC   1903 TTTTTT  IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,X
               GLOB_SUB3,=,SPACES
         IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,GLOB_SUB3,X
               =,SPACES
* TTTTTT             MOVE 'Y' TO XOK
* TTTTTT         ELSE
*ZC   1906 TTTTTT  MOVE  'Y',TO,XOK
         MOVE  'Y',TO,XOK
* TTTTTT             DISPLAY GLOB-NAME
*ZC   1908 TTTTTT  ELSE  
         ELSE  
* TTTTTT                   ' SHOULD NOT HAVE SUBSCRIPTS'
*ZC   1908 TTTTTT  DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
         DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
* TTTTTT             MOVE 'N' TO XOK
* TTTTTT         END-IF
*ZC   1910 TTTTTT  MOVE  'N',TO,XOK
         MOVE  'N',TO,XOK
* TTTTTT         IF XOK = 'Y'
*ZC   1912 TTTTTT  END_IF 
         END_IF 
*ZC   1912 TTTTTT  IF    XOK,=,'Y'
         IF    XOK,=,'Y'
* TTTTTT         IF  MONITORING = 'Y'
*ZC   1913 TTTTTT  IF    MONITORING,=,'Y'
         IF    MONITORING,=,'Y'
* TTTTTT           IF DIZPLAY = 'Y'
*ZC   1914 TTTTTT  IF    DIZPLAY,=,'Y'
         IF    DIZPLAY,=,'Y'
* TTTTTT            MOVE SPACES        TO MONITORIT-80
*ZC   1915 TTTTTT  MOVE  SPACES,TO,MONITORIT_80
         MOVE  SPACES,TO,MONITORIT_80
* TTTTTT            MOVE 'MONITORING ' TO MONITORIT-80
*ZC   1916 TTTTTT  MOVE  'MONITORING ',TO,MONITORIT_80
         MOVE  'MONITORING ',TO,MONITORIT_80
* TTTTTT            MOVE FUB-NAME0 (1:KEEP-LEN0)
* TTTTTT                               TO MONITORIT-80 (12:LEN0)
*ZC   1917 TTTTTT  MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_8X
               0,'(',12,:,LEN0,')'
         MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_80,'(',12,:X
               ,LEN0,')'
* TTTTTT            ADD  12            TO LEN0
*ZC   1919 TTTTTT  ADD   12,TO,LEN0
         ADD   12,TO,LEN0
* TTTTTT            MOVE ' AT LINE '   TO MONITORIT-80 (LEN0:9)
*ZC   1920 TTTTTT  MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
         MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
* TTTTTT            ADD   9            TO LEN0
*ZC   1921 TTTTTT  ADD   9,TO,LEN0
         ADD   9,TO,LEN0
* TTTTTT            MOVE LINE-NUMBER (LINE-COUNT2)
* TTTTTT                               TO MONITORIT-80 (LEN0:6)
*ZC   1922 TTTTTT  MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_8X
               0,'(',LEN0,:,6,')'
         MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_80,'(',LEN0X
               ,:,6,')'
* TTTTTT            DISPLAY MONITORIT-80 (1:72)
*ZC   1924 TTTTTT  DISPLAY MONITORIT_80,'(',1,:,72,')'
         DISPLAY MONITORIT_80,'(',1,:,72,')'
* TTTTTT            MOVE     WS-LINE
* TTTTTT             TO LUMP
* TTTTTT           ELSE
*ZC   1925 TTTTTT  MOVE  WS_LINE,TO,LUMP
         MOVE  WS_LINE,TO,LUMP
* TTTTTT            MOVE     WS-LINE
*ZC   1928 TTTTTT  ELSE  
         ELSE  
* TTTTTT             TO LUMP
* TTTTTT           END-IF
*ZC   1928 TTTTTT  MOVE  WS_LINE,TO,LUMP
         MOVE  WS_LINE,TO,LUMP
* TTTTTT         ELSE
*ZC   1931 TTTTTT  END_IF 
         END_IF 
* TTTTTT            DISPLAY FUB-NAME0
*ZC   1932 TTTTTT  ELSE  
         ELSE  
*ZC   1932 TTTTTT  DISPLAY FUB_NAME0
         DISPLAY FUB_NAME0
* TTTTTT            MOVE     WS-LINE
* TTTTTT              TO LUMP
* TTTTTT         END-IF
*ZC   1933 TTTTTT  MOVE  WS_LINE,TO,LUMP
         MOVE  WS_LINE,TO,LUMP
* TTTTTT         END-IF
*ZC   1936 TTTTTT  END_IF 
         END_IF 
* TTTTTT     END-IF.
*ZC   1937 TTTTTT  END_IF 
         END_IF 
*ZC   1937 TTTTTT  END_IF 
         END_IF 
         PERIOD 
* TTTTTT     IF GLOB-NAME = 'END-OF-FILE-FLAG              '
*ZC   1938 TTTTTT  IF    GLOB_NAME,=,'END-OF-FILE-FLAG              '
         IF    GLOB_NAME,=,'END-OF-FILE-FLAG              '
* TTTTTT         MOVE 0         TO SUBS-NUM
*ZC   1939 TTTTTT  MOVE  0,TO,SUBS_NUM
         MOVE  0,TO,SUBS_NUM
* TTTTTT         MOVE GLOB-NAME TO TEST-FIELD
* TTTTTT                           FUB-NAME0
*ZC   1940 TTTTTT  MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
         MOVE  GLOB_NAME,TO,TEST_FIELD,FUB_NAME0
* TTTTTT         PERFORM FIND-LENGTH
*ZC   1942 TTTTTT  PERFORM FIND_LENGTH
         PERFORM FIND_LENGTH
* TTTTTT         MOVE FUB TO LEN0 KEEP-LEN0
* TTTTTT
*ZC   1943 TTTTTT  MOVE  FUB,TO,LEN0,KEEP_LEN0
         MOVE  FUB,TO,LEN0,KEEP_LEN0
* TTTTTT         IF  GLOB-SUB1 = SPACES
* TTTTTT         AND GLOB-SUB2 = SPACES
* TTTTTT         AND GLOB-SUB3 = SPACES
*ZC   1945 TTTTTT  IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,X
               GLOB_SUB3,=,SPACES
         IF    GLOB_SUB1,=,SPACES,AND,GLOB_SUB2,=,SPACES,AND,GLOB_SUB3,X
               =,SPACES
* TTTTTT             MOVE 'Y' TO XOK
* TTTTTT         ELSE
*ZC   1948 TTTTTT  MOVE  'Y',TO,XOK
         MOVE  'Y',TO,XOK
* TTTTTT             DISPLAY GLOB-NAME
*ZC   1950 TTTTTT  ELSE  
         ELSE  
* TTTTTT                   ' SHOULD NOT HAVE SUBSCRIPTS'
*ZC   1950 TTTTTT  DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
         DISPLAY GLOB_NAME,' SHOULD NOT HAVE SUBSCRIPTS'
* TTTTTT             MOVE 'N' TO XOK
* TTTTTT         END-IF
*ZC   1952 TTTTTT  MOVE  'N',TO,XOK
         MOVE  'N',TO,XOK
* TTTTTT         IF XOK = 'Y'
*ZC   1954 TTTTTT  END_IF 
         END_IF 
*ZC   1954 TTTTTT  IF    XOK,=,'Y'
         IF    XOK,=,'Y'
* TTTTTT         IF  MONITORING = 'Y'
*ZC   1955 TTTTTT  IF    MONITORING,=,'Y'
         IF    MONITORING,=,'Y'
* TTTTTT           IF DIZPLAY = 'Y'
*ZC   1956 TTTTTT  IF    DIZPLAY,=,'Y'
         IF    DIZPLAY,=,'Y'
* TTTTTT            MOVE SPACES        TO MONITORIT-80
*ZC   1957 TTTTTT  MOVE  SPACES,TO,MONITORIT_80
         MOVE  SPACES,TO,MONITORIT_80
* TTTTTT            MOVE 'MONITORING ' TO MONITORIT-80
*ZC   1958 TTTTTT  MOVE  'MONITORING ',TO,MONITORIT_80
         MOVE  'MONITORING ',TO,MONITORIT_80
* TTTTTT            MOVE FUB-NAME0 (1:KEEP-LEN0)
* TTTTTT                               TO MONITORIT-80 (12:LEN0)
*ZC   1959 TTTTTT  MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_8X
               0,'(',12,:,LEN0,')'
         MOVE  FUB_NAME0,'(',1,:,KEEP_LEN0,')',TO,MONITORIT_80,'(',12,:X
               ,LEN0,')'
* TTTTTT            ADD  12            TO LEN0
*ZC   1961 TTTTTT  ADD   12,TO,LEN0
         ADD   12,TO,LEN0
* TTTTTT            MOVE ' AT LINE '   TO MONITORIT-80 (LEN0:9)
*ZC   1962 TTTTTT  MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
         MOVE  ' AT LINE ',TO,MONITORIT_80,'(',LEN0,:,9,')'
* TTTTTT            ADD   9            TO LEN0
*ZC   1963 TTTTTT  ADD   9,TO,LEN0
         ADD   9,TO,LEN0
* TTTTTT            MOVE LINE-NUMBER (LINE-COUNT2)
* TTTTTT                               TO MONITORIT-80 (LEN0:6)
*ZC   1964 TTTTTT  MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_8X
               0,'(',LEN0,:,6,')'
         MOVE  LINE_NUMBER,'(',LINE_COUNT2,')',TO,MONITORIT_80,'(',LEN0X
               ,:,6,')'
* TTTTTT            DISPLAY MONITORIT-80 (1:72)
*ZC   1966 TTTTTT  DISPLAY MONITORIT_80,'(',1,:,72,')'
         DISPLAY MONITORIT_80,'(',1,:,72,')'
* TTTTTT            MOVE     END-OF-FILE-FLAG
* TTTTTT             TO LUMP
* TTTTTT           ELSE
*ZC   1967 TTTTTT  MOVE  END_OF_FILE_FLAG,TO,LUMP
         MOVE  END_OF_FILE_FLAG,TO,LUMP
* TTTTTT            MOVE     END-OF-FILE-FLAG
*ZC   1970 TTTTTT  ELSE  
         ELSE  
* TTTTTT             TO LUMP
* TTTTTT           END-IF
*ZC   1970 TTTTTT  MOVE  END_OF_FILE_FLAG,TO,LUMP
         MOVE  END_OF_FILE_FLAG,TO,LUMP
* TTTTTT         ELSE
*ZC   1973 TTTTTT  END_IF 
         END_IF 
* TTTTTT            DISPLAY FUB-NAME0
*ZC   1974 TTTTTT  ELSE  
         ELSE  
*ZC   1974 TTTTTT  DISPLAY FUB_NAME0
         DISPLAY FUB_NAME0
* TTTTTT            MOVE     END-OF-FILE-FLAG
* TTTTTT              TO LUMP
* TTTTTT         END-IF
*ZC   1975 TTTTTT  MOVE  END_OF_FILE_FLAG,TO,LUMP
         MOVE  END_OF_FILE_FLAG,TO,LUMP
* TTTTTT         END-IF
*ZC   1978 TTTTTT  END_IF 
         END_IF 
* TTTTTT     END-IF.
*ZC   1979 TTTTTT  END_IF 
         END_IF 
*ZC   1979 TTTTTT  END_IF 
         END_IF 
         PERIOD 
         LABEL NAMEX_PROCESS_EXIT
*ZC   1980 TTTTTT  EXIT  
         EXIT  
         PERIOD 
         PROCEDURE END
         END   
