*    ZCOBOL PGM='zcobol\test\TESTWS1' VER=V1.5.06 MM/DD/YY  
*    ZCOBOL OPTIONS=() 
         COPY  TESTWS1_ZC_LABELS.CPY
*        IDENTIFICATION DIVISION.
*        PROGRAM-ID.    TESTWS1.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
TESTWS1  CSECT ,                CSECT WITH PROCEDURE CODE AND WS
         USING *,ZC_R15
         STM   14,12,12+4*(14-14)(13)
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTWS1'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'0'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0017_EOT-*+1)/2*2
         DC    AL2(WTO#0017_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0017_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0018_EOT-*+1)/2*2
         DC    AL2(WTO#0018_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0018_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
         L     ZC_R2,24(ZC_R13) SET ZC_R2=PARMLIST ADDRESS AFTER LOAD
         LARL  ZC_R1,ZC_WS     ZC_R2=A(WORKING STORAGE WITH SAVEAREA)
         ST    ZC_R1,8(ZC_R13) FORWARD  SAVE CHAIN
         ST    ZC_R13,4(ZC_R1) BACKWARD SAVE CHAIN
         LR    ZC_R13,ZC_R1    LINK SAVE AREA IN ZC390CVT
         USING ZC_WS,ZC_R13    BASE FOR ZCOBOL WS (SEE GEN_SYM_RX.MAC)
         ST    ZC_R13,ZC_WS_START  SAVE ADDR WS IN WS PREFIX
         LARL  ZC_R0,ZC_WS_END
         SR    ZC_R0,ZC_R13
         ST    ZC_R0,ZC_WS_LEN     SAVE LENGTH OF WS IN WS PREFIX
         DROP  ZC_R15              RPI 1042
ZC_WSLOC LOCTR 
ZC_WS    DS    0D           START WORKING STORAGE
ZC390CVT DSECT 
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
ZC_WSLOC LOCTR              CONTINUE WS FOR FD AND DATA
*        AUTHOR.        DON HIGGINS.
*        DATE-WRITTEN.  05/01/08.
*      ***************************************************************
*      * REGRESSION TEST WORKING STORAGE DATA FIELD GENERATION
*      ***************************************************************
*      * 10/16/08 ADD TEST FOR OCCURS AT GROUP LEVEL
*      * 01/01/09 ADD CONTINUATION TEST
*      ***************************************************************
*        ENVIRONMENT DIVISION.
*        DATA DIVISION.
         PRINT DATA
*        WORKING-STORAGE SECTION.
*        77 GOOD    PIC S9(4) VALUE 0.
*        77 FIELD   PIC X(30) VALUE SPACES.
*        77 P1      PIC 9 VALUE 1.
*        77 P2      PIC 9 VALUE 2.
*        01 G1.
*           05 PP3   PIC 99 VALUE 3.
*           05 X1    PIC X  VALUE '1'.
*           05 XX02  PIC XX VALUE '02'.
*           05 G2-TABLE-DATA.
*              10 PIC X VALUE 'A'.
*              10 PIC X VALUE 'B'.
*           05 G2-TABLE REDEFINES G2-TABLE-DATA OCCURS 2.
*              10 G2-TABLE-ENTRY PIC X.
*        01 G1-REDEF REDEFINES G1.
*           05 PP3C  PIC XX.
*           05 X3    PIC XXX.
*           05 G2V   PIC XX.
*        01 G1V PIC X(7) VALUE '03102AB'.
*        77 TF COMP  PIC S9(9)  VALUE X'ff'.
*        77 TH COMP  PIC S9(4)  VALUE X'ff'.
*        77 TX       PIC X(1)   VALUE X'c1'.
*        77 TF2 COMP  PIC S9(9)  VALUE X"ff".
*        77 TH2 COMP  PIC S9(4)  VALUE X"ff".
*        77 TX2       PIC X(1)   VALUE X"c1".
*        77 TPN       PIC S9     VALUE +1.
*        77 TMN       PIC S9     VALUE -1.
*        77 TX1       PIC X(1).
*        77 TX3       PIC X(3).
*         77 SPLIT-LIT  PIC X(79)
*                 VALUE 'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 AX
               BEN
*       -               'D IN LINKED PROGRAM BY PROGRAM'.
*       -               'D IN LINKED PROGRAM BY PROGRAM'.
*        77 CP1-SRT COMP-1           VALUE 1234567.
*        77 CP2-LNG COMP-2           VALUE 123456789012345.
*        77 HFP-SRT FLOAT-HEX-7      VALUE 1234567.
*        77 HFP-LNG FLOAT-HEX-15     VALUE 123456789012345.
*        77 HFP-EXT FLOAT-HEX-30
*                   VALUE 123456789012345678901234567890.
*        77 BFP-SRT FLOAT-BINARY-7   VALUE 1234567.
*        77 BFP-LNG FLOAT-BINARY-16  VALUE 123456789012345.
*        77 BFP-EXT FLOAT-BINARY-34
*                   VALUE 1234567890123456789012345678901234.
*        77 DFP-SRT FLOAT-DECIMAL-7  VALUE 1234567.
*        77 DFP-LNG FLOAT-DECIMAL-16 VALUE 1234567890123456.
*        77 DFP-EXT FLOAT-DECIMAL-34
*                   VALUE 1234567890123456789012345678901234.
*        77 FLT-SRT FLOAT-SHORT    VALUE 1234567.
*        77 FLT-LNG FLOAT-LONG     VALUE 1234567890123456.
*        77 FLT-EXT FLOAT-EXTENDED
*                   VALUE 1234567890123456789012345678901234.
*        77 HW1     COMP PIC S9(4)   VALUE 1234.
*        77 FW1     COMP PIC S9(9)   VALUE 123456789.
*        77 GW1     COMP PIC S9(18)  VALUE 123456789012345678.
*        77 QW1     COMP PIC S9(39)
*                   VALUE 123456789012345678901234567890123456789.
*        77 PD1     COMP-3 PIC S9(31)
*                   VALUE 1234567890123456789012345678901.
*        77 ZD1     PIC S9(31)
*                   VALUE 1234567890123456789012345678901.
*        PROCEDURE DIVISION.
*ZC   PROCEDURE DIVISION
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTWS1  CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
*        MAINLINE.
PG_MAINLINE DS 0H
*            DISPLAY 'TESTWS1 STARTING'
*ZC     74         DISPLAY 'TESTWS1 STARTING'
         BRAS  1,*+(WTO#0232_EOT-*+1)/2*2
         DC    AL2(WTO#0232_EOT-*,0),C'TESTWS1 STARTING'
WTO#0232_EOT     EQU *
         SVC   35
*            IF P1 NOT = 1   MOVE 'P1' TO FIELD GO TO ABORT.
*ZC     75         IF    P1,NOT,=,1
         CLI   P1,C'1'
         BRC   15-ZC_NE,PG_IF_1_1
*ZC     75         MOVE  'P1',TO,FIELD
         LARL  ZC_R1,=CL30'P1'
          MVC   FIELD,0(ZC_R1)
*ZC     75         GO    TO,ABORT
         J     PG_ABORT
PG_IF_1_1    DS    0H  &TYPE
*            IF PP3C NOT = '03' MOVE 'P1C' TO FIELD GO TO ABORT.
*ZC     76         IF    PP3C,NOT,=,'03'
         LARL  ZC_R1,=CL2'03'
         CLC   PP3C,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_2_1
*ZC     76         MOVE  'P1C',TO,FIELD
         LARL  ZC_R1,=CL30'P1C'
          MVC   FIELD,0(ZC_R1)
*ZC     76         GO    TO,ABORT
         J     PG_ABORT
PG_IF_2_1    DS    0H  &TYPE
*            IF X3 NOT = '102' MOVE 'X3' TO FIELD GO TO ABORT.
*ZC     77         IF    X3,NOT,=,'102'
         LARL  ZC_R1,=CL4'102'
         CLC   X3,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_3_1
*ZC     77         MOVE  'X3',TO,FIELD
         LARL  ZC_R1,=CL30'X3'
          MVC   FIELD,0(ZC_R1)
*ZC     77         GO    TO,ABORT
         J     PG_ABORT
PG_IF_3_1    DS    0H  &TYPE
*            IF P2 NOT = 2   MOVE 'P2' TO FIELD GO TO ABORT.
*ZC     78         IF    P2,NOT,=,2
         CLI   P2,C'2'
         BRC   15-ZC_NE,PG_IF_4_1
*ZC     78         MOVE  'P2',TO,FIELD
         LARL  ZC_R1,=CL30'P2'
          MVC   FIELD,0(ZC_R1)
*ZC     78         GO    TO,ABORT
         J     PG_ABORT
PG_IF_4_1    DS    0H  &TYPE
*            IF G1 NOT = G1V MOVE 'G1' TO FIELD GO TO ABORT.
*ZC     79         IF    G1,NOT,=,G1V
         CLC   G1,G1V
         BRC   15-ZC_NE,PG_IF_5_1
*ZC     79         MOVE  'G1',TO,FIELD
         LARL  ZC_R1,=CL30'G1'
          MVC   FIELD,0(ZC_R1)
*ZC     79         GO    TO,ABORT
         J     PG_ABORT
PG_IF_5_1    DS    0H  &TYPE
*            IF G1-REDEF NOT = G1V MOVE 'G1-REDEF' TO FIELD GO TO ABORTX
                              .
*ZC     80         IF    G1_REDEF,NOT,=,G1V
         CLC   G1_REDEF,G1V
         BRC   15-ZC_NE,PG_IF_6_1
*ZC     80         MOVE  'G1-REDEF',TO,FIELD
         LARL  ZC_R1,=CL30'G1-REDEF'
          MVC   FIELD,0(ZC_R1)
*ZC     80         GO    TO,ABORT
         J     PG_ABORT
PG_IF_6_1    DS    0H  &TYPE
*            IF G2V      NOT = 'AB' MOVE 'G2-TABLE' TO FIELD GO TO ABORX
               T.
*ZC     81         IF    G2V,NOT,=,'AB'
         LARL  ZC_R1,=CL2'AB'
         CLC   G2V,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_7_1
*ZC     81         MOVE  'G2-TABLE',TO,FIELD
         LARL  ZC_R1,=CL30'G2-TABLE'
          MVC   FIELD,0(ZC_R1)
*ZC     81         GO    TO,ABORT
         J     PG_ABORT
PG_IF_7_1    DS    0H  &TYPE
*            DISPLAY 'TF =' TF.
*ZC     82         DISPLAY 'TF =',TF
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TF =' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TF
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'F'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF TF NOT = 255 MOVE 'TF-HEX' TO FIELD GO TO ABORT.
*ZC     83         IF    TF,NOT,=,255
         L     0,TF
         CFI   0,255
         BRC   15-ZC_NE,PG_IF_8_1
*ZC     83         MOVE  'TF-HEX',TO,FIELD
         LARL  ZC_R1,=CL30'TF-HEX'
          MVC   FIELD,0(ZC_R1)
*ZC     83         GO    TO,ABORT
         J     PG_ABORT
PG_IF_8_1    DS    0H  &TYPE
*            DISPLAY 'TH =' TH.
*ZC     84         DISPLAY 'TH =',TH
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TH =' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TH
         LA    ZC_R1,2  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'H'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF TH NOT = 255 MOVE 'TH-HEX' TO FIELD GO TO ABORT.
*ZC     85         IF    TH,NOT,=,255
         LH    0,TH
         CHI   0,255
         BRC   15-ZC_NE,PG_IF_9_1
*ZC     85         MOVE  'TH-HEX',TO,FIELD
         LARL  ZC_R1,=CL30'TH-HEX'
          MVC   FIELD,0(ZC_R1)
*ZC     85         GO    TO,ABORT
         J     PG_ABORT
PG_IF_9_1    DS    0H  &TYPE
*            DISPLAY 'TX =' TX.
*ZC     86         DISPLAY 'TX =',TX
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TX =' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TX
         LA    ZC_R1,1  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF TX NOT = 'A' MOVE 'TX-HEX' TO FIELD GO TO ABORT.
*ZC     87         IF    TX,NOT,=,'A'
         CLI   TX,C'A'
         BRC   15-ZC_NE,PG_IF_10_1
*ZC     87         MOVE  'TX-HEX',TO,FIELD
         LARL  ZC_R1,=CL30'TX-HEX'
          MVC   FIELD,0(ZC_R1)
*ZC     87         GO    TO,ABORT
         J     PG_ABORT
PG_IF_10_1   DS    0H  &TYPE
*            DISPLAY 'TF =' TF.
*ZC     88         DISPLAY 'TF =',TF
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TF =' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TF
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'F'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'TH =' TH.
*ZC     89         DISPLAY 'TH =',TH
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TH =' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TH
         LA    ZC_R1,2  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'H'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'TX =' TX.
*ZC     90         DISPLAY 'TX =',TX
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TX =' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TX
         LA    ZC_R1,1  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'TF2=' TF2.
*ZC     91         DISPLAY 'TF2=',TF2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TF2=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TF2
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'F'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'TH2=' TH2.
*ZC     92         DISPLAY 'TH2=',TH2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TH2=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TH2
         LA    ZC_R1,2  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'H'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'TX2=' TX2.
*ZC     93         DISPLAY 'TX2=',TX2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TX2=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TX2
         LA    ZC_R1,1  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF TPN NOT = 1  MOVE 'TPN' TO FIELD GO TO ABORT.
*ZC     94         IF    TPN,NOT,=,1
         PACK  ZCVT_PWORK1(1),0+TPN(1) PACK #1 NORMAL
         LARL  ZC_R1,=PL2'1'
         CP    ZCVT_PWORK1(1),0(2,ZC_R1)
         BRC   15-ZC_NE,PG_IF_11_1
*ZC     94         MOVE  'TPN',TO,FIELD
         LARL  ZC_R1,=CL30'TPN'
          MVC   FIELD,0(ZC_R1)
*ZC     94         GO    TO,ABORT
         J     PG_ABORT
PG_IF_11_1   DS    0H  &TYPE
*            DISPLAY 'TX2=' TX2.
*ZC     95         DISPLAY 'TX2=',TX2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'TX2=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,TX2
         LA    ZC_R1,1  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF TMN NOT = -1 MOVE 'TMN' TO FIELD GO TO ABORT.
*ZC     96         IF    TMN,NOT,=,-,1
         PACK  ZCVT_PWORK1(1),0+TMN(1) PACK #1 NORMAL
         LARL  ZC_R1,=PL2'-1'
         CP    ZCVT_PWORK1(1),0(2,ZC_R1)
         BRC   15-ZC_NE,PG_IF_12_1
*ZC     96         MOVE  'TMN',TO,FIELD
         LARL  ZC_R1,=CL30'TMN'
          MVC   FIELD,0(ZC_R1)
*ZC     96         GO    TO,ABORT
         J     PG_ABORT
PG_IF_12_1   DS    0H  &TYPE
*            MOVE X'C1' TO TX1
*ZC     97         MOVE  X'C1',TO,TX1
         MVI   TX1,X'C1'
*            IF TX1 NOT = 'A' MOVE 'TX1' TO FIELD GO TO ABORT.
*ZC     98         IF    TX1,NOT,=,'A'
         CLI   TX1,C'A'
         BRC   15-ZC_NE,PG_IF_13_1
*ZC     98         MOVE  'TX1',TO,FIELD
         LARL  ZC_R1,=CL30'TX1'
          MVC   FIELD,0(ZC_R1)
*ZC     98         GO    TO,ABORT
         J     PG_ABORT
PG_IF_13_1   DS    0H  &TYPE
*            MOVE X'C1C2C3' TO TX3
*ZC     99         MOVE  X'C1C2C3',TO,TX3
         LARL  ZC_R1,=XL4'C1C2C3'
          MVC   TX3,1(ZC_R1)
*            IF TX3 NOT = 'ABC' MOVE 'TX3' TO FIELD GO TO ABORT.
*ZC    100         IF    TX3,NOT,=,'ABC'
         LARL  ZC_R1,=CL4'ABC'
         CLC   TX3,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_14_1
*ZC    100         MOVE  'TX3',TO,FIELD
         LARL  ZC_R1,=CL30'TX3'
          MVC   FIELD,0(ZC_R1)
*ZC    100         GO    TO,ABORT
         J     PG_ABORT
PG_IF_14_1   DS    0H  &TYPE
*            DISPLAY 'SPLIT-LIT=' SPLIT-LIT
*ZC    101         DISPLAY 'SPLIT-LIT=',SPLIT_LIT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL10'SPLIT-LIT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,10
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,SPLIT_LIT
         LA    ZC_R1,79  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF SPLIT-LIT NOT =
*                       'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 AX
               BEN
*       -               'D IN LINKED PROGRAM BY PROGRAM'
*       -               'D IN LINKED PROGRAM BY PROGRAM'
*ZC    102         IF    SPLIT_LIT,NOT,=,'TESTBEC6 TEST 5:PRESS AID KEYX
                TO HANDLE AEI0 ABEND IN LINKED PROGRAM BY PROGRAM'
         LARL  ZC_R1,=CL80'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0X
                ABEND IN LINKED PROGRAM BY PROGRAM'
         CLC   SPLIT_LIT,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_15_1
*                MOVE 'SPLIT-LIT' TO FIELD GO TO ABORT.
*ZC    105         MOVE  'SPLIT-LIT',TO,FIELD
         LARL  ZC_R1,=CL30'SPLIT-LIT'
          MVC   FIELD,0(ZC_R1)
*ZC    105         GO    TO,ABORT
         J     PG_ABORT
PG_IF_15_1   DS    0H  &TYPE
*            DISPLAY 'CP1-SRT=' CP1-SRT
*ZC    106         DISPLAY 'CP1-SRT=',CP1_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'CP1-SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,CP1_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'1'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'CP2-LNG=' CP2-LNG
*ZC    107         DISPLAY 'CP2-LNG=',CP2_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'CP2-LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,CP2_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'2'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'HFP-SRT=' HFP-SRT
*ZC    108         DISPLAY 'HFP-SRT=',HFP_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'HFP-SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HFP_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'1'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'HFP-LNG=' HFP-LNG
*ZC    109         DISPLAY 'HFP-LNG=',HFP_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'HFP-LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HFP_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'2'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'HFP-EXT=' HFP-EXT
*ZC    110         DISPLAY 'HFP-EXT=',HFP_EXT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'HFP-EXT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HFP_EXT
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'3'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'BFP-SRT=' BFP-SRT
*ZC    111         DISPLAY 'BFP-SRT=',BFP_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'BFP-SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BFP_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'4'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'BFP-LNG=' BFP-LNG
*ZC    112         DISPLAY 'BFP-LNG=',BFP_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'BFP-LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BFP_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'5'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'BFP-EXT=' BFP-EXT
*ZC    113         DISPLAY 'BFP-EXT=',BFP_EXT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'BFP-EXT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BFP_EXT
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'6'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'DFP-SRT=' DFP-SRT
*ZC    114         DISPLAY 'DFP-SRT=',DFP_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'DFP-SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,DFP_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'7'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'DFP-LNG=' DFP-LNG
*ZC    115         DISPLAY 'DFP-LNG=',DFP_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'DFP-LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,DFP_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'8'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'DFP-EXT=' DFP-EXT
*ZC    116         DISPLAY 'DFP-EXT=',DFP_EXT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'DFP-EXT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,DFP_EXT
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'9'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'FLT-SRT=' FLT-SRT
*ZC    117         DISPLAY 'FLT-SRT=',FLT_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'FLT-SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,FLT_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'7'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'FLT-LNG=' FLT-LNG
*ZC    118         DISPLAY 'FLT-LNG=',FLT_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'FLT-LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,FLT_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'8'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'FLT-EXT=' FLT-EXT
*ZC    119         DISPLAY 'FLT-EXT=',FLT_EXT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'FLT-EXT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,FLT_EXT
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'9'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'HW1=' HW1
*ZC    120         DISPLAY 'HW1=',HW1
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'HW1=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HW1
         LA    ZC_R1,2  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'H'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'FW1=' FW1
*ZC    121         DISPLAY 'FW1=',FW1
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'FW1=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,FW1
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'F'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'GW1=' GW1
*ZC    122         DISPLAY 'GW1=',GW1
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'GW1=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,GW1
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'G'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'QW1=' QW1
*ZC    123         DISPLAY 'QW1=',QW1
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'QW1=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,QW1
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'Q'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'PD1=' PD1
*ZC    124         DISPLAY 'PD1=',PD1
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'PD1=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,PD1
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'P'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'ZD1=' ZD1
*ZC    125         DISPLAY 'ZD1=',ZD1
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'ZD1=' PAD TO EVEN LEN LIT
         LA    ZC_R1,4
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,ZD1
         LA    ZC_R1,31  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'Z'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF CP1-SRT = 1234567
*ZC    126         IF    CP1_SRT,=,1234567
         LE    0,CP1_SRT
         LARL  ZC_R1,=E'1234567'
         CE    0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_16_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    127         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    127         ELSE
         J     PG_IF_16_E
PG_IF_16_1   DS    0H  &TYPE
*ZC    127         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_16_E   DS    0H  &TYPE
*            IF CP2-LNG = 123456789012345
*ZC    128         IF    CP2_LNG,=,123456789012345
         LD    0,CP2_LNG
         LARL  ZC_R1,=D'123456789012345'
         CD    0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_17_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    129         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    129         ELSE
         J     PG_IF_17_E
PG_IF_17_1   DS    0H  &TYPE
*ZC    129         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_17_E   DS    0H  &TYPE
*            IF HFP-SRT = 1234567
*ZC    130         IF    HFP_SRT,=,1234567
         LE    0,HFP_SRT
         LARL  ZC_R1,=E'1234567'
         CE    0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_18_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    131         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    131         ELSE
         J     PG_IF_18_E
PG_IF_18_1   DS    0H  &TYPE
*ZC    131         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_18_E   DS    0H  &TYPE
*            IF HFP-LNG = 123456789012345
*ZC    132         IF    HFP_LNG,=,123456789012345
         LD    0,HFP_LNG
         LARL  ZC_R1,=D'123456789012345'
         CD    0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_19_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    133         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    133         ELSE
         J     PG_IF_19_E
PG_IF_19_1   DS    0H  &TYPE
*ZC    133         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_19_E   DS    0H  &TYPE
*            IF HFP-EXT = 123456789012345678901234567890
*ZC    134         IF    HFP_EXT,=,123456789012345678901234567890
         LD    0,HFP_EXT
         LD    2,8+HFP_EXT
         LARL  ZC_R1,=LH'123456789012345678901234567890'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXR   0,1
         BRC   15-ZC_EQ,PG_IF_20_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    135         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    135         ELSE
         J     PG_IF_20_E
PG_IF_20_1   DS    0H  &TYPE
*ZC    135         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_20_E   DS    0H  &TYPE
*            IF BFP-SRT = 1234567
*ZC    136         IF    BFP_SRT,=,1234567
         LE    0,BFP_SRT
         LARL  ZC_R1,=EB'1234567'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_21_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    137         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    137         ELSE
         J     PG_IF_21_E
PG_IF_21_1   DS    0H  &TYPE
*ZC    137         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_21_E   DS    0H  &TYPE
*            IF BFP-LNG = 123456789012345
*ZC    138         IF    BFP_LNG,=,123456789012345
         LD    0,BFP_LNG
         LARL  ZC_R1,=DB'123456789012345'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_22_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    139         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    139         ELSE
         J     PG_IF_22_E
PG_IF_22_1   DS    0H  &TYPE
*ZC    139         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_22_E   DS    0H  &TYPE
*            IF BFP-EXT = 1234567890123456789012345678901234
*ZC    140         IF    BFP_EXT,=,1234567890123456789012345678901234
         LD    0,BFP_EXT
         LD    2,8+BFP_EXT
         LARL  ZC_R1,=LB'1234567890123456789012345678901234'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_23_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    141         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    141         ELSE
         J     PG_IF_23_E
PG_IF_23_1   DS    0H  &TYPE
*ZC    141         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_23_E   DS    0H  &TYPE
*            IF DFP-SRT = 1234567
*ZC    142         IF    DFP_SRT,=,1234567
         LE    0,DFP_SRT
         LARL  ZC_R1,=ED'1234567'
         LE    ZC_F1,0(ZC_R1)
         LDETR 0,0,0
         LDETR 1,1,0
         CDTR  0,1
         BRC   15-ZC_EQ,PG_IF_24_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    143         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    143         ELSE
         J     PG_IF_24_E
PG_IF_24_1   DS    0H  &TYPE
*ZC    143         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_24_E   DS    0H  &TYPE
*            IF DFP-LNG = 1234567890123456
*ZC    144         IF    DFP_LNG,=,1234567890123456
         LD    0,DFP_LNG
         LARL  ZC_R1,=DD'1234567890123456'
         LD    ZC_F1,0(ZC_R1)
         CDTR  0,1
         BRC   15-ZC_EQ,PG_IF_25_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    145         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    145         ELSE
         J     PG_IF_25_E
PG_IF_25_1   DS    0H  &TYPE
*ZC    145         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_25_E   DS    0H  &TYPE
*            IF DFP-EXT = 1234567890123456789012345678901234
*ZC    146         IF    DFP_EXT,=,1234567890123456789012345678901234
         LD    0,DFP_EXT
         LD    2,8+DFP_EXT
         LARL  ZC_R1,=LD'1234567890123456789012345678901234'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXTR  0,1
         BRC   15-ZC_EQ,PG_IF_26_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    147         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    147         ELSE
         J     PG_IF_26_E
PG_IF_26_1   DS    0H  &TYPE
*ZC    147         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_26_E   DS    0H  &TYPE
*            IF FLT-SRT = 1234567
*ZC    148         IF    FLT_SRT,=,1234567
         LE    0,FLT_SRT
         LARL  ZC_R1,=ED'1234567'
         LE    ZC_F1,0(ZC_R1)
         LDETR 0,0,0
         LDETR 1,1,0
         CDTR  0,1
         BRC   15-ZC_EQ,PG_IF_27_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    149         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    149         ELSE
         J     PG_IF_27_E
PG_IF_27_1   DS    0H  &TYPE
*ZC    149         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_27_E   DS    0H  &TYPE
*            IF FLT-LNG = 1234567890123456
*ZC    150         IF    FLT_LNG,=,1234567890123456
         LD    0,FLT_LNG
         LARL  ZC_R1,=DD'1234567890123456'
         LD    ZC_F1,0(ZC_R1)
         CDTR  0,1
         BRC   15-ZC_EQ,PG_IF_28_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    151         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    151         ELSE
         J     PG_IF_28_E
PG_IF_28_1   DS    0H  &TYPE
*ZC    151         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_28_E   DS    0H  &TYPE
*            IF FLT-EXT = 1234567890123456789012345678901234
*ZC    152         IF    FLT_EXT,=,1234567890123456789012345678901234
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LD'1234567890123456789012345678901234'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXTR  0,1
         BRC   15-ZC_EQ,PG_IF_29_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    153         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    153         ELSE
         J     PG_IF_29_E
PG_IF_29_1   DS    0H  &TYPE
*ZC    153         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_29_E   DS    0H  &TYPE
*            IF HW1     = 1234
*ZC    154         IF    HW1,=,1234
         LH    0,HW1
         CHI   0,1234
         BRC   15-ZC_EQ,PG_IF_30_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    155         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    155         ELSE
         J     PG_IF_30_E
PG_IF_30_1   DS    0H  &TYPE
*ZC    155         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_30_E   DS    0H  &TYPE
*            IF FW1     = 123456789
*ZC    156         IF    FW1,=,123456789
         L     0,FW1
         CFI   0,123456789
         BRC   15-ZC_EQ,PG_IF_31_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    157         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    157         ELSE
         J     PG_IF_31_E
PG_IF_31_1   DS    0H  &TYPE
*ZC    157         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_31_E   DS    0H  &TYPE
*            IF GW1     = 123456789012345678
*ZC    158         IF    GW1,=,123456789012345678
         LG     0,GW1
         LARL   ZC_R1,=FL8'123456789012345678'
         CG     0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_32_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    159         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    159         ELSE
         J     PG_IF_32_E
PG_IF_32_1   DS    0H  &TYPE
*ZC    159         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_32_E   DS    0H  &TYPE
*            IF QW1     = 123456789012345678901234567890123456789
*ZC    160         IF    QW1,=,123456789012345678901234567890123456789
         LMG   ZC_R0,ZC_R1,QW1
         LARL  ZC_R2,=FL16'123456789012345678901234567890123456789'
         CG    0,0(ZC_R2)
         JNE   *+4+6
         CLG   1,8(ZC_R2)
         BRC   15-ZC_EQ,PG_IF_33_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    161         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    161         ELSE
         J     PG_IF_33_E
PG_IF_33_1   DS    0H  &TYPE
*ZC    161         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_33_E   DS    0H  &TYPE
*            IF PD1     = 1234567890123456789012345678901
*ZC    162         IF    PD1,=,1234567890123456789012345678901
         LARL  ZC_R1,=PL16'1234567890123456789012345678901'
         CP    PD1,0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_34_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    163         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    163         ELSE
         J     PG_IF_34_E
PG_IF_34_1   DS    0H  &TYPE
*ZC    163         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_34_E   DS    0H  &TYPE
*            IF PD1     = 1234567890123456789012345678901
*ZC    164         IF    PD1,=,1234567890123456789012345678901
         LARL  ZC_R1,=PL16'1234567890123456789012345678901'
         CP    PD1,0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_35_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC    165         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    165         ELSE
         J     PG_IF_35_E
PG_IF_35_1   DS    0H  &TYPE
*ZC    165         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_35_E   DS    0H  &TYPE
*            DISPLAY 'TESTWS1 GOOD TESTS = ' GOOD
*ZC    166         DISPLAY 'TESTWS1 GOOD TESTS = ',GOOD
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL22'TESTWS1 GOOD TESTS = ' PAD TO EVEN LEN LIT
         LA    ZC_R1,21
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,GOOD
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'Z'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            STOP RUN.
*ZC    167         STOP  RUN
         LH    ZC_R1,RETURN_CODE      PASS RETURN CODE IN R1
         L     ZC_R15,ZCVT_GOBACK
         BR    ZC_R15
*        ABORT.
PG_MAINLINE_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ABORT DS    0H
*            DISPLAY 'TESTWS1 ERROR ON ' FIELD
*ZC    169         DISPLAY 'TESTWS1 ERROR ON ',FIELD
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL18'TESTWS1 ERROR ON ' PAD TO EVEN LEN LIT
         LA    ZC_R1,17
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,FIELD
         LA    ZC_R1,30  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            MOVE 16 TO RETURN-CODE
*ZC    170         MOVE  16,TO,RETURN_CODE
          MVHHI RETURN_CODE,16
*            STOP RUN.
*ZC    171         STOP  RUN
         LH    ZC_R1,RETURN_CODE      PASS RETURN CODE IN R1
         L     ZC_R15,ZCVT_GOBACK
         BR    ZC_R15
*        GOOD.
PG_ABORT_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOOD  DS    0H
*            ADD 1 TO GOOD.
*ZC    173         ADD   1,TO,GOOD
         PACK  ZCVT_PWORK1(3),0+GOOD(4) PACK #1 NORMAL
         LARL  ZC_R14,=PL2'1'
         AP    ZCVT_PWORK1(3),0(2,ZC_R14)
         UNPK  0+GOOD(4),0+ZCVT_PWORK1(3) UNPK #1 NORMAL
*        BAD.
PG_GOOD_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BAD   DS    0H
*            MOVE 16 TO RETURN-CODE
*ZC    175         MOVE  16,TO,RETURN_CODE
          MVHHI RETURN_CODE,16
*            STOP RUN.
*ZC    176         STOP  RUN
         LH    ZC_R1,RETURN_CODE      PASS RETURN CODE IN R1
         L     ZC_R15,ZCVT_GOBACK
         BR    ZC_R15
PG_BAD_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  ZC_SAVEAREA                    00000000 00000048 1   X   X(72)X
                      
*    01  ZC_WS_ID                       00000048 00000008 1   X   X(8) X
                     ''WS*WS*WS'' 
*    01  ZC_WS_START                    00000050 00000004 1   A        X
                      
*    01  ZC_WS_LEN                      00000054 00000004 1   F   9(9) X
                      
*    01  FILLER                         00000058 00000000 1   X        X
                      
*    01  GOOD                           00000058 00000004 1   Z   9(4) X
                     0 
*    01  FIELD                          0000005C 0000001E 1   X   X(30)X
                     SPACES 
*    01  P1                             0000007A 00000001 1   Z   9    X
                     1 
*    01  P2                             0000007B 00000001 1   Z   9    X
                     2 
*    01  G1                             0000007C 00000007 1   X        X
                      
*    05  PP3                            0000007C 00000002 1   Z   99   X
                     3 
*    05  X1                             0000007E 00000001 1   X   X    X
                     ''1'' 
*    05  XX02                           0000007F 00000002 1   X   XX   X
                     ''02'' 
*    05  G2_TABLE_DATA                  00000081 00000002 1   X        X
                      
*    10  FILLER                         00000081 00000001 1   X   X    X
                     ''A'' 
*    10  FILLER                         00000082 00000001 1   X   X    X
                     ''B'' 
*    05  G2_TABLE                       00000081 00000001 2   X        X
                      
*    10  G2_TABLE_ENTRY                 00000081 00000001 1   X   X    X
                      
*    01  G1_REDEF                       0000007C 00000007 1   X        X
                      
*    05  PP3C                           0000007C 00000002 1   X   XX   X
                      
*    05  X3                             0000007E 00000003 1   X   XXX  X
                      
*    05  G2V                            00000081 00000002 1   X   XX   X
                      
*    01  G1V                            00000083 00000007 1   X   X(7) X
                     ''03102AB'' 
*    01  TF                             0000008A 00000004 1   F   9(9) X
                     X''FF'' 
*    01  TH                             0000008E 00000002 1   H   9(4) X
                     X''FF'' 
*    01  TX                             00000090 00000001 1   X   X(1) X
                     X''C1'' 
*    01  TF2                            00000091 00000004 1   F   9(9) X
                     X''FF'' 
*    01  TH2                            00000095 00000002 1   H   9(4) X
                     X''FF'' 
*    01  TX2                            00000097 00000001 1   X   X(1) X
                     X''C1'' 
*    01  TPN                            00000098 00000001 1   Z   9    X
                     +1 
*    01  TMN                            00000099 00000001 1   Z   9    X
                     -1 
*    01  TX1                            0000009A 00000001 1   X   X(1) X
                      
*    01  TX3                            0000009B 00000003 1   X   X(3) X
                      
*    01  SPLIT_LIT                      0000009E 0000004F 1   X   X(79)X
                     ''TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 ABEX
               ND IN LINKED PROGRAM BY PROGRAM'' 
*    01  CP1_SRT                        000000ED 00000004 1   1        X
                     1234567 
*    01  CP2_LNG                        000000F1 00000008 1   2        X
                     123456789012345 
*    01  HFP_SRT                        000000F9 00000004 1   1        X
                     1234567 
*    01  HFP_LNG                        000000FD 00000008 1   2        X
                     123456789012345 
*    01  HFP_EXT                        00000105 00000010 1   3        X
                     123456789012345678901234567890 
*    01  BFP_SRT                        00000115 00000004 1   4        X
                     1234567 
*    01  BFP_LNG                        00000119 00000008 1   5        X
                     123456789012345 
*    01  BFP_EXT                        00000121 00000010 1   6        X
                     1234567890123456789012345678901234 
*    01  DFP_SRT                        00000131 00000004 1   7        X
                     1234567 
*    01  DFP_LNG                        00000135 00000008 1   8        X
                     1234567890123456 
*    01  DFP_EXT                        0000013D 00000010 1   9        X
                     1234567890123456789012345678901234 
*    01  FLT_SRT                        0000014D 00000004 1   7        X
                     1234567 
*    01  FLT_LNG                        00000151 00000008 1   8        X
                     1234567890123456 
*    01  FLT_EXT                        00000159 00000010 1   9        X
                     1234567890123456789012345678901234 
*    01  HW1                            00000169 00000002 1   H   9(4) X
                     1234 
*    01  FW1                            0000016B 00000004 1   F   9(9) X
                     123456789 
*    01  GW1                            0000016F 00000008 1   G   9(18)X
                     123456789012345678 
*    01  QW1                            00000177 00000010 1   Q   9(39)X
                     123456789012345678901234567890123456789 
*    01  PD1                            00000187 00000010 1   P   9(31)X
                     1234567890123456789012345678901 
*    01  ZD1                            00000197 0000001F 1   Z   9(31)X
                     1234567890123456789012345678901 
*    01  DEBUG_ITEM                     000001B6 00000058 1   X        X
                      
*    02  DEBUG_LINE                     000001B6 00000006 1   X   X(6) X
                      
*    02  FILLER                         000001BC 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     000001BD 0000001E 1   X   X(30)X
                      
*    02  FILLER                         000001DB 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    000001DC 00000004 1   Z   9999 X
                      
*    02  FILLER                         000001E0 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    000001E1 00000004 1   Z   9999 X
                      
*    02  FILLER                         000001E5 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    000001E6 00000004 1   Z   9999 X
                      
*    02  FILLER                         000001EA 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 000001EB 00000023 1   X   X(35)X
                      
*    01  TRUE                           0000020E 00000001 1   Z   9    X
                     1 
*    01  FALSE                          0000020F 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    00000210 00000002 1   H   9(4) X
                     0 
ZC_WSLOC LOCTR 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_SAVEAREA DS CL72
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID DC CL8'WS*WS*WS'
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_START DS AL4
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_LEN DS FL4
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL0
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GOOD     DC ZL4'0'
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FIELD    DC CL30' '
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
P1       DC CL1'1'
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
P2       DC CL1'2'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G1       DS  0CL7
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PP3      DC CL2'03'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
X1       DC CL1'1'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
XX02     DC CL2'02'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G2_TABLE_DATA DS 0CL2
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1'A'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1'B'
         ORG   G2_TABLE_DATA  START REDEFINE
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G2_TABLE DS  0CL1
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G2_TABLE_ENTRY DS CL1
         DS    XL1 PAD FOR MULT OCCURS
         ORG   G1  START REDEFINE
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G1_REDEF DS  0CL7
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PP3C     DS  CL2
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
X3       DS  CL3
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G2V      DS  CL2
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G1V      DC CL7'03102AB'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TF       DC AL4(X'FF')                  RPI 1065
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TH       DC AL2(X'FF')                  RPI 1065
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TX       DC XL1'C1'
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TF2      DC AL4(X'FF')                  RPI 1065
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TH2      DC AL2(X'FF')                  RPI 1065
ZC_WS_LOC_29 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TX2      DC XL1'C1'
ZC_WS_LOC_30 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TPN      DC ZL1'+1'
ZC_WS_LOC_31 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TMN      DC ZL1'-1'
ZC_WS_LOC_32 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TX1      DS  CL1
ZC_WS_LOC_33 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TX3      DS  CL3
ZC_WS_LOC_34 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
SPLIT_LIT DC CL79'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 ABEND INX
                LINKED PROGRAM BY PROGRAM'
ZC_WS_LOC_35 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CP1_SRT  DC EHL4'1234567'
ZC_WS_LOC_36 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CP2_LNG  DC DHL8'123456789012345'
ZC_WS_LOC_37 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HFP_SRT  DC EHL4'1234567'
ZC_WS_LOC_38 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HFP_LNG  DC DHL8'123456789012345'
ZC_WS_LOC_39 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HFP_EXT  DC LHL16'123456789012345678901234567890'
ZC_WS_LOC_40 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BFP_SRT  DC EBL4'1234567'
ZC_WS_LOC_41 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BFP_LNG  DC DBL8'123456789012345'
ZC_WS_LOC_42 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BFP_EXT  DC LBL16'1234567890123456789012345678901234'
ZC_WS_LOC_43 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFP_SRT  DC EDL4'1234567'
ZC_WS_LOC_44 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFP_LNG  DC DDL8'1234567890123456'
ZC_WS_LOC_45 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFP_EXT  DC LDL16'1234567890123456789012345678901234'
ZC_WS_LOC_46 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FLT_SRT  DC EDL4'1234567'
ZC_WS_LOC_47 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FLT_LNG  DC DDL8'1234567890123456'
ZC_WS_LOC_48 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FLT_EXT  DC LDL16'1234567890123456789012345678901234'
ZC_WS_LOC_49 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HW1      DC AL2(1234)                  RPI 1065
ZC_WS_LOC_50 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FW1      DC AL4(123456789)                  RPI 1065
ZC_WS_LOC_51 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GW1      DC FL8'123456789012345678'                  RPI 1065
ZC_WS_LOC_52 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QW1      DC FL16'123456789012345678901234567890123456789'              X
                  RPI 1065
ZC_WS_LOC_53 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PD1      DC PL16'1234567890123456789012345678901'
ZC_WS_LOC_54 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZD1      DC ZL31'1234567890123456789012345678901'
ZC_WS_LOC_55 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_56 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_57 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_58 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_59 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_60 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_61 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_62 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_63 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_64 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_65 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_66 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_67 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_68 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_69 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
ZC_WSLOC LOCTR 
ZC_WSLOC LOCTR 
ZC_WS_DIFF EQU  *-ZC_WS-530  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 69'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 4'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
         END 
