*    ZCOBOL PGM='zcobol\test\TESTRMD1' VER=V1.5.06 MM/DD/YY  
*    ZCOBOL OPTIONS=(TRUNC,NOR64) 
         COPY  TESTRMD1_ZC_LABELS.CPY
*
*         IDENTIFICATION DIVISION.
*         PROGRAM-ID. TESTRMD1.
*      * AUTHOR.  DON HIGGINS.
*      * DATE.    03/28/12.
*      * REMARKS. TEST RMD FIELD MODS OF THE FORM (OFFSET:LENGTH)
*      *            1. (LIT:LIT)
*      *            2  (VAR:LIT)
*      *            3  (LIT:VAR)
*      *            3  (VAR:VAR)
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
TESTRMD1 CSECT ,                CSECT WITH PROCEDURE CODE AND WS
         USING *,ZC_R15
         STM   14,12,12+4*(14-14)(13)
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTRMD1'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'0'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'1'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'0'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0013_EOT-*+1)/2*2
         DC    AL2(WTO#0013_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0013_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0014_EOT-*+1)/2*2
         DC    AL2(WTO#0014_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0014_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
         L     ZC_R2,24(ZC_R13) SET ZC_R2=PARMLIST ADDRESS AFTER LOAD
         LARL  ZC_R1,ZC_WS     ZC_R2=A(WORKING STORAGE WITH SAVEAREA)
         ST    ZC_R1,8(ZC_R13) FORWARD  SAVE CHAIN
         ST    ZC_R13,4(ZC_R1) BACKWARD SAVE CHAIN
         LR    ZC_R13,ZC_R1    LINK SAVE AREA IN ZC390CVT
         USING ZC_WS,ZC_R13    BASE FOR ZCOBOL WS (SEE GEN_SYM_RX.MAC)
         ST    ZC_R13,ZC_WS_START  SAVE ADDR WS IN WS PREFIX
         LARL  ZC_R0,ZC_WS_END
         SR    ZC_R0,ZC_R13
         ST    ZC_R0,ZC_WS_LEN     SAVE LENGTH OF WS IN WS PREFIX
         DROP  ZC_R15              RPI 1042
ZC_WSLOC LOCTR 
ZC_WS    DS    0D           START WORKING STORAGE
ZC390CVT DSECT 
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
ZC_WSLOC LOCTR              CONTINUE WS FOR FD AND DATA
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
         PRINT DATA
*         WORKING-STORAGE SECTION.
*         77 F1 PIC X(3) VALUE 'ABC'.
*         77 F2 PIC X(5) VALUE 'DEFGH'.
*         77 O1 PIC 9 VALUE 2.
*         77 L1 PIC 9 VALUE 1.
*         77 O2 PIC 9 VALUE 3.
*         77 L2 PIC 9 VALUE 2.
*         77 GOOD PIC 999 VALUE 0.
*         77 BAD  PIC 999 VALUE 0.
*         PROCEDURE DIVISION.
*ZC   PROCEDURE DIVISION
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTRMD1 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
*             DISPLAY 'TESTRMD1 STARTED'
*ZC     23         DISPLAY 'TESTRMD1 STARTED'
         BRAS  1,*+(WTO#0098_EOT-*+1)/2*2
         DC    AL2(WTO#0098_EOT-*,0),C'TESTRMD1 STARTED'
WTO#0098_EOT     EQU *
         SVC   35
*             MOVE 'DEFGH' TO F2
*ZC     24         MOVE  'DEFGH',TO,F2
         LARL  ZC_R1,=CL6'DEFGH'
          MVC   F2,0(ZC_R1)
*      1      MOVE F1(2:1) TO F2(3:2)
*ZC     25      1  MOVE  F1,'(',2,:,1,')',TO,F2,'(',3,:,2,')'
         LA    ZC_R2,F1
         IILF  ZC_R14,1
         BCTR  ZC_R2,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R3,F2
         IILF  ZC_R15,2
         BCTR  ZC_R3,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R0,3(ZC_R3)
         LR    ZC_R1,ZC_R15     RPI 1182 RMD VLEN TAR REG
         LA    ZC_R2,2(ZC_R2)
         LR    ZC_R3,ZC_R14     RPI 1182 RMD VLEN SRC REG
         OILH  ZC_R3,X'4000'    RPI 1182 PAD SHORT SRC WITH BLANKS
         MVCL  ZC_R0,ZC_R2
*             IF F2 NOT = 'DEB H'
*ZC     26         IF    F2,NOT,=,'DEB H'
         LARL  ZC_R1,=CL6'DEB H'
         CLC   F2,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_1_1
*                DISPLAY 'ERROR 1 ''DEB H'' NOT =' F2
*ZC     27         DISPLAY 'ERROR 1 ''DEB H'' NOT =',F2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL24'ERROR 1 ''DEB H'' NOT =' PAD TO EVEN LEN LIT
         LA    ZC_R1,23
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,F2
         LA    ZC_R1,5  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*                PERFORM BAD
*ZC     28         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ELSE PERFORM GOOD.
*ZC     29         ELSE
         J     PG_IF_1_E
PG_IF_1_1    DS    0H  &TYPE
*ZC     29         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_1_E    DS    0H  &TYPE
*             MOVE 'DEFGH' TO F2
*ZC     30         MOVE  'DEFGH',TO,F2
         LA    ZC_R0,F2
         IILF  ZC_R1,5  RPI 1182 LHI TO IILH
         LARL  ZC_R2,=CL6'DEFGH'
         IILL  ZC_R3,5
         IILH  ZC_R3,X'4000'
         MVCL  ZC_R0,ZC_R2
*      2      MOVE F1(O1:1) TO F2(O2:2)
*ZC     31      2  MOVE  F1,'(',O1,:,1,')',TO,F2,'(',O2,:,2,')'
         LA    ZC_R2,F1
         IILF  ZC_R14,O1-ZC_WS
         AR    ZC_R14,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R14)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R14,ZCVT_PWORK
         AR    ZC_R2,ZC_R14
         IILF  ZC_R14,1
         BCTR  ZC_R2,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R3,F2
         IILF  ZC_R15,O2-ZC_WS
         AR    ZC_R15,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R15)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R15,ZCVT_PWORK
         AR    ZC_R3,ZC_R15
         IILF  ZC_R15,2
         BCTR  ZC_R3,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R0,0(ZC_R3)
         LR    ZC_R1,ZC_R15     RPI 1182 RMD VLEN TAR REG
         LA    ZC_R2,0(ZC_R2)
         LR    ZC_R3,ZC_R14     RPI 1182 RMD VLEN SRC REG
         OILH  ZC_R3,X'4000'    RPI 1182 PAD SHORT SRC WITH BLANKS
         MVCL  ZC_R0,ZC_R2
*             IF F2 NOT = 'DEB H'
*ZC     32         IF    F2,NOT,=,'DEB H'
         LARL  ZC_R1,=CL6'DEB H'
         CLC   F2,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_2_1
*                DISPLAY 'ERROR 2 ''DEB H'' NOT =' F2
*ZC     33         DISPLAY 'ERROR 2 ''DEB H'' NOT =',F2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL24'ERROR 2 ''DEB H'' NOT =' PAD TO EVEN LEN LIT
         LA    ZC_R1,23
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,F2
         LA    ZC_R1,5  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*                PERFORM BAD
*ZC     34         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ELSE PERFORM GOOD.
*ZC     35         ELSE
         J     PG_IF_2_E
PG_IF_2_1    DS    0H  &TYPE
*ZC     35         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_2_E    DS    0H  &TYPE
*      3      MOVE F1(2:L1) TO F2(3:L2)
*ZC     36      3  MOVE  F1,'(',2,:,L1,')',TO,F2,'(',3,:,L2,')'
         LA    ZC_R2,F1
         IILF  ZC_R14,L1-ZC_WS
         AR    ZC_R14,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R14)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R14,ZCVT_PWORK
         BCTR  ZC_R2,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R3,F2
         IILF  ZC_R15,L2-ZC_WS
         AR    ZC_R15,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R15)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R15,ZCVT_PWORK
         BCTR  ZC_R3,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R0,3(ZC_R3)
         LR    ZC_R1,ZC_R15     RPI 1182 RMD VLEN TAR REG
         LA    ZC_R2,2(ZC_R2)
         LR    ZC_R3,ZC_R14     RPI 1182 RMD VLEN SRC REG
         OILH  ZC_R3,X'4000'    RPI 1182 PAD SHORT SRC WITH BLANKS
         MVCL  ZC_R0,ZC_R2
*             IF F2 NOT = 'DEB H'
*ZC     37         IF    F2,NOT,=,'DEB H'
         LARL  ZC_R1,=CL6'DEB H'
         CLC   F2,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_3_1
*                DISPLAY 'ERROR 3 ''DEB H'' NOT =' F2
*ZC     38         DISPLAY 'ERROR 3 ''DEB H'' NOT =',F2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL24'ERROR 3 ''DEB H'' NOT =' PAD TO EVEN LEN LIT
         LA    ZC_R1,23
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,F2
         LA    ZC_R1,5  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*                PERFORM BAD
*ZC     39         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ELSE PERFORM GOOD.
*ZC     40         ELSE
         J     PG_IF_3_E
PG_IF_3_1    DS    0H  &TYPE
*ZC     40         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_3_E    DS    0H  &TYPE
*      4      MOVE 'DEFGH' TO F2
*ZC     41      4  MOVE  'DEFGH',TO,F2
         LA    ZC_R0,F2
         IILF  ZC_R1,5  RPI 1182 LHI TO IILH
         LARL  ZC_R2,=CL6'DEFGH'
         IILL  ZC_R3,5
         IILH  ZC_R3,X'4000'
         MVCL  ZC_R0,ZC_R2
*             MOVE F1(O1:L1) TO F2(O2:L2)
*ZC     42         MOVE  F1,'(',O1,:,L1,')',TO,F2,'(',O2,:,L2,')'
         LA    ZC_R2,F1
         IILF  ZC_R14,O1-ZC_WS
         AR    ZC_R14,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R14)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R14,ZCVT_PWORK
         AR    ZC_R2,ZC_R14
         IILF  ZC_R14,L1-ZC_WS
         AR    ZC_R14,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R14)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R14,ZCVT_PWORK
         BCTR  ZC_R2,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R3,F2
         IILF  ZC_R15,O2-ZC_WS
         AR    ZC_R15,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R15)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R15,ZCVT_PWORK
         AR    ZC_R3,ZC_R15
         IILF  ZC_R15,L2-ZC_WS
         AR    ZC_R15,ZC_R13
         PACK  ZCVT_PWORK1(1),0(1,ZC_R15)
         ZAP   ZCVT_PWORK,ZCVT_PWORK1(1)
         CVB   ZC_R15,ZCVT_PWORK
         BCTR  ZC_R3,0 BACKUP FOR FULL OFFSET+ADJUSTMENT
         LA    ZC_R0,0(ZC_R3)
         LR    ZC_R1,ZC_R15     RPI 1182 RMD VLEN TAR REG
         LA    ZC_R2,0(ZC_R2)
         LR    ZC_R3,ZC_R14     RPI 1182 RMD VLEN SRC REG
         OILH  ZC_R3,X'4000'    RPI 1182 PAD SHORT SRC WITH BLANKS
         MVCL  ZC_R0,ZC_R2
*             IF F2 NOT = 'DEB H'
*ZC     43         IF    F2,NOT,=,'DEB H'
         LARL  ZC_R1,=CL6'DEB H'
         CLC   F2,0(ZC_R1)
         BRC   15-ZC_NE,PG_IF_4_1
*                DISPLAY 'ERROR 4 ''DEB H'' NOT =' F2
*ZC     44         DISPLAY 'ERROR 4 ''DEB H'' NOT =',F2
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL24'ERROR 4 ''DEB H'' NOT =' PAD TO EVEN LEN LIT
         LA    ZC_R1,23
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,F2
         LA    ZC_R1,5  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*                PERFORM BAD
*ZC     45         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ELSE PERFORM GOOD.
*ZC     46         ELSE
         J     PG_IF_4_E
PG_IF_4_1    DS    0H  &TYPE
*ZC     46         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_4_E    DS    0H  &TYPE
*             DISPLAY  'TOTAL TESTS GOOD= ' GOOD ' BAD=' BAD.
*ZC     47         DISPLAY 'TOTAL TESTS GOOD= ',GOOD,' BAD=',BAD
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL18'TOTAL TESTS GOOD= ' PAD TO EVEN LEN LIT
         LA    ZC_R1,18
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,GOOD
         LA    ZC_R1,3  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'Z'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         LARL  ZC_R0,=CL6' BAD=' PAD TO EVEN LEN LIT
         LA    ZC_R1,5
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,24(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BAD
         LA    ZC_R1,3  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'Z'
         STM   ZC_R0,ZC_R2,36(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    48-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*             STOP RUN.
*ZC     48         STOP  RUN
         LH    ZC_R1,RETURN_CODE      PASS RETURN CODE IN R1
         L     ZC_R15,ZCVT_GOBACK
         BR    ZC_R15
*         GOOD.
PG_GOOD  DS    0H
*             ADD 1 TO GOOD.
*ZC     50         ADD   1,TO,GOOD
         PACK  ZCVT_PWORK1(2),0+GOOD(3) PACK #1 NORMAL
         LARL  ZC_R14,=PL2'1'
         AP    ZCVT_PWORK1(2),0(2,ZC_R14)
         UNPK  0+GOOD(3),0+ZCVT_PWORK1(2) UNPK #1 NORMAL
         OI    3-1+GOOD,X'F0'  RPI 1065
*         BAD.
PG_GOOD_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BAD   DS    0H
*             ADD 1 TO BAD.
*ZC     52         ADD   1,TO,BAD
         PACK  ZCVT_PWORK1(2),0+BAD(3) PACK #1 NORMAL
         LARL  ZC_R14,=PL2'1'
         AP    ZCVT_PWORK1(2),0(2,ZC_R14)
         UNPK  0+BAD(3),0+ZCVT_PWORK1(2) UNPK #1 NORMAL
         OI    3-1+BAD,X'F0'  RPI 1065
PG_BAD_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  ZC_SAVEAREA                    00000000 00000048 1   X   X(72)X
                      
*    01  ZC_WS_ID                       00000048 00000008 1   X   X(8) X
                     ''WS*WS*WS'' 
*    01  ZC_WS_START                    00000050 00000004 1   A        X
                      
*    01  ZC_WS_LEN                      00000054 00000004 1   F   9(9) X
                      
*    01  FILLER                         00000058 00000000 1   X        X
                      
*    01  F1                             00000058 00000003 1   X   X(3) X
                     ''ABC'' 
*    01  F2                             0000005B 00000005 1   X   X(5) X
                     ''DEFGH'' 
*    01  O1                             00000060 00000001 1   Z   9    X
                     2 
*    01  L1                             00000061 00000001 1   Z   9    X
                     1 
*    01  O2                             00000062 00000001 1   Z   9    X
                     3 
*    01  L2                             00000063 00000001 1   Z   9    X
                     2 
*    01  GOOD                           00000064 00000003 1   Z   999  X
                     0 
*    01  BAD                            00000067 00000003 1   Z   999  X
                     0 
*    01  DEBUG_ITEM                     0000006A 00000058 1   X        X
                      
*    02  DEBUG_LINE                     0000006A 00000006 1   X   X(6) X
                      
*    02  FILLER                         00000070 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     00000071 0000001E 1   X   X(30)X
                      
*    02  FILLER                         0000008F 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    00000090 00000004 1   Z   9999 X
                      
*    02  FILLER                         00000094 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    00000095 00000004 1   Z   9999 X
                      
*    02  FILLER                         00000099 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    0000009A 00000004 1   Z   9999 X
                      
*    02  FILLER                         0000009E 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 0000009F 00000023 1   X   X(35)X
                      
*    01  TRUE                           000000C2 00000001 1   Z   9    X
                     1 
*    01  FALSE                          000000C3 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    000000C4 00000002 1   H   9(4) X
                     0 
ZC_WSLOC LOCTR 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_SAVEAREA DS CL72
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID DC CL8'WS*WS*WS'
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_START DS AL4
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_LEN DS FL4
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL0
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
F1       DC CL3'ABC'
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
F2       DC CL5'DEFGH'
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
O1       DC CL1'2'
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
L1       DC CL1'1'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
O2       DC CL1'3'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
L2       DC CL1'2'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GOOD     DC CL3'000'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BAD      DC CL3'000'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
ZC_WSLOC LOCTR 
ZC_WSLOC LOCTR 
ZC_WS_DIFF EQU  *-ZC_WS-198  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 28'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 2'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
         END 
