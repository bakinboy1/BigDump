*    ZCOBOL PGM='cics\TESTBEC9' VER=V1.5.06 05/21/12 13:47:58 
*    ZCOBOL OPTIONS=(CICS) 
         COPY  TESTBEC9_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEMPORARY STORAGE TESTER
*      *    MYQUEUEA      WRITE ITEM 1
*      *    MYQUEUEA      WRITE ITEM 2
*      *    MYLONGQUEUEA  WRITE ITEM 1
*      *    MYQUEUEA      REWRITE ITEM 1
*      *    RAISE QIDERR
*      *    RAISE ITEMERR
*      *    RAISE LENGERR
*      *    MYLONGQUEUEB  WRITE ITEM 1
*      *    MYLONGQUEUEA  DELETED
*      *    RAISE QIDERR
*      *    RAISE INVREQ
*      *    MYQUEUEA      READ ITEM 1
*      *    MYQUEUEA      READ ITEM NEXT(2)
*      *    RAISE ITEMERR
*      *    RAISE QIDERR
*      *    RAISE LENGERR
*      *    MYQUEUEA      DELETED
*      *    MYLONGQUEUEB  DELETED
*      * CEBR TESTS
*      *    MYQUEUEA      BUILD 16 ITEMS
*      *    MYQUEUEB      BUILD 50 ITEMS
*      *    X'02CB458F'   BUILD 80 ITEMS
*         PROGRAM-ID. TESTBEC9.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT 
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEPCT DS    AL4         ADDRESS OF DFHPCT
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           CEDF INTERCEPT INDICATOR
*                             00='BEFORE'
*                             FE='AFTER' LINK/XCTL/RETURN FAIL
*                             FF='AFTER'
TCTTEEDL DS    X           CEDF LINKAGE INDICATOR
*                             00=NORMAL LINKAGE
*                             FE=SPECIAL LINKAGE
*                             FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
TCTTECHN DS    CL16        PASSED CHANNEL NAME
TCTTECAQ DS    AL4         ANCHOR FOR CHANNEL CHAIN
TCTTETKN DS    XL4         TOKEN FOR STARTBROWSE CONTAINER
TCTTECHW DS    AL4         ADDRESS OF CHWA (STARTBROWSE CONTAINER)
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0     EQU 0
R1     EQU 1
R2     EQU 2
R3     EQU 3
R4     EQU 4
R5     EQU 5
R6     EQU 6
R7     EQU 7
R8     EQU 8
R9     EQU 9
R10    EQU 10
R11    EQU 11
R12    EQU 12
R13    EQU 13
R14    EQU 14
R15    EQU 15
TESTBEC9 CSECT 
*            R1 >>> A(EIB,COMMAREA)
*            R2 >>> P0E02 (LINK) OR P0E04 (XCTL) PARMS
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         L     R2,0(R2)           R2=P0E02/P0E04 PARM POINTER
         STRL  R2,CICS_EIENT_0067_PARMPNTR SAVE IT
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
         LR    R2,R1              R2=SAVE USER PARM POINTER
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0067_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0067_NOSAVE     EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         IILF  R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH RPI 1181
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0067_NOSAVE2 EXIT IF IT IS
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
CICS_EIENT_0067_NOSAVE2     EQU *
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0067_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        NEW PARM POSITION FOR ZCOBOL
CICS_EIENT_0067_01     DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
         MVC   DFHEICHN,TCTTECHN  SET CHANNEL FOR ASSIGN
*
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         JNE   CICS_EIENT_0067_NOEDFA EXIT IF NOT
* PROGRAM INITIATION
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'FE'     SET SPECIAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
         J     CICS_EIENT_0067_NOEDFA EXIT
CICS_EIENT_0067_PARMPNTR     DS AL4 SAVE P0E02/P0E04 PARM POINTER
*
CICS_EIENT_0067_NOEDFA     DS 0H
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBEC9'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'05/21/12'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'13.47'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0077_EOT-*+1)/2*2
         DC    AL2(WTO#0077_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0077_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0078_EOT-*+1)/2*2
         DC    AL2(WTO#0078_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0078_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
DFHEISTG DSECT 
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEICHN DS    CL16 CHANNEL FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
         PRINT DATA
*         WORKING-STORAGE SECTION.
*         77  TSREC    PIC X(200).
*         77  TSNUMIT  PIC 9(4) COMP.
*         01  QWT.
*             02   QWTSBA  PIC X(4).
*             02   QWTMSG  PIC X(39).
*         77  QOP1     PIC X(4)    VALUE X'C311C260'.
*         77  QOP2     PIC X(4)    VALUE X'C311C3F0'.
*         77  QOP3     PIC X(4)    VALUE X'C311C540'.
*         77  QOP4     PIC X(4)    VALUE X'C311C650'.
*         77  QOP5     PIC X(4)    VALUE X'C311C760'.
*         77  QOP6     PIC X(4)    VALUE X'C311C8F0'.
*         77  QOP7     PIC X(4)    VALUE X'C3114A40'.
*         77  QOP8     PIC X(4)    VALUE X'C3114B50'.
*         77  QOP9     PIC X(4)    VALUE X'C3114C60'.
*         77  QOP10    PIC X(4)    VALUE X'C3114DF0'.
*         77  QOP11    PIC X(4)    VALUE X'C3114F40'.
*         77  QOP12    PIC X(4)    VALUE X'C3115050'.
*         77  QOP13    PIC X(4)    VALUE X'C311D160'.
*         77  QOP14    PIC X(4)    VALUE X'C311D2F0'.
*         77  QOP15    PIC X(4)    VALUE X'C311D440'.
*         77  QOP16    PIC X(4)    VALUE X'C311D550'.
*         77  QOP17    PIC X(4)    VALUE X'C311D660'.
*         77  QOP18    PIC X(4)    VALUE X'C311D7F0'.
*         77  QOP19    PIC X(4)    VALUE X'C311D940'.
*         77  QOP20    PIC X(4)    VALUE X'C3115A50'.
*         77  QOP1C2   PIC X(4)    VALUE X'C311C3C8'.
*         77  QOP2C2   PIC X(4)    VALUE X'C311C4D8'.
*         77  QOP3C2   PIC X(4)    VALUE X'C311C5E8'.
*         77  QOP4C2   PIC X(4)    VALUE X'C311C6F8'.
*         01  QOP.
*             02  FILLER   PIC X(6)  VALUE 'QUEUE '.
*             02  QOPNAME  PIC X(16).
*             02  FILLER   PIC X(6)  VALUE ' ITEM '.
*             02  QOPITEM  PIC X.
*             02  FILLER   PIC X     VALUE SPACE.
*             02  QOPTYPE  PIC X(7)  VALUE 'WRITE  '.
*             02  FILLER   PIC X     VALUE SPACE.
*             02  QOPSEP   PIC X     VALUE '|'.
*         01  QHAND.
*             02  QHANDCON PIC X(7)  VALUE SPACES.
*             02  FILLER   PIC X(31)
*                          VALUE ' CONDITION RAISED              '.
*             02  QHSEP    PIC X     VALUE '|'.
*         77  QHANDL   PIC 9(4) COMP.
*         01  CEBRMSG1.
*             02  FILLER   PIC X(4)  VALUE X'C311C8C8'.
*             02  FILLER   PIC X(27) VALUE 'CEBR QUEUE BUILDING STARTEDX
               '.
*         77  CEBR1LEN PIC 9(4) COMP.
*         01  CEBRMSG2.
*             02  FILLER   PIC X(4)  VALUE X'C311C9D8'.
*             02  FILLER   PIC X(25) VALUE 'CEBR QUEUE BUILDING ENDED'.
*         77  CEBR2LEN PIC 9(4) COMP.
*         01  ENDMSG.
*             02  FILLER   PIC X(4)  VALUE X'C3115CF0'.
*             02  FILLER   PIC X(31)
*                          VALUE 'TESTBEC9 COMPLETED, PRESS CLEAR'.
*         77  ENDMSGL  PIC 9(4) COMP.
*         77  LEN      PIC 9(4) COMP  VALUE 0.
*         77  HEXQNAME PIC X(8)       VALUE X'02CB458F40404040'.
*         01  HWORLD.
*             02  HWORLDEX PIC 9(4)  COMP VALUE 0.
*             02  FILLER   PIC X(11) VALUE 'HELLO WORLD'.
*         01  HWORLDAS.
*             02  HWORLDAX PIC 9(4)  COMP VALUE 0.
*             02  FILLER   PIC X(11) VALUE X'48454C4C4F20574F524C44'.
*      * GO TO DEPENDING CONTROL
*      *   1=ABEND
*      *   2=BEC9RTN1
*      *   3=BEC9RTN2
*      *   4=BEC9RTN3
*      *   5=BEC9RTN4
*      *   6=BEC9RTN5
*      *   7=BEC9RTN6
*      *   8=BEC9RTN7
*      *   9=BEC9RTN8
*         77  DEPCTRL   PIC 9(4) COMP.
*         77  HEXCOUNT  PIC 9(4) COMP.
*         01  HEXTAB  PIC X(256)  VALUE X'000102030405060708090A0B0C0D0X
               E0F
*       -                                '101112131415161718191A1B1C1D1X
               E1F
*       -                                '101112131415161718191A1B1C1D1X
               E1F
*       -                                '202122232425262728292A2B2C2D2X
               E2F
*       -                                '303132333435363738393A3B3C3D3X
               E3F
*       -                                '404142434445464748494A4B4C4D4X
               E4F
*       -                                '505152535455565758595A5B5C5D5X
               E5F
*       -                                '606162636465666768696A6B6C6D6X
               E6F
*       -                                '707172737475767778797A7B7C7D7X
               E7F
*       -                                '808182838485868788898A8B8C8D8X
               E8F
*       -                                '909192939495969798999A9B9C9D9X
               E9F
*       -                                'A0A1A2A3A4A5A6A7A8A9AAABACADAX
               EAF
*       -                                'B0B1B2B3B4B5B6B7B8B9BABBBCBDBX
               EBF
*       -                                'C0C1C2C3C4C5C6C7C8C9CACBCCCDCX
               ECF
*       -                                'D0D1D2D3D4D5D6D7D8D9DADBDCDDDX
               EDF
*       -                                'E0E1E2E3E4E5E6E7E8E9EAEBECEDEX
               EEF
*       -                             'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFFX
               '.
*         01  HEXINTAB REDEFINES HEXTAB OCCURS 16 TIMES PIC X(16).
*         01  HEXTAB16  PIC X(16).
*         77  QIDNUM    PIC 9(4) COMP.
*         77  ITMNUM    PIC 9(4) COMP.
*         77  LNGNUM    PIC 9(4) COMP.
*         LINKAGE SECTION.
*         01  TSRECLK PIC X(200).
*         PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBEC9 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         LARL  ZC_R1,=XL4'C311C260'
          MVC   QOP1,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C3F0'
          MVC   QOP2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C540'
          MVC   QOP3,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C650'
          MVC   QOP4,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C760'
          MVC   QOP5,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C8F0'
          MVC   QOP6,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114A40'
          MVC   QOP7,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114B50'
          MVC   QOP8,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114C60'
          MVC   QOP9,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114DF0'
          MVC   QOP10,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114F40'
          MVC   QOP11,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3115050'
          MVC   QOP12,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D160'
          MVC   QOP13,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D2F0'
          MVC   QOP14,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D440'
          MVC   QOP15,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D550'
          MVC   QOP16,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D660'
          MVC   QOP17,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D7F0'
          MVC   QOP18,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D940'
          MVC   QOP19,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3115A50'
          MVC   QOP20,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C3C8'
          MVC   QOP1C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C4D8'
          MVC   QOP2C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C5E8'
          MVC   QOP3C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C6F8'
          MVC   QOP4C2,0(ZC_R1)
         LARL  ZC_R1,=CL6'QUEUE '
          MVC   ZC_FILLER_V1,0(ZC_R1)
         LARL  ZC_R1,=CL6' ITEM '
          MVC   ZC_FILLER_V2,0(ZC_R1)
         MVI   ZC_FILLER_V3,C' '
         LARL  ZC_R1,=CL8'WRITE  '
          MVC   QOPTYPE,0(ZC_R1)
         MVI   ZC_FILLER_V4,C' '
         MVI   QOPSEP,C'|'
         MVI   QHANDCON,C' '
         MVC   QHANDCON+1(7-1),QHANDCON
         LARL  ZC_R1,=CL32' CONDITION RAISED              '
          MVC   ZC_FILLER_V5,0(ZC_R1)
         MVI   QHSEP,C'|'
         LARL  ZC_R1,=XL4'C311C8C8'
          MVC   ZC_FILLER_V6,0(ZC_R1)
         LARL  ZC_R1,=CL28'CEBR QUEUE BUILDING STARTED'
          MVC   ZC_FILLER_V7,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C9D8'
          MVC   ZC_FILLER_V8,0(ZC_R1)
         LARL  ZC_R1,=CL26'CEBR QUEUE BUILDING ENDED'
          MVC   ZC_FILLER_V9,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3115CF0'
          MVC   ZC_FILLER_V10,0(ZC_R1)
         LARL  ZC_R1,=CL32'TESTBEC9 COMPLETED, PRESS CLEAR'
          MVC   ZC_FILLER_V11,0(ZC_R1)
          MVHHI LEN,0
         LARL  ZC_R1,=XL8'02CB458F40404040'
          MVC   HEXQNAME,0(ZC_R1)
          MVHHI HWORLDEX,0
         LARL  ZC_R1,=CL12'HELLO WORLD'
          MVC   ZC_FILLER_V12,0(ZC_R1)
          MVHHI HWORLDAX,0
         LARL  ZC_R1,=XL12'48454C4C4F20574F524C44'
          MVC   ZC_FILLER_V13,1(ZC_R1)
         LARL  ZC_R1,=XL256'000102030405060708090A0B0C0D0E0F10111213141X
               5161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303X
               132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4X
               D4E4F505152535455565758595A5B5C5D5E5F6061626364656667686X
               96A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80818283848X
               5868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0AX
               1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBX
               DBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8DX
               9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4FX
               5F6F7F8F9FAFBFCFDFEFF'
          MVC   HEXTAB,0(ZC_R1)
         LARL  ZC_R1,=CL8'ZCWSID1'
          MVC   ZC_WS_ID1,0(ZC_R1)
         MVI   ZC_FILLER_V14,C' '
         MVI   ZC_FILLER_V15,C' '
         MVI   ZC_FILLER_V16,C' '
         MVI   ZC_FILLER_V17,C' '
         MVI   ZC_FILLER_V18,C' '
          MVI   TRUE,C'1'
          MVI   FALSE,C'0'
          MVHHI RETURN_CODE,0
*
*             MOVE LENGTH OF QWT      TO QHANDL.
*ZC    166         MOVE  LENGTH,OF,QWT,TO,QHANDL
          MVHHI QHANDL,43
*             MOVE LENGTH OF CEBRMSG1 TO CEBR1LEN.
*ZC    167         MOVE  LENGTH,OF,CEBRMSG1,TO,CEBR1LEN
          MVHHI CEBR1LEN,31
*             MOVE LENGTH OF CEBRMSG2 TO CEBR2LEN.
*ZC    168         MOVE  LENGTH,OF,CEBRMSG2,TO,CEBR2LEN
          MVHHI CEBR2LEN,29
*             MOVE LENGTH OF ENDMSG   TO ENDMSGL.
*ZC    169         MOVE  LENGTH,OF,ENDMSG,TO,ENDMSGL
          MVHHI ENDMSGL,35
*             EXEC CICS GETMAIN SET(ADDRESS OF TSRECLK)
*ZC    170         EXEC  CICS,GETMAIN,SET(ADDRESS,OF,TSRECLK),LENGTH(LEX
               NGTH,OF,TSRECLK)
         LARL  R1,P0C02         ADDRESS SOURCE
         LARL  R15,P0C02        ADDRESS TARGET
         XC    0(P0C02END-P0C02,R15),0(R1) XC IT
         LARL  R1,=X'0C02'         ADDRESS SOURCE
         LARL  R15,P0C02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0C02FN,R15),0(R1) MVC IT
         LAY   R0,L'TSRECLK       SET NUMERIC LENGTH
         LARL  R1,P0C02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0C02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0C02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0C02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0C02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0C02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0C02EDF_0584 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0C02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0C02)       R1=LCL MODULE PARAMETER LIST
P0C02EDF_0584    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LRL   R1,P0C02GMA        R1=GETMAIN ADDRESS
         AHI   R1,8               +8
         ST    R1,ZC_TSRECLK_PTR SET GETMAIN ADDRESS FOR REQUESTOR
         J     P0C02BYP_0584   EXIT
*
P0C02    DS    0H
P0C02FN  DS    XL2                FUNCTION CODE
P0C02EIB DS    AL4                EIB
P0C02TCT DS    AL4                TCTTE
P0C02LEN DS    AL4                LENGTH/FLENGTH
P0C02INM DS    X                  FF=INITIMG SPECIFIED
         DS    X
P0C02INT DS    X                  INITIMG
         DS    X
P0C02GMA DS    AL4                GETMAIN ADDRESS
P0C02EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0C02EDS DS    AL4                DSA ADDRESS FOR EDF
P0C02EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0C02EDL DS    XL2                DSA LENGTH FOR EDF
P0C02NED DS    X                  FF=NOEDF
         DS    X
P0C02NOH DS    X                  FF=NOHANDLE
         DS    X
P0C02RSP DS    AL4                RESP
P0C02RS2 DS    AL4                RESP2
P0C02END EQU   *                  END MARKER
*
P0C02BYP_0584    DS 0H
*                       LENGTH(LENGTH OF TSRECLK) END-EXEC.
*      *  MVI   QOPSEP+1,C'|'      SET COL MARKER
*      *  MVI   QHSEP,C'|'         SET COL MARKER
*             MOVE '|' TO QOPSEP.
*ZC    174         MOVE  '|',TO,QOPSEP
         MVI   QOPSEP,C'|'
*             MOVE '|' TO QHSEP.
*      *  MVI   QIDNUM,C'1'        RESET QIDERR NUMBER
*      *  MVI   ITMNUM,C'1'        RESET ITEMERR NUMBER
*      *  MVI   LNGNUM,C'1'        RESET LENGERR NUMBER
*ZC    175         MOVE  '|',TO,QHSEP
         MVI   QHSEP,C'|'
*             MOVE 1 TO QIDNUM.
*ZC    179         MOVE  1,TO,QIDNUM
          MVHHI QIDNUM,1
*             MOVE 1 TO ITMNUM.
*ZC    180         MOVE  1,TO,ITMNUM
          MVHHI ITMNUM,1
*             MOVE 1 TO LNGNUM.
*      * 1ST Q NAME, 1ST ITEM, SHORT DATA
*      *  MVC   QWTSBA,QOP1        MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*ZC    181         MOVE  1,TO,LNGNUM
          MVHHI LNGNUM,1
*             MOVE QOP1 TO QWTSBA.
*ZC    189         MOVE  QOP1,TO,QWTSBA
         MVC   QWTSBA,QOP1  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    190         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    191         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE QOP TO QWTMSG.
*ZC    192         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    193         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0648 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0648    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0648   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0648   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0648) ENTRYPOINT FOR IGNORE CONDITION
*
         J     P0404BYP_0648   EXIT
*
P0404    DS    0H
P0404FN  DS    XL2                FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    XL2                LENGTH
P0404EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0404EDS DS    AL4                DSA ADDRESS FOR EDF
P0404EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0404EDL DS    XL2                DSA LENGTH FOR EDF
P0404NED DS    X                  FF=NOEDF
         DS    X
P0404NOH DS    X                  FF=NOHANDLE
         DS    X
P0404RSP DS    AL4                RESP
P0404RS2 DS    AL4                RESP2
P0404END EQU   *                  END MARKER
*
P0404BYP_0648    DS 0H
*      *  MVI   TSREC,X'AB'        BYTE TO PROPAGATE
*      *  MVC   TSREC+1(49),TSREC  MAKE 50
*             MOVE LOW-VALUES TO TSREC.
*ZC    196         MOVE  LOW_VALUES,TO,TSREC
         MVI   TSREC,X'00'
         MVC   TSREC+1(200-1),TSREC
*             INSPECT TSREC CONVERTING LOW-VALUES TO X'AB'.
*ZC    197         INSPECT TSREC,CONVERTING,LOW_VALUES,TO,X'AB'
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,TSREC
         ST    ZC_R0,0(ZC_R1)                 P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),200 P2=L'V1  INSPECT FIELD LENGTH
         LARL  ZC_R0,=XL2'0000'
         ST    ZC_R0,8(ZC_R1)
         MVHI  8+4(ZC_R1),1
         LA    ZC_R0,C'X'
         ST    ZC_R0,16(ZC_R1)           P5= REPLACING STYPE C'C/A/L/F'
         LARL  ZC_R0,=X'AB00'
         ST    ZC_R0,20(ZC_R1)
         MVHI  20+4(ZC_R1),1
         SR    ZC_R0,ZC_R0
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         ST    ZC_R0,32(ZC_R1)                  P9=L'TEST_VAR   NO TEST
         LA    ZC_R0,ZCVT_CONVERTING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
*             MOVE 1 TO DEPCTRL.
*ZC    198         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS WRITEQ TS QUEUE('MYQUEUEA') FROM(TSREC)
*ZC    199         EXEC  CICS,WRITEQ,TS,QUEUE('MYQUEUEA'),FROM(TSREC),LX
               ENGTH(50),NUMITEMS(TSNUMIT)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,50         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,TSNUMIT       R0=ADDRESS OF NUMITEMS
         LARL  R1,P0A02NUM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_0680 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_0680    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_0680   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_0680   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_0680) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02    DS    0H
P0A02FN  DS    XL2                FUNCTION CODE
P0A02EIB DS    AL4                EIB
P0A02TCT DS    AL4                TCTTE
P0A02QNM DS    CL16               QUEUE NAME
P0A02ITM DS    XL2                ITEM
P0A02LEN DS    XL4                LENGTH
P0A02FRM DS    AL4                ADDRESS OF FROM
P0A02NUM DS    AL4                ADDRESS OF NUMITEMS
P0A02ICM DS    CL4                ICTERM
P0A02ICN DS    CL4                ICTRAN
P0A02EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0A02EDS DS    AL4                DSA ADDRESS FOR EDF
P0A02EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0A02EDL DS    XL2                DSA LENGTH FOR EDF
P0A02NED DS    X                  FF=NOEDF
         DS    X
P0A02NOH DS    X                  FF=NOHANDLE
         DS    X
P0A02RSP DS    AL4                RESP
P0A02RS2 DS    AL4                RESP2
P0A02END EQU   *                  END MARKER
*
P0A02BYP_0680    DS 0H
*                       LENGTH(50) NUMITEMS(TSNUMIT) END-EXEC.
*      * 1ST Q NAME, 2ND ITEM, LONG DATA
*      *  MVC   QWTSBA,QOP2        MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'2'       SET ITEM IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP2 TO QWTSBA.
*ZC    208         MOVE  QOP2,TO,QWTSBA
         MVC   QWTSBA,QOP2  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    209         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '2' TO QOPITEM.
*ZC    210         MOVE  '2',TO,QOPITEM
         MVI   QOPITEM,C'2'
*             MOVE QOP TO QWTMSG.
*ZC    211         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    212         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0723 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0723    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0723   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0723   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0723) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0723    DS 0H
*      *  MVI   TSREC,X'CD'        BYTE TO PROPAGATE
*      *  MVC   TSREC+1(199),TSREC MAKE 200
*             MOVE LOW-VALUES TO TSREC.
*ZC    215         MOVE  LOW_VALUES,TO,TSREC
         MVI   TSREC,X'00'
         MVC   TSREC+1(200-1),TSREC
*             INSPECT TSREC CONVERTING LOW-VALUES TO X'CD'.
*ZC    216         INSPECT TSREC,CONVERTING,LOW_VALUES,TO,X'CD'
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,TSREC
         ST    ZC_R0,0(ZC_R1)                 P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),200 P2=L'V1  INSPECT FIELD LENGTH
         LARL  ZC_R0,=XL2'0000'
         ST    ZC_R0,8(ZC_R1)
         MVHI  8+4(ZC_R1),1
         LA    ZC_R0,C'X'
         ST    ZC_R0,16(ZC_R1)           P5= REPLACING STYPE C'C/A/L/F'
         LARL  ZC_R0,=X'CD00'
         ST    ZC_R0,20(ZC_R1)
         MVHI  20+4(ZC_R1),1
         SR    ZC_R0,ZC_R0
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         ST    ZC_R0,32(ZC_R1)                  P9=L'TEST_VAR   NO TEST
         LA    ZC_R0,ZCVT_CONVERTING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
*             MOVE 1 TO DEPCTRL.
*ZC    217         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS WRITEQ TS QUEUE('MYQUEUEA') FROM(TSREC)        X
                   X
*ZC    218         EXEC  CICS,WRITEQ,TS,QUEUE('MYQUEUEA'),FROM(TSREC),NX
               UMITEMS(TSNUMIT)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,L'TSREC         R0=IMPLIED LENGTH OF FROM
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,TSNUMIT       R0=ADDRESS OF NUMITEMS
         LARL  R1,P0A02NUM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_0754 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_0754    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_0754   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_0754   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_0754) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_0754    DS 0H
*                       NUMITEMS(TSNUMIT) END-EXEC.
*      * 2ND Q NAME, 1ST ITEM, USING QNAME, LONG DATA
*      *  MVC   QWTSBA,QOP3        MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYLONGQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP3 TO QWTSBA.
*ZC    227         MOVE  QOP3,TO,QWTSBA
         MVC   QWTSBA,QOP3  ALIGN LEFT X OTHER
*             MOVE 'MYLONGQUEUEA    ' TO QOPNAME.
*ZC    228         MOVE  'MYLONGQUEUEA    ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYLONGQUEUEA    '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    229         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE QOP TO QWTMSG.
*ZC    230         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    231         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0796 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0796    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0796   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0796   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0796) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0796    DS 0H
*      *  MVI   TSREC,X'EF'        BYTE TO PROPAGATE
*      *  MVC   TSREC+1(149),TSREC MAKE 150
*             MOVE LOW-VALUES TO TSREC.
*ZC    234         MOVE  LOW_VALUES,TO,TSREC
         MVI   TSREC,X'00'
         MVC   TSREC+1(200-1),TSREC
*             INSPECT TSREC CONVERTING LOW-VALUES TO X'EF'.
*ZC    235         INSPECT TSREC,CONVERTING,LOW_VALUES,TO,X'EF'
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,TSREC
         ST    ZC_R0,0(ZC_R1)                 P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),200 P2=L'V1  INSPECT FIELD LENGTH
         LARL  ZC_R0,=XL2'0000'
         ST    ZC_R0,8(ZC_R1)
         MVHI  8+4(ZC_R1),1
         LA    ZC_R0,C'X'
         ST    ZC_R0,16(ZC_R1)           P5= REPLACING STYPE C'C/A/L/F'
         LARL  ZC_R0,=X'EF00'
         ST    ZC_R0,20(ZC_R1)
         MVHI  20+4(ZC_R1),1
         SR    ZC_R0,ZC_R0
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         ST    ZC_R0,32(ZC_R1)                  P9=L'TEST_VAR   NO TEST
         LA    ZC_R0,ZCVT_CONVERTING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
*             MOVE 1 TO DEPCTRL.
*ZC    236         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS WRITEQ TS QNAME('MYLONGQUEUEA') FROM(TSREC)
*ZC    237         EXEC  CICS,WRITEQ,TS,QNAME('MYLONGQUEUEA'),FROM(TSREX
               C),NUMITEMS(TSNUMIT),LENGTH(150)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYLONGQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,150         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,TSNUMIT       R0=ADDRESS OF NUMITEMS
         LARL  R1,P0A02NUM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_0827 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_0827    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_0827   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_0827   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_0827) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_0827    DS 0H
*                       NUMITEMS(TSNUMIT) LENGTH(150) END-EXEC.
*      * 1ST Q NAME, REWRITE 1ST ITEM
*      *  MVC   QWTSBA,QOP4        MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'REWRITE' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP4 TO QWTSBA.
*ZC    247         MOVE  QOP4,TO,QWTSBA
         MVC   QWTSBA,QOP4  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    248         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    249         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE 'REWRITE' TO QOPTYPE.
*ZC    250         MOVE  'REWRITE',TO,QOPTYPE
         LARL  ZC_R1,=CL8'REWRITE'
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    251         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    252         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0874 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0874    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0874   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0874   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0874) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0874    DS 0H
*      *  MVC   TSREC(10),=10X'01' MOVE NEW ITEM
*             MOVE LOW-VALUES TO TSREC.
*ZC    254         MOVE  LOW_VALUES,TO,TSREC
         MVI   TSREC,X'00'
         MVC   TSREC+1(200-1),TSREC
*             INSPECT TSREC CONVERTING LOW-VALUES TO X'01'.
*ZC    255         INSPECT TSREC,CONVERTING,LOW_VALUES,TO,X'01'
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,TSREC
         ST    ZC_R0,0(ZC_R1)                 P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),200 P2=L'V1  INSPECT FIELD LENGTH
         LARL  ZC_R0,=XL2'0000'
         ST    ZC_R0,8(ZC_R1)
         MVHI  8+4(ZC_R1),1
         LA    ZC_R0,C'X'
         ST    ZC_R0,16(ZC_R1)           P5= REPLACING STYPE C'C/A/L/F'
         LARL  ZC_R0,=X'0100'
         ST    ZC_R0,20(ZC_R1)
         MVHI  20+4(ZC_R1),1
         SR    ZC_R0,ZC_R0
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         ST    ZC_R0,32(ZC_R1)                  P9=L'TEST_VAR   NO TEST
         LA    ZC_R0,ZCVT_CONVERTING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
*             MOVE 1 TO DEPCTRL.
*ZC    256         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS WRITEQ TS QUEUE('MYQUEUEA') FROM(TSREC)
*ZC    257         EXEC  CICS,WRITEQ,TS,QUEUE('MYQUEUEA'),FROM(TSREC),LX
               ENGTH(10),ITEM(1),REWRITE
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0A02ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02ITM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,10         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_0905 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_0905    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_0905   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_0905   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_0905) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_0905    DS 0H
*                       LENGTH(10) ITEM(1) REWRITE END-EXEC.
*      * HANDLE ALL CONDITIONS, ALWAYS RETURN TO MAIN LINE
*             EXEC CICS HANDLE CONDITION                               X
                   X
*                  QIDERR(BEC9QID)                                     X
                   X
*                  ITEMERR(BEC9ITM)                                    X
                   X
*                  LENGERR(BEC9LNG)                                    X
                   X
*                  INVREQ(BEC9INV)
*ZC    262         EXEC  CICS,HANDLE,CONDITION,QIDERR(BEC9QID),ITEMERR(X
               BEC9ITM),LENGERR(BEC9LNG),INVREQ(BEC9INV)
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),44       SET CONDITION NUMBER
         LARL  R0,PG_BEC9QID     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),26       SET CONDITION NUMBER
         LARL  R0,PG_BEC9ITM     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),22       SET CONDITION NUMBER
         LARL  R0,PG_BEC9LNG     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),16       SET CONDITION NUMBER
         LARL  R0,PG_BEC9INV     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0204EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0204EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0204EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0204EDF_0921 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0204EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
P0204EDF_0921    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         J     P0204BYP_0921   EXIT
*
P0204    DS    0H
P0204FN  DS    XL2                FUNCTION CODE
P0204EIB DS    AL4                EIB
P0204TCT DS    AL4                TCTTE
P0204HCN DS    AL4                A(DFHEIHCN)
P0204CND DS    XL30               ROOM FOR 30 CONDITIONS
P0204ADR DS    30AL4              ROOM FOR 30 ADDRESSES, FF......=CLEAR
P0204EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0204EDS DS    AL4                DSA ADDRESS FOR EDF
P0204EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0204EDL DS    XL2                DSA LENGTH FOR EDF
P0204NED DS    X                  FF=NOEDF
         DS    X
P0204RSP DS    AL4                RESP
P0204RS2 DS    AL4                RESP2
P0204END EQU   *                  END MARKER
*
P0204BYP_0921    DS 0H
*                  END-EXEC.
*      * BAD REWRITE, BAD Q NAME, RAISE QIDERR 1
*      *  MVC   QWTSBA,QOP5        MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'DUMMY' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'REWRITE' SET TYPE IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP5 TO QWTSBA.
*ZC    276         MOVE  QOP5,TO,QWTSBA
         MVC   QWTSBA,QOP5  ALIGN LEFT X OTHER
*             MOVE 'DUMMY           ' TO QOPNAME.
*ZC    277         MOVE  'DUMMY           ',TO,QOPNAME
         LARL  ZC_R1,=CL16'DUMMY           '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    278         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE 'REWRITE' TO QOPTYPE.
*ZC    279         MOVE  'REWRITE',TO,QOPTYPE
         LARL  ZC_R1,=CL8'REWRITE'
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    280         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    281         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0965 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0965    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0965   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0965   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0965) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0965    DS 0H
*      *  LA    R7,BED9RTN1        R7=HANDLE RETURN
*             MOVE 2 TO DEPCTRL.
*ZC    283         MOVE  2,TO,DEPCTRL
          MVHHI DEPCTRL,2
*             EXEC CICS WRITEQ TS QUEUE('DUMMY') FROM(TSREC)
*ZC    284         EXEC  CICS,WRITEQ,TS,QUEUE('DUMMY'),FROM(TSREC),LENGX
               TH(10),ITEM(1),REWRITE
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'DUMMY'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0A02ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02ITM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,10         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_0983 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_0983    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_0983   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_0983   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_0983) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_0983    DS 0H
*                       LENGTH(10) ITEM(1) REWRITE END-EXEC.
*      * BED9RTN1 EQU   *
*         BEC9RTN1.
*      * BAD REWRITE, BAD ITEM, RAISE ITEMERR 1
*      *  MVC   QWTSBA,QOP7        MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'5'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'REWRITE' SET TYPE IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
PG_BEC9RTN1 DS 0H
*             MOVE QOP7 TO QWTSBA.
*ZC    296         MOVE  QOP7,TO,QWTSBA
         MVC   QWTSBA,QOP7  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    297         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '5' TO QOPITEM.
*ZC    298         MOVE  '5',TO,QOPITEM
         MVI   QOPITEM,C'5'
*             MOVE 'REWRITE' TO QOPTYPE.
*ZC    299         MOVE  'REWRITE',TO,QOPTYPE
         LARL  ZC_R1,=CL8'REWRITE'
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    300         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    301         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1033 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1033    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1033   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1033   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1033) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1033    DS 0H
*      *  LA    R7,BED9RTN2        R7=HANDLE RETURN
*             MOVE 3 TO DEPCTRL.
*ZC    303         MOVE  3,TO,DEPCTRL
          MVHHI DEPCTRL,3
*             EXEC CICS WRITEQ TS QUEUE('MYQUEUEA') FROM(TSREC)
*ZC    304         EXEC  CICS,WRITEQ,TS,QUEUE('MYQUEUEA'),FROM(TSREC),LX
               ENGTH(10),ITEM(5),REWRITE
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LARL  R1,=AL2(5)         ADDRESS SOURCE
         LARL  R15,P0A02ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02ITM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,10         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1051 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1051    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1051   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1051   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1051) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1051    DS 0H
*                       LENGTH(10) ITEM(5) REWRITE END-EXEC.
*      * BED9RTN2 EQU   *
*         BEC9RTN2.
*      * BAD WRITE, RAISE LENGERR
*      *  MVC   QWTSBA,QOP9        MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'3'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'WRITE  ' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
PG_BEC9RTN1_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9RTN2 DS 0H
*             MOVE QOP9 TO QWTSBA.
*ZC    316         MOVE  QOP9,TO,QWTSBA
         MVC   QWTSBA,QOP9  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    317         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '3' TO QOPITEM.
*ZC    318         MOVE  '3',TO,QOPITEM
         MVI   QOPITEM,C'3'
*             MOVE 'WRITE  ' TO QOPTYPE.
*ZC    319         MOVE  'WRITE  ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'WRITE  '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    320         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    321         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1101 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1101    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1101   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1101   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1101) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1101    DS 0H
*      *  LA    R7,BED9RTN3        R7=HANDLE RETURN
*             MOVE 4 TO DEPCTRL.
*ZC    323         MOVE  4,TO,DEPCTRL
          MVHHI DEPCTRL,4
*             EXEC CICS WRITEQ TS QUEUE('MYQUEUEA') FROM(TSREC)
*                       LENGTH(LEN) END-EXEC
*      * BED9RTN3 EQU   *
*ZC    324         EXEC  CICS,WRITEQ,TS,QUEUE('MYQUEUEA'),FROM(TSREC),LX
               ENGTH(LEN)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,LEN         SET LENGTH FROM LABEL
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1119 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1119    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1119   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1119   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1119) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1119    DS 0H
*         BEC9RTN3.
*      * 3RD Q NAME, 1ST ITEM, SHORT DATA
*      *  MVC   QWTSBA,QOP11       MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYLONGQUEUEB' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'WRITE  ' SET TYPE IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
PG_BEC9RTN2_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9RTN3 DS 0H
*             MOVE QOP11 TO QWTSBA.
*ZC    336         MOVE  QOP11,TO,QWTSBA
         MVC   QWTSBA,QOP11  ALIGN LEFT X OTHER
*             MOVE 'MYLONGQUEUEB    ' TO QOPNAME.
*ZC    337         MOVE  'MYLONGQUEUEB    ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYLONGQUEUEB    '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    338         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE 'WRITE  ' TO QOPTYPE.
*ZC    339         MOVE  'WRITE  ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'WRITE  '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    340         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    341         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1167 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1167    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1167   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1167   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1167) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1167    DS 0H
*      *  MVI   TSREC,X'45'        BYTE TO PROPAGATE
*      *  MVC   TSREC+1(49),TSREC  MAKE 50
*             MOVE LOW-VALUES TO TSREC.
*ZC    344         MOVE  LOW_VALUES,TO,TSREC
         MVI   TSREC,X'00'
         MVC   TSREC+1(200-1),TSREC
*             INSPECT TSREC CONVERTING LOW-VALUES TO X'45'.
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*ZC    345         INSPECT TSREC,CONVERTING,LOW_VALUES,TO,X'45'
         LA    ZC_R1,ZCVT_WORKAREA
         LA    ZC_R0,TSREC
         ST    ZC_R0,0(ZC_R1)                 P1=A(V1) INSPECT FIELD
         MVHI  4(ZC_R1),200 P2=L'V1  INSPECT FIELD LENGTH
         LARL  ZC_R0,=XL2'0000'
         ST    ZC_R0,8(ZC_R1)
         MVHI  8+4(ZC_R1),1
         LA    ZC_R0,C'X'
         ST    ZC_R0,16(ZC_R1)           P5= REPLACING STYPE C'C/A/L/F'
         LARL  ZC_R0,=X'4500'
         ST    ZC_R0,20(ZC_R1)
         MVHI  20+4(ZC_R1),1
         SR    ZC_R0,ZC_R0
         ST    ZC_R0,28(ZC_R1)                  P8=A(TEST_VAR)
         ST    ZC_R0,32(ZC_R1)                  P9=L'TEST_VAR   NO TEST
         LA    ZC_R0,ZCVT_CONVERTING
         L     ZC_R15,ZCVT_INSPECT
         BASR  ZC_R14,ZC_R15
*             MOVE 1 TO DEPCTRL.
*ZC    347         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS WRITEQ TS QNAME('MYLONGQUEUEB') FROM(TSREC)
*ZC    348         EXEC  CICS,WRITEQ,TS,QNAME('MYLONGQUEUEB'),FROM(TSREX
               C),NUMITEMS(TSNUMIT),LENGTH(50)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYLONGQUEUEB'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,50         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,TSNUMIT       R0=ADDRESS OF NUMITEMS
         LARL  R1,P0A02NUM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1198 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1198    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1198   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1198   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1198) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1198    DS 0H
*                       NUMITEMS(TSNUMIT) LENGTH(50) END-EXEC.
*      * DELETE 2ND Q NAME
*      *  MVC   QWTSBA,QOP12       MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYLONGQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C' '       NO ITEM
*      *  MVC   QOPTYPE,=C'DELETE ' SET TYPE IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP12 TO QWTSBA.
*ZC    358         MOVE  QOP12,TO,QWTSBA
         MVC   QWTSBA,QOP12  ALIGN LEFT X OTHER
*             MOVE 'MYLONGQUEUEA    ' TO QOPNAME.
*ZC    359         MOVE  'MYLONGQUEUEA    ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYLONGQUEUEA    '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE SPACE TO QOPITEM.
*ZC    360         MOVE  SPACE,TO,QOPITEM
         MVI   QOPITEM,C' '
*             MOVE 'DELETE ' TO QOPTYPE.
*ZC    361         MOVE  'DELETE ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'DELETE '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    362         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    363         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1246 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1246    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1246   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1246   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1246) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1246    DS 0H
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*             MOVE 1 TO DEPCTRL.
*ZC    365         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS DELETEQ TS QNAME('MYLONGQUEUEA') END-EXEC.
*ZC    366         EXEC  CICS,DELETEQ,TS,QNAME('MYLONGQUEUEA')
         LARL  R1,P0A06         ADDRESS SOURCE
         LARL  R15,P0A06        ADDRESS TARGET
         XC    0(P0A06END-P0A06,R15),0(R1) XC IT
         LARL  R1,=X'0A06'         ADDRESS SOURCE
         LARL  R15,P0A06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYLONGQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A06QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06QNM,R15),0(R1) MVC IT
         LARL  R1,P0A06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A06EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A06EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A06EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A06EDF_1264 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A06)       R1=LCL MODULE PARAMETER LIST
P0A06EDF_1264    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A06BYP_1264   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A06BYP_1264   EXIT IF NONE
* INVREQ, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A06BYP_1264) ENTRYPOINT FOR IGNORE CONDITION
*
P0A06    DS    0H
P0A06FN  DS    XL2                FUNCTION CODE
P0A06EIB DS    AL4                EIB
P0A06TCT DS    AL4                TCTTE
P0A06QNM DS    CL16               QUEUE NAME
P0A06EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0A06EDS DS    AL4                DSA ADDRESS FOR EDF
P0A06EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0A06EDL DS    XL2                DSA LENGTH FOR EDF
P0A06NED DS    X                  FF=NOEDF
         DS    X
P0A06NOH DS    X                  FF=NOHANDLE
         DS    X
P0A06RSP DS    AL4                RESP
P0A06RS2 DS    AL4                RESP2
P0A06END EQU   *                  END MARKER
*
P0A06BYP_1264    DS 0H
*      * BAD DELETE, RAISE QIDERR 2
*      *  MVC   QWTSBA,QOP13       MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'FRED' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C' '       NO ITEM
*      *  MVC   QOPTYPE,=C'DELETE ' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP13 TO QWTSBA.
*ZC    375         MOVE  QOP13,TO,QWTSBA
         MVC   QWTSBA,QOP13  ALIGN LEFT X OTHER
*             MOVE 'FRED            ' TO QOPNAME.
*ZC    376         MOVE  'FRED            ',TO,QOPNAME
         LARL  ZC_R1,=CL16'FRED            '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE SPACE TO QOPITEM.
*ZC    377         MOVE  SPACE,TO,QOPITEM
         MVI   QOPITEM,C' '
*             MOVE 'DELETE ' TO QOPTYPE.
*ZC    378         MOVE  'DELETE ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'DELETE '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    379         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    380         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1310 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1310    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1310   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1310   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1310) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1310    DS 0H
*      *  LA    R7,BED9RTN4        R7=HANDLE RETURN
*             MOVE 5 TO DEPCTRL.
*      *  MVI   QIDNUM,C'2'        SET QIDERR 2
*ZC    382         MOVE  5,TO,DEPCTRL
          MVHHI DEPCTRL,5
*             MOVE 2 TO QIDNUM.
*ZC    384         MOVE  2,TO,QIDNUM
          MVHHI QIDNUM,2
*             EXEC CICS DELETEQ TS QUEUE('FRED') END-EXEC.
*ZC    385         EXEC  CICS,DELETEQ,TS,QUEUE('FRED')
         LARL  R1,P0A06         ADDRESS SOURCE
         LARL  R15,P0A06        ADDRESS TARGET
         XC    0(P0A06END-P0A06,R15),0(R1) XC IT
         LARL  R1,=X'0A06'         ADDRESS SOURCE
         LARL  R15,P0A06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'FRED'         ADDRESS SOURCE
         LARL  R15,P0A06QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06QNM,R15),0(R1) MVC IT
         LARL  R1,P0A06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A06EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A06EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A06EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A06EDF_1333 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A06)       R1=LCL MODULE PARAMETER LIST
P0A06EDF_1333    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A06BYP_1333   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A06BYP_1333   EXIT IF NONE
* INVREQ, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A06BYP_1333) ENTRYPOINT FOR IGNORE CONDITION
*
P0A06BYP_1333    DS 0H
*      * BED9RTN4 EQU   *
*         BEC9RTN4.
*      * BAD WRITE, RAISE INVREQ
*      *  MVC   QWTSBA,QOP15       MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'DFNAME' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'WRITE  ' SET TYPE IN MESSAGE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
PG_BEC9RTN3_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9RTN4 DS 0H
*             MOVE QOP15 TO QWTSBA.
*ZC    396         MOVE  QOP15,TO,QWTSBA
         MVC   QWTSBA,QOP15  ALIGN LEFT X OTHER
*             MOVE 'DFNAME          ' TO QOPNAME.
*ZC    397         MOVE  'DFNAME          ',TO,QOPNAME
         LARL  ZC_R1,=CL16'DFNAME          '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    398         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE 'WRITE  ' TO QOPTYPE.
*ZC    399         MOVE  'WRITE  ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'WRITE  '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    400         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    401         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1380 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1380    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1380   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1380   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1380) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1380    DS 0H
*      *  LA    R7,BED9RTN5        R7=HANDLE RETURN
*             MOVE 6 TO DEPCTRL.
*ZC    403         MOVE  6,TO,DEPCTRL
          MVHHI DEPCTRL,6
*             EXEC CICS WRITEQ TS QUEUE('DFNAME') FROM(TSREC)
*ZC    404         EXEC  CICS,WRITEQ,TS,QUEUE('DFNAME'),FROM(TSREC),LENX
               GTH(10)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'DFNAME'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,10         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1398 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1398    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1398   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1398   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1398) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1398    DS 0H
*                       LENGTH(10) END-EXEC.
*      * BED9RTN5 EQU   *
*         BEC9RTN5.
*      * 1ST Q NAME, READ 1ST ITEM
*      *  MVC   QWTSBA,QOP17       MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'READ   ' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
PG_BEC9RTN4_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9RTN5 DS 0H
*             MOVE QOP17 TO QWTSBA.
*ZC    416         MOVE  QOP17,TO,QWTSBA
         MVC   QWTSBA,QOP17  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    417         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    418         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE 'READ   ' TO QOPTYPE.
*ZC    419         MOVE  'READ   ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'READ   '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    420         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    421         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1447 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1447    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1447   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1447   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1447) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1447    DS 0H
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*             MOVE 1 TO DEPCTRL.
*ZC    423         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS READQ TS QUEUE('MYQUEUEA') INTO(TSREC)
*ZC    424         EXEC  CICS,READQ,TS,QUEUE('MYQUEUEA'),INTO(TSREC),LEX
               NGTH(10),ITEM(1)
         LARL  R1,P0A04         ADDRESS SOURCE
         LARL  R15,P0A04        ADDRESS TARGET
         XC    0(P0A04END-P0A04,R15),0(R1) XC IT
         LARL  R1,=X'0A04'         ADDRESS SOURCE
         LARL  R15,P0A04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A04QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04QNM,R15),0(R1) MVC IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0A04ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04ITM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=INTO ADDRESS
         LARL  R1,P0A04INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,10         SET NUMERIC LENGTH
         LARL  R1,P0A04LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A04EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A04EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A04EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A04EDF_1465 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A04)       R1=LCL MODULE PARAMETER LIST
P0A04EDF_1465    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JLE   P0A04BYP_1465   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JLZ   P0A04BYP_1465   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A04BYP_1465) ENTRYPOINT FOR IGNORE CONDITION
*
P0A04    DS    0H
P0A04FN  DS    XL2                FUNCTION CODE
P0A04EIB DS    AL4                EIB
P0A04TCT DS    AL4                TCTTE
P0A04QNM DS    CL16               QUEUE NAME
P0A04ITM DS    XL2                ITEM
P0A04LEN DS    XL4                LENGTH
P0A04LAD DS    AL4                ADDRESS OF LENGTH IF LABEL
P0A04FAD DS    AL4                ADDRESS OF FLENGTH IF LABEL
P0A04SET DS    X                  FF=SET IS SPECIFIED
         DS    X
P0A04STA DS    AL4                ADDRESS FOR SET
P0A04INT DS    AL4                ADDRESS OF INTO
P0A04NUM DS    AL4                ADDRESS OF NUMITEMS
P0A04EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0A04EDS DS    AL4                DSA ADDRESS FOR EDF
P0A04EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0A04EDL DS    XL2                DSA LENGTH FOR EDF
P0A04NED DS    X                  FF=NOEDF
         DS    X
P0A04NOH DS    X                  FF=NOHANDLE
         DS    X
P0A04RSP DS    AL4                RESP
P0A04RS2 DS    AL4                RESP2
P0A04END EQU   *                  END MARKER
*
P0A04BYP_1465    DS 0H
*                       LENGTH(10) ITEM(1) END-EXEC.
*      * 1ST Q NAME, READ NEXT (2ND) ITEM
*      *  MVC   QWTSBA,QOP18       MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'2'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'READ   ' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP18 TO QWTSBA.
*ZC    434         MOVE  QOP18,TO,QWTSBA
         MVC   QWTSBA,QOP18  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    435         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '2' TO QOPITEM.
*ZC    436         MOVE  '2',TO,QOPITEM
         MVI   QOPITEM,C'2'
*             MOVE 'READ   ' TO QOPTYPE.
*ZC    437         MOVE  'READ   ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'READ   '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    438         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    439         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1513 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1513    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1513   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1513   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1513) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1513    DS 0H
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*             MOVE 1 TO DEPCTRL.
*ZC    441         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS READQ TS QUEUE('MYQUEUEA')
*                       SET(ADDRESS OF TSRECLK)
*ZC    442         EXEC  CICS,READQ,TS,QUEUE('MYQUEUEA'),SET(ADDRESS,OFX
               ,TSRECLK),LENGTH(200),NEXT
         LARL  R1,P0A04         ADDRESS SOURCE
         LARL  R15,P0A04        ADDRESS TARGET
         XC    0(P0A04END-P0A04,R15),0(R1) XC IT
         LARL  R1,=X'0A04'         ADDRESS SOURCE
         LARL  R15,P0A04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A04QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04QNM,R15),0(R1) MVC IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P0A04ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04ITM,R15),0(R1) MVC IT
         LARL  R1,P0A04SET         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LAY   R0,200         SET NUMERIC LENGTH
         LARL  R1,P0A04LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A04EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A04EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A04EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A04EDF_1531 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A04)       R1=LCL MODULE PARAMETER LIST
P0A04EDF_1531    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A04STA        ADDRESS SOURCE
         MVC   ZC_TSRECLK_PTR(4),0(R1) SET ADDRESS IN L-S POINTER
         LARL  R1,P0A04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JLE   P0A04BYP_1531   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JLZ   P0A04BYP_1531   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A04BYP_1531) ENTRYPOINT FOR IGNORE CONDITION
*
P0A04BYP_1531    DS 0H
*                       LENGTH(200) NEXT END-EXEC.
*      * 1ST Q NAME, READ NEXT (3RD) ITEM, RAISE ITEMERR 2
*      *  MVC   QWTSBA,QOP19       MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'3'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'READ   ' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*             MOVE QOP19 TO QWTSBA.
*ZC    453         MOVE  QOP19,TO,QWTSBA
         MVC   QWTSBA,QOP19  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    454         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '3' TO QOPITEM.
*ZC    455         MOVE  '3',TO,QOPITEM
         MVI   QOPITEM,C'3'
*             MOVE 'READ   ' TO QOPTYPE.
*ZC    456         MOVE  'READ   ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'READ   '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    457         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    458         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1578 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1578    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1578   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1578   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1578) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1578    DS 0H
*      *  LA    R7,BED9RTN6        R7=HANDLE RETURN
*             MOVE 7 TO DEPCTRL.
*      *  MVI   ITMNUM,C'2'        SET ITEMERR 2
*ZC    460         MOVE  7,TO,DEPCTRL
          MVHHI DEPCTRL,7
*             MOVE 2 TO ITMNUM.
*ZC    462         MOVE  2,TO,ITMNUM
          MVHHI ITMNUM,2
*             EXEC CICS READQ TS QUEUE('MYQUEUEA')
*                       SET(ADDRESS OF TSRECLK)
*ZC    463         EXEC  CICS,READQ,TS,QUEUE('MYQUEUEA'),SET(ADDRESS,OFX
               ,TSRECLK),LENGTH(200),NEXT
         LARL  R1,P0A04         ADDRESS SOURCE
         LARL  R15,P0A04        ADDRESS TARGET
         XC    0(P0A04END-P0A04,R15),0(R1) XC IT
         LARL  R1,=X'0A04'         ADDRESS SOURCE
         LARL  R15,P0A04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A04QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04QNM,R15),0(R1) MVC IT
         LARL  R1,=X'FFFF'         ADDRESS SOURCE
         LARL  R15,P0A04ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04ITM,R15),0(R1) MVC IT
         LARL  R1,P0A04SET         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LAY   R0,200         SET NUMERIC LENGTH
         LARL  R1,P0A04LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A04EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A04EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A04EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A04EDF_1601 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A04)       R1=LCL MODULE PARAMETER LIST
P0A04EDF_1601    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A04STA        ADDRESS SOURCE
         MVC   ZC_TSRECLK_PTR(4),0(R1) SET ADDRESS IN L-S POINTER
         LARL  R1,P0A04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JLE   P0A04BYP_1601   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JLZ   P0A04BYP_1601   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A04BYP_1601) ENTRYPOINT FOR IGNORE CONDITION
*
P0A04BYP_1601    DS 0H
*                       LENGTH(200) NEXT END-EXEC.
*      * BED9RTN6 EQU   *
*         BEC9RTN6.
*      *  MVI   QOPSEP+1,C' '      NO COL MARKER NOW
*      *  MVI   QHSEP,C' '         NO COL MARKER NOW
PG_BEC9RTN5_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9RTN6 DS 0H
*             MOVE SPACE TO QOPSEP.
*ZC    470         MOVE  SPACE,TO,QOPSEP
         MVI   QOPSEP,C' '
*             MOVE SPACE TO QHSEP.
*      * BAD Q NAME, READ ITEM, RAISE QIDERR 3
*      *  MVC   QWTSBA,QOP1C2      MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'BERT' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'1'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'READ   ' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
*ZC    471         MOVE  SPACE,TO,QHSEP
         MVI   QHSEP,C' '
*             MOVE QOP1C2 TO QWTSBA.
*ZC    480         MOVE  QOP1C2,TO,QWTSBA
         MVC   QWTSBA,QOP1C2  ALIGN LEFT X OTHER
*             MOVE 'BERT            ' TO QOPNAME.
*ZC    481         MOVE  'BERT            ',TO,QOPNAME
         LARL  ZC_R1,=CL16'BERT            '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '1' TO QOPITEM.
*ZC    482         MOVE  '1',TO,QOPITEM
         MVI   QOPITEM,C'1'
*             MOVE 'READ   ' TO QOPTYPE.
*ZC    483         MOVE  'READ   ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'READ   '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    484         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    485         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1663 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1663    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1663   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1663   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1663) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1663    DS 0H
*      *  LA    R7,BED9RTN7        R7=HANDLE RETURN
*             MOVE 8 TO DEPCTRL.
*      *  MVI   QIDNUM,C'3'        SET QIDERR 3
*ZC    487         MOVE  8,TO,DEPCTRL
          MVHHI DEPCTRL,8
*             MOVE 3 TO QIDNUM.
*ZC    489         MOVE  3,TO,QIDNUM
          MVHHI QIDNUM,3
*             EXEC CICS READQ TS QUEUE('BERT') SET(ADDRESS OF TSRECLK)
*ZC    490         EXEC  CICS,READQ,TS,QUEUE('BERT'),SET(ADDRESS,OF,TSRX
               ECLK),LENGTH(200),ITEM(1)
         LARL  R1,P0A04         ADDRESS SOURCE
         LARL  R15,P0A04        ADDRESS TARGET
         XC    0(P0A04END-P0A04,R15),0(R1) XC IT
         LARL  R1,=X'0A04'         ADDRESS SOURCE
         LARL  R15,P0A04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'BERT'         ADDRESS SOURCE
         LARL  R15,P0A04QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04QNM,R15),0(R1) MVC IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0A04ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04ITM,R15),0(R1) MVC IT
         LARL  R1,P0A04SET         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LAY   R0,200         SET NUMERIC LENGTH
         LARL  R1,P0A04LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A04EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A04EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A04EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A04EDF_1686 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A04)       R1=LCL MODULE PARAMETER LIST
P0A04EDF_1686    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A04STA        ADDRESS SOURCE
         MVC   ZC_TSRECLK_PTR(4),0(R1) SET ADDRESS IN L-S POINTER
         LARL  R1,P0A04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JLE   P0A04BYP_1686   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JLZ   P0A04BYP_1686   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A04BYP_1686) ENTRYPOINT FOR IGNORE CONDITION
*
P0A04BYP_1686    DS 0H
*                       LENGTH(200) ITEM(1) END-EXEC.
*      * BED9RTN7 EQU   *
*         BEC9RTN7.
*      * 1ST Q NAME, READ 2ND ITEM, LENGTH TRUNCATED, RAISE LENGERR
*      *  MVC   QWTSBA,QOP3C2      MOVE WCC,SBA
*      *  MVC   QOPNAME,=CL16'MYQUEUEA' SET Q NAME IN MSG
*      *  MVI   QOPITEM,C'2'       SET ITEM IN MESSAGE
*      *  MVC   QOPTYPE,=C'READ   ' SET TYPE
*      *  MVC   QWTMSG,QOP         MOVE MESSAGE TEXT
PG_BEC9RTN6_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9RTN7 DS 0H
*             MOVE QOP3C2 TO QWTSBA.
*ZC    502         MOVE  QOP3C2,TO,QWTSBA
         MVC   QWTSBA,QOP3C2  ALIGN LEFT X OTHER
*             MOVE 'MYQUEUEA        ' TO QOPNAME.
*ZC    503         MOVE  'MYQUEUEA        ',TO,QOPNAME
         LARL  ZC_R1,=CL16'MYQUEUEA        '
          MVC   QOPNAME,0(ZC_R1)
*             MOVE '2' TO QOPITEM.
*ZC    504         MOVE  '2',TO,QOPITEM
         MVI   QOPITEM,C'2'
*             MOVE 'READ   ' TO QOPTYPE.
*ZC    505         MOVE  'READ   ',TO,QOPTYPE
         LARL  ZC_R1,=CL8'READ   '
          MVC   QOPTYPE,0(ZC_R1)
*             MOVE QOP TO QWTMSG.
*ZC    506         MOVE  QOP,TO,QWTMSG
         MVC   QWTMSG,QOP  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    507         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1736 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1736    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1736   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1736   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1736) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1736    DS 0H
*      *  LA    R7,BED9RTN8        R7=HANDLE RETURN
*             MOVE 9 TO DEPCTRL.
*      *  MVI   LNGNUM,C'2'        SET LENGERR 2
*ZC    509         MOVE  9,TO,DEPCTRL
          MVHHI DEPCTRL,9
*             MOVE 2 TO LNGNUM.
*ZC    511         MOVE  2,TO,LNGNUM
          MVHHI LNGNUM,2
*             EXEC CICS READQ TS QUEUE('MYQUEUEA')
*                       INTO(TSREC)
*ZC    512         EXEC  CICS,READQ,TS,QUEUE('MYQUEUEA'),INTO(TSREC),LEX
               NGTH(20),ITEM(2)
         LARL  R1,P0A04         ADDRESS SOURCE
         LARL  R15,P0A04        ADDRESS TARGET
         XC    0(P0A04END-P0A04,R15),0(R1) XC IT
         LARL  R1,=X'0A04'         ADDRESS SOURCE
         LARL  R15,P0A04FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A04QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04QNM,R15),0(R1) MVC IT
         LARL  R1,=AL2(2)         ADDRESS SOURCE
         LARL  R15,P0A04ITM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A04ITM,R15),0(R1) MVC IT
         LA    R0,TSREC           R0=INTO ADDRESS
         LARL  R1,P0A04INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,20         SET NUMERIC LENGTH
         LARL  R1,P0A04LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A04EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A04TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A04EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A04EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A04EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A04EDF_1759 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A04EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A04)       R1=LCL MODULE PARAMETER LIST
P0A04EDF_1759    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A04NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JLE   P0A04BYP_1759   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JLZ   P0A04BYP_1759   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A04BYP_1759) ENTRYPOINT FOR IGNORE CONDITION
*
P0A04BYP_1759    DS 0H
*                       LENGTH(20) ITEM(2) END-EXEC.
*      * BED9RTN8 EQU   *
*         BEC9RTN8.
*      * CLEAN UP AND BUILD QUEUES TO TEST CEBR
PG_BEC9RTN7_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9RTN8 DS 0H
*             EXEC CICS SEND FROM(CEBRMSG1) LENGTH(CEBR1LEN) END-EXEC.
*ZC    520         EXEC  CICS,SEND,FROM(CEBRMSG1),LENGTH(CEBR1LEN)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),CEBR1LEN   SET LENGTH FROM LABEL
         LA    R0,CEBRMSG1           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1778 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1778    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1778   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1778   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1778) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1778    DS 0H
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*             MOVE 1 TO DEPCTRL.
*ZC    522         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS DELETEQ TS QUEUE('MYQUEUEA') END-EXEC.
*ZC    523         EXEC  CICS,DELETEQ,TS,QUEUE('MYQUEUEA')
         LARL  R1,P0A06         ADDRESS SOURCE
         LARL  R15,P0A06        ADDRESS TARGET
         XC    0(P0A06END-P0A06,R15),0(R1) XC IT
         LARL  R1,=X'0A06'         ADDRESS SOURCE
         LARL  R15,P0A06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A06QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06QNM,R15),0(R1) MVC IT
         LARL  R1,P0A06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A06EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A06EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A06EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A06EDF_1796 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A06)       R1=LCL MODULE PARAMETER LIST
P0A06EDF_1796    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A06BYP_1796   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A06BYP_1796   EXIT IF NONE
* INVREQ, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A06BYP_1796) ENTRYPOINT FOR IGNORE CONDITION
*
P0A06BYP_1796    DS 0H
*             EXEC CICS DELETEQ TS QNAME('MYLONGQUEUEB') END-EXEC.
*ZC    524         EXEC  CICS,DELETEQ,TS,QNAME('MYLONGQUEUEB')
         LARL  R1,P0A06         ADDRESS SOURCE
         LARL  R15,P0A06        ADDRESS TARGET
         XC    0(P0A06END-P0A06,R15),0(R1) XC IT
         LARL  R1,=X'0A06'         ADDRESS SOURCE
         LARL  R15,P0A06FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYLONGQUEUEB'         ADDRESS SOURCE
         LARL  R15,P0A06QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A06QNM,R15),0(R1) MVC IT
         LARL  R1,P0A06EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A06TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A06EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A06EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A06EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A06EDF_1809 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A06EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A06)       R1=LCL MODULE PARAMETER LIST
P0A06EDF_1809    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A06NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A06BYP_1809   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A06BYP_1809   EXIT IF NONE
* INVREQ, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A06BYP_1809) ENTRYPOINT FOR IGNORE CONDITION
*
P0A06BYP_1809    DS 0H
*      * MYQUEUEA IS HEX TABLE IN 16 ROWS OF 16
*      *  LA    R6,HEXTAB          R6=HEX TABLE
*      *  LA    R8,256             ALL THE HEX CHARS
*      *  HEXLOOP  EQU   *
*      *  STC   R7,0(R6)           SAVE IT
*      *  AHI   R6,1               BUMP HEX TABLE POINTER
*      *  AHI   R7,1               NEXT HEX
*      *  BCT   R8,HEXLOOP         LOOP
*      * WRITEQ ALL THE HEX CHARS FOR LATER TRANSLATION
*      *  LA    R6,HEXTAB          R6=HEX TABLE
*      *  LA    R8,16              R8=ITEMS TO WRITE
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*      *  HEXQ     EQU   *
*      *  EXEC  CICS WRITEQ TS QUEUE('MYQUEUEA') FROM(0(R6)) LENGTH(16)
*      *  AHI   R6,16              BUMP POINTER
*      *  BCT   R8,HEXQ            LOOP
*             MOVE 1 TO DEPCTRL.
*ZC    543         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             MOVE 1 TO HEXCOUNT.
*ZC    544         MOVE  1,TO,HEXCOUNT
          MVHHI HEXCOUNT,1
*         HEXQ.
PG_BEC9RTN8_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_HEXQ  DS    0H
*             MOVE HEXINTAB (HEXCOUNT) TO HEXTAB16.
*ZC    546         MOVE  HEXINTAB,'(',HEXCOUNT,')',TO,HEXTAB16
         IILF  ZC_R15,HEXCOUNT-ZC_WS
         AR    ZC_R15,ZC_R13
         LH    ZC_R15,0(ZC_R15)
         BCTR  ZC_R15,0
         MSFI  ZC_R15,16 L'&SYM_NAME(&SIX_OCCUR(&CUR_SIX)) RPI 1161 CORX
               RECT CONTINUE RPI 1182
         LA    ZC_R2,HEXINTAB(ZC_R15)
         MVC   HEXTAB16,0(ZC_R2)  ALIGN LEFT X OTHER
*             EXEC CICS WRITEQ TS QUEUE('MYQUEUEA')
*ZC    547         EXEC  CICS,WRITEQ,TS,QUEUE('MYQUEUEA'),FROM(HEXTAB16X
               ),LENGTH(16)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEA'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,HEXTAB16           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,16         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1845 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1845    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1845   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1845   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1845) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1845    DS 0H
*                       FROM(HEXTAB16) LENGTH(16) END-EXEC.
*             ADD 1 TO HEXCOUNT.
*ZC    549         ADD   1,TO,HEXCOUNT
         LH    ZC_R0,HEXCOUNT
         AHI   ZC_R0,1
         STH   ZC_R0,HEXCOUNT
*             IF HEXCOUNT NOT = 17 THEN GO TO HEXQ.
*ZC    550         IF    HEXCOUNT,NOT,=,17,THEN
         LH    0,HEXCOUNT
         CHI   0,17
         BRC   15-ZC_NE,PG_IF_1_1
*      * MYQUEUEB IS 50 ROWS OF THE WHOLE HEX TABLE
*      *  LA    R8,50              R8=ITEMS TO WRITE
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*      *  HEXBIGQ  EQU   *
*      *  EXEC  CICS WRITEQ TS QUEUE('MYQUEUEB') FROM(HEXTAB)
*      *        LENGTH(256)
*      *  BCT   R8,HEXBIGQ         LOOP
*ZC    550         GO    TO,HEXQ
         J     PG_HEXQ
PG_IF_1_1    DS    0H  &TYPE
*             MOVE 1 TO DEPCTRL.
*ZC    558         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             MOVE 1 TO HEXCOUNT.
*ZC    559         MOVE  1,TO,HEXCOUNT
          MVHHI HEXCOUNT,1
*         HEXBIGQ.
PG_HEXQ_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_HEXBIGQ DS  0H
*             EXEC CICS WRITEQ TS QUEUE('MYQUEUEB') FROM(HEXTAB)
*ZC    561         EXEC  CICS,WRITEQ,TS,QUEUE('MYQUEUEB'),FROM(HEXTAB),X
               LENGTH(256)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'MYQUEUEB'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,HEXTAB           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,256         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1892 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1892    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1892   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1892   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1892) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1892    DS 0H
*                       LENGTH(256) END-EXEC.
*             ADD 1 TO HEXCOUNT.
*ZC    563         ADD   1,TO,HEXCOUNT
         LH    ZC_R0,HEXCOUNT
         AHI   ZC_R0,1
         STH   ZC_R0,HEXCOUNT
*             IF HEXCOUNT NOT = 51 THEN GO TO HEXBIGQ.
*ZC    564         IF    HEXCOUNT,NOT,=,51,THEN
         LH    0,HEXCOUNT
         CHI   0,51
         BRC   15-ZC_NE,PG_IF_2_1
*      * X'02CB458F' IS HEX QUEUE NAME
*      * 20 LINES OF HELLO WORLD
*      * 20 LINES OF ASCII HELLO WORLD
*      * 20 LINES OF 72 BYTES OF HEXTAB
*      * 20 LINES OF 36 BYTES OF HEXTAB
*      *  SR    R7,R7              DUMP IF CONDITION RAISED
*ZC    564         GO    TO,HEXBIGQ
         J     PG_HEXBIGQ
PG_IF_2_1    DS    0H  &TYPE
*             MOVE 1 TO DEPCTRL.
*      *  LA    R6,1               CROSS CHECK ITEM NUMBER
*      *  LA    R8,20              R8=ITEMS TO WRITE
*      *  HEXQ1    EQU   *
*      *  STH   R6,HWORLD          SAVE ITEM NUMBER
*      *  EXEC  CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HWORLD) LENGTH(13)
*      *  AHI   R6,1               ITEM COUNT
*      *  BCT   R8,HEXQ1           LOOP
*ZC    571         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             MOVE 1 TO HEXCOUNT.
*ZC    579         MOVE  1,TO,HEXCOUNT
          MVHHI HEXCOUNT,1
*         HEXQ1.
PG_HEXBIGQ_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_HEXQ1 DS    0H
*             MOVE HEXCOUNT TO HWORLDEX.
*ZC    581         MOVE  HEXCOUNT,TO,HWORLDEX
         MVC   HWORLDEX,HEXCOUNT  ALIGN LEFT X OTHER
*             EXEC CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HWORLD)
*ZC    582         EXEC  CICS,WRITEQ,TS,QUEUE(HEXQNAME),FROM(HWORLD),LEX
               NGTH(13)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R15,P0A02QNM       ADDRESS TARGET
         MVC   0(8,R15),HEXQNAME    SET QUEUE NAME FROM LABEL
         LARL  R1,=CL8' '         ADDRESS SOURCE
         LARL  R15,P0A02QNM+8        ADDRESS TARGET AS LABEL
         MVC   0(8,R15),0(R1) MVC IT
         LA    R0,HWORLD           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,13         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1947 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1947    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1947   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1947   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1947) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1947    DS 0H
*                       LENGTH(13) END-EXEC.
*             ADD 1 TO HEXCOUNT.
*ZC    584         ADD   1,TO,HEXCOUNT
         LH    ZC_R0,HEXCOUNT
         AHI   ZC_R0,1
         STH   ZC_R0,HEXCOUNT
*             IF HEXCOUNT NOT = 21 THEN GO TO HEXQ1.
*ZC    585         IF    HEXCOUNT,NOT,=,21,THEN
         LH    0,HEXCOUNT
         CHI   0,21
         BRC   15-ZC_NE,PG_IF_3_1
*      *  LA    R8,20              R8=ITEMS TO WRITE
*      * HEXQ2    EQU   *
*      *  STH   R6,HWORLDAS        SAVE ITEM NUMBER
*      *  EXEC  CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HWORLDAS) LENGTH(13X
                              )
*      *  AHI   R6,1               ITEM COUNT
*      *  BCT   R8,HEXQ2           LOOP
*ZC    585         GO    TO,HEXQ1
         J     PG_HEXQ1
PG_IF_3_1    DS    0H  &TYPE
*             MOVE 1 TO HEXCOUNT.
*ZC    592         MOVE  1,TO,HEXCOUNT
          MVHHI HEXCOUNT,1
*         HEXQ2.
PG_HEXQ1_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_HEXQ2 DS    0H
*             MOVE HEXCOUNT TO HWORLDAX.
*ZC    594         MOVE  HEXCOUNT,TO,HWORLDAX
         MVC   HWORLDAX,HEXCOUNT  ALIGN LEFT X OTHER
*             EXEC CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HWORLDAS)
*ZC    595         EXEC  CICS,WRITEQ,TS,QUEUE(HEXQNAME),FROM(HWORLDAS),X
               LENGTH(13)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R15,P0A02QNM       ADDRESS TARGET
         MVC   0(8,R15),HEXQNAME    SET QUEUE NAME FROM LABEL
         LARL  R1,=CL8' '         ADDRESS SOURCE
         LARL  R15,P0A02QNM+8        ADDRESS TARGET AS LABEL
         MVC   0(8,R15),0(R1) MVC IT
         LA    R0,HWORLDAS           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,13         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_1997 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_1997    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_1997   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_1997   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_1997) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_1997    DS 0H
*                       LENGTH(13) END-EXEC.
*             ADD 1 TO HEXCOUNT.
*ZC    597         ADD   1,TO,HEXCOUNT
         LH    ZC_R0,HEXCOUNT
         AHI   ZC_R0,1
         STH   ZC_R0,HEXCOUNT
*             IF HEXCOUNT NOT = 21 THEN GO TO HEXQ2.
*ZC    598         IF    HEXCOUNT,NOT,=,21,THEN
         LH    0,HEXCOUNT
         CHI   0,21
         BRC   15-ZC_NE,PG_IF_4_1
*      *  LA    R8,20              R8=ITEMS TO WRITE
*      *  HEXQ3    EQU   *
*      *  STH   R6,HEXCOUNT        SAVE ITEM NUMBER
*      *  EXEC  CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HEXCOUNT) LENGTH(72X
                              )
*      *  AHI   R6,1               ITEM COUNT
*      *  BCT   R8,HEXQ3           LOOP
*ZC    598         GO    TO,HEXQ2
         J     PG_HEXQ2
PG_IF_4_1    DS    0H  &TYPE
*             MOVE 1 TO HEXCOUNT.
*ZC    605         MOVE  1,TO,HEXCOUNT
          MVHHI HEXCOUNT,1
*         HEXQ3.
PG_HEXQ2_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_HEXQ3 DS    0H
*             EXEC CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HEXCOUNT)
*ZC    607         EXEC  CICS,WRITEQ,TS,QUEUE(HEXQNAME),FROM(HEXCOUNT),X
               LENGTH(72)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R15,P0A02QNM       ADDRESS TARGET
         MVC   0(8,R15),HEXQNAME    SET QUEUE NAME FROM LABEL
         LARL  R1,=CL8' '         ADDRESS SOURCE
         LARL  R15,P0A02QNM+8        ADDRESS TARGET AS LABEL
         MVC   0(8,R15),0(R1) MVC IT
         LA    R0,HEXCOUNT           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,72         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_2039 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_2039    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_2039   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_2039   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_2039) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_2039    DS 0H
*                       LENGTH(72) END-EXEC.
*             ADD 1 TO HEXCOUNT.
*ZC    609         ADD   1,TO,HEXCOUNT
         LH    ZC_R0,HEXCOUNT
         AHI   ZC_R0,1
         STH   ZC_R0,HEXCOUNT
*             IF HEXCOUNT NOT = 21 THEN GO TO HEXQ3.
*ZC    610         IF    HEXCOUNT,NOT,=,21,THEN
         LH    0,HEXCOUNT
         CHI   0,21
         BRC   15-ZC_NE,PG_IF_5_1
*      *  LA    R8,20              R8=ITEMS TO WRITE
*      *  HEXQ4    EQU   *
*      *  STH   R6,HEXCOUNT        SAVE ITEM NUMBER
*      *  EXEC  CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HEXCOUNT) LENGTH(36X
                              )
*      *  AHI   R6,1               ITEM COUNT
*      *  BCT   R8,HEXQ4           LOOP
*ZC    610         GO    TO,HEXQ3
         J     PG_HEXQ3
PG_IF_5_1    DS    0H  &TYPE
*             MOVE 1 TO HEXCOUNT.
*ZC    617         MOVE  1,TO,HEXCOUNT
          MVHHI HEXCOUNT,1
*         HEXQ4.
PG_HEXQ3_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_HEXQ4 DS    0H
*             EXEC CICS WRITEQ TS QUEUE(HEXQNAME) FROM(HEXCOUNT)
*ZC    619         EXEC  CICS,WRITEQ,TS,QUEUE(HEXQNAME),FROM(HEXCOUNT),X
               LENGTH(36)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R15,P0A02QNM       ADDRESS TARGET
         MVC   0(8,R15),HEXQNAME    SET QUEUE NAME FROM LABEL
         LARL  R1,=CL8' '         ADDRESS SOURCE
         LARL  R15,P0A02QNM+8        ADDRESS TARGET AS LABEL
         MVC   0(8,R15),0(R1) MVC IT
         LA    R0,HEXCOUNT           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LAY   R0,36         SET NUMERIC LENGTH
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_2081 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_2081    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_2081   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_2081   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_2081) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02BYP_2081    DS 0H
*                       LENGTH(36) END-EXEC.
*             ADD 1 TO HEXCOUNT.
*ZC    621         ADD   1,TO,HEXCOUNT
         LH    ZC_R0,HEXCOUNT
         AHI   ZC_R0,1
         STH   ZC_R0,HEXCOUNT
*             IF HEXCOUNT NOT = 21 THEN GO TO HEXQ4.
*ZC    622         IF    HEXCOUNT,NOT,=,21,THEN
         LH    0,HEXCOUNT
         CHI   0,21
         BRC   15-ZC_NE,PG_IF_6_1
*ZC    622         GO    TO,HEXQ4
         J     PG_HEXQ4
PG_IF_6_1    DS    0H  &TYPE
*             EXEC CICS SEND FROM(CEBRMSG2) LENGTH(CEBR2LEN) END-EXEC.
*ZC    623         EXEC  CICS,SEND,FROM(CEBRMSG2),LENGTH(CEBR2LEN)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),CEBR2LEN   SET LENGTH FROM LABEL
         LA    R0,CEBRMSG2           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_2115 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_2115    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_2115   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_2115   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_2115) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_2115    DS 0H
*             EXEC CICS SEND FROM(ENDMSG) LENGTH(ENDMSGL) END-EXEC.
*ZC    624         EXEC  CICS,SEND,FROM(ENDMSG),LENGTH(ENDMSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),ENDMSGL   SET LENGTH FROM LABEL
         LA    R0,ENDMSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_2128 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_2128    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_2128   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_2128   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_2128) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_2128    DS 0H
*             EXEC CICS RETURN END-EXEC.
*ZC    625         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,P0E08EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E08EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E08EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E08EDF_2141 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E08EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_2141 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
P0E08EDF_2141    EQU *
         BR    R15                GO TO IT
*
P0E08RTN_2141    EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_2141   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08CHN DS    CL16               CHANNEL NAME
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E08EDS DS    AL4                DSA ADDRESS FOR EDF
P0E08EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E08EDL DS    XL2                DSA LENGTH FOR EDF
P0E08NED DS    X                  FF=NOEDF
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
*
P0E08BYP_2141    DS 0H
*      * HANDLE ROUTINES
*      * BED9QID  DS    0H
*      *  MVC   QWTSBA,QOP6        MOVE WCC,SBA FOR QIDERR 1
*      *  CLI   QIDNUM,C'1'        1ST QIDERR ?
*      *  BE    BED9QDOK           EXIT IF IT IS
*      *  MVC   QWTSBA,QOP14       MOVE WCC,SBA FOR QIDERR 2
*      *  CLI   QIDNUM,C'2'        2ND QIDERR ?
*      *  BE    BED9QDOK           EXIT IF IT IS
*      *  MVC   QWTSBA,QOP2C2      MOVE WCC,SBA FOR QIDERR 3
*      *  BED9QDOK EQU   *
*      *  MVC   QHANDCON,=C'QIDERR ' MOVE CONDITION
*      *  B     QWTHSEND           EXIT
*         BEC9QID.
PG_HEXQ4_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9QID DS  0H
*             GO TO QID1 QID2 QID3 DEPENDING ON QIDNUM.
*ZC    641         GO    TO,QID1,QID2,QID3,DEPENDING,ON,QIDNUM
         LH    ZC_R1,QIDNUM
         CHI   ZC_R1,1
         JL    PG_ZC_GO_TAB_1+4*3
         CHI   ZC_R1,3
         JH    PG_ZC_GO_TAB_1+4*3
         SLL   ZC_R1,2
         LARL  ZC_R2,PG_ZC_GO_TAB_1-4
         B     0(ZC_R1,ZC_R2)
PG_ZC_GO_TAB_1 DS  0H  &TYPE
         J     PG_QID1
         J     PG_QID2
         J     PG_QID3
*             GO TO ABEND.
*ZC    642         GO    TO,ABEND
         J     PG_ABEND
*         QID1.
PG_BEC9QID_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_QID1  DS    0H
*             MOVE QOP6 TO QWTSBA.
*ZC    644         MOVE  QOP6,TO,QWTSBA
         MVC   QWTSBA,QOP6  ALIGN LEFT X OTHER
*             GO TO QIDEND.
*ZC    645         GO    TO,QIDEND
         J     PG_QIDEND
*         QID2.
PG_QID1_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_QID2  DS    0H
*             MOVE QOP14 TO QWTSBA.
*ZC    647         MOVE  QOP14,TO,QWTSBA
         MVC   QWTSBA,QOP14  ALIGN LEFT X OTHER
*             GO TO QIDEND.
*ZC    648         GO    TO,QIDEND
         J     PG_QIDEND
*         QID3.
PG_QID2_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_QID3  DS    0H
*             MOVE QOP2C2 TO QWTSBA.
*ZC    650         MOVE  QOP2C2,TO,QWTSBA
         MVC   QWTSBA,QOP2C2  ALIGN LEFT X OTHER
*         QIDEND.
PG_QID3_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_QIDEND DS   0H
*             MOVE 'QIDERR ' TO QHANDCON.
*ZC    652         MOVE  'QIDERR ',TO,QHANDCON
         LARL  ZC_R1,=CL8'QIDERR '
          MVC   QHANDCON,0(ZC_R1)
*             GO TO QWTHSEND.
*      *  BED9ITM  DS    0H
*      *  MVC   QWTSBA,QOP8        MOVE WCC,SBA FOR ITEMERR 1
*      *  CLI   ITMNUM,C'2'        2ND ITMERR ?
*      *  BNE   BED9ITOK           EXIT IF NOT
*      *  MVC   QWTSBA,QOP20       MOVE WCC,SBA FOR ITEMERR 2
*      *  BED9ITOK EQU   *
*      *  MVC   QHANDCON,=C'ITEMERR' MOVE CONDITION
*      *  B     QWTHSEND           EXIT
*ZC    653         GO    TO,QWTHSEND
         J     PG_QWTHSEND
*         BEC9ITM.
PG_QIDEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9ITM DS  0H
*             GO TO ITM1 ITM2 DEPENDING ON ITMNUM.
*ZC    663         GO    TO,ITM1,ITM2,DEPENDING,ON,ITMNUM
         LH    ZC_R1,ITMNUM
         CHI   ZC_R1,1
         JL    PG_ZC_GO_TAB_2+4*2
         CHI   ZC_R1,2
         JH    PG_ZC_GO_TAB_2+4*2
         SLL   ZC_R1,2
         LARL  ZC_R2,PG_ZC_GO_TAB_2-4
         B     0(ZC_R1,ZC_R2)
PG_ZC_GO_TAB_2 DS  0H  &TYPE
         J     PG_ITM1
         J     PG_ITM2
*             GO TO ABEND.
*ZC    664         GO    TO,ABEND
         J     PG_ABEND
*         ITM1.
PG_BEC9ITM_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ITM1  DS    0H
*             MOVE QOP8 TO QWTSBA.
*ZC    666         MOVE  QOP8,TO,QWTSBA
         MVC   QWTSBA,QOP8  ALIGN LEFT X OTHER
*             GO TO ITMEND.
*ZC    667         GO    TO,ITMEND
         J     PG_ITMEND
*         ITM2.
PG_ITM1_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ITM2  DS    0H
*             MOVE QOP20 TO QWTSBA.
*ZC    669         MOVE  QOP20,TO,QWTSBA
         MVC   QWTSBA,QOP20  ALIGN LEFT X OTHER
*         ITMEND.
PG_ITM2_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ITMEND DS   0H
*             MOVE 'ITEMERR' TO QHANDCON.
*ZC    671         MOVE  'ITEMERR',TO,QHANDCON
         LARL  ZC_R1,=CL8'ITEMERR'
          MVC   QHANDCON,0(ZC_R1)
*             GO TO QWTHSEND.
*      *  BED9LNG  DS    0H
*      *  MVC   QWTSBA,QOP10       MOVE WCC,SBA FOR LENGERR 1
*      *  CLI   LNGNUM,C'2'        2ND LENGERR ?
*      *  BNE   BED9LNOK           EXIT IF NOT
*      *  MVC   QWTSBA,QOP4C2      MOVE WCC,SBA FOR ITEMERR 2
*      *  BED9LNOK EQU   *
*      *  MVC   QHANDCON,=C'LENGERR' MOVE CONDITION
*      *  B     QWTHSEND           EXIT
*ZC    672         GO    TO,QWTHSEND
         J     PG_QWTHSEND
*         BEC9LNG.
PG_ITMEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9LNG DS  0H
*             GO TO LNG1 LNG2 DEPENDING ON LNGNUM.
*ZC    682         GO    TO,LNG1,LNG2,DEPENDING,ON,LNGNUM
         LH    ZC_R1,LNGNUM
         CHI   ZC_R1,1
         JL    PG_ZC_GO_TAB_3+4*2
         CHI   ZC_R1,2
         JH    PG_ZC_GO_TAB_3+4*2
         SLL   ZC_R1,2
         LARL  ZC_R2,PG_ZC_GO_TAB_3-4
         B     0(ZC_R1,ZC_R2)
PG_ZC_GO_TAB_3 DS  0H  &TYPE
         J     PG_LNG1
         J     PG_LNG2
*             GO TO ABEND.
*ZC    683         GO    TO,ABEND
         J     PG_ABEND
*         LNG1.
PG_BEC9LNG_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_LNG1  DS    0H
*             MOVE QOP10 TO QWTSBA.
*ZC    685         MOVE  QOP10,TO,QWTSBA
         MVC   QWTSBA,QOP10  ALIGN LEFT X OTHER
*             GO TO LNGEND.
*ZC    686         GO    TO,LNGEND
         J     PG_LNGEND
*         LNG2.
PG_LNG1_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_LNG2  DS    0H
*             MOVE QOP4C2 TO QWTSBA.
*ZC    688         MOVE  QOP4C2,TO,QWTSBA
         MVC   QWTSBA,QOP4C2  ALIGN LEFT X OTHER
*         LNGEND.
PG_LNG2_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_LNGEND DS   0H
*             MOVE 'LENGERR' TO QHANDCON.
*ZC    690         MOVE  'LENGERR',TO,QHANDCON
         LARL  ZC_R1,=CL8'LENGERR'
          MVC   QHANDCON,0(ZC_R1)
*             GO TO QWTHSEND.
*      *  BED9INV  DS    0H
*      *  MVC   QWTSBA,QOP16       MOVE WCC,SBA
*      *  MVC   QHANDCON,=C'INVREQ ' MOVE CONDITION
*ZC    691         GO    TO,QWTHSEND
         J     PG_QWTHSEND
*         BEC9INV.
PG_LNGEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BEC9INV DS  0H
*             MOVE QOP16 TO QWTSBA.
*ZC    696         MOVE  QOP16,TO,QWTSBA
         MVC   QWTSBA,QOP16  ALIGN LEFT X OTHER
*             MOVE 'INVREQ ' TO QHANDCON.
*      *  QWTHSEND EQU   *
*      *  MVC   QWTMSG,QHANDCON    MOVE MESSAGE TEXT
*      *  EXEC  CICS SEND FROM(QWT) LENGTH(QHANDL)
*      *  BR    R7                 RETURN TO MAIN LINE
*ZC    697         MOVE  'INVREQ ',TO,QHANDCON
         LARL  ZC_R1,=CL8'INVREQ '
          MVC   QHANDCON,0(ZC_R1)
*         QWTHSEND.
PG_BEC9INV_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_QWTHSEND DS 0H
*             MOVE QHAND TO QWTMSG.
*ZC    703         MOVE  QHAND,TO,QWTMSG
         MVC   QWTMSG,QHAND  ALIGN LEFT X OTHER
*             EXEC CICS SEND FROM(QWT) LENGTH(QHANDL) END-EXEC.
*ZC    704         EXEC  CICS,SEND,FROM(QWT),LENGTH(QHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),QHANDL   SET LENGTH FROM LABEL
         LA    R0,QWT           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_2346 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_2346    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_2346   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_2346   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_2346) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_2346    DS 0H
*             GO TO ABEND BEC9RTN1 BEC9RTN2 BEC9RTN3 BEC9RTN4
*                         BEC9RTN5 BEC9RTN6 BEC9RTN7 BEC9RTN8
*                   DEPENDING ON DEPCTRL.
*ZC    705         GO    TO,ABEND,BEC9RTN1,BEC9RTN2,BEC9RTN3,BEC9RTN4,BX
               EC9RTN5,BEC9RTN6,BEC9RTN7,BEC9RTN8,DEPENDING,ON,DEPCTRL
         LH    ZC_R1,DEPCTRL
         CHI   ZC_R1,1
         JL    PG_ZC_GO_TAB_4+4*9
         CHI   ZC_R1,9
         JH    PG_ZC_GO_TAB_4+4*9
         SLL   ZC_R1,2
         LARL  ZC_R2,PG_ZC_GO_TAB_4-4
         B     0(ZC_R1,ZC_R2)
PG_ZC_GO_TAB_4 DS  0H  &TYPE
         J     PG_ABEND
         J     PG_BEC9RTN1
         J     PG_BEC9RTN2
         J     PG_BEC9RTN3
         J     PG_BEC9RTN4
         J     PG_BEC9RTN5
         J     PG_BEC9RTN6
         J     PG_BEC9RTN7
         J     PG_BEC9RTN8
*         ABEND.
PG_QWTHSEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ABEND DS    0H
*             EXEC CICS ABEND ABCODE('BEC9') END-EXEC.
*ZC    709         EXEC  CICS,ABEND,ABCODE('BEC9')
         LARL  R1,P0E0C         ADDRESS SOURCE
         LARL  R15,P0E0C        ADDRESS TARGET
         XC    0(P0E0CEND-P0E0C,R15),0(R1) XC IT
         LARL  R1,=X'0E0C'         ADDRESS SOURCE
         LARL  R15,P0E0CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CFN,R15),0(R1) MVC IT
         LARL  R1,=CL4'BEC9'         ADDRESS SOURCE
         LARL  R15,CICS_ABEND_2378_ABCODE        ADDRESS TARGET AS LABEX
               L
         MVC   0(L'CICS_ABEND_2378_ABCODE,R15),0(R1) MVC IT
         LARL  R1,=CL4'BEC9'         ADDRESS SOURCE
         LARL  R15,P0E0CABC        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CABC,R15),0(R1) MVC IT
         LARL  R1,P0E0CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0E0CEDF_2378 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0C)       R1=LCL MODULE PARAMETER LIST
P0E0CEDF_2378    EQU *
         BAKR  0,R15              STACK REGS AND GO
         DC    X'0000'            ABEND POINT
         DC    X'FE'              FE=TAKE DUMP  FF=NODUMP
         DC    C'ABEND'           MARKER
CICS_ABEND_2378_ABCODE     DC CL4' ' ABEND CODE IF ANY
*
P0E0C    DS    0H
P0E0CFN  DS    XL2                FUNCTION CODE
P0E0CEIB DS    AL4                EIB
P0E0CTCT DS    AL4                TCTTE
P0E0CABC DS    CL4                ABCODE
P0E0CNOD DS    X                  FF=NODUMP
         DS    X
P0E0CCAN DS    X                  FF=CANCEL
         DS    X
P0E0CEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E0CEDS DS    AL4                DSA ADDRESS FOR EDF
P0E0CEDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E0CEDL DS    XL2                DSA LENGTH FOR EDF
P0E0CNED DS    X                  FF=NOEDF
         DS    X
P0E0CNOH DS    X                  FF=NOHANDLE
         DS    X
P0E0CRSP DS    AL4                RESP
P0E0CRS2 DS    AL4                RESP2
P0E0CEND EQU   *                  END MARKER
*
PG_ABEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  TSREC                          00000080 000000C8 1   X   X(200X
               )      
*    01  TSNUMIT                        00000148 00000002 1   H   9(4) X
                      
*    01  QWT                            0000014A 0000002B 1   X        X
                      
*    02  QWTSBA                         0000014A 00000004 1   X   X(4) X
                      
*    02  QWTMSG                         0000014E 00000027 1   X   X(39)X
                      
*    01  QOP1                           00000175 00000004 1   X   X(4) X
                     X''C311C260'' 
*    01  QOP2                           00000179 00000004 1   X   X(4) X
                     X''C311C3F0'' 
*    01  QOP3                           0000017D 00000004 1   X   X(4) X
                     X''C311C540'' 
*    01  QOP4                           00000181 00000004 1   X   X(4) X
                     X''C311C650'' 
*    01  QOP5                           00000185 00000004 1   X   X(4) X
                     X''C311C760'' 
*    01  QOP6                           00000189 00000004 1   X   X(4) X
                     X''C311C8F0'' 
*    01  QOP7                           0000018D 00000004 1   X   X(4) X
                     X''C3114A40'' 
*    01  QOP8                           00000191 00000004 1   X   X(4) X
                     X''C3114B50'' 
*    01  QOP9                           00000195 00000004 1   X   X(4) X
                     X''C3114C60'' 
*    01  QOP10                          00000199 00000004 1   X   X(4) X
                     X''C3114DF0'' 
*    01  QOP11                          0000019D 00000004 1   X   X(4) X
                     X''C3114F40'' 
*    01  QOP12                          000001A1 00000004 1   X   X(4) X
                     X''C3115050'' 
*    01  QOP13                          000001A5 00000004 1   X   X(4) X
                     X''C311D160'' 
*    01  QOP14                          000001A9 00000004 1   X   X(4) X
                     X''C311D2F0'' 
*    01  QOP15                          000001AD 00000004 1   X   X(4) X
                     X''C311D440'' 
*    01  QOP16                          000001B1 00000004 1   X   X(4) X
                     X''C311D550'' 
*    01  QOP17                          000001B5 00000004 1   X   X(4) X
                     X''C311D660'' 
*    01  QOP18                          000001B9 00000004 1   X   X(4) X
                     X''C311D7F0'' 
*    01  QOP19                          000001BD 00000004 1   X   X(4) X
                     X''C311D940'' 
*    01  QOP20                          000001C1 00000004 1   X   X(4) X
                     X''C3115A50'' 
*    01  QOP1C2                         000001C5 00000004 1   X   X(4) X
                     X''C311C3C8'' 
*    01  QOP2C2                         000001C9 00000004 1   X   X(4) X
                     X''C311C4D8'' 
*    01  QOP3C2                         000001CD 00000004 1   X   X(4) X
                     X''C311C5E8'' 
*    01  QOP4C2                         000001D1 00000004 1   X   X(4) X
                     X''C311C6F8'' 
*    01  QOP                            000001D5 00000027 1   X        X
                      
*    02  ZC_FILLER_V1                   000001D5 00000006 1   X   X(6) X
                     ''QUEUE '' 
*    02  QOPNAME                        000001DB 00000010 1   X   X(16)X
                      
*    02  ZC_FILLER_V2                   000001EB 00000006 1   X   X(6) X
                     '' ITEM '' 
*    02  QOPITEM                        000001F1 00000001 1   X   X    X
                      
*    02  ZC_FILLER_V3                   000001F2 00000001 1   X   X    X
                     SPACE 
*    02  QOPTYPE                        000001F3 00000007 1   X   X(7) X
                     ''WRITE  '' 
*    02  ZC_FILLER_V4                   000001FA 00000001 1   X   X    X
                     SPACE 
*    02  QOPSEP                         000001FB 00000001 1   X   X    X
                     ''|'' 
*    01  QHAND                          000001FC 00000027 1   X        X
                      
*    02  QHANDCON                       000001FC 00000007 1   X   X(7) X
                     SPACES 
*    02  ZC_FILLER_V5                   00000203 0000001F 1   X   X(31)X
                     '' CONDITION RAISED              '' 
*    02  QHSEP                          00000222 00000001 1   X   X    X
                     ''|'' 
*    01  QHANDL                         00000223 00000002 1   H   9(4) X
                      
*    01  CEBRMSG1                       00000225 0000001F 1   X        X
                      
*    02  ZC_FILLER_V6                   00000225 00000004 1   X   X(4) X
                     X''C311C8C8'' 
*    02  ZC_FILLER_V7                   00000229 0000001B 1   X   X(27)X
                     ''CEBR QUEUE BUILDING STARTED'' 
*    01  CEBR1LEN                       00000244 00000002 1   H   9(4) X
                      
*    01  CEBRMSG2                       00000246 0000001D 1   X        X
                      
*    02  ZC_FILLER_V8                   00000246 00000004 1   X   X(4) X
                     X''C311C9D8'' 
*    02  ZC_FILLER_V9                   0000024A 00000019 1   X   X(25)X
                     ''CEBR QUEUE BUILDING ENDED'' 
*    01  CEBR2LEN                       00000263 00000002 1   H   9(4) X
                      
*    01  ENDMSG                         00000265 00000023 1   X        X
                      
*    02  ZC_FILLER_V10                  00000265 00000004 1   X   X(4) X
                     X''C3115CF0'' 
*    02  ZC_FILLER_V11                  00000269 0000001F 1   X   X(31)X
                     ''TESTBEC9 COMPLETED, PRESS CLEAR'' 
*    01  ENDMSGL                        00000288 00000002 1   H   9(4) X
                      
*    01  LEN                            0000028A 00000002 1   H   9(4) X
                     0 
*    01  HEXQNAME                       0000028C 00000008 1   X   X(8) X
                     X''02CB458F40404040'' 
*    01  HWORLD                         00000294 0000000D 1   X        X
                      
*    02  HWORLDEX                       00000294 00000002 1   H   9(4) X
                     0 
*    02  ZC_FILLER_V12                  00000296 0000000B 1   X   X(11)X
                     ''HELLO WORLD'' 
*    01  HWORLDAS                       000002A1 0000000D 1   X        X
                      
*    02  HWORLDAX                       000002A1 00000002 1   H   9(4) X
                     0 
*    02  ZC_FILLER_V13                  000002A3 0000000B 1   X   X(11)X
                     X''48454C4C4F20574F524C44'' 
*    01  DEPCTRL                        000002AE 00000002 1   H   9(4) X
                      
*    01  HEXCOUNT                       000002B0 00000002 1   H   9(4) X
                      
*    01  HEXTAB                         000002B2 00000100 1   X   X(256X
               )     X''000102030405060708090A0B0C0D0E0F101112131415161X
               718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F3031323X
               33435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4X
               F505152535455565758595A5B5C5D5E5F606162636465666768696A6X
               B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868X
               788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2AX
               3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBX
               FC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADX
               BDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6FX
               7F8F9FAFBFCFDFEFF'' 
*    01  HEXINTAB                       000002B2 00000010 16   X   X(16X
               )       
*    01  HEXTAB16                       000003B2 00000010 1   X   X(16)X
                      
*    01  QIDNUM                         000003C2 00000002 1   H   9(4) X
                      
*    01  ITMNUM                         000003C4 00000002 1   H   9(4) X
                      
*    01  LNGNUM                         000003C6 00000002 1   H   9(4) X
                      
*    01  ZC_WS_ID1                      000003C8 00000007 1   X   X(7) X
                     ''ZCWSID1'' 
*    01  DEBUG_ITEM                     000003CF 00000058 1   X        X
                      
*    02  DEBUG_LINE                     000003CF 00000006 1   X   X(6) X
                      
*    02  ZC_FILLER_V14                  000003D5 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     000003D6 0000001E 1   X   X(30)X
                      
*    02  ZC_FILLER_V15                  000003F4 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    000003F5 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V16                  000003F9 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    000003FA 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V17                  000003FE 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    000003FF 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V18                  00000403 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 00000404 00000023 1   X   X(35)X
                      
*    01  TRUE                           00000427 00000001 1   Z   9    X
                     1 
*    01  FALSE                          00000428 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    00000429 00000002 1   H   9(4) X
                     0 
*    01  ZC_TSRECLK_PTR                 0000042B 00000004 1   A        X
                      
*    01  ZC_DFHCOMMAREA_PTR             0000042F 00000004 1   A        X
                      
*    01  ZC_DFHEIBLK_PTR                00000433 00000004 1   A        X
                      
*    01  ZC_ZC_LK_END_PTR               00000437 00000004 1   A        X
                      
DFHEISTG DSECT 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TSREC    DS  CL200
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TSNUMIT  DS  HL2
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QWT      DS  0CL43
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QWTSBA   DS  CL4
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QWTMSG   DS  CL39
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP1     DC XL4'C311C260'
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP2     DC XL4'C311C3F0'
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP3     DC XL4'C311C540'
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP4     DC XL4'C311C650'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP5     DC XL4'C311C760'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP6     DC XL4'C311C8F0'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP7     DC XL4'C3114A40'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP8     DC XL4'C3114B50'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP9     DC XL4'C3114C60'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP10    DC XL4'C3114DF0'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP11    DC XL4'C3114F40'
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP12    DC XL4'C3115050'
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP13    DC XL4'C311D160'
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP14    DC XL4'C311D2F0'
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP15    DC XL4'C311D440'
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP16    DC XL4'C311D550'
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP17    DC XL4'C311D660'
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP18    DC XL4'C311D7F0'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP19    DC XL4'C311D940'
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP20    DC XL4'C3115A50'
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP1C2   DC XL4'C311C3C8'
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP2C2   DC XL4'C311C4D8'
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP3C2   DC XL4'C311C5E8'
ZC_WS_LOC_29 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP4C2   DC XL4'C311C6F8'
ZC_WS_LOC_30 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOP      DS  0CL39
ZC_WS_LOC_31 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V1 DC CL6'QUEUE '
ZC_WS_LOC_32 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOPNAME  DS  CL16
ZC_WS_LOC_33 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V2 DC CL6' ITEM '
ZC_WS_LOC_34 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOPITEM  DS  CL1
ZC_WS_LOC_35 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V3 DC CL1' '
ZC_WS_LOC_36 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOPTYPE  DC CL7'WRITE  '
ZC_WS_LOC_37 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V4 DC CL1' '
ZC_WS_LOC_38 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QOPSEP   DC CL1'|'
ZC_WS_LOC_39 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QHAND    DS  0CL39
ZC_WS_LOC_40 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QHANDCON DC CL7' '
ZC_WS_LOC_41 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V5 DC CL31' CONDITION RAISED              '
ZC_WS_LOC_42 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QHSEP    DC CL1'|'
ZC_WS_LOC_43 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QHANDL   DS  HL2
ZC_WS_LOC_44 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CEBRMSG1 DS  0CL31
ZC_WS_LOC_45 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V6 DC XL4'C311C8C8'
ZC_WS_LOC_46 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V7 DC CL27'CEBR QUEUE BUILDING STARTED'
ZC_WS_LOC_47 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CEBR1LEN DS  HL2
ZC_WS_LOC_48 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CEBRMSG2 DS  0CL29
ZC_WS_LOC_49 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V8 DC XL4'C311C9D8'
ZC_WS_LOC_50 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V9 DC CL25'CEBR QUEUE BUILDING ENDED'
ZC_WS_LOC_51 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
CEBR2LEN DS  HL2
ZC_WS_LOC_52 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ENDMSG   DS  0CL35
ZC_WS_LOC_53 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V10 DC XL4'C3115CF0'
ZC_WS_LOC_54 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V11 DC CL31'TESTBEC9 COMPLETED, PRESS CLEAR'
ZC_WS_LOC_55 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ENDMSGL  DS  HL2
ZC_WS_LOC_56 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LEN      DC AL2(0)                  RPI 1065
ZC_WS_LOC_57 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HEXQNAME DC XL8'02CB458F40404040'
ZC_WS_LOC_58 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HWORLD   DS  0CL13
ZC_WS_LOC_59 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HWORLDEX DC AL2(0)                  RPI 1065
ZC_WS_LOC_60 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V12 DC CL11'HELLO WORLD'
ZC_WS_LOC_61 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HWORLDAS DS  0CL13
ZC_WS_LOC_62 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HWORLDAX DC AL2(0)                  RPI 1065
ZC_WS_LOC_63 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V13 DC XL11'48454C4C4F20574F524C44'
ZC_WS_LOC_64 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEPCTRL  DS  HL2
ZC_WS_LOC_65 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HEXCOUNT DS  HL2
ZC_WS_LOC_66 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HEXTAB   DC XL256'000102030405060708090A0B0C0D0E0F101112131415161718191X
               A1B1C1D1E1F202122232425262728292A2B2C2D2E2F3031323334353X
               63738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515X
               2535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6X
               E6F707172737475767778797A7B7C7D7E7F808182838485868788898X
               A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5AX
               6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1CX
               2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDX
               EDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FX
               AFBFCFDFEFF'
         ORG   HEXTAB  START REDEFINE
ZC_WS_LOC_67 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HEXINTAB DS  16CL16
ZC_WS_LOC_68 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HEXTAB16 DS  CL16
ZC_WS_LOC_69 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QIDNUM   DS  HL2
ZC_WS_LOC_70 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ITMNUM   DS  HL2
ZC_WS_LOC_71 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LNGNUM   DS  HL2
ZC_WS_LOC_72 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID1 DC CL7'ZCWSID1'
ZC_WS_LOC_96 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_97 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_98 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V14 DC CL1' '
ZC_WS_LOC_99 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_100 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V15 DC CL1' '
ZC_WS_LOC_101 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_102 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V16 DC CL1' '
ZC_WS_LOC_103 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_104 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V17 DC CL1' '
ZC_WS_LOC_105 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_106 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V18 DC CL1' '
ZC_WS_LOC_107 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_108 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_109 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_110 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
ZC_WS_LOC_111 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_TSRECLK_PTR DS AL4
ZC_WS_LOC_112 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHCOMMAREA_PTR DS AL4
ZC_WS_LOC_113 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHEIBLK_PTR DS AL4
ZC_WS_LOC_114 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_ZC_LK_END_PTR DS AL4
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  TSRECLK                        00000000 000000C8 1   X   X(200X
               )      
*    01  DFHCOMMAREA                    00000000 00000054 1   X        X
                      
*    01  DFHEIBLK                       00000000 00000054 1   X        X
                      
*    02  EIBHEAD                        00000000 00000008 1   X   X(8) X
                      
*    02  EIBTIME                        00000008 00000004 1   P   9(7) X
                      
*    02  EIBDATE                        0000000C 00000004 1   P   9(7) X
                      
*    02  EIBTRNID                       00000010 00000004 1   X   X(4) X
                      
*    02  EIBTASKN                       00000014 00000004 1   P   9(7) X
                      
*    02  EIBTRMID                       00000018 00000004 1   X   X(4) X
                      
*    02  FILLER                         0000001C 00000002 1   X   X(2) X
                      
*    02  EIBCPOSN                       0000001E 00000002 1   H   9(4) X
                      
*    02  EIBCALEN                       00000020 00000002 1   H   9(4) X
                      
*    02  EIBAID                         00000022 00000001 1   X   X    X
                      
*    02  EIBFN                          00000023 00000002 1   H   9(4) X
                      
*    02  EIBRCODE                       00000025 00000006 1   X   X(6) X
                      
*    02  EIBREQID                       0000002B 00000008 1   X   X(8) X
                      
*    02  EIBDS                          00000033 00000008 1   X   X(8) X
                      
*    02  EIBRSRCE                       0000003B 00000008 1   X   X(8) X
                      
*    02  EIBRESP                        00000043 00000004 1   F   9(9) X
                      
*    02  EIBRESP2                       00000047 00000004 1   F   9(9) X
                      
*    02  EIBPROG                        0000004B 00000008 1   X   X(8) X
                      
*    02  EIBDTFRM                       00000053 00000001 1   X   X    X
                      
*    01  ZC_LK_END                      00000000 00000001 1   X   X    X
                      
DFHEISTG DSECT 
TSRECLK_DSECT DSECT 
ZC_LK_LOC_73 EQU *-TSRECLK CHECK &SYM_NAME(&I) LK LOC
TSRECLK  DS  CL200
DFHCOMMAREA_DSECT DSECT 
ZC_LK_LOC_74 EQU *-DFHCOMMAREA CHECK &SYM_NAME(&I) LK LOC
DFHCOMMAREA DS 0CL84
DFHEIBLK_DSECT DSECT 
ZC_LK_LOC_75 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
DFHEIBLK DS  0CL84
ZC_LK_LOC_76 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBHEAD  DS  CL8
ZC_LK_LOC_77 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTIME  DS  PL4
ZC_LK_LOC_78 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDATE  DS  PL4
ZC_LK_LOC_79 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRNID DS  CL4
ZC_LK_LOC_80 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTASKN DS  PL4
ZC_LK_LOC_81 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRMID DS  CL4
ZC_LK_LOC_82 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
         DS  CL2
ZC_LK_LOC_83 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCPOSN DS  HL2
ZC_LK_LOC_84 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCALEN DS  HL2
ZC_LK_LOC_85 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBAID   DS  CL1
ZC_LK_LOC_86 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBFN    DS  HL2
ZC_LK_LOC_87 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRCODE DS  CL6
ZC_LK_LOC_88 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBREQID DS  CL8
ZC_LK_LOC_89 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDS    DS  CL8
ZC_LK_LOC_90 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRSRCE DS  CL8
ZC_LK_LOC_91 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP  DS  FL4
ZC_LK_LOC_92 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP2 DS  FL4
ZC_LK_LOC_93 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBPROG  DS  CL8
ZC_LK_LOC_94 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDTFRM DS  CL1
ZC_LK_END_DSECT DSECT 
ZC_LK_LOC_95 EQU *-ZC_LK_END CHECK &SYM_NAME(&I) LK LOC
ZC_LK_END DS CL1
DFHEISTG DSECT 
ZC_WS_DIFF EQU  *-ZC_WS-1083  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 114'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 4'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 30'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT 
         ORG 
DFHEIEND EQU   *
         END 
