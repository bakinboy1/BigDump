*    ZCOBOL PGM='cics\TESTVSC1' VER=V1.5.06 05/21/12 13:48:33 
*    ZCOBOL OPTIONS=(CICS) 
         COPY  TESTVSC1_ZC_LABELS.CPY
*      ****************************************************************X
                              *
*      * Copyright 2006 Automated Software Tools Corporation           X
                              *
*      * This source code is part of z390 assembler/emulator package   X
                              *
*      * The z390 package is distributed under GNU general public      X
                              *
*      * license                                                       X
                              *
*      * Author - Don Higgins                                          X
                              *
*      ****************************************************************X
                              *
*         IDENTIFICATION DIVISION.
*      * TEST VSAM 1 (COBOL)
*      * ESDS/VAR MYFILE01 READ RBA  REC  3
*      * ESDS/VAR MYFILE01 READ RBA  REC  2
*      * ESDS/VAR MYFILE01 READ XRBA REC  1
*      * DSIDERR      CONDITION RAISED (FILENOTFOUND)
*      * DISABLED     CONDITION RAISED
*      * NOTOPEN      CONDITION RAISED
*      * NOTFND       CONDITION RAISED (READ INVALID RBA)
*      * LENGERR/11   CONDITION RAISED
*      * INVREQ/20    CONDITION RAISED (OPEN MYFILE02, READ NOT ALLOWEDX
                              )
*      * ILLOGIC/110  CONDITION RAISED (MYFILE01, REC 1, RRN)
*      * ESDS/VAR MYFILE01 BROWSE FORWARD RECS 15-17
*      * ESDS/VAR MYFILE01 BROWSE BACK    RECS 17-15
*      * ESDS/VAR MYFILE01 BROWSE RANDOM  RECS 26,14(PREV=13),18
*      * NOTFND       CONDITION RAISED (READNEXT INVALID RBA)
*      * ENDFILE      CONDITION RAISED (READNEXT RBA AT END)
*      * ENDFILE      CONDITION RAISED (READPREV RBA AT START)
*      * ESDS COMPLEX TEST...DONE IN THIS SEQUENCE
*      *    BROWSE FORWARD MYFILE01 RECS 7-10
*      *    BROWSE BACK    MYFILE01 RECS 10-7
*      *    READ SEQ       MYFILE05 1ST 4 RECS
*      * ESDS/FIX MYFILE05, READ RECS 2-4, RESETBR, READ RECS 8-6
*         PROGRAM-ID. TESTVSC1.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
DFHEIBR  EQU   11
         USING DFHEIBLK_DSECT,DFHEIBR
*
* TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
DFHTCTTE DSECT 
TCTTEHED DS    CL8         'DFHTCTTE'
TCTTETI  DS    CL4         TERMINAL ID
TCTTEDA  DS    AL4         A(TIOA)
TCTTETC  DS    CL4         NEXT TRANSID
TCTTEINT DS    CL4         INITIAL TRANSID
TCTTECA  DS    AL4         RETURN COMMAREA ADDRESS
TCTTECAL DS    XL2         RETURN COMMAREA ADDRESS LENGTH
TCTTELNK DS    XL2         RETURN LINK LEVEL, 0 RETURNS TO Z390KCP
TCTTELKA DS    AL4         LINK LEVEL AREA POINTER
*                          EACH 4-BYTE ENTRY HAS THE DSA ADDRESS
TCTTEABD DS    AL4         HANDLE ABEND BLOCK
TCTTESCC DS    AL4         STORAGE CONTROL CHAIN
TCTTEPCT DS    AL4         ADDRESS OF DFHPCT
TCTTEIMM DS    X           FF=RETURN IMMEDIATE
TCTTETS  DS    X           FF=SHUTDOWN REQUEST
TCTTETYP DS    C           TRANSID START TYPE (FROM Z390KCP/KCPGOTYP)
*                             A = .INI INITIAL TRANSID
*                             B = SCREEN INPUT
*                             C = RETURN TRANSID()
*                             D = IC START-NO DATA
*                             E = IC START-DATA
TCTTECND DS    X           FF=XCTL COMMAREA MUST BE FREED ON RETURN
TCTTEEDF DS    X           FF=EDF IS ACTIVE
TCTTEEBA DS    X           CEDF INTERCEPT INDICATOR
*                             00='BEFORE'
*                             FE='AFTER' LINK/XCTL/RETURN FAIL
*                             FF='AFTER'
TCTTEEDL DS    X           CEDF LINKAGE INDICATOR
*                             00=NORMAL LINKAGE
*                             FE=SPECIAL LINKAGE
*                             FF=DIRECT LINKAGE
TCTTEEDT DS    CL4         TERMID FOR EDF OUTPUT
TCTTEEDA DS    AL4         ADDRESS OF EDF PROCESSOR LCLCEDF
TCTTEQFN DS    PL3         SEQUENTIAL TERMINAL FILE NUMBER
TCTTEQFO DS    X           FF=CURRENT SEQUENTIAL FILE IS OPEN
TCTTEQFL DS    AL4         ADDRESS OF SEQUENTIAL TERMINAL FILENAME
TCTTEQDI DS    AL4         ADDRESS OF RECEIVE DCB
TCTTEQDO DS    AL4         ADDRESS OF SEND DCB
TCTTECWA DS    AL4         ADDRESS OF LOCAL CWA COPY
TCTTECWL DS    XL4         LENGTH OF LOCAL CWA COPY
TCTTELCL DS    AL4         ADDRESS OF LCL MODULE INDEXER
TCTTEIQF DS    X           FF=INQUIRE FILE BROWSE IN PROGRESS
TCTTEIFN DS    CL8         INQUIRE FILE CURRENT POSITION
TCTTECHN DS    CL16        PASSED CHANNEL NAME
TCTTECAQ DS    AL4         ANCHOR FOR CHANNEL CHAIN
TCTTETKN DS    XL4         TOKEN FOR STARTBROWSE CONTAINER
TCTTECHW DS    AL4         ADDRESS OF CHWA (STARTBROWSE CONTAINER)
* FIELDS FOR ASSIGN
TCTTEABP DS    X           ABDUMP INDICATOR
TCTTEABG DS    CL8         ABENDING PROGRAM
TCTTEPSW DS    XL8         ASRA PSW
TCTTEASR DS    XL64        ASRA REGS
TCTTEINV DS    CL8         INVOKING PROGRAM
TCTTERET DS    CL8         RETURN PROGRAM
TCTTELNA EQU   *-TCTTEABP  ASSIGN FIELDS TO CLEAR
TCTTEABC DS    CL4         ABCODE OR BLANK
TCTTENXT DS    CL4         RETURN TRANSID OR BLANK
TCTTEMCL DS    AL2         MAP COLUMN
TCTTEMHT DS    AL2         MAP HEIGHT
TCTTEMLN DS    AL2         MAP LINE
TCTTEMWH DS    AL2         MAP WIDTH
TCTTELEN EQU   *-DFHTCTTE
TCTTEAR  EQU   10
         USING DFHTCTTE,TCTTEAR
R0     EQU 0
R1     EQU 1
R2     EQU 2
R3     EQU 3
R4     EQU 4
R5     EQU 5
R6     EQU 6
R7     EQU 7
R8     EQU 8
R9     EQU 9
R10    EQU 10
R11    EQU 11
R12    EQU 12
R13    EQU 13
R14    EQU 14
R15    EQU 15
TESTVSC1 CSECT 
*            R1 >>> A(EIB,COMMAREA)
*            R2 >>> P0E02 (LINK) OR P0E04 (XCTL) PARMS
* TCTTEAR (R10) >>> TCTTE
* DFHEIBR (R11) >>> EIB
*         (R14) >>> RETURN ADDRESS (LINK ONLY)
*
         L     R2,0(R2)           R2=P0E02/P0E04 PARM POINTER
         STRL  R2,CICS_EIENT_0081_PARMPNTR SAVE IT
* ENTRY IS ONLY BY DIRECT BRANCH FROM MODULES LCL0E02 (LINK)
* OR LCL0E04 (XCTL)
         LR    R2,R1              R2=SAVE USER PARM POINTER
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0081_NOSAVE EXIT IF IT IS
* FIND LAST LINKER AND ESTABLISH LINKAGE
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         AHI   R15,-1             -1
         SLL   R15,2              *4
         L     R1,TCTTELKA        R0=LKA ADDRESS
         AR    R1,R15             INDEX TO LAST LINK-LEVEL ENTRY
         L     R13,0(R1)          SAVE AREA OF LAST LINK-LEVEL
         STM   14,12,12+4*(14-14)(13)
CICS_EIENT_0081_NOSAVE     EQU *
*
* GETMAIN THE DSA, AND SET UP THE CHAIN
*
         IILF  R1,(DFHEIEND-DFHEISTG) R1=DSA LENGTH RPI 1181
         LA    0,B'00'
         SVC   4 GMAIN R0=(X'02'=31B,X'01'=COND),R1=LEN OUT(R0=L,R1=A)
* DON'T SAVE THE REGS IF XCTL, THIS ISN'T A NEW LINK LEVEL
         CHHSI EIBFN,X'0E04'      XCTL ?
         JE    CICS_EIENT_0081_NOSAVE2 EXIT IF IT IS
         ST    R1,8(R13)          SAVE NEW DSA SAVE AREA IN PRIOR SAVE
         ST    R13,4(R1)          SAVE OLD SAVE AREA IN NEW DSA SAVE
CICS_EIENT_0081_NOSAVE2     EQU *
         LR    R13,R1             DSA BASE 1
         USING DFHEISTG,R13
         XC    DFHEICAP(DFHEIUSR-DFHEICAP),DFHEICAP CLEAR PREFIX DSA
*
* SAVE DSA LENGTH
*
         ST    R0,DFHEILEN        SAVE DSA LENGTH FOR FREEMAIN
*
* SET EIB AND COMMAREA ADDRESSES
*
         MVC   DFHEIEIB,0(R2)     SET EIB ADDRESS IN DSA
         MVC   DFHEICAP,4(R2)     SET COMMAREA ADDRESS IN DSA
*
* IF WE CAME FROM XCTL, WE MUST FREE THE PARM STORAGE AREA
*
         CHHSI EIBFN,X'0E04'      XCTL ?
         JNE   CICS_EIENT_0081_01 EXIT IF NOT
         LA    R0,8               LENGTH OF 8
         LR    1,R2
         SVC   5 FREEMAIN R0=LEN, R1=ADDR
         LA    R2,DFHEIEIB        NEW PARM POSITION FOR ZCOBOL
CICS_EIENT_0081_01     DS 0H
*
* FIND OUR LKA ENTRY AND STORE OUR DSA ADDRESS
*
         LH    R15,TCTTELNK       R15=CURRENT LINK LEVEL
         SLL   R15,2              *4
         L     R1,TCTTELKA        R1=LKA ADDRESS
         AR    R1,R15             INDEX TO OUR LINK LEVEL ENTRY
         ST    R13,0(R1)          SAVE OUR DSA ADDRESS
         MVC   DFHEIINV,TCTTEINV  SET INVOKING PROGRAM FOR ASSIGN
         MVC   DFHEIRET,TCTTERET  SET RETURN PROGRAM FOR ASSIGN
         MVC   DFHEICHN,TCTTECHN  SET CHANNEL FOR ASSIGN
*
         CLI   TCTTEEDF,X'FF'     EDF ON ?
         JNE   CICS_EIENT_0081_NOEDFA EXIT IF NOT
* PROGRAM INITIATION
         MVI   TCTTEEBA,X'FF'     SET 'AFTER' INTERCEPT
         MVI   TCTTEEDL,X'FE'     SET SPECIAL LINKAGE
         L     R15,TCTTEEDA       R15=EDF PROCESSOR ADDRESS
         BAKR  0,R15              STACK REGS AND GO
         J     CICS_EIENT_0081_NOEDFA EXIT
CICS_EIENT_0081_PARMPNTR     DS AL4 SAVE P0E02/P0E04 PARM POINTER
*
CICS_EIENT_0081_NOEDFA     DS 0H
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTVSC1'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'05/21/12'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'13.48'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'1'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0091_EOT-*+1)/2*2
         DC    AL2(WTO#0091_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0091_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0092_EOT-*+1)/2*2
         DC    AL2(WTO#0092_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0092_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
ZC390CVT DSECT                ZCOBOL CVT AT ENTRY TO ZC390LIB.390
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
DFHEISTG DSECT 
         DS    18F  SAVE AREA
DFHEIEIB DS    A    EIB POINTER
DFHEICAP DS    A    COMMAREA POINTER
DFHEICAL DS    H    COMMAREA LENGTH, COPY OF EIBCALEN
DFHEILEN DS    A    LENGTH OF DSA SET BY DFHEIENT
DFHEIAID DS    A    ADDRESS OF HANDLE AID BLOCK (DSECT=DFHADBLK)
DFHEIHCN DS    A    ADDRESS OF HANDLE CONDITION BLOCK (DSECT=DFHHCBLK)
DFHEIINV DS    CL8  INVOKING PROGRAM FOR ASSIGN
DFHEIRET DS    CL8  RETURN PROGRAM FOR ASSIGN
DFHEICHN DS    CL16 CHANNEL FOR ASSIGN
DFHEIUSR DS    0D   USER PROGRAM STORAGE (SEE DFHEIEND FOR END)
ZC_WS    EQU   DFHEISTG
*         ENVIRONMENT DIVISION.
*         DATA DIVISION.
         PRINT DATA
*         WORKING-STORAGE SECTION.
*         77  MYDATA   PIC X(50).
*         77  MYLEN    PIC 9(4)  COMP.
*         77  MYRID    PIC 9(8)  COMP.
*         77  MYRID1   PIC 9(8)  COMP.
*         77  MYRID2   PIC 9(9)  COMP.
*         77  MYRID8   PIC 9(18) COMP.
*         77  FOP1     PIC X(4)   VALUE X'C311C260'.
*         77  FOP2     PIC X(4)   VALUE X'C311C3F0'.
*         77  FOP3     PIC X(4)   VALUE X'C311C540'.
*         77  FOP4     PIC X(4)   VALUE X'C311C650'.
*         77  FOP5     PIC X(4)   VALUE X'C311C760'.
*         77  FOP6     PIC X(4)   VALUE X'C311C8F0'.
*         77  FOP7     PIC X(4)   VALUE X'C3114A40'.
*         77  FOP8     PIC X(4)   VALUE X'C3114B50'.
*         77  FOP9     PIC X(4)   VALUE X'C3114C60'.
*         77  FOP10    PIC X(4)   VALUE X'C3114DF0'.
*         77  FOP11    PIC X(4)   VALUE X'C3114F40'.
*         77  FOP12    PIC X(4)   VALUE X'C3115050'.
*         77  FOP13    PIC X(4)   VALUE X'C311D160'.
*         77  FOP14    PIC X(4)   VALUE X'C311D2F0'.
*         77  FOP15    PIC X(4)   VALUE X'C311D440'.
*         77  FOP16    PIC X(4)   VALUE X'C311D550'.
*         77  FOP17    PIC X(4)   VALUE X'C311D660'.
*         77  FOP18    PIC X(4)   VALUE X'C311D7F0'.
*         77  FOP19    PIC X(4)   VALUE X'C311D940'.
*         77  FOP20    PIC X(4)   VALUE X'C3115A50'.
*         77  FOP21    PIC X(4)   VALUE X'C3115B60'.
*         77  FOP1C2   PIC X(4)   VALUE X'C311C3C9'.
*         77  FOP2C2   PIC X(4)   VALUE X'C311C4D9'.
*         77  FOP3C2   PIC X(4)   VALUE X'C311C5E9'.
*         77  FOP4C2   PIC X(4)   VALUE X'C311C6F9'.
*         77  FOP5C2   PIC X(4)   VALUE X'C311C8C9'.
*         77  FOP6C2   PIC X(4)   VALUE X'C311C9D9'.
*         77  FOP7C2   PIC X(4)   VALUE X'C3114AE9'.
*         77  FOP8C2   PIC X(4)   VALUE X'C3114BF9'.
*         77  FOP9C2   PIC X(4)   VALUE X'C3114DC9'.
*      * ESDS MYFILE01 READ   RBA REC  3
*         01  FOPLINE.
*             02  FOPSBA   PIC X(4).
*             02  FOPTYPE  PIC X(4).
*             02  FILLER   PIC X     VALUE '/'.
*             02  FOPFIXVR PIC X(3).
*             02  FILLER   PIC X     VALUE SPACE.
*             02  FOPNAME  PIC X(8).
*             02  FILLER   PIC X     VALUE SPACE.
*             02  FOPFUNC  PIC X(8)  VALUE 'READNEXT'.
*             02  FILLER   PIC X     VALUE SPACE.
*             02  FOPMETH  PIC X(4)  VALUE 'XRBA'.
*             02  FILLER   PIC X(4)  VALUE ' REC'.
*             02  FOPRECNO PIC X(3).
*             02  FILLER   PIC X     VALUE SPACE.
*             02  FOPSEP   PIC X     VALUE SPACE.
*         77  FOPL     PIC 9(4) COMP.
*         01  FHAND.
*             02  FHASBA   PIC X(4).
*             02  FHANDCON.
*                 03  FILLER   PIC X(8) VALUE SPACES.
*                 03  FHALNG   PIC X(2).
*                 03  FILLER   PIC X(2) VALUE SPACES.
*             02  FILLER   REDEFINES FHANDCON.
*                 03  FILLER   PIC X(7) VALUE SPACES.
*                 03  FHAINV   PIC X(2).
*                 03  FILLER   PIC X(3) VALUE SPACES.
*             02  FILLER   REDEFINES FHANDCON.
*                 03  FILLER   PIC X(8) VALUE SPACES.
*                 03  FHAILL   PIC X(3).
*                 03  FILLER   PIC X    VALUE SPACE.
*             02  FILLER   PIC X(18) VALUE ' CONDITION RAISED '.
*             02  FHFDBK1  PIC X(2).
*             02  FILLER   PIC X     VALUE SPACE.
*             02  FHFDBK2  PIC X(2).
*             02  FILLER   PIC X(4)  VALUE SPACES.
*             02  FHSEP    PIC X     VALUE SPACE.
*         77  FHANDL   PIC 9(4) COMP.
*         01  ENDMSG.
*             02  FILLER   PIC X(4)  VALUE X'C3115CF0'.
*             02  FILLER   PIC X(31)
*                          VALUE 'TESTVSC1 COMPLETED, PRESS CLEAR'.
*         77  ENDMSGL  PIC 9(4) COMP.
*         01  FILLER.
*             02  WORK1A   PIC 9(4).
*             02  FILLER   REDEFINES WORK1A.
*                 03  FILLER   PIC X(2).
*                 03  WORK1B   PIC X(2).
*             02  FILLER   REDEFINES WORK1A.
*                 03  FILLER   PIC X(1).
*                 03  WORK1C   PIC X(3).
*         01  WORK2.
*             02  FILLER PIC X.
*             02  FDBK1  PIC X.
*             02  FDBK2  PIC X.
*             02  FILLER PIC X(3).
*      * GO TO DEPENDING CONTROL
*      *   1=VSAMRTN1
*      *   2=VSAMRTN2
*      *   3=VSAMRTN3
*      *   4=VSAMRTN4
*      *   5=VSAMRTN5
*      *   6=VSAMRTN6
*      *   7=VSAMRTN7
*      *   8=VSAMRTN8
*      *   9=VSAMRTN9
*      *  10=VSAMRTNA
*         77  DEPCTRL   PIC 9(4) COMP.
*         77  NOTFNDNO  PIC 9(4) COMP.
*         77  ENDFLENO  PIC 9(4) COMP.
*         77  LOOPCTRL  PIC 9(2) COMP.
*         LINKAGE SECTION.
*         77  MYDATALK PIC X(50).
*         PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
*      * EXEC INTERFACE BLOCK
*            02  EIBHEAD  PIC X(8).
*            02  EIBTIME  PIC 9(7) COMP-3.
*            02  EIBDATE  PIC 9(7) COMP-3.
*            02  EIBTRNID PIC X(4).
*            02  EIBTASKN PIC 9(7) COMP-3.
*            02  EIBTRMID PIC X(4).
*            02  FILLER   PIC X(2).
*            02  EIBCPOSN PIC 9(4) COMP.
*            02  EIBCALEN PIC 9(4) COMP.
*            02  EIBAID   PIC X.
*            02  EIBFN    PIC 9(4) COMP.
*            02  EIBRCODE PIC X(6).
*            02  EIBREQID PIC X(8).
*            02  EIBDS    PIC X(8).
*            02  EIBRSRCE PIC X(8).
*            02  EIBRESP  PIC 9(9) COMP.
*            02  EIBRESP2 PIC 9(9) COMP.
*            02  EIBPROG  PIC X(8).
*            02  EIBDTFRM PIC X.
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTVSC1 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
         L     ZC_R0,0(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHEIBLK_PTR STORE PARM POINTER
         L     ZC_R0,4(ZC_R2)          LOAD PARM ADDR FROM PARMLIST
         ST    ZC_R0,ZC_DFHCOMMAREA_PTR STORE PARM POINTER
         LARL  ZC_R1,=XL4'C311C260'
          MVC   FOP1,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C3F0'
          MVC   FOP2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C540'
          MVC   FOP3,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C650'
          MVC   FOP4,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C760'
          MVC   FOP5,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C8F0'
          MVC   FOP6,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114A40'
          MVC   FOP7,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114B50'
          MVC   FOP8,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114C60'
          MVC   FOP9,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114DF0'
          MVC   FOP10,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114F40'
          MVC   FOP11,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3115050'
          MVC   FOP12,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D160'
          MVC   FOP13,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D2F0'
          MVC   FOP14,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D440'
          MVC   FOP15,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D550'
          MVC   FOP16,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D660'
          MVC   FOP17,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D7F0'
          MVC   FOP18,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311D940'
          MVC   FOP19,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3115A50'
          MVC   FOP20,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3115B60'
          MVC   FOP21,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C3C9'
          MVC   FOP1C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C4D9'
          MVC   FOP2C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C5E9'
          MVC   FOP3C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C6F9'
          MVC   FOP4C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C8C9'
          MVC   FOP5C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C311C9D9'
          MVC   FOP6C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114AE9'
          MVC   FOP7C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114BF9'
          MVC   FOP8C2,0(ZC_R1)
         LARL  ZC_R1,=XL4'C3114DC9'
          MVC   FOP9C2,0(ZC_R1)
         MVI   ZC_FILLER_V1,C'/'
         MVI   ZC_FILLER_V2,C' '
         MVI   ZC_FILLER_V3,C' '
         LARL  ZC_R1,=CL8'READNEXT'
          MVC   FOPFUNC,0(ZC_R1)
         MVI   ZC_FILLER_V4,C' '
         LARL  ZC_R1,=CL4'XRBA'
          MVC   FOPMETH,0(ZC_R1)
         LARL  ZC_R1,=CL4' REC'
          MVC   ZC_FILLER_V5,0(ZC_R1)
         MVI   ZC_FILLER_V6,C' '
         MVI   FOPSEP,C' '
         MVI   ZC_FILLER_V7,C' '
         MVC   ZC_FILLER_V7+1(8-1),ZC_FILLER_V7
         MVI   ZC_FILLER_V8,C' '
         MVC   ZC_FILLER_V8+1(2-1),ZC_FILLER_V8
         MVI   ZC_FILLER_V9,C' '
         MVC   ZC_FILLER_V9+1(7-1),ZC_FILLER_V9
         MVI   ZC_FILLER_V10,C' '
         MVC   ZC_FILLER_V10+1(3-1),ZC_FILLER_V10
         MVI   ZC_FILLER_V11,C' '
         MVC   ZC_FILLER_V11+1(8-1),ZC_FILLER_V11
         MVI   ZC_FILLER_V12,C' '
         LARL  ZC_R1,=CL18' CONDITION RAISED '
          MVC   ZC_FILLER_V13,0(ZC_R1)
         MVI   ZC_FILLER_V14,C' '
         MVI   ZC_FILLER_V15,C' '
         MVC   ZC_FILLER_V15+1(4-1),ZC_FILLER_V15
         MVI   FHSEP,C' '
         LARL  ZC_R1,=XL4'C3115CF0'
          MVC   ZC_FILLER_V16,0(ZC_R1)
         LARL  ZC_R1,=CL32'TESTVSC1 COMPLETED, PRESS CLEAR'
          MVC   ZC_FILLER_V17,0(ZC_R1)
         LARL  ZC_R1,=CL8'ZCWSID1'
          MVC   ZC_WS_ID1,0(ZC_R1)
         MVI   ZC_FILLER_V18,C' '
         MVI   ZC_FILLER_V19,C' '
         MVI   ZC_FILLER_V20,C' '
         MVI   ZC_FILLER_V21,C' '
         MVI   ZC_FILLER_V22,C' '
          MVI   TRUE,C'1'
          MVI   FALSE,C'0'
          MVHHI RETURN_CODE,0
*
*             MOVE LENGTH OF FOPLINE  TO FOPL.
*ZC    172         MOVE  LENGTH,OF,FOPLINE,TO,FOPL
          MVHHI FOPL,44
*             SUBTRACT 1 FROM FOPL.
*ZC    173         SUBTRACT 1,FROM,FOPL
         LH    ZC_R0,FOPL
         AHI   ZC_R0,-1
         STH   ZC_R0,FOPL
*             MOVE LENGTH OF FHAND    TO FHANDL.
*ZC    174         MOVE  LENGTH,OF,FHAND,TO,FHANDL
          MVHHI FHANDL,44
*             SUBTRACT 1 FROM FHANDL.
*ZC    175         SUBTRACT 1,FROM,FHANDL
         LH    ZC_R0,FHANDL
         AHI   ZC_R0,-1
         STH   ZC_R0,FHANDL
*             MOVE LENGTH OF ENDMSG   TO ENDMSGL.
*      *  CLI   FOPSEP+1,C' '      SEND LENGTH ADJUSTED ?
*      *  BNE   NOTADJL            EXIT IF NOT
*ZC    176         MOVE  LENGTH,OF,ENDMSG,TO,ENDMSGL
          MVHHI ENDMSGL,35
*             IF FOPSEP NOT = SPACE THEN GO TO NOTADJL.
*ZC    179         IF    FOPSEP,NOT,=,SPACE,THEN
         CLI   FOPSEP,C' '
         BRC   15-ZC_NE,PG_IF_1_1
*      *  MVI   FOPSEP+1,C'|'      SET SEPARATOR
*ZC    179         GO    TO,NOTADJL
         J     PG_NOTADJL
PG_IF_1_1    DS    0H  &TYPE
*             MOVE '|' TO FOPSEP.
*      *  LH    R7,FOPL            MESSAGE LENGTH
*      *  AHI   R7,1               LENGTHEN BY 1
*      *  STH   R7,FOPL            STORE BACK
*ZC    181         MOVE  '|',TO,FOPSEP
         MVI   FOPSEP,C'|'
*             ADD 1 TO FOPL.
*      * NOTADJL  EQU   *
*ZC    185         ADD   1,TO,FOPL
         LH    ZC_R0,FOPL
         AHI   ZC_R0,1
         STH   ZC_R0,FOPL
*         NOTADJL.
*      *  CLI   FHSEP,C' '         SEND CONDITION LENGTH ADJUSTED ?
*      *  BNE   NOTADJC            EXIT IF NOT
PG_NOTADJL DS  0H
*             IF FHSEP NOT = SPACE THEN GO TO NOTADJC.
*ZC    190         IF    FHSEP,NOT,=,SPACE,THEN
         CLI   FHSEP,C' '
         BRC   15-ZC_NE,PG_IF_2_1
*      *  MVI   FHSEP,C'|'         SET SEPARATOR
*ZC    190         GO    TO,NOTADJC
         J     PG_NOTADJC
PG_IF_2_1    DS    0H  &TYPE
*             MOVE '|' TO FHSEP.
*      *  LH    R7,FHANDL          MESSAGE LENGTH
*      *  AHI   R7,1               LENGTHEN BY 1
*      *  STH   R7,FHANDL          STORE BACK
*ZC    192         MOVE  '|',TO,FHSEP
         MVI   FHSEP,C'|'
*             ADD 1 TO FHANDL.
*      * NOTADJC  EQU   *
*ZC    196         ADD   1,TO,FHANDL
         LH    ZC_R0,FHANDL
         AHI   ZC_R0,1
         STH   ZC_R0,FHANDL
*         NOTADJC.
*      *  MVC   FOPTYPE,=C'ESDS'   SET FILE TYPE IN MESSAGE
*      *  MVC   FOPFIXVR,=C'VAR'   SET FIX/VAR IN MESSAGE
*      *  MVC   FOPNAME,=C'MYFILE01' SET FILENAME IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'READ' SET FUNCTION IN MESSAGE
*      *  MVC   FOPMETH,=CL4'RBA'  SET METHOD IN MESSAGE
*      *  MVC   MYRID,=F'19'       RIDFLD=19  RECORD 3
PG_NOTADJL_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOTADJC DS  0H
*             MOVE 'ESDS'     TO FOPTYPE.
*ZC    205         MOVE  'ESDS',TO,FOPTYPE
         LARL  ZC_R1,=CL4'ESDS'
          MVC   FOPTYPE,0(ZC_R1)
*             MOVE 'VAR'      TO FOPFIXVR.
*ZC    206         MOVE  'VAR',TO,FOPFIXVR
         LARL  ZC_R1,=CL4'VAR'
          MVC   FOPFIXVR,0(ZC_R1)
*             MOVE 'MYFILE01' TO FOPNAME.
*ZC    207         MOVE  'MYFILE01',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE01'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE 'READ    ' TO FOPFUNC.
*ZC    208         MOVE  'READ    ',TO,FOPFUNC
         LARL  ZC_R1,=CL8'READ    '
          MVC   FOPFUNC,0(ZC_R1)
*             MOVE 'RBA '     TO FOPMETH.
*ZC    209         MOVE  'RBA ',TO,FOPMETH
         LARL  ZC_R1,=CL4'RBA '
          MVC   FOPMETH,0(ZC_R1)
*             MOVE 19         TO MYRID.
*ZC    210         MOVE  19,TO,MYRID
          MVHI  MYRID,19
*             MOVE 50         TO MYLEN.
*      *  BAL   R9,MY01            READ MYFILE01 RBA
*ZC    211         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             PERFORM MY01.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*ZC    213         PERFORM MY01
         LARL  ZC_R14,PG_MY01
         LARL  ZC_R0,PG_MY01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             PERFORM WQTS.
*      *  MVC   FWTSBA,FOP1        MOVE WCC,SBA
*      *  MVC   FOPRECNO,=C'  3'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*ZC    215         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE FOP1  TO FOPSBA.
*ZC    219         MOVE  FOP1,TO,FOPSBA
         MVC   FOPSBA,FOP1  ALIGN LEFT X OTHER
*             MOVE '  3' TO FOPRECNO.
*ZC    220         MOVE  '  3',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  3'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    221         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0782 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0782    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0782   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0782   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0782) ENTRYPOINT FOR IGNORE CONDITION
*
         J     P0404BYP_0782   EXIT
*
P0404    DS    0H
P0404FN  DS    XL2                FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    XL2                LENGTH
P0404EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0404EDS DS    AL4                DSA ADDRESS FOR EDF
P0404EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0404EDL DS    XL2                DSA LENGTH FOR EDF
P0404NED DS    X                  FF=NOEDF
         DS    X
P0404NOH DS    X                  FF=NOHANDLE
         DS    X
P0404RSP DS    AL4                RESP
P0404RS2 DS    AL4                RESP2
P0404END EQU   *                  END MARKER
*
P0404BYP_0782    DS 0H
*      *  MVC   MYRID,=F'9'        RIDFLD=9   RECORD 2
*             MOVE 9  TO MYRID.
*ZC    223         MOVE  9,TO,MYRID
          MVHI  MYRID,9
*             MOVE 50 TO MYLEN.
*      *  BAL   R9,MY01            READ MYFILE01 RBA
*ZC    224         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             PERFORM MY01.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*ZC    226         PERFORM MY01
         LARL  ZC_R14,PG_MY01
         LARL  ZC_R0,PG_MY01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             PERFORM WQTS.
*      *  MVC   FWTSBA,FOP2        MOVE WCC,SBA
*      *  MVC   FOPRECNO,=C'  2'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*ZC    228         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE FOP2  TO FOPSBA.
*ZC    232         MOVE  FOP2,TO,FOPSBA
         MVC   FOPSBA,FOP2  ALIGN LEFT X OTHER
*             MOVE '  2' TO FOPRECNO.
*ZC    233         MOVE  '  2',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  2'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    234         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0827 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0827    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0827   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0827   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0827) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0827    DS 0H
*      * MAKE SURE SET WORKS
*      *  MVC   MYRID8,=FL8'0'     RIDFLD=0  RECORD 1
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*             MOVE ZERO  TO MYRID8.
*ZC    238         MOVE  ZERO,TO,MYRID8
          MVGHI MYRID8,0
*             MOVE 50    TO MYLEN.
*ZC    239         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READ FILE('MYFILE01') SET(ADDRESS OF MYDATALK)
*ZC    240         EXEC  CICS,READ,FILE('MYFILE01'),SET(ADDRESS,OF,MYDAX
               TALK),LENGTH(MYLEN),RIDFLD(MYRID8),XRBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LARL  R1,P0602SET         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID       ADDRESS TARGET
         MVC   0(8,R15),MYRID8   MOVE RIDFLD
         LARL  R1,P0602XRB         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_0851 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_0851    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602STA        ADDRESS SOURCE
         L     R0,0(R1)                     RPI 1181
         IILF  R1,ZC_MYDATALK_PTR-DFHEISTG  RPI 1181 AVOID BASE REQ
         ST    R0,0(R1,R13)                 RPI 1181
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_0851   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_0851   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_0851) ENTRYPOINT FOR IGNORE CONDITION
*
P0602    DS    0H
P0602FN  DS    XL2                FUNCTION CODE
P0602EIB DS    AL4                EIB
P0602TCT DS    AL4                TCTTE
P0602FIL DS    CL8                FILENAME
P0602SET DS    X                  FF=SET IS SPECIFIED
         DS    X
P0602STA DS    AL4                ADDRESS FOR SET
P0602INT DS    AL4                ADDRESS OF INTO
P0602LEN DS    XL4                LENGTH
P0602LAD DS    AL4                ADDRESS OF LENGTH IF LABEL
P0602FAD DS    AL4                ADDRESS OF FLENGTH IF LABEL
P0602KIN DS    X                  FF=KEYLENGTH IS VALID
         DS    X
P0602KLN DS    XL2                KEYLENGTH
P0602RID DS    XL128              RIDFLD
P0602LRD DS    X                  L'RIDFLD FOR EDF
         DS    X
P0602GEN DS    X                  FF=GENERIC
         DS    X
P0602RBA DS    X                  FF=RBA
         DS    X
P0602XRB DS    X                  FF=XRBA
         DS    X
P0602RRN DS    X                  FF=RRN
         DS    X
P0602GTE DS    X                  00=EQUAL FF=GTEQ
         DS    X
P0602EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0602EDS DS    AL4                DSA ADDRESS FOR EDF
P0602EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0602EDL DS    XL2                DSA LENGTH FOR EDF
P0602NED DS    X                  FF=NOEDF
         DS    X
P0602NOH DS    X                  FF=NOHANDLE
         DS    X
P0602RSP DS    AL4                RESP
P0602RS2 DS    AL4                RESP2
P0602END EQU   *                  END MARKER
*
P0602BYP_0851    DS 0H
*                       LENGTH(MYLEN) RIDFLD(MYRID8) XRBA END-EXEC.
*      *  MVC   MYRID8,=FL8'0'     RIDFLD=0  RECORD 1
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*             MOVE ZERO  TO MYRID8.
*ZC    244         MOVE  ZERO,TO,MYRID8
          MVGHI MYRID8,0
*             MOVE 50    TO MYLEN.
*ZC    245         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READ FILE('MYFILE01') INTO(MYDATA) LENGTH(MYLENX
                              )
*ZC    246         EXEC  CICS,READ,FILE('MYFILE01'),INTO(MYDATA),LENGTHX
               (MYLEN),RIDFLD(MYRID8),XRBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID       ADDRESS TARGET
         MVC   0(8,R15),MYRID8   MOVE RIDFLD
         LARL  R1,P0602XRB         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_0880 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_0880    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_0880   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_0880   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_0880) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_0880    DS 0H
*                       RIDFLD(MYRID8) XRBA END-EXEC.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*             PERFORM WQTS.
*      *  MVC   FWTSBA,FOP3        MOVE WCC,SBA
*      *  MVC   FOPMETH,=CL4'XRBA' SET METHOD IN MESSAGE
*      *  MVC   FOPRECNO,=C'  1'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*ZC    249         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE FOP3   TO FOPSBA.
*ZC    254         MOVE  FOP3,TO,FOPSBA
         MVC   FOPSBA,FOP3  ALIGN LEFT X OTHER
*             MOVE 'XRBA' TO FOPMETH.
*ZC    255         MOVE  'XRBA',TO,FOPMETH
         LARL  ZC_R1,=CL4'XRBA'
          MVC   FOPMETH,0(ZC_R1)
*             MOVE '  1'  TO FOPRECNO.
*ZC    256         MOVE  '  1',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  1'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    257         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0919 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0919    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0919   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0919   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0919) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0919    DS 0H
*      * RAISE SOME CONDITIONS, WE MAY NOT DO ALL THESE FOR EVERY
*      * FUNCTION
*             EXEC CICS HANDLE CONDITION
*                  DSIDERR(VSAMFNF)
*                  DISABLED(VSAMDIS)
*                  NOTFND(VSAMNOTF)
*                  LENGERR(VSAMLNG)
*                  NOTOPEN(VSAMNOTO)
*                  ENDFILE(VSAMENDF)
*                  INVREQ(VSAMINV)
*                  ILLOGIC(VSAMILL)
*ZC    262         EXEC  CICS,HANDLE,CONDITION,DSIDERR(VSAMFNF),DISABLEX
               D(VSAMDIS),NOTFND(VSAMNOTF),LENGERR(VSAMLNG),NOTOPEN(VSAX
               MNOTO),ENDFILE(VSAMENDF),INVREQ(VSAMINV),ILLOGIC(VSAMILLX
                              )
         LARL  R1,P0204         ADDRESS SOURCE
         LARL  R15,P0204        ADDRESS TARGET
         XC    0(P0204END-P0204,R15),0(R1) XC IT
         LARL  R1,=X'0204'         ADDRESS SOURCE
         LARL  R15,P0204FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0204FN,R15),0(R1) MVC IT
         LARL  R1,P0204EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0204TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0204CND        R1=ADDRESS CONDITION NUMBERS
         LARL  R14,P0204ADR       R14=ADDRESSES OR FF IF CANCEL
         MVI   0(R1),12           SET SPECIAL CONDITION NUMBER
         LARL  R0,PG_VSAMFNF     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),84       SET CONDITION NUMBER
         LARL  R0,PG_VSAMDIS     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),13       SET CONDITION NUMBER
         LARL  R0,PG_VSAMNOTF     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),22       SET CONDITION NUMBER
         LARL  R0,PG_VSAMLNG     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),19       SET CONDITION NUMBER
         LARL  R0,PG_VSAMNOTO     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),20       SET CONDITION NUMBER
         LARL  R0,PG_VSAMENDF     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),16       SET CONDITION NUMBER
         LARL  R0,PG_VSAMINV     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         MVI   0(R1),21       SET CONDITION NUMBER
         LARL  R0,PG_VSAMILL     R0=LABEL (COBOL)
         ST    R0,0(R14)          SAVE IT
         AHI   R1,1               BUMP CONDITION NUMBER POINTER
         AHI   R14,4              BUMP CONDITION ADDRESS POINTER
         LA    R0,DFHEIHCN        ADDRESS OF DFHEIHCN
         LARL  R1,P0204HCN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0204EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0204EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0204EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0204EDF_0932 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0204EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0204)       R1=LCL MODULE PARAMETER LIST
P0204EDF_0932    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         J     P0204BYP_0932   EXIT
*
P0204    DS    0H
P0204FN  DS    XL2                FUNCTION CODE
P0204EIB DS    AL4                EIB
P0204TCT DS    AL4                TCTTE
P0204HCN DS    AL4                A(DFHEIHCN)
P0204CND DS    XL30               ROOM FOR 30 CONDITIONS
P0204ADR DS    30AL4              ROOM FOR 30 ADDRESSES, FF......=CLEAR
P0204EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0204EDS DS    AL4                DSA ADDRESS FOR EDF
P0204EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0204EDL DS    XL2                DSA LENGTH FOR EDF
P0204NED DS    X                  FF=NOEDF
         DS    X
P0204RSP DS    AL4                RESP
P0204RS2 DS    AL4                RESP2
P0204END EQU   *                  END MARKER
*
P0204BYP_0932    DS 0H
*                  END-EXEC.
*      * FILENOTFOUND=DSIDERR
*      *  MVC   FWTSBA,FOP4        MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'FRED' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'  1'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*             MOVE FOP4       TO FOPSBA.
*ZC    277         MOVE  FOP4,TO,FOPSBA
         MVC   FOPSBA,FOP4  ALIGN LEFT X OTHER
*             MOVE 'FRED    ' TO FOPNAME.
*ZC    278         MOVE  'FRED    ',TO,FOPNAME
         LARL  ZC_R1,=CL8'FRED    '
          MVC   FOPNAME,0(ZC_R1)
*             MOVE '  1'      TO FOPRECNO.
*ZC    279         MOVE  '  1',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  1'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    280         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_0963 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_0963    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_0963   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_0963   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_0963) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_0963    DS 0H
*      *  MVC   MYRID8,=FL8'0'     RIDFLD=0  RECORD 1
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*      *  LA    R7,VSAMRTN1        R7=HANDLE RETURN
*             MOVE ZERO TO MYRID8.
*ZC    284         MOVE  ZERO,TO,MYRID8
          MVGHI MYRID8,0
*             MOVE 50   TO MYLEN.
*ZC    285         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             MOVE 1    TO DEPCTRL.
*ZC    286         MOVE  1,TO,DEPCTRL
          MVHHI DEPCTRL,1
*             EXEC CICS READ FILE('FRED') INTO(MYDATA) LENGTH(MYLEN)
*ZC    287         EXEC  CICS,READ,FILE('FRED'),INTO(MYDATA),LENGTH(MYLX
               EN),RIDFLD(MYRID8),XRBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'FRED'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID       ADDRESS TARGET
         MVC   0(8,R15),MYRID8   MOVE RIDFLD
         LARL  R1,P0602XRB         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_0992 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_0992    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_0992   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_0992   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_0992) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_0992    DS 0H
*                       RIDFLD(MYRID8) XRBA END-EXEC.
*      * VSAMRTN1 DS    0H
*         VSAMRTN1.
*      * DISABLED
*      *  MVC   FWTSBA,FOP6        MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE04' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'  1'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_NOTADJC_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN1 DS 0H
*             MOVE FOP6       TO FOPSBA.
*ZC    296         MOVE  FOP6,TO,FOPSBA
         MVC   FOPSBA,FOP6  ALIGN LEFT X OTHER
*             MOVE 'MYFILE04' TO FOPNAME.
*ZC    297         MOVE  'MYFILE04',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE04'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE '  1'      TO FOPRECNO.
*ZC    298         MOVE  '  1',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  1'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    299         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1030 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1030    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1030   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1030   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1030) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1030    DS 0H
*      *  MVC   MYRID8,=FL8'0'     RIDFLD=0  RECORD 1
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*      *  LA    R7,VSAMRTN2        R7=HANDLE RETURN
*             MOVE ZERO TO MYRID8.
*ZC    303         MOVE  ZERO,TO,MYRID8
          MVGHI MYRID8,0
*             MOVE 50   TO MYLEN.
*ZC    304         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             MOVE 2    TO DEPCTRL.
*ZC    305         MOVE  2,TO,DEPCTRL
          MVHHI DEPCTRL,2
*             EXEC CICS READ FILE('MYFILE04') INTO(MYDATA) LENGTH(MYLENX
                              )
*ZC    306         EXEC  CICS,READ,FILE('MYFILE04'),INTO(MYDATA),LENGTHX
               (MYLEN),RIDFLD(MYRID8),XRBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE04'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID       ADDRESS TARGET
         MVC   0(8,R15),MYRID8   MOVE RIDFLD
         LARL  R1,P0602XRB         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_1059 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_1059    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_1059   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_1059   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_1059) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_1059    DS 0H
*                       RIDFLD(MYRID8) XRBA END-EXEC.
*      * VSAMRTN2 DS    0H
*         VSAMRTN2.
*      * NOTOPEN
*      *  MVC   FWTSBA,FOP8        MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE03' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'  1'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_VSAMRTN1_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN2 DS 0H
*             MOVE FOP8       TO FOPSBA.
*ZC    315         MOVE  FOP8,TO,FOPSBA
         MVC   FOPSBA,FOP8  ALIGN LEFT X OTHER
*             MOVE 'MYFILE03' TO FOPNAME.
*ZC    316         MOVE  'MYFILE03',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE03'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE '  1'      TO FOPRECNO.
*ZC    317         MOVE  '  1',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  1'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    318         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1097 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1097    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1097   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1097   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1097) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1097    DS 0H
*      *  MVC   MYRID8,=FL8'0'     RIDFLD=0  RECORD 1
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*             MOVE ZERO TO MYRID8.
*ZC    321         MOVE  ZERO,TO,MYRID8
          MVGHI MYRID8,0
*             MOVE 50   TO MYLEN.
*      *  LA    R7,VSAMRTN3        R7=HANDLE RETURN
*ZC    322         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             MOVE 3 TO DEPCTRL.
*ZC    324         MOVE  3,TO,DEPCTRL
          MVHHI DEPCTRL,3
*             EXEC CICS READ FILE('MYFILE03') INTO(MYDATA) LENGTH(MYLENX
                              )
*ZC    325         EXEC  CICS,READ,FILE('MYFILE03'),INTO(MYDATA),LENGTHX
               (MYLEN),RIDFLD(MYRID8),XRBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE03'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID       ADDRESS TARGET
         MVC   0(8,R15),MYRID8   MOVE RIDFLD
         LARL  R1,P0602XRB         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_1126 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_1126    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_1126   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_1126   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_1126) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_1126    DS 0H
*                       RIDFLD(MYRID8) XRBA END-EXEC.
*      * VSAMRTN3 DS    0H
*         VSAMRTN3.
*      * NOTFND 1
*      *  MVC   FWTSBA,FOP10       MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE01' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'  ?'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPMETH,=CL4'RBA'  SET METHOD IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_VSAMRTN2_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN3 DS 0H
*             MOVE FOP10      TO FOPSBA.
*ZC    335         MOVE  FOP10,TO,FOPSBA
         MVC   FOPSBA,FOP10  ALIGN LEFT X OTHER
*             MOVE 'MYFILE01' TO FOPNAME.
*ZC    336         MOVE  'MYFILE01',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE01'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE '  ?'      TO FOPRECNO.
*ZC    337         MOVE  '  ?',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  ?'
          MVC   FOPRECNO,0(ZC_R1)
*             MOVE 'RBA '     TO FOPMETH.
*ZC    338         MOVE  'RBA ',TO,FOPMETH
         LARL  ZC_R1,=CL4'RBA '
          MVC   FOPMETH,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    339         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1169 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1169    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1169   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1169   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1169) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1169    DS 0H
*      *  MVC   MYRID,=F'-1'       RIDFLD=1  INVALID RBA
*      *  LA    R7,VSAMRTN4        R7=HANDLE RETURN
*      *  MVI   NOTFNDNO,C'1'      SET 1ST NOTFND
*             MOVE -1 TO MYRID.
*ZC    343         MOVE  -,1,TO,MYRID
          MVHI  MYRID,-1
*             MOVE 1  TO NOTFNDNO.
*ZC    344         MOVE  1,TO,NOTFNDNO
          MVHHI NOTFNDNO,1
*             MOVE 4  TO DEPCTRL.
*ZC    345         MOVE  4,TO,DEPCTRL
          MVHHI DEPCTRL,4
*             MOVE 50 TO MYLEN.
*      *  BAL   R9,MY01            READ MYFILE01 RBA
*ZC    346         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             PERFORM MY01.
*      * VSAMRTN4 DS    0H
*ZC    348         PERFORM MY01
         LARL  ZC_R14,PG_MY01
         LARL  ZC_R0,PG_MY01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*         VSAMRTN4.
*      * LENGERR/11
*      *  MVC   FWTSBA,FOP12       MOVE WCC,SBA
*      *  MVC   FOPRECNO,=C' 26'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_VSAMRTN3_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN4 DS 0H
*             MOVE FOP12 TO FOPSBA.
*ZC    355         MOVE  FOP12,TO,FOPSBA
         MVC   FOPSBA,FOP12  ALIGN LEFT X OTHER
*             MOVE ' 26' TO FOPRECNO.
*ZC    356         MOVE  ' 26',TO,FOPRECNO
         LARL  ZC_R1,=CL4' 26'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    357         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1222 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1222    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1222   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1222   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1222) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1222    DS 0H
*      *  MVC   MYRID,=XL4'20D'    RIDFLD=X'20D' RECORD 26
*      *  LA    R7,VSAMRTN5        R7=HANDLE RETURN
*      *  MVC   MYLEN,=H'20'       LENGTH TOO SHORT
*             MOVE 525 TO MYRID.
*ZC    361         MOVE  525,TO,MYRID
          MVHI  MYRID,525
*             MOVE 20  TO MYLEN.
*ZC    362         MOVE  20,TO,MYLEN
          MVHHI MYLEN,20
*             MOVE 5   TO DEPCTRL.
*      *  BAL   R9,MY01_02         READ MYFILE01 RBA NO LENGTH=50
*ZC    363         MOVE  5,TO,DEPCTRL
          MVHHI DEPCTRL,5
*             PERFORM MY01.
*      * VSAMRTN5 DS    0H
*ZC    365         PERFORM MY01
         LARL  ZC_R14,PG_MY01
         LARL  ZC_R0,PG_MY01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*         VSAMRTN5.
*      *  MVC   MYLEN,=H'20'       LENGTH REQUESTED
PG_VSAMRTN4_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN5 DS 0H
*             MOVE 20 TO MYLEN.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*ZC    369         MOVE  20,TO,MYLEN
          MVHHI MYLEN,20
*             PERFORM WQTS.
*      * INVREQ/20
*      *  MVC   FWTSBA,FOP14       MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE02' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'  1'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*ZC    371         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE FOP14      TO FOPSBA.
*ZC    377         MOVE  FOP14,TO,FOPSBA
         MVC   FOPSBA,FOP14  ALIGN LEFT X OTHER
*             MOVE 'MYFILE02' TO FOPNAME.
*ZC    378         MOVE  'MYFILE02',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE02'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE '  1'      TO FOPRECNO.
*ZC    379         MOVE  '  1',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  1'
          MVC   FOPRECNO,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    380         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1284 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1284    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1284   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1284   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1284) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1284    DS 0H
*      *  MVC   MYRID,=F'1'        RIDFLD=1 RECORD  1
*      *  MVC   MYLEN,=H'50'       SET LENGTH
*      *  LA    R7,VSAMRTN6        R7=HANDLE RETURN
*             MOVE 1  TO MYRID.
*ZC    384         MOVE  1,TO,MYRID
          MVHI  MYRID,1
*             MOVE 50 TO MYLEN.
*ZC    385         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             MOVE 6  TO DEPCTRL.
*ZC    386         MOVE  6,TO,DEPCTRL
          MVHHI DEPCTRL,6
*             EXEC CICS READ FILE('MYFILE02') INTO(MYDATA) LENGTH(MYLENX
                              )
*ZC    387         EXEC  CICS,READ,FILE('MYFILE02'),INTO(MYDATA),LENGTHX
               (MYLEN),RIDFLD(MYRID),RBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE02'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P0602RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_1312 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_1312    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_1312   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_1312   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_1312) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_1312    DS 0H
*                       RIDFLD(MYRID) RBA END-EXEC.
*      * VSAMRTN6 DS    0H
*         VSAMRTN6.
*      * ILLOGIC
*      *  MVC   FWTSBA,FOP16       MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE01' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'  1'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPMETH,=CL4'RRN'  SET METHOD IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_VSAMRTN5_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN6 DS 0H
*             MOVE FOP16      TO FOPSBA.
*ZC    397         MOVE  FOP16,TO,FOPSBA
         MVC   FOPSBA,FOP16  ALIGN LEFT X OTHER
*             MOVE 'MYFILE01' TO FOPNAME.
*ZC    398         MOVE  'MYFILE01',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE01'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE '  1'      TO FOPRECNO.
*ZC    399         MOVE  '  1',TO,FOPRECNO
         LARL  ZC_R1,=CL4'  1'
          MVC   FOPRECNO,0(ZC_R1)
*             MOVE 'RRN '     TO FOPMETH.
*ZC    400         MOVE  'RRN ',TO,FOPMETH
         LARL  ZC_R1,=CL4'RRN '
          MVC   FOPMETH,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    401         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1355 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1355    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1355   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1355   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1355) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1355    DS 0H
*      *  MVC   MYRID,=F'1'        RIDFLD=1 RECORD  1
*      *  MVC   MYLEN,=H'50'       SET LENGTH
*      *  LA    R7,VSAMRTNA        R7=HANDLE RETURN
*             MOVE 1  TO MYRID.
*ZC    405         MOVE  1,TO,MYRID
          MVHI  MYRID,1
*             MOVE 50 TO MYLEN.
*ZC    406         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             MOVE 10 TO DEPCTRL.
*ZC    407         MOVE  10,TO,DEPCTRL
          MVHHI DEPCTRL,10
*             EXEC CICS READ FILE('MYFILE01') INTO(MYDATA) LENGTH(MYLENX
                              )
*ZC    408         EXEC  CICS,READ,FILE('MYFILE01'),INTO(MYDATA),LENGTHX
               (MYLEN),RIDFLD(MYRID),RRN
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID       ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P0602RRN         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_1383 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_1383    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_1383   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_1383   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_1383) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_1383    DS 0H
*                       RIDFLD(MYRID) RRN END-EXEC.
*      * VSAMRTNA DS    0H
*         VSAMRTNA.
*      * START BROWSE
*      *  MVC   FWTSBA,FOP18       MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE01' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'   '   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPMETH,=CL4'RBA'  SET METHOD IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'STARTBR' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_VSAMRTN6_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTNA DS 0H
*             MOVE FOP18      TO FOPSBA.
*ZC    419         MOVE  FOP18,TO,FOPSBA
         MVC   FOPSBA,FOP18  ALIGN LEFT X OTHER
*             MOVE 'MYFILE01' TO FOPNAME.
*ZC    420         MOVE  'MYFILE01',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE01'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE SPACES     TO FOPRECNO.
*ZC    421         MOVE  SPACES,TO,FOPRECNO
         MVI   FOPRECNO,C' '
         MVC   FOPRECNO+1(3-1),FOPRECNO
*             MOVE 'RBA '     TO FOPMETH.
*ZC    422         MOVE  'RBA ',TO,FOPMETH
         LARL  ZC_R1,=CL4'RBA '
          MVC   FOPMETH,0(ZC_R1)
*             MOVE 'STARTBR ' TO FOPFUNC.
*ZC    423         MOVE  'STARTBR ',TO,FOPFUNC
         LARL  ZC_R1,=CL8'STARTBR '
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    424         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1432 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1432    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1432   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1432   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1432) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1432    DS 0H
*      *  MVC   MYRID,=XL4'D9'     RIDFLD=X'D9' RECORD 15
*             MOVE 217 TO MYRID.
*ZC    426         MOVE  217,TO,MYRID
          MVHI  MYRID,217
*             EXEC CICS STARTBR FILE('MYFILE01') RIDFLD(MYRID) RBA
*ZC    427         EXEC  CICS,STARTBR,FILE('MYFILE01'),RIDFLD(MYRID),RBX
                              A
         LARL  R1,P060C         ADDRESS SOURCE
         LARL  R15,P060C        ADDRESS TARGET
         XC    0(P060CEND-P060C,R15),0(R1) XC IT
         LARL  R1,=X'060C'         ADDRESS SOURCE
         LARL  R15,P060CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFN,R15),0(R1) MVC IT
         LA    R0,MYRID         R0=ADDRESS OF RIDFLD
         LARL  R1,P060CARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060CLRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P060CFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFIL,R15),0(R1) MVC IT
         LARL  R15,P060CRID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P060CRBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P060CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060CEDF_1450 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060C)       R1=LCL MODULE PARAMETER LIST
P060CEDF_1450    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060CNOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060CBYP_1450   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060CBYP_1450   EXIT IF NONE
* INVREQ, FILENOTFOUND, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060CBYP_1450) ENTRYPOINT FOR IGNORE CONDITION
*
P060C    DS    0H
P060CFN  DS    XL2                FUNCTION CODE
P060CEIB DS    AL4                EIB
P060CTCT DS    AL4                TCTTE
P060CFIL DS    CL8                FILENAME
P060CKIN DS    X                  FF=KEYLENGTH IS VALID
         DS    X
P060CKLN DS    XL2                KEYLENGTH
P060CRID DS    XL128              RIDFLD
P060CARD DS    AL4                A(RIDFLD)
P060CLRD DS    X                  L'RIDFLD
         DS    X
P060CGEN DS    X                  FF=GENERIC
         DS    X
P060CRBA DS    X                  FF=RBA
         DS    X
P060CXRB DS    X                  FF=XRBA
         DS    X
P060CRRN DS    X                  FF=RRN
         DS    X
P060CGTE DS    X                  00=EQUAL FF=GTEQ
         DS    X
P060CREQ DS    XL2                REQID
P060CEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P060CEDS DS    AL4                DSA ADDRESS FOR EDF
P060CEDC DS    XL2                CICS DSA LENGTH FOR EDF
P060CEDL DS    XL2                DSA LENGTH FOR EDF
P060CNED DS    X                  FF=NOEDF
         DS    X
P060CNOH DS    X                  FF=NOHANDLE
         DS    X
P060CRSP DS    AL4                RESP
P060CRS2 DS    AL4                RESP2
P060CEND EQU   *                  END MARKER
*
P060CBYP_1450    DS 0H
*                       END-EXEC.
*      * READNEXT 3 RECORDS
*      *  MVC   FWTSBA,FOP19       MOVE WCC,SBA
*      *  MVC   FOPRECNO,=C'S  '   SET RECORD NUMBERS IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'READNEXT' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*             MOVE FOP19      TO FOPSBA.
*ZC    434         MOVE  FOP19,TO,FOPSBA
         MVC   FOPSBA,FOP19  ALIGN LEFT X OTHER
*             MOVE 'S  '      TO FOPRECNO.
*ZC    435         MOVE  'S  ',TO,FOPRECNO
         LARL  ZC_R1,=CL4'S  '
          MVC   FOPRECNO,0(ZC_R1)
*             MOVE 'READNEXT' TO FOPFUNC.
*ZC    436         MOVE  'READNEXT',TO,FOPFUNC
         LARL  ZC_R1,=CL8'READNEXT'
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    437         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1485 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1485    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1485   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1485   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1485) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1485    DS 0H
*      *  LA    R8,3               READ 3 FORWARDS
*      *  RDNXLOOP EQU   *
*      *  BAL   R9,RDNX01          READNEXT MYFILE01 RBA
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*      *  BCT   R8,RDNXLOOP        LOOP
*             MOVE 1 TO LOOPCTRL.
*ZC    443         MOVE  1,TO,LOOPCTRL
          MVHHI LOOPCTRL,1
*         RDNXLOOP.
PG_VSAMRTNA_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_RDNXLOOP DS 0H
*             PERFORM RDNX01.
*ZC    445         PERFORM RDNX01
         LARL  ZC_R14,PG_RDNX01
         LARL  ZC_R0,PG_RDNX01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             PERFORM WQTS.
*ZC    446         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ADD 1 TO LOOPCTRL.
*ZC    447         ADD   1,TO,LOOPCTRL
         LH    ZC_R0,LOOPCTRL
         AHI   ZC_R0,1
         STH   ZC_R0,LOOPCTRL
*             IF LOOPCTRL NOT = 4 THEN GO TO RDNXLOOP.
*ZC    448         IF    LOOPCTRL,NOT,=,4,THEN
         LH    0,LOOPCTRL
         CHI   0,4
         BRC   15-ZC_NE,PG_IF_3_1
*      * READPREV 3 RECORDS
*      *  MVC   FWTSBA,FOP20       MOVE WCC,SBA
*      *  MVC   FOPRECNO,=C'S  '   SET RECORD NUMBERS IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'READPREV' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*ZC    448         GO    TO,RDNXLOOP
         J     PG_RDNXLOOP
PG_IF_3_1    DS    0H  &TYPE
*             MOVE FOP20      TO FOPSBA.
*ZC    454         MOVE  FOP20,TO,FOPSBA
         MVC   FOPSBA,FOP20  ALIGN LEFT X OTHER
*             MOVE 'S  '      TO FOPRECNO.
*ZC    455         MOVE  'S  ',TO,FOPRECNO
         LARL  ZC_R1,=CL4'S  '
          MVC   FOPRECNO,0(ZC_R1)
*             MOVE 'READPREV' TO FOPFUNC.
*ZC    456         MOVE  'READPREV',TO,FOPFUNC
         LARL  ZC_R1,=CL8'READPREV'
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    457         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1551 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1551    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1551   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1551   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1551) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1551    DS 0H
*      *  LA    R8,3               READ 3 BACKWARDS
*      * RDPVLOOP EQU   *
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*      *  EXEC  CICS READPREV FILE('MYFILE01') INTO(MYDATA)
*      *        LENGTH(MYLEN) RIDFLD(MYRID) RBA
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*      *  BCT   R8,RDPVLOOP        LOOP
*             MOVE 1 TO LOOPCTRL.
*ZC    465         MOVE  1,TO,LOOPCTRL
          MVHHI LOOPCTRL,1
*         RDPVLOOP.
PG_RDNXLOOP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_RDPVLOOP DS 0H
*             MOVE 50 TO MYLEN.
*ZC    467         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READPREV FILE('MYFILE01') INTO(MYDATA)
*ZC    468         EXEC  CICS,READPREV,FILE('MYFILE01'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID),RBA
         LARL  R1,P0610         ADDRESS SOURCE
         LARL  R15,P0610        ADDRESS TARGET
         XC    0(P0610END-P0610,R15),0(R1) XC IT
         LARL  R1,=X'0610'         ADDRESS SOURCE
         LARL  R15,P0610FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FN,R15),0(R1) MVC IT
         LA    R0,MYRID         R0=ADDRESS OF RIDFLD
         LARL  R1,P0610ARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P0610LRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0610FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           INTO ADDRESS
         LARL  R1,P0610INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0610LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0610LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0610RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P0610RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0610EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0610TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0610EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0610EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0610EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0610EDF_1577 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0610EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0610)       R1=LCL MODULE PARAMETER LIST
P0610EDF_1577    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0610NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0610BYP_1577   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0610BYP_1577   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0610BYP_1577) ENTRYPOINT FOR IGNORE CONDITION
*
P0610    DS    0H
P0610FN  DS    XL2                FUNCTION CODE
P0610EIB DS    AL4                EIB
P0610TCT DS    AL4                TCTTE
P0610FIL DS    CL8                FILENAME
P0610SET DS    X                  FF=SET IS SPECIFIED
         DS    X
P0610STA DS    AL4                ADDRESS FOR SET
P0610INT DS    AL4                ADDRESS OF INTO
P0610LEN DS    XL4                LENGTH
P0610LAD DS    AL4                ADDRESS OF LENGTH IF LABEL
P0610FAD DS    AL4                ADDRESS OF FLENGTH IF LABEL
P0610KIN DS    X                  FF=KEYLENGTH IS VALID
         DS    X
P0610KLN DS    XL2                KEYLENGTH
P0610RID DS    XL128              RIDFLD
P0610ARD DS    AL4                A(RIDFLD)
P0610LRD DS    X                  L'RIDFLD
         DS    X
P0610RBA DS    X                  FF=RBA
         DS    X
P0610XRB DS    X                  FF=XRBA
         DS    X
P0610RRN DS    X                  FF=RRN
         DS    X
P0610REQ DS    XL2                REQID
P0610EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0610EDS DS    AL4                DSA ADDRESS FOR EDF
P0610EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0610EDL DS    XL2                DSA LENGTH FOR EDF
P0610NED DS    X                  FF=NOEDF
         DS    X
P0610NOH DS    X                  FF=NOHANDLE
         DS    X
P0610RSP DS    AL4                RESP
P0610RS2 DS    AL4                RESP2
P0610END EQU   *                  END MARKER
*
P0610BYP_1577    DS 0H
*                       LENGTH(MYLEN) RIDFLD(MYRID) RBA END-EXEC.
*             PERFORM WQTS.
*ZC    470         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ADD 1 TO LOOPCTRL.
*ZC    471         ADD   1,TO,LOOPCTRL
         LH    ZC_R0,LOOPCTRL
         AHI   ZC_R0,1
         STH   ZC_R0,LOOPCTRL
*             IF LOOPCTRL NOT = 4 THEN GO TO RDPVLOOP.
*ZC    472         IF    LOOPCTRL,NOT,=,4,THEN
         LH    0,LOOPCTRL
         CHI   0,4
         BRC   15-ZC_NE,PG_IF_4_1
*      * READ RANDOM 3 RECORDS
*      *  MVC   FWTSBA,FOP21       MOVE WCC,SBA
*      *  MVC   FOPRECNO,=C'S  '   SET RECORD NUMBERS IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'READ RND' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*ZC    472         GO    TO,RDPVLOOP
         J     PG_RDPVLOOP
PG_IF_4_1    DS    0H  &TYPE
*             MOVE FOP21      TO FOPSBA.
*ZC    478         MOVE  FOP21,TO,FOPSBA
         MVC   FOPSBA,FOP21  ALIGN LEFT X OTHER
*             MOVE 'S  '      TO FOPRECNO.
*ZC    479         MOVE  'S  ',TO,FOPRECNO
         LARL  ZC_R1,=CL4'S  '
          MVC   FOPRECNO,0(ZC_R1)
*             MOVE 'READ RND' TO FOPFUNC.
*ZC    480         MOVE  'READ RND',TO,FOPFUNC
         LARL  ZC_R1,=CL8'READ RND'
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    481         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1638 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1638    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1638   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1638   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1638) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1638    DS 0H
*      *  MVC   MYRID,=XL4'20D'    RIDFLD=X'20D' RECORD 26
*             MOVE 525 TO MYRID.
*      *  BAL   R9,RDNX01          READNEXT MYFILE01 RBA
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*ZC    483         MOVE  525,TO,MYRID
          MVHI  MYRID,525
*             PERFORM RDNX01.
*ZC    486         PERFORM RDNX01
         LARL  ZC_R14,PG_RDNX01
         LARL  ZC_R0,PG_RDNX01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             PERFORM WQTS.
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*      *  MVC   MYRID,=XL4'C3'     RIDFLD=X'C3' RECORD 14
*ZC    487         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE 50  TO MYLEN.
*ZC    490         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             MOVE 195 TO MYRID.
*      * POINT AT RECORD 14, READ RECORD 13
*ZC    491         MOVE  195,TO,MYRID
          MVHI  MYRID,195
*             EXEC CICS READPREV FILE('MYFILE01') INTO(MYDATA)
*ZC    493         EXEC  CICS,READPREV,FILE('MYFILE01'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID),RBA
         LARL  R1,P0610         ADDRESS SOURCE
         LARL  R15,P0610        ADDRESS TARGET
         XC    0(P0610END-P0610,R15),0(R1) XC IT
         LARL  R1,=X'0610'         ADDRESS SOURCE
         LARL  R15,P0610FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FN,R15),0(R1) MVC IT
         LA    R0,MYRID         R0=ADDRESS OF RIDFLD
         LARL  R1,P0610ARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P0610LRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0610FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           INTO ADDRESS
         LARL  R1,P0610INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0610LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0610LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0610RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P0610RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0610EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0610TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0610EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0610EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0610EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0610EDF_1674 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0610EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0610)       R1=LCL MODULE PARAMETER LIST
P0610EDF_1674    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0610NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0610BYP_1674   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0610BYP_1674   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0610BYP_1674) ENTRYPOINT FOR IGNORE CONDITION
*
P0610BYP_1674    DS 0H
*                       LENGTH(MYLEN) RIDFLD(MYRID) RBA END-EXEC.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*             PERFORM WQTS.
*      *  MVC   MYRID,=XL4'121'    RIDFLD=X'121' RECORD 18
*ZC    496         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE 289 TO MYRID.
*      *  BAL   R9,RDNX01          READNEXT MYFILE01 RBA
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*ZC    498         MOVE  289,TO,MYRID
          MVHI  MYRID,289
*             PERFORM RDNX01.
*ZC    501         PERFORM RDNX01
         LARL  ZC_R14,PG_RDNX01
         LARL  ZC_R0,PG_RDNX01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             PERFORM WQTS.
*      * END BROWSE
*      *  MVC   FWTSBA,FOP1C2      MOVE WCC,SBA
*      *  MVI   FOPSEP+1,C' '      RESET SEPARATOR
*      *  LH    R7,FOPL            MESSAGE LENGTH
*      *  AHI   R7,-1              SHORTEN BY 1
*      *  STH   R7,FOPL            STORE BACK
*      *  MVC   FOPRECNO,=C'   '   SET RECORD NUMBERS IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'ENDBR' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*ZC    502         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE FOP1C2     TO FOPSBA.
*ZC    512         MOVE  FOP1C2,TO,FOPSBA
         MVC   FOPSBA,FOP1C2  ALIGN LEFT X OTHER
*             MOVE SPACE      TO FOPSEP.
*ZC    513         MOVE  SPACE,TO,FOPSEP
         MVI   FOPSEP,C' '
*             SUBTRACT 1 FROM FOPL.
*ZC    514         SUBTRACT 1,FROM,FOPL
         LH    ZC_R0,FOPL
         AHI   ZC_R0,-1
         STH   ZC_R0,FOPL
*             MOVE SPACES     TO FOPRECNO.
*ZC    515         MOVE  SPACES,TO,FOPRECNO
         MVI   FOPRECNO,C' '
         MVC   FOPRECNO+1(3-1),FOPRECNO
*             MOVE 'ENDBR   ' TO FOPFUNC.
*ZC    516         MOVE  'ENDBR   ',TO,FOPFUNC
         LARL  ZC_R1,=CL8'ENDBR   '
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    517         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1741 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1741    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1741   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1741   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1741) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1741    DS 0H
*             EXEC CICS ENDBR FILE('MYFILE01') END-EXEC.
*ZC    518         EXEC  CICS,ENDBR,FILE('MYFILE01')
         LARL  R1,P0612         ADDRESS SOURCE
         LARL  R15,P0612        ADDRESS TARGET
         XC    0(P0612END-P0612,R15),0(R1) XC IT
         LARL  R1,=X'0612'         ADDRESS SOURCE
         LARL  R15,P0612FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0612FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FIL,R15),0(R1) MVC IT
         LARL  R1,P0612EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0612TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0612EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0612EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0612EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0612EDF_1754 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0612EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0612)       R1=LCL MODULE PARAMETER LIST
P0612EDF_1754    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0612NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0612BYP_1754   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0612BYP_1754   EXIT IF NONE
* INVREQ, FILENOTFOUND, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0612BYP_1754) ENTRYPOINT FOR IGNORE CONDITION
*
P0612    DS    0H
P0612FN  DS    XL2                FUNCTION CODE
P0612EIB DS    AL4                EIB
P0612TCT DS    AL4                TCTTE
P0612FIL DS    CL8                FILENAME
P0612REQ DS    XL2                REQID
P0612EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0612EDS DS    AL4                DSA ADDRESS FOR EDF
P0612EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0612EDL DS    XL2                DSA LENGTH FOR EDF
P0612NED DS    X                  FF=NOEDF
         DS    X
P0612NOH DS    X                  FF=NOHANDLE
         DS    X
P0612RSP DS    AL4                RESP
P0612RS2 DS    AL4                RESP2
P0612END EQU   *                  END MARKER
*
P0612BYP_1754    DS 0H
*      * NOTFND 2
*      * START BROWSE, READNEXT, INVALID RBA, RAISE NOTFND 2
*      *  MVC   FWTSBA,FOP2C2      MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE01' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'   '   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'READNEXT' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*             MOVE FOP2C2     TO FOPSBA.
*ZC    526         MOVE  FOP2C2,TO,FOPSBA
         MVC   FOPSBA,FOP2C2  ALIGN LEFT X OTHER
*             MOVE 'MYFILE01' TO FOPNAME.
*ZC    527         MOVE  'MYFILE01',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE01'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE SPACES     TO FOPRECNO.
*ZC    528         MOVE  SPACES,TO,FOPRECNO
         MVI   FOPRECNO,C' '
         MVC   FOPRECNO+1(3-1),FOPRECNO
*             MOVE 'READNEXT' TO FOPFUNC.
*ZC    529         MOVE  'READNEXT',TO,FOPFUNC
         LARL  ZC_R1,=CL8'READNEXT'
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    530         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1792 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1792    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1792   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1792   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1792) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1792    DS 0H
*      *  MVC   MYRID,=XL4'C0'     RIDFLD=X'C0' BAD RBA
*      *  MVI   NOTFNDNO,C'2'      SET 2ND NOTFND
*      *  LH    R7,FHANDL          MESSAGE LENGTH
*      *  AHI   R7,-1              SHORTEN BY 1
*      *  STH   R7,FHANDL          STORE BACK
*      *  LA    R7,VSAMRTN7        R7=HANDLE RETURN
*             MOVE 192 TO MYRID.
*ZC    537         MOVE  192,TO,MYRID
          MVHI  MYRID,192
*             MOVE 2   TO NOTFNDNO.
*ZC    538         MOVE  2,TO,NOTFNDNO
          MVHHI NOTFNDNO,2
*             SUBTRACT 1 FROM FHANDL.
*ZC    539         SUBTRACT 1,FROM,FHANDL
         LH    ZC_R0,FHANDL
         AHI   ZC_R0,-1
         STH   ZC_R0,FHANDL
*             MOVE 7   TO DEPCTRL.
*ZC    540         MOVE  7,TO,DEPCTRL
          MVHHI DEPCTRL,7
*             EXEC CICS STARTBR FILE('MYFILE01') RIDFLD(MYRID) RBA
*ZC    541         EXEC  CICS,STARTBR,FILE('MYFILE01'),RIDFLD(MYRID),RBX
                              A
         LARL  R1,P060C         ADDRESS SOURCE
         LARL  R15,P060C        ADDRESS TARGET
         XC    0(P060CEND-P060C,R15),0(R1) XC IT
         LARL  R1,=X'060C'         ADDRESS SOURCE
         LARL  R15,P060CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFN,R15),0(R1) MVC IT
         LA    R0,MYRID         R0=ADDRESS OF RIDFLD
         LARL  R1,P060CARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060CLRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P060CFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFIL,R15),0(R1) MVC IT
         LARL  R15,P060CRID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P060CRBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P060CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060CEDF_1826 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060C)       R1=LCL MODULE PARAMETER LIST
P060CEDF_1826    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060CNOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060CBYP_1826   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060CBYP_1826   EXIT IF NONE
* INVREQ, FILENOTFOUND, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060CBYP_1826) ENTRYPOINT FOR IGNORE CONDITION
*
P060CBYP_1826    DS 0H
*                       END-EXEC.
*      *  BAL   R9,RDNX01          READNEXT MYFILE01 RBA
*             PERFORM RDNX01.
*      * VSAMRTN7 DS    0H
*ZC    544         PERFORM RDNX01
         LARL  ZC_R14,PG_RDNX01
         LARL  ZC_R0,PG_RDNX01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*         VSAMRTN7.
*      * ENDFILE 1 RAISED BY READING FORWARD FROM END
*      *  MVC   FWTSBA,FOP4C2      MOVE WCC,SBA
*      *  MVC   MYRID,=F'-1'       RIDFLD=-1  LAST RECORD
*      *  MVC   FOPRECNO,=C'END'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'READNEXT' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_RDPVLOOP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN7 DS 0H
*             MOVE FOP4C2     TO FOPSBA.
*ZC    553         MOVE  FOP4C2,TO,FOPSBA
         MVC   FOPSBA,FOP4C2  ALIGN LEFT X OTHER
*             MOVE -1         TO MYRID.
*ZC    554         MOVE  -,1,TO,MYRID
          MVHI  MYRID,-1
*             MOVE 'END'      TO FOPRECNO.
*ZC    555         MOVE  'END',TO,FOPRECNO
         LARL  ZC_R1,=CL4'END'
          MVC   FOPRECNO,0(ZC_R1)
*             MOVE 'READNEXT' TO FOPFUNC.
*ZC    556         MOVE  'READNEXT',TO,FOPFUNC
         LARL  ZC_R1,=CL8'READNEXT'
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    557         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1872 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1872    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1872   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1872   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1872) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1872    DS 0H
*      *  MVI   ENDFLENO,C'1'      SET 1ST ENDFILE
*      *  LA    R7,VSAMRTN8        R7=HANDLE RETURN
*             MOVE 1 TO ENDFLENO.
*ZC    560         MOVE  1,TO,ENDFLENO
          MVHHI ENDFLENO,1
*             MOVE 8 TO DEPCTRL.
*      *  BAL   R9,RDNX01          READNEXT MYFILE01 RBA
*ZC    561         MOVE  8,TO,DEPCTRL
          MVHHI DEPCTRL,8
*             PERFORM RDNX01.
*      * VSAMRTN8 DS    0H
*ZC    563         PERFORM RDNX01
         LARL  ZC_R14,PG_RDNX01
         LARL  ZC_R0,PG_RDNX01_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*         VSAMRTN8.
*      * ENDFILE 2 RAISED BY READING BACK FROM START
*      *  MVC   FWTSBA,FOP6C2      MOVE WCC,SBA
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*      *  MVC   MYRID,=F'0'        RIDFLD=0  FIRST RECORD
*      *  MVC   FOPRECNO,=C'BEG'   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'READPREV' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
PG_VSAMRTN7_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN8 DS 0H
*             MOVE FOP6C2     TO FOPSBA.
*ZC    573         MOVE  FOP6C2,TO,FOPSBA
         MVC   FOPSBA,FOP6C2  ALIGN LEFT X OTHER
*             MOVE 50         TO MYLEN.
*ZC    574         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             MOVE ZERO       TO MYRID.
*ZC    575         MOVE  ZERO,TO,MYRID
          MVHI  MYRID,0
*             MOVE 'BEG'      TO FOPRECNO.
*ZC    576         MOVE  'BEG',TO,FOPRECNO
         LARL  ZC_R1,=CL4'BEG'
          MVC   FOPRECNO,0(ZC_R1)
*             MOVE 'READPREV' TO FOPFUNC.
*ZC    577         MOVE  'READPREV',TO,FOPFUNC
         LARL  ZC_R1,=CL8'READPREV'
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    578         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_1931 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_1931    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_1931   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_1931   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_1931) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_1931    DS 0H
*      *  MVI   ENDFLENO,C'2'      SET 2ND ENDFILE
*      *  LA    R7,VSAMRTN9        R7=HANDLE RETURN
*             MOVE 2 TO ENDFLENO.
*ZC    581         MOVE  2,TO,ENDFLENO
          MVHHI ENDFLENO,2
*             MOVE 9 TO DEPCTRL.
*ZC    582         MOVE  9,TO,DEPCTRL
          MVHHI DEPCTRL,9
*             EXEC CICS READPREV FILE('MYFILE01') INTO(MYDATA)
*ZC    583         EXEC  CICS,READPREV,FILE('MYFILE01'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID),RBA
         LARL  R1,P0610         ADDRESS SOURCE
         LARL  R15,P0610        ADDRESS TARGET
         XC    0(P0610END-P0610,R15),0(R1) XC IT
         LARL  R1,=X'0610'         ADDRESS SOURCE
         LARL  R15,P0610FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FN,R15),0(R1) MVC IT
         LA    R0,MYRID         R0=ADDRESS OF RIDFLD
         LARL  R1,P0610ARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P0610LRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0610FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           INTO ADDRESS
         LARL  R1,P0610INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0610LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0610LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0610RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P0610RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0610EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0610TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0610EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0610EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0610EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0610EDF_1954 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0610EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0610)       R1=LCL MODULE PARAMETER LIST
P0610EDF_1954    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0610NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0610BYP_1954   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0610BYP_1954   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0610BYP_1954) ENTRYPOINT FOR IGNORE CONDITION
*
P0610BYP_1954    DS 0H
*                       LENGTH(MYLEN) RIDFLD(MYRID) RBA END-EXEC.
*      * VSAMRTN9 DS    0H
*         VSAMRTN9.
PG_VSAMRTN8_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMRTN9 DS 0H
*             EXEC CICS ENDBR FILE('MYFILE01') END-EXEC.
*ZC    587         EXEC  CICS,ENDBR,FILE('MYFILE01')
         LARL  R1,P0612         ADDRESS SOURCE
         LARL  R15,P0612        ADDRESS TARGET
         XC    0(P0612END-P0612,R15),0(R1) XC IT
         LARL  R1,=X'0612'         ADDRESS SOURCE
         LARL  R15,P0612FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0612FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FIL,R15),0(R1) MVC IT
         LARL  R1,P0612EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0612TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0612EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0612EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0612EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0612EDF_1976 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0612EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0612)       R1=LCL MODULE PARAMETER LIST
P0612EDF_1976    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0612NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0612BYP_1976   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0612BYP_1976   EXIT IF NONE
* INVREQ, FILENOTFOUND, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0612BYP_1976) ENTRYPOINT FOR IGNORE CONDITION
*
P0612BYP_1976    DS 0H
*      * COMPLEX TEST, 2 OVERLAPPING BROWSES OF SAME FILE, PLUS READ OF
*      * FILE THAT IS A MIRROR OF ANOTHER
*      *  MVC   FWTSBA,FOP8C2      MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'COMPLEX' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'   '   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'COMPLEX' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*             MOVE FOP8C2     TO FOPSBA.
*ZC    595         MOVE  FOP8C2,TO,FOPSBA
         MVC   FOPSBA,FOP8C2  ALIGN LEFT X OTHER
*             MOVE 'COMPLEX ' TO FOPNAME.
*ZC    596         MOVE  'COMPLEX ',TO,FOPNAME
         LARL  ZC_R1,=CL8'COMPLEX '
          MVC   FOPNAME,0(ZC_R1)
*             MOVE SPACES     TO FOPRECNO.
*ZC    597         MOVE  SPACES,TO,FOPRECNO
         MVI   FOPRECNO,C' '
         MVC   FOPRECNO+1(3-1),FOPRECNO
*             MOVE 'COMPLEX ' TO FOPFUNC.
*ZC    598         MOVE  'COMPLEX ',TO,FOPFUNC
         LARL  ZC_R1,=CL8'COMPLEX '
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    599         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_2013 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_2013    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_2013   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_2013   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_2013) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_2013    DS 0H
*      *  MVC   MYRID1,=XL4'45'    RIDFLD=X'45' RECORD 7
*             MOVE 69 TO MYRID1.
*ZC    601         MOVE  69,TO,MYRID1
          MVHI  MYRID1,69
*             EXEC CICS STARTBR FILE('MYFILE01') RIDFLD(MYRID1) RBA
*ZC    602         EXEC  CICS,STARTBR,FILE('MYFILE01'),RIDFLD(MYRID1),RX
               BA,REQID(1)
         LARL  R1,P060C         ADDRESS SOURCE
         LARL  R15,P060C        ADDRESS TARGET
         XC    0(P060CEND-P060C,R15),0(R1) XC IT
         LARL  R1,=X'060C'         ADDRESS SOURCE
         LARL  R15,P060CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFN,R15),0(R1) MVC IT
         LA    R0,MYRID1         R0=ADDRESS OF RIDFLD
         LARL  R1,P060CARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID1       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060CLRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P060CFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFIL,R15),0(R1) MVC IT
         LARL  R15,P060CRID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID1   MOVE RIDFLD
         LARL  R1,P060CRBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P060CREQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CREQ,R15),0(R1) MVC IT
         LARL  R1,P060CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060CEDF_2031 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060C)       R1=LCL MODULE PARAMETER LIST
P060CEDF_2031    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060CNOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060CBYP_2031   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060CBYP_2031   EXIT IF NONE
* INVREQ, FILENOTFOUND, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060CBYP_2031) ENTRYPOINT FOR IGNORE CONDITION
*
P060CBYP_2031    DS 0H
*                       REQID(1) END-EXEC.
*      *  MVC   MYRID2,=XL4'87'    RIDFLD=X'87' RECORD 11(BACK TO 10)
*             MOVE 135 TO MYRID2.
*ZC    605         MOVE  135,TO,MYRID2
          MVHI  MYRID2,135
*             EXEC CICS STARTBR FILE('MYFILE01') RIDFLD(MYRID2) RBA
*ZC    606         EXEC  CICS,STARTBR,FILE('MYFILE01'),RIDFLD(MYRID2),RX
               BA,REQID(2)
         LARL  R1,P060C         ADDRESS SOURCE
         LARL  R15,P060C        ADDRESS TARGET
         XC    0(P060CEND-P060C,R15),0(R1) XC IT
         LARL  R1,=X'060C'         ADDRESS SOURCE
         LARL  R15,P060CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFN,R15),0(R1) MVC IT
         LA    R0,MYRID2         R0=ADDRESS OF RIDFLD
         LARL  R1,P060CARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID2       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060CLRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P060CFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFIL,R15),0(R1) MVC IT
         LARL  R15,P060CRID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID2   MOVE RIDFLD
         LARL  R1,P060CRBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(2)         ADDRESS SOURCE
         LARL  R15,P060CREQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CREQ,R15),0(R1) MVC IT
         LARL  R1,P060CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060CEDF_2053 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060C)       R1=LCL MODULE PARAMETER LIST
P060CEDF_2053    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060CNOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060CBYP_2053   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060CBYP_2053   EXIT IF NONE
* INVREQ, FILENOTFOUND, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060CBYP_2053) ENTRYPOINT FOR IGNORE CONDITION
*
P060CBYP_2053    DS 0H
*                       REQID(2) END-EXEC.
*      *  XC    MYRID,MYRID        MYFILE05 START
*             MOVE ZERO TO MYRID.
*      *  LA    R8,4               R8=LOOP LIMIT
*ZC    609         MOVE  ZERO,TO,MYRID
          MVHI  MYRID,0
*             MOVE 1 TO LOOPCTRL.
*      * PLEXLOOP EQU   *
*ZC    611         MOVE  1,TO,LOOPCTRL
          MVHHI LOOPCTRL,1
*         PLEXLOOP.
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
PG_VSAMRTN9_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_PLEXLOOP DS 0H
*             MOVE 50 TO MYLEN.
*ZC    615         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READNEXT FILE('MYFILE01') INTO(MYDATA)
*ZC    616         EXEC  CICS,READNEXT,FILE('MYFILE01'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID1),RBA,REQID(1)
         LARL  R1,P060E         ADDRESS SOURCE
         LARL  R15,P060E        ADDRESS TARGET
         XC    0(P060EEND-P060E,R15),0(R1) XC IT
         LARL  R1,=X'060E'         ADDRESS SOURCE
         LARL  R15,P060EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EFN,R15),0(R1) MVC IT
         LA    R0,MYRID1         R0=ADDRESS OF RIDFLD
         LARL  R1,P060EARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID1       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060ELRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P060EFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EFIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P060EINT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         R0=LENGTH FROM LABEL
         LARL  R1,P060ELEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P060ELAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P060ERID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID1   MOVE RIDFLD
         LARL  R1,P060ERBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P060EREQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EREQ,R15),0(R1) MVC IT
         LARL  R1,P060EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060EEDF_2089 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060E)       R1=LCL MODULE PARAMETER LIST
P060EEDF_2089    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060ENOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060EBYP_2089   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060EBYP_2089   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060EBYP_2089) ENTRYPOINT FOR IGNORE CONDITION
*
P060E    DS    0H
P060EFN  DS    XL2                FUNCTION CODE
P060EEIB DS    AL4                EIB
P060ETCT DS    AL4                TCTTE
P060EFIL DS    CL8                FILENAME
P060ESET DS    X                  FF=SET IS SPECIFIED
         DS    X
P060ESTA DS    AL4                ADDRESS FOR SET
P060EINT DS    AL4                ADDRESS OF INTO
P060ELEN DS    XL4                LENGTH
P060ELAD DS    AL4                ADDRESS OF LENGTH IF LABEL
P060EFAD DS    AL4                ADDRESS OF FLENGTH IF LABEL
P060EKIN DS    X                  FF=KEYLENGTH IS VALID
         DS    X
P060EKLN DS    XL2                KEYLENGTH
P060ERID DS    XL128              RIDFLD
P060EARD DS    AL4                A(RIDFLD)
P060ELRD DS    X                  L'RIDFLD
         DS    X
P060ERBA DS    X                  FF=RBA
         DS    X
P060EXRB DS    X                  FF=XRBA
         DS    X
P060ERRN DS    X                  FF=RRN
         DS    X
P060EREQ DS    XL2                REQID
P060EEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P060EEDS DS    AL4                DSA ADDRESS FOR EDF
P060EEDC DS    XL2                CICS DSA LENGTH FOR EDF
P060EEDL DS    XL2                DSA LENGTH FOR EDF
P060ENED DS    X                  FF=NOEDF
         DS    X
P060ENOH DS    X                  FF=NOHANDLE
         DS    X
P060ERSP DS    AL4                RESP
P060ERS2 DS    AL4                RESP2
P060EEND EQU   *                  END MARKER
*
P060EBYP_2089    DS 0H
*                  LENGTH(MYLEN) RIDFLD(MYRID1) RBA REQID(1) END-EXEC.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*             PERFORM WQTS.
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*ZC    619         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE 50 TO MYLEN.
*ZC    621         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READPREV FILE('MYFILE01') INTO(MYDATA)
*                       LENGTH(MYLEN) RIDFLD(MYRID2) RBA REQID(2)
*ZC    622         EXEC  CICS,READPREV,FILE('MYFILE01'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID2),RBA,REQID(2)
         LARL  R1,P0610         ADDRESS SOURCE
         LARL  R15,P0610        ADDRESS TARGET
         XC    0(P0610END-P0610,R15),0(R1) XC IT
         LARL  R1,=X'0610'         ADDRESS SOURCE
         LARL  R15,P0610FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FN,R15),0(R1) MVC IT
         LA    R0,MYRID2         R0=ADDRESS OF RIDFLD
         LARL  R1,P0610ARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID2       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P0610LRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0610FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           INTO ADDRESS
         LARL  R1,P0610INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0610LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0610LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0610RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID2   MOVE RIDFLD
         LARL  R1,P0610RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(2)         ADDRESS SOURCE
         LARL  R15,P0610REQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610REQ,R15),0(R1) MVC IT
         LARL  R1,P0610EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0610TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0610EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0610EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0610EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0610EDF_2119 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0610EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0610)       R1=LCL MODULE PARAMETER LIST
P0610EDF_2119    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0610NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0610BYP_2119   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0610BYP_2119   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0610BYP_2119) ENTRYPOINT FOR IGNORE CONDITION
*
P0610BYP_2119    DS 0H
*                       END-EXEC.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*             PERFORM WQTS.
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
*ZC    626         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             MOVE 50 TO MYLEN.
*ZC    628         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC  CICS READ FILE('MYFILE05') INTO(MYDATA)
*ZC    629         EXEC  CICS,READ,FILE('MYFILE05'),INTO(MYDATA),LENGTHX
               (MYLEN),RIDFLD(MYRID),RBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE05'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P0602RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_2148 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_2148    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_2148   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_2148   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_2148) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_2148    DS 0H
*                        LENGTH(MYLEN) RIDFLD(MYRID) RBA END-EXEC.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*             PERFORM WQTS.
*      *  L     R9,MYRID           CURRENT RBA
*      *  AHI   R9,50              +RECORD LENGTH
*      *  ST    R9,MYRID           NEW RBA
*ZC    632         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ADD 50 TO MYRID.
*      *  BCT   R8,PLEXLOOP        LOOP
*ZC    636         ADD   50,TO,MYRID
         ASI   MYRID,50
*             ADD 1 TO LOOPCTRL.
*ZC    638         ADD   1,TO,LOOPCTRL
         LH    ZC_R0,LOOPCTRL
         AHI   ZC_R0,1
         STH   ZC_R0,LOOPCTRL
*             IF LOOPCTRL NOT = 5 THEN GO TO PLEXLOOP.
*ZC    639         IF    LOOPCTRL,NOT,=,5,THEN
         LH    0,LOOPCTRL
         CHI   0,5
         BRC   15-ZC_NE,PG_IF_5_1
*ZC    639         GO    TO,PLEXLOOP
         J     PG_PLEXLOOP
PG_IF_5_1    DS    0H  &TYPE
*             EXEC CICS ENDBR FILE('MYFILE01') REQID(1) END-EXEC.
*ZC    640         EXEC  CICS,ENDBR,FILE('MYFILE01'),REQID(1)
         LARL  R1,P0612         ADDRESS SOURCE
         LARL  R15,P0612        ADDRESS TARGET
         XC    0(P0612END-P0612,R15),0(R1) XC IT
         LARL  R1,=X'0612'         ADDRESS SOURCE
         LARL  R15,P0612FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0612FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FIL,R15),0(R1) MVC IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0612REQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612REQ,R15),0(R1) MVC IT
         LARL  R1,P0612EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0612TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0612EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0612EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0612EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0612EDF_2194 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0612EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0612)       R1=LCL MODULE PARAMETER LIST
P0612EDF_2194    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0612NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0612BYP_2194   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0612BYP_2194   EXIT IF NONE
* INVREQ, FILENOTFOUND, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0612BYP_2194) ENTRYPOINT FOR IGNORE CONDITION
*
P0612BYP_2194    DS 0H
*             EXEC CICS ENDBR FILE('MYFILE01') REQID(2) END-EXEC.
*ZC    641         EXEC  CICS,ENDBR,FILE('MYFILE01'),REQID(2)
         LARL  R1,P0612         ADDRESS SOURCE
         LARL  R15,P0612        ADDRESS TARGET
         XC    0(P0612END-P0612,R15),0(R1) XC IT
         LARL  R1,=X'0612'         ADDRESS SOURCE
         LARL  R15,P0612FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0612FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FIL,R15),0(R1) MVC IT
         LARL  R1,=AL2(2)         ADDRESS SOURCE
         LARL  R15,P0612REQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612REQ,R15),0(R1) MVC IT
         LARL  R1,P0612EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0612TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0612EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0612EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0612EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0612EDF_2208 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0612EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0612)       R1=LCL MODULE PARAMETER LIST
P0612EDF_2208    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0612NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0612BYP_2208   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0612BYP_2208   EXIT IF NONE
* INVREQ, FILENOTFOUND, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0612BYP_2208) ENTRYPOINT FOR IGNORE CONDITION
*
P0612BYP_2208    DS 0H
*      * MYFILE05, READ RECS 2-4, RESETBR, READ RECS 8-6
*      *  MVC   FWTSBA,FOP9C2      MOVE WCC,SBA
*      *  MVC   FOPNAME,=CL8'MYFILE05' SET FILENAME IN MESSAGE
*      *  MVC   FOPRECNO,=C'   '   SET RECORD NUMBER IN MESSAGE
*      *  MVC   FOPFUNC,=CL8'RESETBR' SET FUNCTION IN MESSAGE
*      *  MVC   FWTMSG,FOPTYPE     MOVE MESSAGE TEXT
*             MOVE FOP9C2     TO FOPSBA.
*ZC    648         MOVE  FOP9C2,TO,FOPSBA
         MVC   FOPSBA,FOP9C2  ALIGN LEFT X OTHER
*             MOVE 'MYFILE05' TO FOPNAME.
*ZC    649         MOVE  'MYFILE05',TO,FOPNAME
         LARL  ZC_R1,=CL8'MYFILE05'
          MVC   FOPNAME,0(ZC_R1)
*             MOVE SPACES     TO FOPRECNO.
*ZC    650         MOVE  SPACES,TO,FOPRECNO
         MVI   FOPRECNO,C' '
         MVC   FOPRECNO+1(3-1),FOPRECNO
*             MOVE 'RESETBR ' TO FOPFUNC.
*ZC    651         MOVE  'RESETBR ',TO,FOPFUNC
         LARL  ZC_R1,=CL8'RESETBR '
          MVC   FOPFUNC,0(ZC_R1)
*             EXEC CICS SEND FROM(FOPLINE) LENGTH(FOPL) END-EXEC.
*ZC    652         EXEC  CICS,SEND,FROM(FOPLINE),LENGTH(FOPL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FOPL   SET LENGTH FROM LABEL
         LA    R0,FOPLINE           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_2246 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_2246    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_2246   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_2246   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_2246) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_2246    DS 0H
*      *  MVC   MYRID1,=AL4(2*50)  RIDFLD=X'64' RECORD 2
*             MOVE 100 TO MYRID1.
*ZC    654         MOVE  100,TO,MYRID1
          MVHI  MYRID1,100
*             EXEC CICS STARTBR FILE('MYFILE05') RIDFLD(MYRID1) RBA
*ZC    655         EXEC  CICS,STARTBR,FILE('MYFILE05'),RIDFLD(MYRID1),RX
               BA,REQID(1)
         LARL  R1,P060C         ADDRESS SOURCE
         LARL  R15,P060C        ADDRESS TARGET
         XC    0(P060CEND-P060C,R15),0(R1) XC IT
         LARL  R1,=X'060C'         ADDRESS SOURCE
         LARL  R15,P060CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFN,R15),0(R1) MVC IT
         LA    R0,MYRID1         R0=ADDRESS OF RIDFLD
         LARL  R1,P060CARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID1       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060CLRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE05'         ADDRESS SOURCE
         LARL  R15,P060CFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CFIL,R15),0(R1) MVC IT
         LARL  R15,P060CRID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID1   MOVE RIDFLD
         LARL  R1,P060CRBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P060CREQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P060CREQ,R15),0(R1) MVC IT
         LARL  R1,P060CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060CEDF_2264 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060C)       R1=LCL MODULE PARAMETER LIST
P060CEDF_2264    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060CNOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060CBYP_2264   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060CBYP_2264   EXIT IF NONE
* INVREQ, FILENOTFOUND, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060CBYP_2264) ENTRYPOINT FOR IGNORE CONDITION
*
P060CBYP_2264    DS 0H
*                       REQID(1) END-EXEC.
*      *  LA    R8,3               R8=LOOP LIMIT
*             MOVE 1 TO LOOPCTRL.
*      * RSBRLP1  EQU   *
*ZC    658         MOVE  1,TO,LOOPCTRL
          MVHHI LOOPCTRL,1
*         RSBRLP1.
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
PG_PLEXLOOP_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_RSBRLP1 DS  0H
*             MOVE 50 TO MYLEN.
*ZC    662         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READNEXT FILE('MYFILE05') INTO(MYDATA)
*                       LENGTH(MYLEN) RIDFLD(MYRID1) RBA REQID(1)
*ZC    663         EXEC  CICS,READNEXT,FILE('MYFILE05'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID1),RBA,REQID(1)
         LARL  R1,P060E         ADDRESS SOURCE
         LARL  R15,P060E        ADDRESS TARGET
         XC    0(P060EEND-P060E,R15),0(R1) XC IT
         LARL  R1,=X'060E'         ADDRESS SOURCE
         LARL  R15,P060EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EFN,R15),0(R1) MVC IT
         LA    R0,MYRID1         R0=ADDRESS OF RIDFLD
         LARL  R1,P060EARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID1       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060ELRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE05'         ADDRESS SOURCE
         LARL  R15,P060EFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EFIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P060EINT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         R0=LENGTH FROM LABEL
         LARL  R1,P060ELEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P060ELAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P060ERID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID1   MOVE RIDFLD
         LARL  R1,P060ERBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P060EREQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EREQ,R15),0(R1) MVC IT
         LARL  R1,P060EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060EEDF_2294 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060E)       R1=LCL MODULE PARAMETER LIST
P060EEDF_2294    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060ENOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060EBYP_2294   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060EBYP_2294   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060EBYP_2294) ENTRYPOINT FOR IGNORE CONDITION
*
P060EBYP_2294    DS 0H
*                       END-EXEC.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*             PERFORM WQTS.
*      *  BCT   R8,RSBRLP1         LOOP
*ZC    667         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ADD 1 TO LOOPCTRL.
*ZC    669         ADD   1,TO,LOOPCTRL
         LH    ZC_R0,LOOPCTRL
         AHI   ZC_R0,1
         STH   ZC_R0,LOOPCTRL
*             IF LOOPCTRL NOT = 4 THEN GO TO RSBRLP1.
*ZC    670         IF    LOOPCTRL,NOT,=,4,THEN
         LH    0,LOOPCTRL
         CHI   0,4
         BRC   15-ZC_NE,PG_IF_6_1
*      *  MVC   MYRID1,=AL4(8*50)  RIDFLD=X'190' RECORD 8
*ZC    670         GO    TO,RSBRLP1
         J     PG_RSBRLP1
PG_IF_6_1    DS    0H  &TYPE
*             MOVE 400 TO MYRID1.
*ZC    672         MOVE  400,TO,MYRID1
          MVHI  MYRID1,400
*             EXEC CICS RESETBR FILE('MYFILE05') RIDFLD(MYRID1) RBA
*ZC    673         EXEC  CICS,RESETBR,FILE('MYFILE05'),RIDFLD(MYRID1),RX
               BA,REQID(1)
         LARL  R1,P0614         ADDRESS SOURCE
         LARL  R15,P0614        ADDRESS TARGET
         XC    0(P0614END-P0614,R15),0(R1) XC IT
         LARL  R1,=X'0614'         ADDRESS SOURCE
         LARL  R15,P0614FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0614FN,R15),0(R1) MVC IT
         LA    R0,MYRID1         R0=ADDRESS OF RIDFLD
         LARL  R1,P0614ARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID1       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P0614LRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE05'         ADDRESS SOURCE
         LARL  R15,P0614FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0614FIL,R15),0(R1) MVC IT
         LARL  R15,P0614RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID1   MOVE RIDFLD
         LARL  R1,P0614RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0614REQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P0614REQ,R15),0(R1) MVC IT
         LARL  R1,P0614EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0614TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0614EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0614EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0614EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0614EDF_2342 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0614EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0614)       R1=LCL MODULE PARAMETER LIST
P0614EDF_2342    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0614NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0614BYP_2342   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0614BYP_2342   EXIT IF NONE
* INVREQ, FILENOTFOUND, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0614BYP_2342) ENTRYPOINT FOR IGNORE CONDITION
*
P0614    DS    0H
P0614FN  DS    XL2                FUNCTION CODE
P0614EIB DS    AL4                EIB
P0614TCT DS    AL4                TCTTE
P0614FIL DS    CL8                FILENAME
P0614KLN DS    XL2                KEYLENGTH
P0614RID DS    XL128              RIDFLD
P0614ARD DS    AL4                A(RIDFLD)
P0614KIN DS    X                  FF=KEYLENGTH IS VALID
         DS    X
P0614LRD DS    X                  L'RIDFLD
         DS    X
P0614GEN DS    X                  FF=GENERIC
         DS    X
P0614RBA DS    X                  FF=RBA
         DS    X
P0614XRB DS    X                  FF=XRBA
         DS    X
P0614RRN DS    X                  FF=RRN
         DS    X
P0614GTE DS    X                  00=EQUAL FF=GTEQ
         DS    X
P0614REQ DS    XL2                REQID
P0614EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0614EDS DS    AL4                DSA ADDRESS FOR EDF
P0614EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0614EDL DS    XL2                DSA LENGTH FOR EDF
P0614NED DS    X                  FF=NOEDF
         DS    X
P0614NOH DS    X                  FF=NOHANDLE
         DS    X
P0614RSP DS    AL4                RESP
P0614RS2 DS    AL4                RESP2
P0614END EQU   *                  END MARKER
*
P0614BYP_2342    DS 0H
*                       REQID(1) END-EXEC.
*      *  LA    R8,3               R8=LOOP LIMIT
*             MOVE 1 TO LOOPCTRL.
*      * RSBRLP2  EQU   *
*ZC    676         MOVE  1,TO,LOOPCTRL
          MVHHI LOOPCTRL,1
*         RSBRLP2.
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
PG_RSBRLP1_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_RSBRLP2 DS  0H
*             MOVE 50 TO MYLEN.
*ZC    680         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READPREV FILE('MYFILE05') INTO(MYDATA)
*                       LENGTH(MYLEN) RIDFLD(MYRID1) RBA REQID(1)
*ZC    681         EXEC  CICS,READPREV,FILE('MYFILE05'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID1),RBA,REQID(1)
         LARL  R1,P0610         ADDRESS SOURCE
         LARL  R15,P0610        ADDRESS TARGET
         XC    0(P0610END-P0610,R15),0(R1) XC IT
         LARL  R1,=X'0610'         ADDRESS SOURCE
         LARL  R15,P0610FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FN,R15),0(R1) MVC IT
         LA    R0,MYRID1         R0=ADDRESS OF RIDFLD
         LARL  R1,P0610ARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID1       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P0610LRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE05'         ADDRESS SOURCE
         LARL  R15,P0610FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           INTO ADDRESS
         LARL  R1,P0610INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0610LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0610LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0610RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID1   MOVE RIDFLD
         LARL  R1,P0610RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0610REQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P0610REQ,R15),0(R1) MVC IT
         LARL  R1,P0610EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0610TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0610EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0610EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0610EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0610EDF_2373 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0610EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0610)       R1=LCL MODULE PARAMETER LIST
P0610EDF_2373    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0610NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0610BYP_2373   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0610BYP_2373   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0610BYP_2373) ENTRYPOINT FOR IGNORE CONDITION
*
P0610BYP_2373    DS 0H
*                       END-EXEC.
*      *  BAL   R9,WQTS            WRITE IT TO TS Q
*             PERFORM WQTS.
*      *  BCT   R8,RSBRLP2         LOOP
*ZC    685         PERFORM WQTS
         LARL  ZC_R14,PG_WQTS
         LARL  ZC_R0,PG_WQTS_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             ADD 1 TO LOOPCTRL.
*ZC    687         ADD   1,TO,LOOPCTRL
         LH    ZC_R0,LOOPCTRL
         AHI   ZC_R0,1
         STH   ZC_R0,LOOPCTRL
*             IF LOOPCTRL NOT = 4 THEN GO TO RSBRLP2.
*ZC    688         IF    LOOPCTRL,NOT,=,4,THEN
         LH    0,LOOPCTRL
         CHI   0,4
         BRC   15-ZC_NE,PG_IF_7_1
*ZC    688         GO    TO,RSBRLP2
         J     PG_RSBRLP2
PG_IF_7_1    DS    0H  &TYPE
*             EXEC CICS ENDBR FILE('MYFILE05') REQID(1) END-EXEC.
*ZC    689         EXEC  CICS,ENDBR,FILE('MYFILE05'),REQID(1)
         LARL  R1,P0612         ADDRESS SOURCE
         LARL  R15,P0612        ADDRESS TARGET
         XC    0(P0612END-P0612,R15),0(R1) XC IT
         LARL  R1,=X'0612'         ADDRESS SOURCE
         LARL  R15,P0612FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE05'         ADDRESS SOURCE
         LARL  R15,P0612FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612FIL,R15),0(R1) MVC IT
         LARL  R1,=AL2(1)         ADDRESS SOURCE
         LARL  R15,P0612REQ        ADDRESS TARGET AS LABEL
         MVC   0(L'P0612REQ,R15),0(R1) MVC IT
         LARL  R1,P0612EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0612TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0612EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0612EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0612EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0612EDF_2416 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0612EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0612)       R1=LCL MODULE PARAMETER LIST
P0612EDF_2416    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0612NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0612BYP_2416   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0612BYP_2416   EXIT IF NONE
* INVREQ, FILENOTFOUND, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0612BYP_2416) ENTRYPOINT FOR IGNORE CONDITION
*
P0612BYP_2416    DS 0H
*             EXEC CICS SEND FROM(ENDMSG) LENGTH(ENDMSGL) END-EXEC.
*ZC    690         EXEC  CICS,SEND,FROM(ENDMSG),LENGTH(ENDMSGL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),ENDMSGL   SET LENGTH FROM LABEL
         LA    R0,ENDMSG           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_2430 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_2430    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_2430   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_2430   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_2430) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_2430    DS 0H
*             EXEC CICS RETURN END-EXEC.
*ZC    691         EXEC  CICS,RETURN
         LARL  R1,P0E08         ADDRESS SOURCE
         LARL  R15,P0E08        ADDRESS TARGET
         XC    0(P0E08END-P0E08,R15),0(R1) XC IT
         LARL  R1,=X'0E08'         ADDRESS SOURCE
         LARL  R15,P0E08FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E08FN,R15),0(R1) MVC IT
         LARL  R1,P0E08EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E08EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E08EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
* SPECIAL LINKAGE
         LARL  R0,P0E08EDF_2443 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E08EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0E08           R1=PARAMETER LIST
         LARL  R14,P0E08RTN_2443 RETURN ADDRESS
         LRL   R15,=V(LCL0E08)    R15=EXTERNAL RETURN MODULE ADDRESS
P0E08EDF_2443    EQU *
         BR    R15                GO TO IT
*
P0E08RTN_2443    EQU *
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0E08BYP_2443   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(0)             IGNORE HERE IS NOT PERMITTED
*
P0E08    DS    0H
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08CHN DS    CL16               CHANNEL NAME
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E08EDS DS    AL4                DSA ADDRESS FOR EDF
P0E08EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E08EDL DS    XL2                DSA LENGTH FOR EDF
P0E08NED DS    X                  FF=NOEDF
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
*
P0E08BYP_2443    DS 0H
*      * HANDLE ROUTINES
*      * VSAMFNF  DS    0H
*         VSAMFNF.
*      *  MVC   FWTSBA,FOP5        MOVE WCC,SBA
*      *  MVC   FHANDCON,=CL12'FILENOTFOUND' MOVE CONDITION
PG_RSBRLP2_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMFNF DS  0H
*             MOVE FOP5           TO FHASBA.
*ZC    699         MOVE  FOP5,TO,FHASBA
         MVC   FHASBA,FOP5  ALIGN LEFT X OTHER
*             MOVE 'FILENOTFOUND' TO FHANDCON.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    700         MOVE  'FILENOTFOUND',TO,FHANDCON
         LARL  ZC_R1,=CL12'FILENOTFOUND'
          MVC   FHANDCON,0(ZC_R1)
*             PERFORM HEXFDBK.
*      *  B     FWTHSEND           EXIT
*ZC    702         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             GO TO FWTHSEND.
*      * VSAMDIS  DS    0H
*ZC    704         GO    TO,FWTHSEND
         J     PG_FWTHSEND
*         VSAMDIS.
*      *  MVC   FWTSBA,FOP7        MOVE WCC,SBA
*      *  MVC   FHANDCON,=CL12'DISABLED' MOVE CONDITION
PG_VSAMFNF_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMDIS DS  0H
*             MOVE FOP7           TO FHASBA.
*ZC    709         MOVE  FOP7,TO,FHASBA
         MVC   FHASBA,FOP7  ALIGN LEFT X OTHER
*             MOVE 'DISABLED    ' TO FHANDCON.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    710         MOVE  'DISABLED    ',TO,FHANDCON
         LARL  ZC_R1,=CL12'DISABLED    '
          MVC   FHANDCON,0(ZC_R1)
*             PERFORM HEXFDBK.
*      *  B     FWTHSEND           EXIT
*ZC    712         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             GO TO FWTHSEND.
*      * VSAMNOTO DS    0H
*ZC    714         GO    TO,FWTHSEND
         J     PG_FWTHSEND
*         VSAMNOTO.
*      *  MVC   FWTSBA,FOP9        MOVE WCC,SBA
*      *  MVC   FHANDCON,=CL12'NOTOPEN' MOVE CONDITION
PG_VSAMDIS_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMNOTO DS 0H
*             MOVE FOP9           TO FHASBA.
*ZC    719         MOVE  FOP9,TO,FHASBA
         MVC   FHASBA,FOP9  ALIGN LEFT X OTHER
*             MOVE 'NOTOPEN     ' TO FHANDCON.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    720         MOVE  'NOTOPEN     ',TO,FHANDCON
         LARL  ZC_R1,=CL12'NOTOPEN     '
          MVC   FHANDCON,0(ZC_R1)
*             PERFORM HEXFDBK.
*      *  B     FWTHSEND           EXIT
*ZC    722         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             GO TO FWTHSEND.
*      * VSAMNOTF DS    0H
*ZC    724         GO    TO,FWTHSEND
         J     PG_FWTHSEND
*         VSAMNOTF.
*      *  CLI   NOTFNDNO,C'1'      1ST ?
*      *  BE    NOTFNDGO           EXIT IF IT IS
PG_VSAMNOTO_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMNOTF DS 0H
*             GO TO NOTF1 NOTF2 DEPENDING ON NOTFNDNO.
*ZC    729         GO    TO,NOTF1,NOTF2,DEPENDING,ON,NOTFNDNO
         LH    ZC_R1,NOTFNDNO
         CHI   ZC_R1,1
         JL    PG_ZC_GO_TAB_1+4*2
         CHI   ZC_R1,2
         JH    PG_ZC_GO_TAB_1+4*2
         SLL   ZC_R1,2
         LARL  ZC_R2,PG_ZC_GO_TAB_1-4
         B     0(ZC_R1,ZC_R2)
PG_ZC_GO_TAB_1 DS  0H  &TYPE
         J     PG_NOTF1
         J     PG_NOTF2
*             GO TO ABEND.
*ZC    730         GO    TO,ABEND
         J     PG_ABEND
*         NOTF1.
*      *  MVC   FWTSBA,FOP11       MOVE WCC,SBA
PG_VSAMNOTF_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOTF1 DS    0H
*             MOVE FOP11 TO FHASBA.
*ZC    733         MOVE  FOP11,TO,FHASBA
         MVC   FHASBA,FOP11  ALIGN LEFT X OTHER
*             GO TO NOTFEND.
*ZC    734         GO    TO,NOTFEND
         J     PG_NOTFEND
*         NOTF2.
*      *  MVI   FHSEP,C' '         RESET SEPARATOR
*      *  MVC   FWTSBA,FOP3C2      MOVE WCC,SBA
PG_NOTF1_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOTF2 DS    0H
*             MOVE SPACE  TO FHSEP.
*ZC    738         MOVE  SPACE,TO,FHSEP
         MVI   FHSEP,C' '
*             MOVE FOP3C2 TO FHASBA.
*      * NOTFNDGO EQU   *
*ZC    739         MOVE  FOP3C2,TO,FHASBA
         MVC   FHASBA,FOP3C2  ALIGN LEFT X OTHER
*         NOTFEND.
*      *  MVC   FHANDCON,=CL12'NOTFND' MOVE CONDITION
PG_NOTF2_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_NOTFEND DS  0H
*             MOVE 'NOTFND      ' TO FHANDCON.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    743         MOVE  'NOTFND      ',TO,FHANDCON
         LARL  ZC_R1,=CL12'NOTFND      '
          MVC   FHANDCON,0(ZC_R1)
*             PERFORM HEXFDBK.
*      *  B     FWTHSEND           EXIT
*ZC    745         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             GO TO FWTHSEND.
*      * VSAMLNG  DS    0H
*ZC    747         GO    TO,FWTHSEND
         J     PG_FWTHSEND
*         VSAMLNG.
*      *  MVC   FWTSBA,FOP13       MOVE WCC,SBA
PG_NOTFEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMLNG DS  0H
*             MOVE FOP13 TO FHASBA.
*      *  L     R8,EIBRESP2        R8=RESP2
*      *  CVD   R8,DEC             CONVERT TO DECIMAL
*      *  XC    FHANDCON,FHANDCON  CLEAR CONDITION
*      *  MVC   FHANDCON+6(4),=X'40202020' MOVE EDIT WORD
*      *  ED    FHANDCON+6(4),DEC+6 EDIT RESP2
*      *  MVC   FHANDCON(8),=C'LENGERR/' MOVE CONDITION
*ZC    751         MOVE  FOP13,TO,FHASBA
         MVC   FHASBA,FOP13  ALIGN LEFT X OTHER
*             MOVE 'LENGERR/    ' TO FHANDCON.
*ZC    758         MOVE  'LENGERR/    ',TO,FHANDCON
         LARL  ZC_R1,=CL12'LENGERR/    '
          MVC   FHANDCON,0(ZC_R1)
*             MOVE EIBRESP2 TO WORK1A.
*ZC    759         MOVE  EIBRESP2,TO,WORK1A
         L     0,EIBRESP2
         CVD   0,ZCVT_PWORK
         UNPK  0+WORK1A(4),5+ZCVT_PWORK(3) UNPK #1 NORMAL
         OI    4-1+WORK1A,X'F0'  RPI 1065
*             MOVE WORK1B TO FHALNG.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    760         MOVE  WORK1B,TO,FHALNG
         MVC   FHALNG,WORK1B  ALIGN LEFT X OTHER
*             PERFORM HEXFDBK.
*      *  B     FWTHSEND           EXIT
*ZC    762         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             GO TO FWTHSEND.
*      * VSAMINV  DS    0H
*ZC    764         GO    TO,FWTHSEND
         J     PG_FWTHSEND
*         VSAMINV.
*      *  MVC   FWTSBA,FOP15       MOVE WCC,SBA
PG_VSAMLNG_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMINV DS  0H
*             MOVE FOP15 TO FHASBA.
*      *  L     R8,EIBRESP2        R8=RESP2
*      *  CVD   R8,DEC             CONVERT TO DECIMAL
*      *  XC    FHANDCON,FHANDCON  CLEAR CONDITION
*      *  MVC   FHANDCON+5(4),=X'40202020' MOVE EDIT WORD
*      *  ED    FHANDCON+5(4),DEC+6 EDIT RESP2
*      *  MVC   FHANDCON(7),=C'INVREQ/' MOVE CONDITION
*ZC    768         MOVE  FOP15,TO,FHASBA
         MVC   FHASBA,FOP15  ALIGN LEFT X OTHER
*             MOVE 'INVREQ/     ' TO FHANDCON.
*ZC    775         MOVE  'INVREQ/     ',TO,FHANDCON
         LARL  ZC_R1,=CL12'INVREQ/     '
          MVC   FHANDCON,0(ZC_R1)
*             MOVE EIBRESP2 TO WORK1A.
*ZC    776         MOVE  EIBRESP2,TO,WORK1A
         L     0,EIBRESP2
         CVD   0,ZCVT_PWORK
         UNPK  0+WORK1A(4),5+ZCVT_PWORK(3) UNPK #1 NORMAL
         OI    4-1+WORK1A,X'F0'  RPI 1065
*             MOVE WORK1B TO FHAINV.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    777         MOVE  WORK1B,TO,FHAINV
         MVC   FHAINV,WORK1B  ALIGN LEFT X OTHER
*             PERFORM HEXFDBK.
*      *  B     FWTHSEND           EXIT
*ZC    779         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             GO TO FWTHSEND.
*      * VSAMILL  DS    0H
*ZC    781         GO    TO,FWTHSEND
         J     PG_FWTHSEND
*         VSAMILL.
*      *  MVC   FWTSBA,FOP17       MOVE WCC,SBA
PG_VSAMINV_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMILL DS  0H
*             MOVE FOP17 TO FHASBA.
*      *  L     R8,EIBRESP2        R8=RESP2
*      *  CVD   R8,DEC             CONVERT TO DECIMAL
*      *  XC    FHANDCON,FHANDCON  CLEAR CONDITION
*      *  MVC   FHANDCON+7(4),=X'40202020' MOVE EDIT WORD
*      *  ED    FHANDCON+7(4),DEC+6 EDIT RESP2
*      *  MVC   FHANDCON(8),=C'ILLOGIC/' MOVE CONDITION
*ZC    785         MOVE  FOP17,TO,FHASBA
         MVC   FHASBA,FOP17  ALIGN LEFT X OTHER
*             MOVE 'ILLOGIC/    ' TO FHANDCON.
*ZC    792         MOVE  'ILLOGIC/    ',TO,FHANDCON
         LARL  ZC_R1,=CL12'ILLOGIC/    '
          MVC   FHANDCON,0(ZC_R1)
*             MOVE EIBRESP2 TO WORK1A.
*ZC    793         MOVE  EIBRESP2,TO,WORK1A
         L     0,EIBRESP2
         CVD   0,ZCVT_PWORK
         UNPK  0+WORK1A(4),5+ZCVT_PWORK(3) UNPK #1 NORMAL
         OI    4-1+WORK1A,X'F0'  RPI 1065
*             MOVE WORK1C TO FHAILL.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    794         MOVE  WORK1C,TO,FHAILL
         MVC   FHAILL,WORK1C  ALIGN LEFT X OTHER
*             PERFORM HEXFDBK.
*      *  B     FWTHSEND           EXIT
*ZC    796         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*             GO TO FWTHSEND.
*      * VSAMENDF DS    0H
*ZC    798         GO    TO,FWTHSEND
         J     PG_FWTHSEND
*         VSAMENDF.
*      *  CLI   ENDFLENO,C'1'      1ST ?
*      *  BE    ENDFLEGO           EXIT IF IT IS
PG_VSAMILL_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_VSAMENDF DS 0H
*             GO TO ENDF1 ENDF2 DEPENDING ON ENDFLENO.
*ZC    803         GO    TO,ENDF1,ENDF2,DEPENDING,ON,ENDFLENO
         LH    ZC_R1,ENDFLENO
         CHI   ZC_R1,1
         JL    PG_ZC_GO_TAB_2+4*2
         CHI   ZC_R1,2
         JH    PG_ZC_GO_TAB_2+4*2
         SLL   ZC_R1,2
         LARL  ZC_R2,PG_ZC_GO_TAB_2-4
         B     0(ZC_R1,ZC_R2)
PG_ZC_GO_TAB_2 DS  0H  &TYPE
         J     PG_ENDF1
         J     PG_ENDF2
*             GO TO ABEND.
*ZC    804         GO    TO,ABEND
         J     PG_ABEND
*         ENDF1.
*      *  MVC   FWTSBA,FOP5C2      MOVE WCC,SBA
PG_VSAMENDF_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ENDF1 DS    0H
*             MOVE FOP5C2 TO FHASBA.
*ZC    807         MOVE  FOP5C2,TO,FHASBA
         MVC   FHASBA,FOP5C2  ALIGN LEFT X OTHER
*             GO TO ENDFEND
*ZC    808         GO    TO,ENDFEND
         J     PG_ENDFEND
*         ENDF2.
*      *  MVC   FWTSBA,FOP7C2      MOVE WCC,SBA
PG_ENDF1_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ENDF2 DS    0H
*             MOVE FOP7C2 TO FHASBA.
*      * ENDFLEGO EQU   *
*ZC    811         MOVE  FOP7C2,TO,FHASBA
         MVC   FHASBA,FOP7C2  ALIGN LEFT X OTHER
*         ENDFEND.
*      *  MVC   FHANDCON,=CL12'ENDFILE' MOVE CONDITION
PG_ENDF2_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ENDFEND DS  0H
*             MOVE 'ENDFILE     ' TO FHANDCON.
*      *  BAL   R9,HEXFDBK         DISPLAY FEEDBACK CODES
*ZC    815         MOVE  'ENDFILE     ',TO,FHANDCON
         LARL  ZC_R1,=CL12'ENDFILE     '
          MVC   FHANDCON,0(ZC_R1)
*             PERFORM HEXFDBK.
*      * FWTHSEND EQU   *
*ZC    817         PERFORM HEXFDBK
         LARL  ZC_R14,PG_HEXFDBK
         LARL  ZC_R0,PG_HEXFDBK_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*         FWTHSEND.
*      *  MVC   FWTMSG,FHANDCON    MOVE MESSAGE TEXT
PG_ENDFEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_FWTHSEND DS 0H
*             EXEC CICS SEND FROM(FHAND) LENGTH(FHANDL) END-EXEC.
*ZC    821         EXEC  CICS,SEND,FROM(FHAND),LENGTH(FHANDL)
         LARL  R1,P0404         ADDRESS SOURCE
         LARL  R15,P0404        ADDRESS TARGET
         XC    0(P0404END-P0404,R15),0(R1) XC IT
         LARL  R1,=X'0404'         ADDRESS SOURCE
         LARL  R15,P0404FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0404FN,R15),0(R1) MVC IT
         LARL  R15,P0404LEN       ADDRESS TARGET
         MVC   0(2,R15),FHANDL   SET LENGTH FROM LABEL
         LA    R0,FHAND           FROM ADDRESS
         LARL  R1,P0404FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0404EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0404TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0404EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0404EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0404EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0404EDF_2757 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0404EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0404)       R1=LCL MODULE PARAMETER LIST
P0404EDF_2757    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0404NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0404BYP_2757   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0404BYP_2757   EXIT IF NONE
* INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0404BYP_2757) ENTRYPOINT FOR IGNORE CONDITION
*
P0404BYP_2757    DS 0H
*      *  BR    R7                 RETURN TO MAIN LINE
*             GO TO VSAMRTN1 VSAMRTN2 VSAMRTN3 VSAMRTN4 VSAMRTN5
*                   VSAMRTN6 VSAMRTN7 VSAMRTN8 VSAMRTN9 VSAMRTNA
*                   DEPENDING ON DEPCTRL.
*ZC    823         GO    TO,VSAMRTN1,VSAMRTN2,VSAMRTN3,VSAMRTN4,VSAMRTNX
               5,VSAMRTN6,VSAMRTN7,VSAMRTN8,VSAMRTN9,VSAMRTNA,DEPENDINGX
               ,ON,DEPCTRL
         LH    ZC_R1,DEPCTRL
         CHI   ZC_R1,1
         JL    PG_ZC_GO_TAB_3+4*10
         CHI   ZC_R1,10
         JH    PG_ZC_GO_TAB_3+4*10
         SLL   ZC_R1,2
         LARL  ZC_R2,PG_ZC_GO_TAB_3-4
         B     0(ZC_R1,ZC_R2)
PG_ZC_GO_TAB_3 DS  0H  &TYPE
         J     PG_VSAMRTN1
         J     PG_VSAMRTN2
         J     PG_VSAMRTN3
         J     PG_VSAMRTN4
         J     PG_VSAMRTN5
         J     PG_VSAMRTN6
         J     PG_VSAMRTN7
         J     PG_VSAMRTN8
         J     PG_VSAMRTN9
         J     PG_VSAMRTNA
*         ABEND.
PG_FWTHSEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_ABEND DS    0H
*             EXEC CICS ABEND ABCODE('VSC1') END-EXEC.
*ZC    827         EXEC  CICS,ABEND,ABCODE('VSC1')
         LARL  R1,P0E0C         ADDRESS SOURCE
         LARL  R15,P0E0C        ADDRESS TARGET
         XC    0(P0E0CEND-P0E0C,R15),0(R1) XC IT
         LARL  R1,=X'0E0C'         ADDRESS SOURCE
         LARL  R15,P0E0CFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CFN,R15),0(R1) MVC IT
         LARL  R1,=CL4'VSC1'         ADDRESS SOURCE
         LARL  R15,CICS_ABEND_2790_ABCODE        ADDRESS TARGET AS LABEX
               L
         MVC   0(L'CICS_ABEND_2790_ABCODE,R15),0(R1) MVC IT
         LARL  R1,=CL4'VSC1'         ADDRESS SOURCE
         LARL  R15,P0E0CABC        ADDRESS TARGET AS LABEL
         MVC   0(L'P0E0CABC,R15),0(R1) MVC IT
         LARL  R1,P0E0CEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0E0CTCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0E0CEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0E0CEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0E0CEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0E0CEDF_2790 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0E0CEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0E0C)       R1=LCL MODULE PARAMETER LIST
P0E0CEDF_2790    EQU *
         BAKR  0,R15              STACK REGS AND GO
         DC    X'0000'            ABEND POINT
         DC    X'FE'              FE=TAKE DUMP  FF=NODUMP
         DC    C'ABEND'           MARKER
CICS_ABEND_2790_ABCODE     DC CL4' ' ABEND CODE IF ANY
*
P0E0C    DS    0H
P0E0CFN  DS    XL2                FUNCTION CODE
P0E0CEIB DS    AL4                EIB
P0E0CTCT DS    AL4                TCTTE
P0E0CABC DS    CL4                ABCODE
P0E0CNOD DS    X                  FF=NODUMP
         DS    X
P0E0CCAN DS    X                  FF=CANCEL
         DS    X
P0E0CEDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0E0CEDS DS    AL4                DSA ADDRESS FOR EDF
P0E0CEDC DS    XL2                CICS DSA LENGTH FOR EDF
P0E0CEDL DS    XL2                DSA LENGTH FOR EDF
P0E0CNED DS    X                  FF=NOEDF
         DS    X
P0E0CNOH DS    X                  FF=NOHANDLE
         DS    X
P0E0CRSP DS    AL4                RESP
P0E0CRS2 DS    AL4                RESP2
P0E0CEND EQU   *                  END MARKER
*
*      * SUBROUTINES
*      * MY01     EQU   *
*         MY01.
PG_ABEND_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_MY01  DS    0H
*             EXEC CICS READ FILE('MYFILE01') INTO(MYDATA) LENGTH(MYLENX
                              )
*ZC    833         EXEC  CICS,READ,FILE('MYFILE01'),INTO(MYDATA),LENGTHX
               (MYLEN),RIDFLD(MYRID),RBA
         LARL  R1,P0602         ADDRESS SOURCE
         LARL  R15,P0602        ADDRESS TARGET
         XC    0(P0602END-P0602,R15),0(R1) XC IT
         LARL  R1,=X'0602'         ADDRESS SOURCE
         LARL  R15,P0602FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FN,R15),0(R1) MVC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P0602FIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P0602FIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P0602INT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0602LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P0602LAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P0602RID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P0602RBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P0602EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0602TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0602EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0602EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0602EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0602EDF_2807 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0602EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0602)       R1=LCL MODULE PARAMETER LIST
P0602EDF_2807    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0602NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0602BYP_2807   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0602BYP_2807   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0602BYP_2807) ENTRYPOINT FOR IGNORE CONDITION
*
P0602BYP_2807    DS 0H
*                       RIDFLD(MYRID) RBA END-EXEC.
*      *  BR    R9                 RETURN
*      * RDNX01   EQU   *
*         RDNX01.
*      *  MVC   MYLEN,=H'50'       SET MAXIMUM LENGTH
PG_MY01_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_RDNX01 DS   0H
*             MOVE 50 TO MYLEN.
*ZC    839         MOVE  50,TO,MYLEN
          MVHHI MYLEN,50
*             EXEC CICS READNEXT FILE('MYFILE01') INTO(MYDATA)
*ZC    840         EXEC  CICS,READNEXT,FILE('MYFILE01'),INTO(MYDATA),LEX
               NGTH(MYLEN),RIDFLD(MYRID),RBA
         LARL  R1,P060E         ADDRESS SOURCE
         LARL  R15,P060E        ADDRESS TARGET
         XC    0(P060EEND-P060E,R15),0(R1) XC IT
         LARL  R1,=X'060E'         ADDRESS SOURCE
         LARL  R15,P060EFN        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EFN,R15),0(R1) MVC IT
         LA    R0,MYRID         R0=ADDRESS OF RIDFLD
         LARL  R1,P060EARD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,L'MYRID       SET NUMERIC RIDFLD LENGTH
         LARL  R1,P060ELRD         ADDRESS TARGET
         STC   R0,0(R1)      STC IT
         LARL  R1,=CL8'MYFILE01'         ADDRESS SOURCE
         LARL  R15,P060EFIL        ADDRESS TARGET AS LABEL
         MVC   0(L'P060EFIL,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=INTO ADDRESS
         LARL  R1,P060EINT         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         R0=LENGTH FROM LABEL
         LARL  R1,P060ELEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LA    R0,MYLEN         R0=ADDRESS OF LENGTH
         LARL  R1,P060ELAD         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R15,P060ERID+4     ADDRESS TARGET
         MVC   0(4,R15),MYRID   MOVE RIDFLD
         LARL  R1,P060ERBA         ADDRESS TARGET
         MVI   0(R1),X'FF'      MVI IT
         LARL  R1,P060EEIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P060ETCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P060EEDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P060EEDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P060EEDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P060EEDF_2832 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P060EEDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P060E)       R1=LCL MODULE PARAMETER LIST
P060EEDF_2832    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P060ENOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P060EBYP_2832   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P060EBYP_2832   EXIT IF NONE
* INVREQ, FILENOTFOUND, LENGERR, NOTFND, NOTOPEN, DISABLED, ENDFILE
* ILLOGIC
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P060EBYP_2832) ENTRYPOINT FOR IGNORE CONDITION
*
P060EBYP_2832    DS 0H
*                       LENGTH(MYLEN) RIDFLD(MYRID) RBA END-EXEC.
*      *  BR    R9
*      * WQTS     EQU   *
*         WQTS.
PG_RDNX01_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_WQTS  DS    0H
*             EXEC CICS WRITEQ TS QUEUE('VSC1') FROM(MYDATA)
*ZC    845         EXEC  CICS,WRITEQ,TS,QUEUE('VSC1'),FROM(MYDATA),LENGX
               TH(MYLEN)
         LARL  R1,P0A02         ADDRESS SOURCE
         LARL  R15,P0A02        ADDRESS TARGET
         XC    0(P0A02END-P0A02,R15),0(R1) XC IT
         LARL  R1,=X'0A02'         ADDRESS SOURCE
         LARL  R15,P0A02FN        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02FN,R15),0(R1) MVC IT
         LARL  R1,=CL16'VSC1'         ADDRESS SOURCE
         LARL  R15,P0A02QNM        ADDRESS TARGET AS LABEL
         MVC   0(L'P0A02QNM,R15),0(R1) MVC IT
         LA    R0,MYDATA           R0=FROM ADDRESS FROM LABEL
         LARL  R1,P0A02FRM         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LH    R0,MYLEN         SET LENGTH FROM LABEL
         LARL  R1,P0A02LEN         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         LARL  R1,P0A02EIB         ADDRESS TARGET
         ST    DFHEIBR,0(R1)      ST IT
         LARL  R1,P0A02TCT         ADDRESS TARGET
         ST    TCTTEAR,0(R1)      ST IT
         LARL  R1,P0A02EDS         ADDRESS TARGET
         ST    R13,0(R1)      ST IT
         L     R0,DFHEILEN        DSA LENGTH
         LARL  R1,P0A02EDL         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LA    R0,DFHEIUSR        DSA USER AREA
         SR    R0,R13             R0=CICS DSA LENGTH
         LARL  R1,P0A02EDC         ADDRESS TARGET
         STH   R0,0(R1)      STH IT
         LARL  R0,P0A02EDF_2854 ADDRESS ORIGIN FOR CEDF
         LARL  R1,P0A02EDF         ADDRESS TARGET
         ST    R0,0(R1)      ST IT
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A02)       R1=LCL MODULE PARAMETER LIST
P0A02EDF_2854    DS 0H
         BAKR  0,R15              STACK REGS AND GO
         LARL  R1,P0A02NOH         ADDRESS TARGET
         CLI   0(R1),X'FF'      CLI IT
         JE    P0A02BYP_2854   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A02BYP_2854   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR, IOERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A02BYP_2854) ENTRYPOINT FOR IGNORE CONDITION
*
P0A02    DS    0H
P0A02FN  DS    XL2                FUNCTION CODE
P0A02EIB DS    AL4                EIB
P0A02TCT DS    AL4                TCTTE
P0A02QNM DS    CL16               QUEUE NAME
P0A02ITM DS    XL2                ITEM
P0A02LEN DS    XL4                LENGTH
P0A02FRM DS    AL4                ADDRESS OF FROM
P0A02NUM DS    AL4                ADDRESS OF NUMITEMS
P0A02ICM DS    CL4                ICTERM
P0A02ICN DS    CL4                ICTRAN
P0A02EDF DS    AL4                ORIGIN ADDRESS FOR CEDF
P0A02EDS DS    AL4                DSA ADDRESS FOR EDF
P0A02EDC DS    XL2                CICS DSA LENGTH FOR EDF
P0A02EDL DS    XL2                DSA LENGTH FOR EDF
P0A02NED DS    X                  FF=NOEDF
         DS    X
P0A02NOH DS    X                  FF=NOHANDLE
         DS    X
P0A02RSP DS    AL4                RESP
P0A02RS2 DS    AL4                RESP2
P0A02END EQU   *                  END MARKER
*
P0A02BYP_2854    DS 0H
*                       LENGTH(MYLEN) END-EXEC.
*      *  BR    R9                 RETURN
*      * HEXFDBK  DS    0H
*         HEXFDBK.
*      *  UNPK  WORK(5),EIBRCODE+1(3) UNPACK VSAM FEEDBACK CODES
*      *  TR    WORK(4),TABLE-240  TRANSLATE TO PRINTABLE HEX
*      *  MVC   FHFDBK1,WORK       MOVE FDBK RETURN
*      *  MVC   FHFDBK2,WORK+2     MOVE FDBK CODE
PG_WQTS_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_HEXFDBK DS  0H
*             MOVE EIBRCODE TO WORK2.
*ZC    854         MOVE  EIBRCODE,TO,WORK2
         MVC   WORK2,EIBRCODE  ALIGN LEFT X OTHER
*             IF FDBK1 = X'00' THEN MOVE '00' TO FHFDBK1.
*ZC    855         IF    FDBK1,=,X'00',THEN
         CLI   FDBK1,X'00'
         BRC   15-ZC_EQ,PG_IF_8_1
*ZC    855         MOVE  '00',TO,FHFDBK1
         LARL  ZC_R1,=CL2'00'
          MVC   FHFDBK1,0(ZC_R1)
PG_IF_8_1    DS    0H  &TYPE
*             IF FDBK1 = X'08' THEN MOVE '08' TO FHFDBK1.
*ZC    856         IF    FDBK1,=,X'08',THEN
         CLI   FDBK1,X'08'
         BRC   15-ZC_EQ,PG_IF_9_1
*ZC    856         MOVE  '08',TO,FHFDBK1
         LARL  ZC_R1,=CL2'08'
          MVC   FHFDBK1,0(ZC_R1)
PG_IF_9_1    DS    0H  &TYPE
*             IF FDBK2 = X'00' THEN MOVE '00' TO FHFDBK2.
*ZC    857         IF    FDBK2,=,X'00',THEN
         CLI   FDBK2,X'00'
         BRC   15-ZC_EQ,PG_IF_10_1
*ZC    857         MOVE  '00',TO,FHFDBK2
         LARL  ZC_R1,=CL2'00'
          MVC   FHFDBK2,0(ZC_R1)
PG_IF_10_1   DS    0H  &TYPE
*             IF FDBK2 = X'04' THEN MOVE '04' TO FHFDBK2.
*ZC    858         IF    FDBK2,=,X'04',THEN
         CLI   FDBK2,X'04'
         BRC   15-ZC_EQ,PG_IF_11_1
*ZC    858         MOVE  '04',TO,FHFDBK2
         LARL  ZC_R1,=CL2'04'
          MVC   FHFDBK2,0(ZC_R1)
PG_IF_11_1   DS    0H  &TYPE
*             IF FDBK2 = X'20' THEN MOVE '20' TO FHFDBK2.
*ZC    859         IF    FDBK2,=,X'20',THEN
         CLI   FDBK2,X'20'
         BRC   15-ZC_EQ,PG_IF_12_1
*ZC    859         MOVE  '20',TO,FHFDBK2
         LARL  ZC_R1,=CL2'20'
          MVC   FHFDBK2,0(ZC_R1)
PG_IF_12_1   DS    0H  &TYPE
*             IF FDBK2 = X'68' THEN MOVE '68' TO FHFDBK2.
*ZC    860         IF    FDBK2,=,X'68',THEN
         CLI   FDBK2,X'68'
         BRC   15-ZC_EQ,PG_IF_13_1
*ZC    860         MOVE  '68',TO,FHFDBK2
         LARL  ZC_R1,=CL2'68'
          MVC   FHFDBK2,0(ZC_R1)
PG_IF_13_1   DS    0H  &TYPE
*             IF FDBK2 = X'6C' THEN MOVE '6C' TO FHFDBK2.
*ZC    861         IF    FDBK2,=,X'6C',THEN
         CLI   FDBK2,X'6C'
         BRC   15-ZC_EQ,PG_IF_14_1
*      *  BR    R9                 RETURN
*ZC    861         MOVE  '6C',TO,FHFDBK2
         LARL  ZC_R1,=CL2'6C'
          MVC   FHFDBK2,0(ZC_R1)
PG_IF_14_1   DS    0H  &TYPE
PG_HEXFDBK_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  MYDATA                         00000080 00000032 1   X   X(50)X
                      
*    01  MYLEN                          000000B2 00000002 1   H   9(4) X
                      
*    01  MYRID                          000000B4 00000004 1   F   9(8) X
                      
*    01  MYRID1                         000000B8 00000004 1   F   9(8) X
                      
*    01  MYRID2                         000000BC 00000004 1   F   9(9) X
                      
*    01  MYRID8                         000000C0 00000008 1   G   9(18)X
                      
*    01  FOP1                           000000C8 00000004 1   X   X(4) X
                     X''C311C260'' 
*    01  FOP2                           000000CC 00000004 1   X   X(4) X
                     X''C311C3F0'' 
*    01  FOP3                           000000D0 00000004 1   X   X(4) X
                     X''C311C540'' 
*    01  FOP4                           000000D4 00000004 1   X   X(4) X
                     X''C311C650'' 
*    01  FOP5                           000000D8 00000004 1   X   X(4) X
                     X''C311C760'' 
*    01  FOP6                           000000DC 00000004 1   X   X(4) X
                     X''C311C8F0'' 
*    01  FOP7                           000000E0 00000004 1   X   X(4) X
                     X''C3114A40'' 
*    01  FOP8                           000000E4 00000004 1   X   X(4) X
                     X''C3114B50'' 
*    01  FOP9                           000000E8 00000004 1   X   X(4) X
                     X''C3114C60'' 
*    01  FOP10                          000000EC 00000004 1   X   X(4) X
                     X''C3114DF0'' 
*    01  FOP11                          000000F0 00000004 1   X   X(4) X
                     X''C3114F40'' 
*    01  FOP12                          000000F4 00000004 1   X   X(4) X
                     X''C3115050'' 
*    01  FOP13                          000000F8 00000004 1   X   X(4) X
                     X''C311D160'' 
*    01  FOP14                          000000FC 00000004 1   X   X(4) X
                     X''C311D2F0'' 
*    01  FOP15                          00000100 00000004 1   X   X(4) X
                     X''C311D440'' 
*    01  FOP16                          00000104 00000004 1   X   X(4) X
                     X''C311D550'' 
*    01  FOP17                          00000108 00000004 1   X   X(4) X
                     X''C311D660'' 
*    01  FOP18                          0000010C 00000004 1   X   X(4) X
                     X''C311D7F0'' 
*    01  FOP19                          00000110 00000004 1   X   X(4) X
                     X''C311D940'' 
*    01  FOP20                          00000114 00000004 1   X   X(4) X
                     X''C3115A50'' 
*    01  FOP21                          00000118 00000004 1   X   X(4) X
                     X''C3115B60'' 
*    01  FOP1C2                         0000011C 00000004 1   X   X(4) X
                     X''C311C3C9'' 
*    01  FOP2C2                         00000120 00000004 1   X   X(4) X
                     X''C311C4D9'' 
*    01  FOP3C2                         00000124 00000004 1   X   X(4) X
                     X''C311C5E9'' 
*    01  FOP4C2                         00000128 00000004 1   X   X(4) X
                     X''C311C6F9'' 
*    01  FOP5C2                         0000012C 00000004 1   X   X(4) X
                     X''C311C8C9'' 
*    01  FOP6C2                         00000130 00000004 1   X   X(4) X
                     X''C311C9D9'' 
*    01  FOP7C2                         00000134 00000004 1   X   X(4) X
                     X''C3114AE9'' 
*    01  FOP8C2                         00000138 00000004 1   X   X(4) X
                     X''C3114BF9'' 
*    01  FOP9C2                         0000013C 00000004 1   X   X(4) X
                     X''C3114DC9'' 
*    01  FOPLINE                        00000140 0000002C 1   X        X
                      
*    02  FOPSBA                         00000140 00000004 1   X   X(4) X
                      
*    02  FOPTYPE                        00000144 00000004 1   X   X(4) X
                      
*    02  ZC_FILLER_V1                   00000148 00000001 1   X   X    X
                     ''/'' 
*    02  FOPFIXVR                       00000149 00000003 1   X   X(3) X
                      
*    02  ZC_FILLER_V2                   0000014C 00000001 1   X   X    X
                     SPACE 
*    02  FOPNAME                        0000014D 00000008 1   X   X(8) X
                      
*    02  ZC_FILLER_V3                   00000155 00000001 1   X   X    X
                     SPACE 
*    02  FOPFUNC                        00000156 00000008 1   X   X(8) X
                     ''READNEXT'' 
*    02  ZC_FILLER_V4                   0000015E 00000001 1   X   X    X
                     SPACE 
*    02  FOPMETH                        0000015F 00000004 1   X   X(4) X
                     ''XRBA'' 
*    02  ZC_FILLER_V5                   00000163 00000004 1   X   X(4) X
                     '' REC'' 
*    02  FOPRECNO                       00000167 00000003 1   X   X(3) X
                      
*    02  ZC_FILLER_V6                   0000016A 00000001 1   X   X    X
                     SPACE 
*    02  FOPSEP                         0000016B 00000001 1   X   X    X
                     SPACE 
*    01  FOPL                           0000016C 00000002 1   H   9(4) X
                      
*    01  FHAND                          0000016E 0000002C 1   X        X
                      
*    02  FHASBA                         0000016E 00000004 1   X   X(4) X
                      
*    02  FHANDCON                       00000172 0000000C 1   X        X
                      
*    03  ZC_FILLER_V7                   00000172 00000008 1   X   X(8) X
                     SPACES 
*    03  FHALNG                         0000017A 00000002 1   X   X(2) X
                      
*    03  ZC_FILLER_V8                   0000017C 00000002 1   X   X(2) X
                     SPACES 
*    02  FILLER                         00000172 0000000C 1   X        X
                      
*    03  ZC_FILLER_V9                   00000172 00000007 1   X   X(7) X
                     SPACES 
*    03  FHAINV                         00000179 00000002 1   X   X(2) X
                      
*    03  ZC_FILLER_V10                  0000017B 00000003 1   X   X(3) X
                     SPACES 
*    02  FILLER                         00000172 0000000C 1   X        X
                      
*    03  ZC_FILLER_V11                  00000172 00000008 1   X   X(8) X
                     SPACES 
*    03  FHAILL                         0000017A 00000003 1   X   X(3) X
                      
*    03  ZC_FILLER_V12                  0000017D 00000001 1   X   X    X
                     SPACE 
*    02  ZC_FILLER_V13                  0000017E 00000012 1   X   X(18)X
                     '' CONDITION RAISED '' 
*    02  FHFDBK1                        00000190 00000002 1   X   X(2) X
                      
*    02  ZC_FILLER_V14                  00000192 00000001 1   X   X    X
                     SPACE 
*    02  FHFDBK2                        00000193 00000002 1   X   X(2) X
                      
*    02  ZC_FILLER_V15                  00000195 00000004 1   X   X(4) X
                     SPACES 
*    02  FHSEP                          00000199 00000001 1   X   X    X
                     SPACE 
*    01  FHANDL                         0000019A 00000002 1   H   9(4) X
                      
*    01  ENDMSG                         0000019C 00000023 1   X        X
                      
*    02  ZC_FILLER_V16                  0000019C 00000004 1   X   X(4) X
                     X''C3115CF0'' 
*    02  ZC_FILLER_V17                  000001A0 0000001F 1   X   X(31)X
                     ''TESTVSC1 COMPLETED, PRESS CLEAR'' 
*    01  ENDMSGL                        000001BF 00000002 1   H   9(4) X
                      
*    01  FILLER                         000001C1 00000004 1   X        X
                      
*    02  WORK1A                         000001C1 00000004 1   Z   9(4) X
                      
*    02  FILLER                         000001C1 00000004 1   X        X
                      
*    03  FILLER                         000001C1 00000002 1   X   X(2) X
                      
*    03  WORK1B                         000001C3 00000002 1   X   X(2) X
                      
*    02  FILLER                         000001C1 00000004 1   X        X
                      
*    03  FILLER                         000001C1 00000001 1   X   X(1) X
                      
*    03  WORK1C                         000001C2 00000003 1   X   X(3) X
                      
*    01  WORK2                          000001C5 00000006 1   X        X
                      
*    02  FILLER                         000001C5 00000001 1   X   X    X
                      
*    02  FDBK1                          000001C6 00000001 1   X   X    X
                      
*    02  FDBK2                          000001C7 00000001 1   X   X    X
                      
*    02  FILLER                         000001C8 00000003 1   X   X(3) X
                      
*    01  DEPCTRL                        000001CB 00000002 1   H   9(4) X
                      
*    01  NOTFNDNO                       000001CD 00000002 1   H   9(4) X
                      
*    01  ENDFLENO                       000001CF 00000002 1   H   9(4) X
                      
*    01  LOOPCTRL                       000001D1 00000002 1   H   9(2) X
                      
*    01  ZC_WS_ID1                      000001D3 00000007 1   X   X(7) X
                     ''ZCWSID1'' 
*    01  DEBUG_ITEM                     000001DA 00000058 1   X        X
                      
*    02  DEBUG_LINE                     000001DA 00000006 1   X   X(6) X
                      
*    02  ZC_FILLER_V18                  000001E0 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     000001E1 0000001E 1   X   X(30)X
                      
*    02  ZC_FILLER_V19                  000001FF 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    00000200 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V20                  00000204 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    00000205 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V21                  00000209 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    0000020A 00000004 1   Z   9999 X
                      
*    02  ZC_FILLER_V22                  0000020E 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 0000020F 00000023 1   X   X(35)X
                      
*    01  TRUE                           00000232 00000001 1   Z   9    X
                     1 
*    01  FALSE                          00000233 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    00000234 00000002 1   H   9(4) X
                     0 
*    01  ZC_MYDATALK_PTR                00000236 00000004 1   A        X
                      
*    01  ZC_DFHCOMMAREA_PTR             0000023A 00000004 1   A        X
                      
*    01  ZC_DFHEIBLK_PTR                0000023E 00000004 1   A        X
                      
*    01  ZC_ZC_LK_END_PTR               00000242 00000004 1   A        X
                      
DFHEISTG DSECT 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYDATA   DS  CL50
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYLEN    DS  HL2
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYRID    DS  FL4
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYRID1   DS  FL4
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYRID2   DS  FL4
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
MYRID8   DS  FL8
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP1     DC XL4'C311C260'
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP2     DC XL4'C311C3F0'
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP3     DC XL4'C311C540'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP4     DC XL4'C311C650'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP5     DC XL4'C311C760'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP6     DC XL4'C311C8F0'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP7     DC XL4'C3114A40'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP8     DC XL4'C3114B50'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP9     DC XL4'C3114C60'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP10    DC XL4'C3114DF0'
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP11    DC XL4'C3114F40'
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP12    DC XL4'C3115050'
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP13    DC XL4'C311D160'
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP14    DC XL4'C311D2F0'
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP15    DC XL4'C311D440'
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP16    DC XL4'C311D550'
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP17    DC XL4'C311D660'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP18    DC XL4'C311D7F0'
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP19    DC XL4'C311D940'
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP20    DC XL4'C3115A50'
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP21    DC XL4'C3115B60'
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP1C2   DC XL4'C311C3C9'
ZC_WS_LOC_29 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP2C2   DC XL4'C311C4D9'
ZC_WS_LOC_30 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP3C2   DC XL4'C311C5E9'
ZC_WS_LOC_31 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP4C2   DC XL4'C311C6F9'
ZC_WS_LOC_32 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP5C2   DC XL4'C311C8C9'
ZC_WS_LOC_33 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP6C2   DC XL4'C311C9D9'
ZC_WS_LOC_34 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP7C2   DC XL4'C3114AE9'
ZC_WS_LOC_35 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP8C2   DC XL4'C3114BF9'
ZC_WS_LOC_36 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOP9C2   DC XL4'C3114DC9'
ZC_WS_LOC_37 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPLINE  DS  0CL44
ZC_WS_LOC_38 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPSBA   DS  CL4
ZC_WS_LOC_39 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPTYPE  DS  CL4
ZC_WS_LOC_40 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V1 DC CL1'/'
ZC_WS_LOC_41 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPFIXVR DS  CL3
ZC_WS_LOC_42 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V2 DC CL1' '
ZC_WS_LOC_43 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPNAME  DS  CL8
ZC_WS_LOC_44 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V3 DC CL1' '
ZC_WS_LOC_45 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPFUNC  DC CL8'READNEXT'
ZC_WS_LOC_46 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V4 DC CL1' '
ZC_WS_LOC_47 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPMETH  DC CL4'XRBA'
ZC_WS_LOC_48 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V5 DC CL4' REC'
ZC_WS_LOC_49 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPRECNO DS  CL3
ZC_WS_LOC_50 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V6 DC CL1' '
ZC_WS_LOC_51 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPSEP   DC CL1' '
ZC_WS_LOC_52 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FOPL     DS  HL2
ZC_WS_LOC_53 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHAND    DS  0CL44
ZC_WS_LOC_54 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHASBA   DS  CL4
ZC_WS_LOC_55 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHANDCON DS  0CL12
ZC_WS_LOC_56 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V7 DC CL8' '
ZC_WS_LOC_57 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHALNG   DS  CL2
ZC_WS_LOC_58 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V8 DC CL2' '
         ORG   FHANDCON  START REDEFINE
ZC_WS_LOC_59 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL12
ZC_WS_LOC_60 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V9 DC CL7' '
ZC_WS_LOC_61 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHAINV   DS  CL2
ZC_WS_LOC_62 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V10 DC CL3' '
         ORG   FHANDCON  START REDEFINE
ZC_WS_LOC_63 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL12
ZC_WS_LOC_64 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V11 DC CL8' '
ZC_WS_LOC_65 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHAILL   DS  CL3
ZC_WS_LOC_66 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V12 DC CL1' '
ZC_WS_LOC_67 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V13 DC CL18' CONDITION RAISED '
ZC_WS_LOC_68 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHFDBK1  DS  CL2
ZC_WS_LOC_69 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V14 DC CL1' '
ZC_WS_LOC_70 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHFDBK2  DS  CL2
ZC_WS_LOC_71 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V15 DC CL4' '
ZC_WS_LOC_72 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHSEP    DC CL1' '
ZC_WS_LOC_73 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FHANDL   DS  HL2
ZC_WS_LOC_74 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ENDMSG   DS  0CL35
ZC_WS_LOC_75 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V16 DC XL4'C3115CF0'
ZC_WS_LOC_76 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V17 DC CL31'TESTVSC1 COMPLETED, PRESS CLEAR'
ZC_WS_LOC_77 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ENDMSGL  DS  HL2
ZC_WS_LOC_78 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL4
ZC_WS_LOC_79 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
WORK1A   DS  ZL4
         ORG   WORK1A  START REDEFINE
ZC_WS_LOC_80 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL4
ZC_WS_LOC_81 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL2
ZC_WS_LOC_82 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
WORK1B   DS  CL2
         ORG   WORK1A  START REDEFINE
ZC_WS_LOC_83 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL4
ZC_WS_LOC_84 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_85 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
WORK1C   DS  CL3
ZC_WS_LOC_86 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
WORK2    DS  0CL6
ZC_WS_LOC_87 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL1
ZC_WS_LOC_88 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FDBK1    DS  CL1
ZC_WS_LOC_89 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FDBK2    DS  CL1
ZC_WS_LOC_90 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  CL3
ZC_WS_LOC_91 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEPCTRL  DS  HL2
ZC_WS_LOC_92 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
NOTFNDNO DS  HL2
ZC_WS_LOC_93 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ENDFLENO DS  HL2
ZC_WS_LOC_94 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LOOPCTRL DS  HL2
ZC_WS_LOC_95 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID1 DC CL7'ZCWSID1'
ZC_WS_LOC_119 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_120 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_121 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V18 DC CL1' '
ZC_WS_LOC_122 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_123 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V19 DC CL1' '
ZC_WS_LOC_124 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_125 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V20 DC CL1' '
ZC_WS_LOC_126 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_127 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V21 DC CL1' '
ZC_WS_LOC_128 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_129 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_FILLER_V22 DC CL1' '
ZC_WS_LOC_130 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_131 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_132 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_133 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
ZC_WS_LOC_134 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_MYDATALK_PTR DS AL4
ZC_WS_LOC_135 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHCOMMAREA_PTR DS AL4
ZC_WS_LOC_136 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_DFHEIBLK_PTR DS AL4
ZC_WS_LOC_137 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_ZC_LK_END_PTR DS AL4
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  MYDATALK                       00000000 00000032 1   X   X(50)X
                      
*    01  DFHCOMMAREA                    00000000 00000054 1   X        X
                      
*    01  DFHEIBLK                       00000000 00000054 1   X        X
                      
*    02  EIBHEAD                        00000000 00000008 1   X   X(8) X
                      
*    02  EIBTIME                        00000008 00000004 1   P   9(7) X
                      
*    02  EIBDATE                        0000000C 00000004 1   P   9(7) X
                      
*    02  EIBTRNID                       00000010 00000004 1   X   X(4) X
                      
*    02  EIBTASKN                       00000014 00000004 1   P   9(7) X
                      
*    02  EIBTRMID                       00000018 00000004 1   X   X(4) X
                      
*    02  FILLER                         0000001C 00000002 1   X   X(2) X
                      
*    02  EIBCPOSN                       0000001E 00000002 1   H   9(4) X
                      
*    02  EIBCALEN                       00000020 00000002 1   H   9(4) X
                      
*    02  EIBAID                         00000022 00000001 1   X   X    X
                      
*    02  EIBFN                          00000023 00000002 1   H   9(4) X
                      
*    02  EIBRCODE                       00000025 00000006 1   X   X(6) X
                      
*    02  EIBREQID                       0000002B 00000008 1   X   X(8) X
                      
*    02  EIBDS                          00000033 00000008 1   X   X(8) X
                      
*    02  EIBRSRCE                       0000003B 00000008 1   X   X(8) X
                      
*    02  EIBRESP                        00000043 00000004 1   F   9(9) X
                      
*    02  EIBRESP2                       00000047 00000004 1   F   9(9) X
                      
*    02  EIBPROG                        0000004B 00000008 1   X   X(8) X
                      
*    02  EIBDTFRM                       00000053 00000001 1   X   X    X
                      
*    01  ZC_LK_END                      00000000 00000001 1   X   X    X
                      
DFHEISTG DSECT 
MYDATALK_DSECT DSECT 
ZC_LK_LOC_96 EQU *-MYDATALK CHECK &SYM_NAME(&I) LK LOC
MYDATALK DS  CL50
DFHCOMMAREA_DSECT DSECT 
ZC_LK_LOC_97 EQU *-DFHCOMMAREA CHECK &SYM_NAME(&I) LK LOC
DFHCOMMAREA DS 0CL84
DFHEIBLK_DSECT DSECT 
ZC_LK_LOC_98 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
DFHEIBLK DS  0CL84
ZC_LK_LOC_99 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBHEAD  DS  CL8
ZC_LK_LOC_100 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTIME  DS  PL4
ZC_LK_LOC_101 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDATE  DS  PL4
ZC_LK_LOC_102 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRNID DS  CL4
ZC_LK_LOC_103 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTASKN DS  PL4
ZC_LK_LOC_104 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBTRMID DS  CL4
ZC_LK_LOC_105 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
         DS  CL2
ZC_LK_LOC_106 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCPOSN DS  HL2
ZC_LK_LOC_107 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBCALEN DS  HL2
ZC_LK_LOC_108 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBAID   DS  CL1
ZC_LK_LOC_109 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBFN    DS  HL2
ZC_LK_LOC_110 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRCODE DS  CL6
ZC_LK_LOC_111 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBREQID DS  CL8
ZC_LK_LOC_112 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDS    DS  CL8
ZC_LK_LOC_113 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRSRCE DS  CL8
ZC_LK_LOC_114 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP  DS  FL4
ZC_LK_LOC_115 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBRESP2 DS  FL4
ZC_LK_LOC_116 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBPROG  DS  CL8
ZC_LK_LOC_117 EQU *-DFHEIBLK CHECK &SYM_NAME(&I) LK LOC
EIBDTFRM DS  CL1
ZC_LK_END_DSECT DSECT 
ZC_LK_LOC_118 EQU *-ZC_LK_END CHECK &SYM_NAME(&I) LK LOC
ZC_LK_END DS CL1
DFHEISTG DSECT 
ZC_WS_DIFF EQU  *-ZC_WS-582  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 137'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 4'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 37'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
DFHEISTG DSECT 
         ORG 
DFHEIEND EQU   *
         END 
