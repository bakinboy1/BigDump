All

I've posted the 3 solutions submitted thus far here:



All 3 solutions were run using the following text
string submitted with the winning entry:

         DC    C'Code fastest instruction sequence to count bits '
         DC    C'in an arbitrary string of bytes using currently '
         DC    C'available z/Architecture instructions prior to '
         DC    C'new instruction coming with z196 which is '
         DC    C'estimated to be 5 times faster.'

All 3 solutions calculated the same number of bits x'28F'.  All 3 soulutions used the same reference table of 256 bytes defining the number of 1 bits in each byte value from X'00' to X'FF'.

1.  The winning solution by Fritz Schneider processes up to 120 bytes at a time. First it uses EX to move and translate bytes in a block.  Then it uses an add logical instruction loop to add up 4 counts at a time in up to 30 words (Note this works because 8 * 30 is 240 which is less than 256).  Then the 4 byte accumulators for a block are added separtely to the grand total. For the above text this solution executed 194 instructions.  The working storage requred was 256 byte reference table and 120 byte work area.  

2.  The second place solution by Don Higgins used a single loop with IC, IC, AR, and BXLE to count the bits in a register.  For the above text this solution executed 904 instructions.  The working storage required was 256 byte reference table.  This solution executes over twice as many instructions as the winning solution so I suspect it is slower, but it does have the advantage of only performing 2 single byte memory fetches and no memory updates.

3.  The third place solution by Melvyn Maltz used a single TROO instruction to translate the entire string to bit counts and then used a loop to add byte counts to accumulator.  For the above text this solution executed 897 instructions.  The working storage required was 256 byte reference table plus work area equal to string length.  Although this solution was a few instructions shorter than #2 due to not using subroutine interface, it had significantly larger working storage requirement.

Additional entries with new approaches are welcome.

Don Higgins
don@higgins.net