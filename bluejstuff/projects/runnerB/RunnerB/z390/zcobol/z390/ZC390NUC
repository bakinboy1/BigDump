09:02:44 ZC390NUC  MZ390 START USING z390 V1.5.06rx3 ON J2SE 1.7.0 04/20/12
AZ390I Copyright 2011 Automated Software Tools Corporation
AZ390I z390 is licensed under GNU General Public License
AZ390I program = ZCOBOL\Z390\ZC390NUC
AZ390I options = W:\work\z390\z390.OPT=(time(60)) sysmac(W:\work\z390\mac+.) 
  syscpy(W:\work\z390\mac+.) SYSCPY(+ZCOBOL\Z390) systerm(linklib\rtlink)
External Symbol Definitions
 ESD=0001 LOC=00000000 LEN=00000DE0 TYPE=CST NAME=ZC390NUC
 ESD=0001 LOC=00000044 LEN=00000002 TYPE=ENT NAME=CALL
 ESD=0001 LOC=0000007C LEN=00000002 TYPE=ENT NAME=CMP64R32
 ESD=0001 LOC=00000098 LEN=00000002 TYPE=ENT NAME=CVTLBTQ
 ESD=0001 LOC=00000192 LEN=00000002 TYPE=ENT NAME=CVTLDTP
 ESD=0001 LOC=000001C8 LEN=00000002 TYPE=ENT NAME=CVTQTLB
 ESD=0001 LOC=000002C2 LEN=00000002 TYPE=ENT NAME=DIV64R32
 ESD=0001 LOC=00000360 LEN=00000002 TYPE=ENT NAME=DIVQ128
 ESD=0001 LOC=00000538 LEN=00000002 TYPE=ENT NAME=GOBACK
 ESD=0001 LOC=00000548 LEN=00000002 TYPE=ENT NAME=MPYQ128
 ESD=0001 LOC=00000614 LEN=00000002 TYPE=ENT NAME=OSE64R32
 ESD=0001 LOC=00000660 LEN=00000002 TYPE=ENT NAME=PERFORM
 ESD=0001 LOC=00000688 LEN=00000002 TYPE=ENT NAME=PMCHECK
 ESD=0001 LOC=00000750 LEN=00000002 TYPE=ENT NAME=ROUNDF
 ESD=0001 LOC=00000538 LEN=00000002 TYPE=ENT NAME=STOPRUN
 ESD=0001 LOC=000006B0 LEN=00000008 TYPE=ENT NAME=STACKORG
 ESD=0001 LOC=000006A8 LEN=00000004 TYPE=ENT NAME=STACKPTR
 ESD=0001 LOC=00000750 LEN=00000001 TYPE=ENT NAME=STACKEND
 ESD=0001 LOC=000007AE LEN=00000002 TYPE=ENT NAME=TALPHAX
 ESD=0001 LOC=000008BC LEN=00000002 TYPE=ENT NAME=TNUMP
 ESD=0001 LOC=00000AE2 LEN=00000002 TYPE=ENT NAME=TNUMX
 ESD=0001 LOC=00000AF0 LEN=00000002 TYPE=ENT NAME=TNUMZ
Assembler Listing
000000                                        (1/1)1 *********************************************************************
000000                                        (1/2)2 * Copyright 2008 Automated Software Tools Corporation               *
000000                                        (1/3)3 * This source code is part of z390 zCOBOL/assembler/emulator package*
000000                                        (1/4)4 * The z390 package is distributed under GNU general public license  *
000000                                        (1/5)5 * Author - Don Higgins                                              *
000000                                        (1/6)6 * Date   - 04/07/08                                                 *
000000                                        (1/7)7 *********************************************************************
000000                                        (1/8)8 * 11/22/08 initial coding for ZC390NUC zcobol runtime routines
000000                                        (1/9)9 * 03/12/09 RPI 1004 add CVTLHTQ and CVTQTLH
000000                                      (1/10)10 * 03/12/09 RPI 1004 use CVTQTOLB/CVTLBTQ for Q and CVTLDTP for P
000000                                      (1/11)11 * 06/18/09 RPI 1042 move z390 version and CICS check to ZC390NUC rtn
000000                                      (1/12)12 * 05/25/10 RPI 1118 set ZCVT_PVTMAXDL max dipslay line from PVT options
000000                                      (1/13)13 * 09/27/11 RPI 1180 round FP to integer for CONVLDTP convert to PD
000000                                      (1/14)14 *********************************************************************
000000                                      (1/15)15 ZC390NUC CSECT 
000000                                      (1/16)16          USING ZC390CVT,R9
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
000000                                      (1/17)17          ENTRY CALL          DYNAMIC CALL
000000                                      (1/18)18          ENTRY CMP64R32      COMPARE G64 NOR64 R0-1=FD1, R2-3=FD2
000000                                      (1/19)19          ENTRY CVTLBTQ       CVT LB IN F4-6 TO Q IN R0-1
000000                                      (1/20)20          ENTRY CVTLDTP       CVT LD IN F4-6 TO PL31 IN R0-1
000000                                      (1/21)21          ENTRY CVTQTLB       CVT Q IN R0-1 TO LB IN F4-6
000000                                      (1/22)22          ENTRY DIV64R32      DIVIDE  G64 NOR64 R0-1=N64, R2-3=MAX64
000000                                      (1/23)23          ENTRY DIVQ128       DIVIDE  Q128 IN R0-R1 BY Q128 IN R2-R3
000000                                      (1/24)24          ENTRY GOBACK        GOBACK
000000                                      (1/25)25          ENTRY MPYQ128       MULTIPLY Q128 IN R0-R1 BY Q128 IN R2-R3
000000                                      (1/26)26          ENTRY OSE64R32      ON SIZE ERR G64 NOR64 R0-1=N64, R2-3=MAX64
000000                                      (1/27)27          ENTRY PERFORM       PERFORM
000000                                      (1/28)28          ENTRY PMCHECK       CHECK FOR PERFORM EXIT AT PG
000000                                      (1/29)29          ENTRY ROUNDF        ROUND FIXED
000000                                      (1/30)30          ENTRY STOPRUN       STOP RUN
000000                                      (1/31)31          ENTRY STACKORG      START OF PERFORM STACK
000000                                      (1/32)32          ENTRY STACKPTR      CURRENT  PERFORM STACK PTR
000000                                      (1/33)33          ENTRY STACKEND      END OF   PERFORM STACK
000000                                      (1/34)34          ENTRY TALPHAX       TEST ALPHABETIC X
000000                                      (1/35)35          ENTRY TNUMP         TEST NUMERIC PACKED P
000000                                      (1/36)36          ENTRY TNUMX         TEST NUMERIC CHARACTERS X
000000                                      (1/37)37          ENTRY TNUMZ         TEST NUMERIC ZONED DECIMAL Z
000000                                      (1/38)38 *
000000                                      (1/39)39 * INIT ZC390NUC - VERIFY ZCOBOL CALLER COMPATIBILITY WITH VER IN R1
000000                                      (1/40)40 *
000000                                      (1/41)41          USING ZC390NUC,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000000 LEN=01000 REG=F OFF=00000 LAB=
000000                                      (1/42)42          USING ZC390PVT,R8     ZCOBOL PGM VECTOR TABLE RPI 1042
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000000 LEN=01000 REG=F OFF=00000 LAB=
LISTUSE ZC390PVT ESD=0004 LOC=00000000 LEN=01000 REG=8 OFF=00000 LAB=
000000 D20190788024     000078 000024       (1/43)43          MVC   ZCVT_PVTMAXDL,PVTMAXDL SET MAX DISPLAY LINE FROM OPTIONS
000006                                      (1/44)44          IF    (CLC,PVTVER,NE,ZCVT_VER) VERIFY Z390 COMP/RUN VERSIONS
000006 D50780189008     000018 000008       (4/47)70+         CLC   PVTVER,ZCVT_VER
00000C 4780F01E                00001E       (4/49)71+         BC    15-NE,#@IF_1_2
000010 41100007                             (1/45)73                LA    R1,ZCVT_ABORT_VERSION  REBUILD ZCOBOL/ZC390LIB
000014 58F09068                000068       (1/46)74                L     R15,ZCVT_ABORT
000018 07FF                                 (1/47)75                BR    R15
00001A                                      (1/48)76          ELSEIF (CLI,PVTCICS,NE,C'0') IS THIS ZCOBOL EXEC CICS PGM
00001A 47F0F042                000042       (7/24)80+         B     #@IF_1_E
00001E                                      (7/25)81+#@IF_1_2                                                 DS 0H
00001E 95F08020                000020       (7/48)82+         CLI   PVTCICS,C'0'
000022 4780F042                000042       (7/50)83+         BC    15-NE,#@IF_1_4
000026                                      (1/49)85                IF    (LTR,R11,Z,R11),OR,(CL,R11,EQ,=X'F4F4F4F4')
000026 12BB                                 (4/47)89+         LTR   R11,R11
000028 4770F030                000030       (4/49)90+         BC    15-Z,#@IF_2_2
00002C 47F0F038                000038       (4/66)91+         B     #@IF_2_1
000030                                      (4/51)92+#@IF_2_2                                                 DS 0H
000030 55B0FDD0                000DD0       (4/54)93+         CL    R11,=X'F4F4F4F4'
000034 4770F042                000042       (4/56)94+         BC    15-EQ,#@IF_2_3
000038                                      (4/82)95+#@IF_2_1                                DS 0H
000038 4110000A                             (1/50)97                      LA    R1,ZCVT_ABORT_CICS CICS R11 DFHEIBLK NOT SET
00003C 58F09068                000068       (1/51)98                      L     R15,ZCVT_ABORT
000040 07FF                                 (1/52)99                      BR    R15
000042                                     (1/53)100                ENDIF 
000042                                     (8/20)103+#@IF_2_3                                                 DS 0H
000042                                     (1/54)105          ENDIF 
000042                                     (8/20)108+#@IF_1_4                                                 DS 0H
000042                                     (8/23)109+#@IF_1_E                         DS 0H
000042 07FE                                (1/55)111          BR    R14    EXIT OK
000044                                     (1/56)112          DROP  R15,R8
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
000044                                     (1/57)113 *
000044                                     (1/58)114 * GEN CALL - DYNAMICALLY LOAD AND CALL PROGRAM
000044                                     (1/59)115 *
000044                                     (1/60)116 CALL     DS    0H
000044 0D20                                (1/61)117          BASR  R2,0
000046                                     (1/62)118          USING *,R2
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000046 LEN=01000 REG=2 OFF=00000 LAB=
000046 1830                                (1/63)119          LR    R3,R0   R3=A(PGMNAME)
000048 5010202E                000074      (1/64)120          ST    R1,CALLPARM
00004C 50E02032                000078      (1/65)121          ST    R14,CALLRTN
000050                                     (1/66)122          LOAD  EPLOC=(R3)
000050 1803                               (10/28)124+         LR    0,R3
000052 1BFF                                (9/95)126+         SR    15,15 USE DEFAULT SYS390 SEARCH
000054 0A08                               (9/125)127+         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
000056                                     (1/67)129          IF    (LTR,R15,NZ,R15)
000056 12FF                                (4/47)132+         LTR   R15,R15
000058 47802020                000066      (4/49)133+         BC    15-NZ,#@IF_3_2
00005C 41100002                            (1/68)135                LA  R1,ZCVT_ABORT_CALL
000060 58F09068                000068      (1/69)136                L   R15,ZCVT_ABORT
000064 07FF                                (1/70)137                BR  R15
000066                                     (1/71)138          ENDIF 
000066                                     (8/20)141+#@IF_3_2                                                 DS 0H
000066 18F0                                (1/72)143          LR    R15,R0       SET CALLED PROGRAM ENTRY
000068 5810202E                000074      (1/73)144          L     R1,CALLPARM  SET CALLED PROGRAM PARM LIST
00006C 58E02032                000078      (1/74)145          L     R14,CALLRTN  SET RETURN
000070 07FF                                (1/75)146          BR    R15
000072                                     (1/76)147          DROP  R2
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
000074                                     (1/77)148 CALLPARM DS    A
000078                                     (1/78)149 CALLRTN  DS    A
00007C                                     (1/79)150 *
00007C                                     (1/80)151 * GEN CMP64R32 COMPARE 64 BIT FLD IN R0-R1 WITH FLD IN R2-R3
00007C                                     (1/81)152 *
00007C                                     (1/82)153 CMP64R32 DS    0H
00007C                                     (1/83)154          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000007C LEN=01000 REG=F OFF=00000 LAB=
00007C 1902                                (1/84)155          CR    R0,R2              COMPARE ARIM FIRST HALF
00007E 077E                                (1/85)156          BNER  R14                EXIT WITH CC IF NOT EQUAL
000080 1513                                (1/86)157          CLR   R1,R3              COMPARE LOGICAL 2ND HALF
000082 078E                                (1/87)158          BER   R14                EXIT CC0 IF EQUAL
000084 4720F014                000090      (1/88)159          BH    CMP64R32_H         BRANCH IF 2ND HALF LOG HIGH
000088                                     (1/89)160 CMP64R32_L DS  0H
000088 1200                                (1/90)161          LTR   R0,R0              ARE BOTH NEG
00008A 074E                                (1/91)162          BMR   R14                YES, EXIT WITH CC LOW
00008C 1531                                (1/92)163          CLR   R3,R1              FORCE CC HIGH
00008E 07FE                                (1/93)164          BR    R14
000090                                     (1/94)165 CMP64R32_H DS  0H
000090 1200                                (1/95)166          LTR   R0,R0              ARE BOTH POS
000092 072E                                (1/96)167          BPR   R14                YES, EXIT WITH CC HIGH
000094 1531                                (1/97)168          CLR   R3,R1              FORCE CC LOW
000096 07FE                                (1/98)169          BR    R14
000098                                     (1/99)170          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
000098                                    (1/100)171 *
000098                                    (1/101)172 * CVTLBTQ - CONVERT LB IN F0-F2 TO Q IN R0-R1
000098                                    (1/102)173 *
000098                                    (1/103)174 CVTLBTQ  DS    0H
000098                                    (1/104)175          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000098 LEN=01000 REG=F OFF=00000 LAB=
000098 EB23FC7E0024            000D16     (1/105)176          STMG  R2,R3,ZCSAVE
00009E 6000FCFE                000D96     (1/106)177          STD   F0,ZCWORK
0000A2 6020FD06                000D9E     (1/107)178          STD   F2,ZCWORK+8
0000A6 EB01FCFE0004            000D96     (1/108)179          LMG   R0,R1,ZCWORK
0000AC                                    (1/109)180          IF    (CLC,ZCWORK(16),EQ,ZCVT_ZERO) IS THIS ZERO
0000AC D50FFCFE9080     000D96 000080      (4/47)184+         CLC   ZCWORK(16),ZCVT_ZERO
0000B2 4770F020                0000B8      (4/49)185+         BC    15-EQ,#@IF_4_2
0000B6 07FE                               (1/110)187                BR  14  YES RETURN WITH R0-R1 ZERO
0000B8                                    (1/111)188          ENDIF 
0000B8                                     (8/20)191+#@IF_4_2                                                 DS 0H
0000B8 B9040020                           (1/112)193          LGR   R2,R0
0000BC EB220030000C                       (1/113)194          SRLG  R2,R2,48
0000C2 A5277FFF                           (1/114)195          NILL  R2,X'7FFF'            R3    = BIASED EXPONENT
0000C6 A5000001                           (1/115)196          IIHH  R0,1                  R0-R1 = MANTISSA WITH 1 BIT
0000CA                                    (1/116)197          IF    (AHI,R2,NM,-16383) REMOVE BIAS AND TEST IF ANY INT BITS
0000CA A72AC001                            (4/47)201+         AHI   R2,-16383
0000CE 4740F0EA                000182      (4/49)202+         BC    15-NM,#@IF_5_2
0000D2                                    (1/117)204                IF   (CHI,R2,GE,112)  IS THIS SHIFT LEFT
0000D2 A72E0070                            (4/47)208+         CHI   R2,112
0000D6 4740F072                00010A      (4/49)209+         BC    15-GE,#@IF_6_2
0000DA                                    (1/118)211 *
0000DA                                    (1/119)212 *                   SHIFT LEFT WITH POSSIBLE OVERFLOW
0000DA                                    (1/120)213 *
0000DA A72AFF90                           (1/121)214                     AHI  R2,-112
0000DE EB002000000B                       (1/122)215                     SLAG R0,R0,0(R2) SHIFT HIGH HALF POSS OVF ERR
0000E4 EB112000001C                       (1/123)216                     RLLG R1,R1,0(R2) ROTATE LOW HALF LEFT
0000EA C031FFFFFFFF            FFFFFF     (1/124)217                     LGFI R3,-1       R3=ALL 1'S
0000F0 EB232000000D                       (1/125)218                     SLLG R2,R3,0(R2) R2=1'S FOR REMAINING R1 BITS
0000F6 B9820032                           (1/126)219                     XGR  R3,R2       R3=1'S FOR BITS GOING TO R0
0000FA B9800031                           (1/127)220                     NGR  R3,R1       R3=JUST BITS GOING TO R0
0000FE B9810003                           (1/128)221                     OGR  R0,R3       OR BITS FROM LOWER HALF
000102 B9800012                           (1/129)222                     NGR  R1,R2       CLEAR BITS SHIFTED OUT OF R1
000106                                    (1/130)223                ELSE 
000106 47F0F0C4                00015C     (11/40)226+        B      #@IF_6_E
00010A                                    (11/41)227+#@IF_6_2                                                 DS 0H
00010A                                    (1/131)229 *
00010A                                    (1/132)230 *                   SHIFT RIGHT
00010A                                    (1/133)231 *
00010A 41300070                           (1/134)232                     LA   R3,112
00010E 1B32                               (1/135)233                     SR   R3,R2
000110                                    (1/136)234                     IF   (CHI,R3,GE,64) ARE ALL BITS IN HIGH HALF
000110 A73E0040                            (4/47)238+         CHI   R3,64
000114 4740F096                00012E      (4/49)239+         BC    15-GE,#@IF_7_2
000118 B9040010                           (1/137)241                          LGR R1,R0
00011C B9090000                           (1/138)242                          SGR R0,R0
000120 A73AFFC0                           (1/139)243                          AHI R3,-64
000124 EB113000000C                       (1/140)244                          SRLG R1,R1,0(R3) SHIFT RIGHT
00012A                                    (1/141)245                     ELSE 
00012A 47F0F0C4                00015C     (11/40)248+        B      #@IF_7_E
00012E                                    (11/41)249+#@IF_7_2                                                 DS 0H
00012E EB113000000C                       (1/142)251                          SRLG R1,R1,0(R3) SHIFT LOW HALF BITS RIGHT
000134 41200040                           (1/143)252                          LA   R2,64
000138 1B23                               (1/144)253                          SR   R2,R3
00013A EB002000001C                       (1/145)254                          RLLG R0,R0,0(R2) ROTATE HIGH BITS HALF RIGHT
000140 C021FFFFFFFF            FFFFFF     (1/146)255                          LGFI R2,-1       R2=ALL 1'S
000146 EB323000000C                       (1/147)256                          SRLG R3,R2,0(R3) R3=1'S FOR REMAINING R0 BITS
00014C B9820023                           (1/148)257                          XGR  R2,R3       R2=1'S FOR BITS GOING TO R1
000150 B9800020                           (1/149)258                          NGR  R2,R0       R2=JUST BITS GOING TO R1
000154 B9810012                           (1/150)259                          OGR  R1,R2       OR BITS FROM LOWER HALF
000158 B9800003                           (1/151)260                          NGR  R0,R3       CLEAR BITS SHIFTED OUT OF R1
00015C                                    (1/152)261                     ENDIF 
00015C                                     (8/23)264+#@IF_7_E                         DS 0H
00015C                                    (1/153)266                ENDIF 
00015C                                     (8/23)269+#@IF_6_E                         DS 0H
00015C                                    (1/154)271                IF   (TM,ZCWORK,O,X'80') IS RESULT NEG
00015C 9180FCFE                000D96      (4/47)275+         TM    ZCWORK,X'80'
000160 47E0F0E6                00017E      (4/49)276+         BC    15-O,#@IF_8_2
000164 C021FFFFFFFF            FFFFFF     (1/155)278                     LGFI  R2,-1
00016A B9820002                           (1/156)279                     XGR   R0,R2
00016E B9820012                           (1/157)280                     XGR   R1,R2
000172 C21A00000001            000001     (1/158)281                     ALGFI R1,1
000178 E30090800088            000080     (1/159)282                     ALCG  R0,ZCVT_ZERO
00017E                                    (1/160)283                ENDIF 
00017E                                     (8/20)286+#@IF_8_2                                                 DS 0H
00017E                                    (1/161)288          ELSE 
00017E 47F0F0F2                00018A     (11/40)291+        B      #@IF_5_E
000182                                    (11/41)292+#@IF_5_2                                                 DS 0H
000182 B9090000                           (1/162)294                SGR  R0,R0  RETURN ZERO FOR FRACTIONAL LH
000186 B9090011                           (1/163)295                SGR  R1,R1
00018A                                    (1/164)296          ENDIF 
00018A                                     (8/23)299+#@IF_5_E                         DS 0H
00018A EB23FC7E0004            000D16     (1/165)301          LMG   R2,R3,ZCSAVE
000190 07FE                               (1/166)302          BR    R14
000192                                    (1/167)303          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
000192                                    (1/168)304 *
000192                                    (1/169)305 * CVTLDTP - CONVERT LD IN F0-F2 TO PL31 IN R0-R1
000192                                    (1/170)306 *
000192                                    (1/171)307 CVTLDTP  DS    0H
000192                                    (1/172)308          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000192 LEN=01000 REG=F OFF=00000 LAB=
000192 EB23FB840024            000D16     (1/173)309          STMG  R2,R3,ZCSAVE
000198 B3DF0000                           (1/174)310          FIXTR F0,0,F0,0  ROUND TO INTEGER  RPI 1180
00019C B3ED0020                           (1/175)311          EEXTR R2,F0      EXTRACT LD BIAS EXPONENT
0001A0                                    (1/176)312          IF    (AGFI,R2,NM,-6176)   REMOVE BIAS AND CHECK IF POS
0001A0 C228FFFFE7E0            FFE7E0      (4/47)316+         AGFI  R2,-6176
0001A6 4740F022                0001B4      (4/49)317+         BC    15-NM,#@IF_9_2
0001AA ED0200000048                       (1/177)319                SLXT  F0,F0,0(R2)      SHIFT SIG DIGITS LEFT
0001B0                                    (1/178)320          ELSE 
0001B0 47F0F02A                0001BC     (11/40)323+        B      #@IF_9_E
0001B4                                    (11/41)324+#@IF_9_2                                                 DS 0H
0001B4 1322                               (1/179)326                LCR   R2,R2
0001B6 ED0200000049                       (1/180)327                SRXT  F0,F0,0(R2)      SHIFT SIG DIGITS RIGHT
0001BC                                    (1/181)328          ENDIF 
0001BC                                     (8/23)331+#@IF_9_E                         DS 0H
0001BC B3EB0000                           (1/182)333          CSXTR R0,F0,0
0001C0 EB23FB840004            000D16     (1/183)334          LMG   R2,R3,ZCSAVE
0001C6 07FE                               (1/184)335          BR    R14
0001C8                                    (1/185)336          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
0001C8                                    (1/186)337 *
0001C8                                    (1/187)338 * CVTQTLB - CONVERT Q IN R0-R1 TO LB IN F4-F6
0001C8                                    (1/188)339 *
0001C8                                    (1/189)340 CVTQTLB  DS    0H
0001C8                                    (1/190)341          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=000001C8 LEN=01000 REG=F OFF=00000 LAB=
0001C8 EB24FB4E0024            000D16     (1/191)342          STMG  R2,R4,ZCSAVE
0001CE                                    (1/192)343          IF    (LTGR,R0,M,R0)      COMPLIMENT IF NEGATIVE
0001CE B9020000                            (4/47)347+         LTGR  R0,R0
0001D2 47B0F032                0001FA      (4/49)348+         BC    15-M,#@IF_10_2
0001D6 E300FBF00082            000DB8     (1/193)350                XG   R0,=FL8'-1'
0001DC E310FBF00082            000DB8     (1/194)351                XG   R1,=FL8'-1'
0001E2 C21A00000001            000001     (1/195)352                ALGFI  R1,1
0001E8 E30090800088            000080     (1/196)353                ALCG   R0,ZCVT_ZERO
0001EE 4D20F04C                000214     (1/197)354                BAS  R2,CVTLB_NORM  MORMAIZE AND SET BIAS EXP
0001F2 A5088000                           (1/198)355                OIHH R0,X'8000'     SET SIGN BIT
0001F6                                    (1/199)356          ELSEIF 
0001F6 47F0F036                0001FE      (7/24)359+         B     #@IF_10_E
0001FA                                     (7/25)360+#@IF_10_2                                                DS 0H
0001FA 4D20F04C                000214     (1/200)362                BAS  R2,CVTLB_NORM  MORMAIZE AND SET BIAS EXP
0001FE                                    (1/201)363          ENDIF 
0001FE                                     (8/20)366+#@IF_10_4                                                DS 0H
0001FE                                     (8/23)367+#@IF_10_E                        DS 0H
0001FE EB01FBCE0024            000D96     (1/202)369          STMG  R0,R1,ZCWORK
000204 6840FBCE                000D96     (1/203)370          LD    F4,ZCWORK
000208 6860FBD6                000D9E     (1/204)371          LD    F6,ZCWORK+8
00020C EB24FB4E0004            000D16     (1/205)372          LMG   R2,R4,ZCSAVE
000212 07FE                               (1/206)373          BR    R14
000214                                    (1/207)374 CVTLB_NORM DS  0H
000214                                    (1/208)375          IF    (CLGFI,R0,EQ,0),AND,(CLGFI,R1,EQ,0)
000214 C20E00000000            000000      (4/47)379+         CLGFI R0,0
00021A 4770F062                00022A      (4/49)380+         BC    15-EQ,#@IF_11_2
00021E C21E00000000            000000      (4/47)381+         CLGFI R1,0
000224 4770F062                00022A      (4/49)382+         BC    15-EQ,#@IF_11_2
000228 07F2                               (1/209)384                BR    R2   EXIT WITH ZERO IF ZERO
00022A                                    (1/210)385          ENDIF 
00022A                                     (8/20)388+#@IF_11_2                                                DS 0H
00022A A738406F                           (1/211)390          LHI   R3,16383+112           INIT BIAS EXPONENT FOR INT128
00022E                                    (1/212)391          DO    WHILE=(TMHH,R0,NZ,X'FFFE')  NEED TO SHIFT RIGHT?
00022E                                    (12/63)395+#@DO_1_T                         DS 0H
00022E A702FFFE                            (4/47)399+         TMHH  R0,X'FFFE'
000232 4780F072                00023A      (4/49)400+         BC    15-NZ,#@IF_12_2
000236 47F0F076                00023E     (12/66)402+               B   #@DO_1_1
00023A                                     (8/20)406+#@IF_12_2                                                DS 0H
00023A 47F0F096                00025E     (12/68)408+         B     #@DO_1_E
00023E                                    (12/69)409+#@DO_1_1                         DS 0H
00023E EB110001000C                       (1/213)411                SRLG  R1,R1,1          SHIFT RIGHT LOW 64 BY 1
000244                                    (1/214)412                IF    (TMLL,R0,NZ,1)   IS LOW BIT ON IN HIGH 64
000244 A7010001                            (4/47)416+         TMLL  R0,1
000248 4780F088                000250      (4/49)417+         BC    15-NZ,#@IF_13_2
00024C A5188000                           (1/215)419                      OIHH R1,X'8000'  YES MOVE IT TO LOW 64
000250                                    (1/216)420                ENDIF 
000250                                     (8/20)423+#@IF_13_2                                                DS 0H
000250 EB000001000C                       (1/217)425                SRLG  R0,R0,1          SHIFT RIGHT HIGH 64
000256 A73A0001                           (1/218)426                AHI   R3,1             DEC EXP
00025A                                    (1/219)427          ENDDO 
00025A 47F0F066                00022E     (12/55)431+         B     #@DO_1_T
00025E                                    (12/56)432+#@DO_1_E                         DS 0H
00025E                                    (1/220)435          DO    WHILE=(TMHH,R0,Z,1)  NEED TO SHIFT LEFT
00025E                                    (12/63)439+#@DO_2_T                         DS 0H
00025E A7020001                            (4/47)443+         TMHH  R0,1
000262 4770F0A2                00026A      (4/49)444+         BC    15-Z,#@IF_14_2
000266 47F0F0A6                00026E     (12/66)446+               B   #@DO_2_1
00026A                                     (8/20)450+#@IF_14_2                                                DS 0H
00026A 47F0F0EA                0002B2     (12/68)452+         B     #@DO_2_E
00026E                                    (12/69)453+#@DO_2_1                         DS 0H
00026E                                    (1/221)455          DO    WHILE=(TMHL,R0,Z,X'FFFF')  SHITF 16 IF POSSIBLE
00026E                                    (12/63)459+#@DO_3_T                         DS 0H
00026E A703FFFF                            (4/47)463+         TMHL  R0,X'FFFF'
000272 4770F0B2                00027A      (4/49)464+         BC    15-Z,#@IF_15_2
000276 47F0F0B6                00027E     (12/66)466+               B   #@DO_3_1
00027A                                     (8/20)470+#@IF_15_2                                                DS 0H
00027A 47F0F0D0                000298     (12/68)472+         B     #@DO_3_E
00027E                                    (12/69)473+#@DO_3_1                         DS 0H
00027E EB000010000D                       (1/222)475                SLLG  R0,R0,16
000284 EC01303F1055                       (1/223)476                      RISBG R0,R1,48,63,16
00028A EB110010000D                       (1/224)477                      SLLG  R1,R1,16
000290 A73AFFF0                           (1/225)478                      AHI  R3,-16
000294                                    (1/226)479                ENDDO 
000294 47F0F0A6                00026E     (12/55)483+         B     #@DO_3_T
000298                                    (12/56)484+#@DO_3_E                         DS 0H
000298 EB000001000D                       (1/227)487                SLLG  R0,R0,1
00029E EC013F3F0155                       (1/228)488                RISBG R0,R1,63,63,1
0002A4 EB110001000D                       (1/229)489                SLLG  R1,R1,1
0002AA A73AFFFF                           (1/230)490                AHI   R3,-1                INCR EXP
0002AE                                    (1/231)491          ENDDO 
0002AE 47F0F096                00025E     (12/55)495+         B     #@DO_2_T
0002B2                                    (12/56)496+#@DO_2_E                         DS 0H
0002B2 EB330030000D                       (1/232)499          SLLG  R3,R3,48  MOVE BIAS EXPONENT TO HH
0002B8 A5040000                           (1/233)500          NIHH  R0,0      CLEAR THE ASSUMED LEADING BIT
0002BC B9810003                           (1/234)501          OGR   R0,R3     REPLACE WITH LD BIAS EXPONENT
0002C0 07F2                               (1/235)502          BR    R2
0002C2                                    (1/236)503          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
0002C2                                    (1/237)504 *
0002C2                                    (1/238)505 * DIV64N32 DIVIDE N64 IN R0-R1 BY MAX64 IN R2-R3 GIVING REMAINDER R0-R1
0002C2                                    (1/239)506 * (USE DXR TO AVOID USE OF H32 GPRS)
0002C2                                    (1/240)507 *
0002C2                                    (1/241)508 DIV64R32 DS    0H
0002C2                                    (1/242)509          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=000002C2 LEN=01000 REG=F OFF=00000 LAB=
0002C2 E3C0FA540024            000D16     (1/243)510          STG   R12,ZCSAVE
0002C8 BE08F09C                00035E     (1/244)511          STCM  R0,8,SIGN         SAVE HIGH BYTE WITH N64 SIGN
0002CC 4DC0F080                000342     (1/245)512          BAS   R12,DIV64R32_LCR  COMPLIMENT IF NEGATIVE
0002D0 9001FAD5                000D97     (1/246)513          STM   R0,R1,ZCWORK+1
0002D4 9250FAD4                000D96     (1/247)514          MVI   ZCWORK,X'50'   EXP = X'40' + 16 NIBBLES
0002D8 9242FADC                000D9E     (1/248)515          MVI   ZCWORK+8,X'42' EXP = X'40' + 16 - 14 NIBBLES
0002DC 4210FADD                000D9F     (1/249)516          STC   R1,ZCWORK+9    LOW BYTE IN 2ND HALF
0002E0 D705FADEFADE     000DA0 000DA0     (1/250)517          XC    ZCWORK+10(6),ZCWORK+10 CLEAR LAST 6
0002E6 6800FAD4                000D96     (1/251)518          LD    F0,ZCWORK
0002EA 6820FADC                000D9E     (1/252)519          LD    F2,ZCWORK+8
0002EE 9023FAD5                000D97     (1/253)520          STM   R2,R3,ZCWORK+1
0002F2 9250FAD4                000D96     (1/254)521          MVI   ZCWORK,X'50'   EXCESS X'40' + 16 NIBBLES FOR FL8
0002F6 9242FADC                000D9E     (1/255)522          MVI   ZCWORK+8,X'42' + 14 NIBBLES FOR 2ND HALF
0002FA 4230FADD                000D9F     (1/256)523          STC   R3,ZCWORK+9    LOW BYTE IN 2ND HALF
0002FE 6810FAD4                000D96     (1/257)524          LD    F1,ZCWORK
000302 6830FADC                000D9E     (1/258)525          LD    F3,ZCWORK+8
000306 B22D0001                           (1/259)526          DXR   F0,F1                 F0-2 = N64/MAX64
00030A B3670040                           (1/260)527          FIXR  F4,R0                 F4-6 = INTEGER
00030E 3704                               (1/261)528          SXR   F0,F4                 F0-2 = FRACTION OF MAX64
000310 2601                               (1/262)529          MXR   F0,F1                 F0-2 = MOD(MAX64,N64)
000312 6840FAFE                000DC0     (1/263)530          LD    F4,=X'5110000000000000'  FORCE EXP 51 AND ROUND TO INT
000316 6860FB06                000DC8     (1/264)531          LD    F6,=X'4300080000000000'
00031A 3604                               (1/265)532          AXR   F0,F4                 F0-2 = MOD(MAX64,N64) SET EXP+RND
00031C 6000FAD4                000D96     (1/266)533          STD   F0,ZCWORK      STORE HFP RESULT LT WITH EXP X'51'
000320 6020FADC                000D9E     (1/267)534          STD   F2,ZCWORK+8
000324 9802FAD4                000D96     (1/268)535          LM    R0,R2,ZCWORK   LOAD R0-R2 WITH 12 BYTES OF RESULT
000328 8D00000C                           (1/269)536          SLDL  R0,12                 ALIGN FIRST 13 NIBBLES N64 FROM F0
00032C 8820000C                           (1/270)537          SRL   R2,12                 ALIGN LAST 3 NIBBLES FROM F2
000330 5420FB12                000DD4     (1/271)538          N     R2,=X'00000FFF'
000334 1612                               (1/272)539          OR    R1,R2                 OR 16 NIBLES TO FORM N64 RESULT
000336 4DC0F080                000342     (1/273)540          BAS   R12,DIV64R32_LCR
00033A E3C0FA540004            000D16     (1/274)541          LG    R12,ZCSAVE
000340 07FE                               (1/275)542          BR    R14
000342                                    (1/276)543 DIV64R32_LCR DS 0H             COMP R0-R1 IF SIGN NEG
000342 9180F09C                00035E     (1/277)544          TM    SIGN,X'80'
000346 078C                               (1/278)545          BZR   R12
000348 5700FB16                000DD8     (1/279)546          X     R0,=F'-1'
00034C 5710FB16                000DD8     (1/280)547          X     R1,=F'-1'
000350 C21B00000001            000001     (1/281)548          ALFI  R1,1
000356 E30090800098            000080     (1/282)549          ALC   R0,ZCVT_ZERO
00035C 07FC                               (1/283)550          BR    R12
00035E                                    (1/284)551 SIGN     DS    X        HIGH BYTE OF R0 WITH SIGN BIT
00035F                                    (1/285)552          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
00035F                                    (1/286)553 *
00035F                                    (1/287)554 * DIVQ128 DIVIDE Q128 IN R0-R1 BY Q128 IN R2-R3 > REM=R0-R1,QUO=R2-R3
00035F                                    (1/288)555 *
00035F                                    (1/289)556 * NOTES:
00035F                                    (1/290)557 *  1.  CURRENT RESTRICTION DIVIOR 0 OR > 2**63 CAUSES 0C4
00035F                                    (1/291)558 *
000360                                    (1/292)559 DIVQ128  DS 0H
000360                                    (1/293)560          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000360 LEN=01000 REG=F OFF=00000 LAB=
000360 EB46F9B60024            000D16     (1/294)561          STMG  R4,R6,ZCSAVE
000366 C041FFFFFFFF            FFFFFF     (1/295)562          LGFI  R4,-1
00036C                                    (1/296)563          IF    (TMHH,R0,O,X'8000')    IS DIVIDEND NEG
00036C A7028000                            (4/47)567+         TMHH  R0,X'8000'
000370 47E0F058                0003B8      (4/49)568+         BC    15-O,#@IF_16_2
000374 9201F1BE                00051E     (1/297)570                MVI DIVQ_REM_NEG,TRUE     YES, REMAINDER NEG
000378 B9820004                           (1/298)571                XGR  R0,R4                YES, COMPLIMENT DIVIDEND
00037C B9820014                           (1/299)572                XGR  R1,R4
000380 C21A00000001            000001     (1/300)573                ALGFI R1,1
000386 E30090800088            000080     (1/301)574                ALCG  R0,ZCVT_ZERO
00038C                                    (1/302)575                IF (TMHH,R2,O,X'8000')  IS DIVISOR NEG
00038C A7228000                            (4/47)579+         TMHH  R2,X'8000'
000390 47E0F050                0003B0      (4/49)580+         BC    15-O,#@IF_17_2
000394 B9820024                           (1/303)582                   XGR  R2,R4              YES, COMPLIMENT DIVSOR
000398 B9820034                           (1/304)583                   XGR  R3,R4
00039C C23A00000001            000001     (1/305)584                   ALGFI R3,1
0003A2 E32090800088            000080     (1/306)585                   ALCG  R2,ZCVT_ZERO
0003A8 9200F1BF                00051F     (1/307)586                   MVI DIVQ_QUO_NEG,FALSE  BOTH  NEG   > +QUO
0003AC                                    (1/308)587                ELSE 
0003AC 47F0F054                0003B4     (11/40)590+        B      #@IF_17_E
0003B0                                    (11/41)591+#@IF_17_2                                                DS 0H
0003B0 9201F1BF                00051F     (1/309)593                   MVI DIVQ_QUO_NEG,TRUE   MIXED DD/DR > -QUO
0003B4                                    (1/310)594                ENDIF 
0003B4                                     (8/23)597+#@IF_17_E                        DS 0H
0003B4                                    (1/311)599          ELSE 
0003B4 47F0F084                0003E4     (11/40)602+        B      #@IF_16_E
0003B8                                    (11/41)603+#@IF_16_2                                                DS 0H
0003B8 9200F1BE                00051E     (1/312)605                MVI DIVQ_REM_NEG,FALSE  ELSE +DD > +REM
0003BC                                    (1/313)606                IF (TMHH,R2,O,X'8000')  IS DIVISOR NEG AND DD POS
0003BC A7228000                            (4/47)610+         TMHH  R2,X'8000'
0003C0 47E0F080                0003E0      (4/49)611+         BC    15-O,#@IF_18_2
0003C4 9201F1BF                00051F     (1/314)613                   MVI DIVQ_QUO_NEG,TRUE   THEN QUO MUST BE NEG
0003C8 B9820024                           (1/315)614                   XGR  R2,R4              COMPLIENT DIVISOR
0003CC B9820034                           (1/316)615                   XGR  R3,R4
0003D0 C23A00000001            000001     (1/317)616                   ALGFI R3,1
0003D6 E32090800088            000080     (1/318)617                   ALCG  R2,ZCVT_ZERO
0003DC                                    (1/319)618                ELSE 
0003DC 47F0F084                0003E4     (11/40)621+        B      #@IF_18_E
0003E0                                    (11/41)622+#@IF_18_2                                                DS 0H
0003E0 9200F1BF                00051F     (1/320)624                   MVI DIVQ_QUO_NEG,FALSE  BOTH POS > QUO POS
0003E4                                    (1/321)625                ENDIF 
0003E4                                     (8/23)628+#@IF_18_E                        DS 0H
0003E4                                    (1/322)630          ENDIF 
0003E4                                     (8/23)633+#@IF_16_E                        DS 0H
0003E4                                    (1/323)635          IF    (LTGR,R2,Z,R2)
0003E4 B9020022                            (4/47)638+         LTGR  R2,R2
0003E8 4770F0F2                000452      (4/49)639+         BC    15-Z,#@IF_19_2
0003EC                                    (1/324)641                IF    (LTGR,R3,Z,R3)
0003EC B9020033                            (4/47)644+         LTGR  R3,R3
0003F0 4770F09E                0003FE      (4/49)645+         BC    15-Z,#@IF_20_2
0003F4 41100009                           (1/325)647                      LA    R1,ZCVT_ABORT_DIVQ  DIVSOR 0
0003F8 58F09068                000068     (1/326)648                      L     R15,ZCVT_ABORT
0003FC 07FF                               (1/327)649                      BR    R15
0003FE                                    (1/328)650                ENDIF 
0003FE                                     (8/20)653+#@IF_20_2                                                DS 0H
0003FE                                    (1/329)655                IF    (CLGR,R3,GT,R0)
0003FE B9210030                            (4/47)658+         CLGR  R3,R0
000402 47D0F0BE                00041E      (4/49)659+         BC    15-GT,#@IF_21_2
000406                                    (1/330)661 *
000406                                    (1/331)662 * USE SINGLE DLGR WHEN DIVISOR < 64 BITS AND > HIGH 64 DIVIDEND
000406                                    (1/332)663 *
000406 B9870003                           (1/333)664                      DLGR  R0,R3  R0 = REM, R1 = QUOTIENT
00040A B9040031                           (1/334)665                      LGR   R3,R1
00040E B9090022                           (1/335)666                      SGR   R2,R2  R2-R3 = QUOTIENT
000412 B9040010                           (1/336)667                      LGR   R1,R0
000416 B9090000                           (1/337)668                      SGR   R0,R0  R0-R1 = REMAINDER
00041A                                    (1/338)669                ELSE 
00041A 47F0F0EE                00044E     (11/40)672+        B      #@IF_21_E
00041E                                    (11/41)673+#@IF_21_2                                                DS 0H
00041E                                    (1/339)675 *
00041E                                    (1/340)676 * USE 2 DLGR FOR DIVISOR < HIGH 64 DIVIDEND
00041E                                    (1/341)677 *
00041E EB03FA360024            000D96     (1/342)678                      STMG R0,R3,ZCWORK  SAVE DIVIDEND & DIVISOR
000424 B9040010                           (1/343)679                      LGR   R1,R0
000428 B9090000                           (1/344)680                      SGR   R0,R0
00042C B9870003                           (1/345)681                      DLGR  R0,R3  R0 = REM, R1 = QUOTIENT
000430 B9040021                           (1/346)682                      LGR   R2,R1  R2 = HIGH QUOTIENT
000434 E310FA3E0004            000D9E     (1/347)683                      LG    R1,ZCWORK+8 RELOAD LOW DIVIDEND
00043A B9870003                           (1/348)684                      DLGR  R0,R3  R0 = REM, R1 = QUOTIENT
00043E B9040030                           (1/349)685                      LGR   R3,R0  R3 = LOW QUOTIENT
000442 B9040031                           (1/350)686                      LGR   R3,R1
000446 B9040010                           (1/351)687                      LGR   R1,R0
00044A B9090000                           (1/352)688                      SGR   R0,R0  R0-R1 = REMAINDER
00044E                                    (1/353)689                ENDIF 
00044E                                     (8/23)692+#@IF_21_E                        DS 0H
00044E                                    (1/354)694          ELSE 
00044E 47F0F138                000498     (11/40)697+        B      #@IF_19_E
000452                                    (11/41)698+#@IF_19_2                                                DS 0H
000452                                    (1/355)700 *
000452                                    (1/356)701 * CALC FIRST EST FOR DIVISOR > 64 AND CHECK IF HIGH BY 1
000452                                    (1/357)702 *
000452 EB03FA360024            000D96     (1/358)703                STMG R0,R3,ZCWORK  SAVE Q DIVIDEND AND DIVISOR
000458 B9040010                           (1/359)704                LGR  R1,R0
00045C B90D0002                           (1/360)705                DSGR R0,R2
000460 B9040031                           (1/361)706                LGR  R3,R1
000464 B9090022                           (1/362)707                SGR  R2,R2                    R2-R3 = TRIAL QUOTIENT
000468 4D60F184                0004E4     (1/363)708                BAS  R6,DIVQ_CALC_REM         R0-R1 = REM, R2-R3 = QUO
00046C                                    (1/364)709                IF   (LTGR,R0,M,R0)
00046C B9020000                            (4/47)712+         LTGR  R0,R0
000470 47B0F138                000498      (4/49)713+         BC    15-M,#@IF_22_2
000474                                    (1/365)715 *
000474                                    (1/366)716 * REDUCE QUOTIENT BY 1 IF REMAINDER NEG
000474                                    (1/367)717 *
000474 EB110001000C                       (1/368)718                     SRLG  R1,R1,1          SHIFT RIGHT LOW 64 BY 1
00047A                                    (1/369)719                     IF    (TMLL,R0,NZ,1)   IS LOW BIT ON IN HIGH 64
00047A A7010001                            (4/47)723+         TMLL  R0,1
00047E 4780F126                000486      (4/49)724+         BC    15-NZ,#@IF_23_2
000482 A5188000                           (1/370)726                           OIHH R1,X'8000'  YES MOVE IT TO LOW 64
000486                                    (1/371)727                     ENDIF 
000486                                     (8/20)730+#@IF_23_2                                                DS 0H
000486 EB000001000A                       (1/372)732                     SRAG  R0,R0,1          SHIFT RIGHT HIGH 64
00048C B90A0031                           (1/373)733                     ALGR  R3,R1
000490 B9880020                           (1/374)734                     ALCGR R2,R0
000494 4D60F184                0004E4     (1/375)735                     BAS  R6,DIVQ_CALC_REM R0-R1 = REM, R2-R3 = QUO
000498                                    (1/376)736                ENDIF 
000498                                     (8/20)739+#@IF_22_2                                                DS 0H
000498                                    (1/377)741          ENDIF 
000498                                     (8/23)744+#@IF_19_E                        DS 0H
000498                                    (1/378)746          IF    (CLI,DIVQ_REM_NEG,EQ,TRUE)  IS REMAINDER NEG
000498 9501F1BE                00051E      (4/47)750+         CLI   DIVQ_REM_NEG,TRUE
00049C 4770F15A                0004BA      (4/49)751+         BC    15-EQ,#@IF_24_2
0004A0 C041FFFFFFFF            FFFFFF     (1/379)753                LGFI  R4,-1                    YES, COMPLIMENT
0004A6 B9820004                           (1/380)754                XGR  R0,R4
0004AA B9820014                           (1/381)755                XGR  R1,R4
0004AE C21A00000001            000001     (1/382)756                ALGFI R1,1
0004B4 E30090800088            000080     (1/383)757                ALCG  R0,ZCVT_ZERO
0004BA                                    (1/384)758          ENDIF 
0004BA                                     (8/20)761+#@IF_24_2                                                DS 0H
0004BA                                    (1/385)763          IF    (CLI,DIVQ_QUO_NEG,EQ,TRUE) IS QUOTIENT NEG
0004BA 9501F1BF                00051F      (4/47)767+         CLI   DIVQ_QUO_NEG,TRUE
0004BE 4770F17C                0004DC      (4/49)768+         BC    15-EQ,#@IF_25_2
0004C2 C041FFFFFFFF            FFFFFF     (1/386)770                LGFI  R4,-1                    YES, COMPLIMENT
0004C8 B9820024                           (1/387)771                XGR  R2,R4
0004CC B9820034                           (1/388)772                XGR  R3,R4
0004D0 C23A00000001            000001     (1/389)773                ALGFI R3,1
0004D6 E32090800088            000080     (1/390)774                ALCG  R2,ZCVT_ZERO
0004DC                                    (1/391)775          ENDIF 
0004DC                                     (8/20)778+#@IF_25_2                                                DS 0H
0004DC EB46F9B60004            000D16     (1/392)780          LMG   R4,R6,ZCSAVE
0004E2 07FE                               (1/393)781          BR    R14
0004E4                                    (1/394)782 *
0004E4                                    (1/395)783 * CALC REMAINDER IN R0-R1 FOR TRIAL QUOTIENT IN R2-R3
0004E4                                    (1/396)784 *   1.  USERS DIVIDEND AND DIVISOR IN WORKAREA
0004E4                                    (1/397)785 *   2,  USES  R6 LINK
0004E4                                    (1/398)786 *
0004E4                                    (1/399)787 DIVQ_CALC_REM DS 0H
0004E4 EB23F1C80024            000528     (1/400)788          STMG R2,R3,DIVQ_TRIAL
0004EA EB01FA460004            000DA6     (1/401)789          LMG  R0,R1,ZCWORK+16  R2-R3 = DIVISOR
0004F0 90EFF1C0                000520     (1/402)790          STM  R14,R15,DIVQ_SAVE
0004F4 58F09034                000034     (1/403)791          L    R15,ZCVT_MPYQ128
0004F8 0DEF                               (1/404)792          BASR R14,R15                 R0-R1 = QUO * DIVR
0004FA 0DE0                               (1/405)793          BASR R14,0
0004FC                                    (1/406)794          USING *,R14
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000360 LEN=01000 REG=F OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=000004FC LEN=01000 REG=E OFF=00000 LAB=
0004FC 98EFE024                000520     (1/407)795          LM   R14,R15,DIVQ_SAVE
000500                                    (1/408)796          DROP R14
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000360 LEN=01000 REG=F OFF=00000 LAB=
000500 EB23FA360004            000D96     (1/409)797          LMG   R2,R3,ZCWORK    R2-R3 = DIVIDEND
000506 B90B0031                           (1/410)798          SLGR  R3,R1
00050A B9890020                           (1/411)799          SLBGR R2,R0                  R2-R3 = REMAINDER
00050E B9040002                           (1/412)800          LGR   R0,R2
000512 B9040013                           (1/413)801          LGR   R1,R3
000516 EB23F1C80004            000528     (1/414)802          LMG   R2,R3,DIVQ_TRIAL
00051C 07F6                               (1/415)803          BR    R6
00051E                                    (1/416)804          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
00051E 00                                 (1/417)805 DIVQ_REM_NEG DC    AL1(FALSE) REMAINDER NEGATIVE
00051F 00                                 (1/418)806 DIVQ_QUO_NEG DC    AL1(FALSE) QUOTIENT  NEGATIVE
000520 0000000000000000                   (1/419)807 DIVQ_SAVE    DC    2F'0'      SAVE R14-R15 ACROSS MPYQ128
000528 0000000000000000                   (1/420)808 DIVQ_TRIAL   DC    XL16'00'   SAVE TRIAL DIVISOR
000538                                    (1/421)809 *
000538                                    (1/422)810 * GEN GOBACK AND STOP RUN FOR FALL THROUGH LAST PARAGRAPH.
000538                                    (1/423)811 *
000538                                    (1/424)812 GOBACK   DS 0H
000538                                    (1/425)813 STOPRUN  DS 0H
000538                                    (1/426)814          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000538 LEN=01000 REG=F OFF=00000 LAB=
000538 58DD0004                           (1/427)815          L     R13,4(R13)
00053C 58ED000C                           (1/428)816          L     R14,12(R13)
000540 18F1                               (1/429)817          LR    R15,R1
000542 982CD01C                           (1/430)818          LM    2,12,28(R13)
000546 07FE                               (1/431)819          BR    R14
000548                                    (1/432)820          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
000548                                    (1/433)821 *
000548                                    (1/434)822 * MPYQ128 MULTIPLY Q128 IN R0-R1 BY Q128 INR2-R3
000548                                    (1/435)823 *
000548                                    (1/436)824 MPYQ128  DS 0H
000548                                    (1/437)825          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000548 LEN=01000 REG=F OFF=00000 LAB=
000548 EB47F7CE0024            000D16     (1/438)826          STMG  R4,R7,ZCSAVE
00054E C041FFFFFFFF            FFFFFF     (1/439)827          LGFI  R4,-1
000554                                    (1/440)828          IF    (TMHH,R0,O,X'8000')
000554 A7028000                            (4/47)831+         TMHH  R0,X'8000'
000558 47E0F054                00059C      (4/49)832+         BC    15-O,#@IF_26_2
00055C B9820004                           (1/441)834                XGR  R0,R4
000560 B9820014                           (1/442)835                XGR  R1,R4
000564 C21A00000001            000001     (1/443)836                ALGFI R1,1
00056A E30090800088            000080     (1/444)837                ALCG  R0,ZCVT_ZERO
000570                                    (1/445)838                IF (TMHH,R2,O,X'8000')
000570 A7228000                            (4/47)841+         TMHH  R2,X'8000'
000574 47E0F04C                000594      (4/49)842+         BC    15-O,#@IF_27_2
000578 B9820024                           (1/446)844                   XGR  R2,R4
00057C B9820034                           (1/447)845                   XGR  R3,R4
000580 C23A00000001            000001     (1/448)846                   ALGFI R3,1
000586 E32090800088            000080     (1/449)847                   ALCG  R2,ZCVT_ZERO
00058C 9200F0CA                000612     (1/450)848                   MVI MPYQ_NEG,FALSE
000590                                    (1/451)849                ELSE 
000590 47F0F050                000598     (11/40)852+        B      #@IF_27_E
000594                                    (11/41)853+#@IF_27_2                                                DS 0H
000594 9201F0CA                000612     (1/452)855                   MVI MPYQ_NEG,TRUE
000598                                    (1/453)856                ENDIF 
000598                                     (8/23)859+#@IF_27_E                        DS 0H
000598                                    (1/454)861          ELSE 
000598 47F0F07C                0005C4     (11/40)864+        B      #@IF_26_E
00059C                                    (11/41)865+#@IF_26_2                                                DS 0H
00059C                                    (1/455)867                IF (TMHH,R2,O,X'8000')
00059C A7228000                            (4/47)870+         TMHH  R2,X'8000'
0005A0 47E0F078                0005C0      (4/49)871+         BC    15-O,#@IF_28_2
0005A4 B9820024                           (1/456)873                   XGR  R2,R4
0005A8 B9820034                           (1/457)874                   XGR  R3,R4
0005AC C23A00000001            000001     (1/458)875                   ALGFI R3,1
0005B2 E32090800088            000080     (1/459)876                   ALCG  R2,ZCVT_ZERO
0005B8 9201F0CA                000612     (1/460)877                   MVI MPYQ_NEG,TRUE
0005BC                                    (1/461)878                ELSE 
0005BC 47F0F07C                0005C4     (11/40)881+        B      #@IF_28_E
0005C0                                    (11/41)882+#@IF_28_2                                                DS 0H
0005C0 9200F0CA                000612     (1/462)884                   MVI MPYQ_NEG,FALSE
0005C4                                    (1/463)885                ENDIF 
0005C4                                     (8/23)888+#@IF_28_E                        DS 0H
0005C4                                    (1/464)890          ENDIF 
0005C4                                     (8/23)893+#@IF_26_E                        DS 0H
0005C4 B9040040                           (1/465)895          LGR   R4,R0         R4-R5 = R0-R1
0005C8 B9040051                           (1/466)896          LGR   R5,R1
0005CC B9860003                           (1/467)897          MLGR  R0,R3         R0-R1 = R1 * R3
0005D0 B9040074                           (1/468)898          LGR   R7,R4
0005D4 B9860063                           (1/469)899          MLGR  R6,R3         R6-R7 = R0 * R3
0005D8 B90A0007                           (1/470)900          ALGR  R0,R7         R0-R1 = Q128 = + R0 * R3 * 2**64
0005DC B9040075                           (1/471)901          LGR   R7,R5
0005E0 B9860062                           (1/472)902          MLGR  R6,R2         R6-R7 = R1 * R2
0005E4 B90A0007                           (1/473)903          ALGR  R0,R7         R0-R1 = Q128 = + R1 * R2 * 2**64
0005E8                                    (1/474)904          IF    (CLI,MPYQ_NEG,EQ,TRUE)
0005E8 9501F0CA                000612      (4/47)907+         CLI   MPYQ_NEG,TRUE
0005EC 4770F0C2                00060A      (4/49)908+         BC    15-EQ,#@IF_29_2
0005F0 C041FFFFFFFF            FFFFFF     (1/475)910                LGFI  R4,-1
0005F6 B9820004                           (1/476)911                XGR  R0,R4
0005FA B9820014                           (1/477)912                XGR  R1,R4
0005FE C21A00000001            000001     (1/478)913                ALGFI R1,1
000604 E30090800088            000080     (1/479)914                ALCG  R0,ZCVT_ZERO
00060A                                    (1/480)915          ENDIF 
00060A                                     (8/20)918+#@IF_29_2                                                DS 0H
00060A EB47F7CE0004            000D16     (1/481)920          LMG   R4,R7,ZCSAVE
000610 07FE                               (1/482)921          BR    R14
000612                                    (1/483)922          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
000612 00                                 (1/484)923 MPYQ_NEG DC    AL1(FALSE)
000613                                    (1/485)924 *
000613                                    (1/486)925 * ON SIZE ERROR 64 BIT USING ONLY 32 BIT REGS
000613                                    (1/487)926 *    R0-R1 = A(TARGET 64 BIT)
000613                                    (1/488)927 *    R2-R3 = A(MAXDIG 64 BIT)
000613                                    (1/489)928 *
000614                                    (1/490)929 OSE64R32 DS    0H
000614                                    (1/491)930          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000614 LEN=01000 REG=F OFF=00000 LAB=
000614 EBECF7020024            000D16     (1/492)931          STMG  R14,R12,ZCSAVE
00061A 05C0                               (1/493)932          BALR  R12,0
00061C                                    (1/494)933          USING *,R12
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000614 LEN=01000 REG=F OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
00061C                                    (1/495)934          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
00061C 4710C03C                000658     (1/496)935          BO    OSE64R32_EXIT   EXIT IF OVERFLOW FROM ADD
000620 1840                               (1/497)936          LR    R4,R0           R4-R5 = TARGET
000622 1851                               (1/498)937          LR    R5,R1
000624 A7428000                           (1/499)938          TMHH  R4,X'8000'
000628 A7B4000E                000644     (1/500)939          JNM   OSE64R32_CR
00062C A768FFFF                           (1/501)940          LHI   R6,-1
000630 A778FFFF                           (1/502)941          LHI   R7,-1           COMPLIMENT TARGET IF NEG.
000634 1746                               (1/503)942          XR    R4,R6
000636 1757                               (1/504)943          XR    R5,R7
000638 C25B00000001            000001     (1/505)944          ALFI  R5,1
00063E E34090800098            000080     (1/506)945          ALC   R4,ZCVT_ZERO
000644                                    (1/507)946 OSE64R32_CR DS    0H            COMPARE POS N64 WITH MAX64
000644 1942                               (1/508)947          CR    R4,R2
000646 4740C03C                000658     (1/509)948          BL    OSE64R32_EXIT    EXIT WITHOUT CC3 IF N64 < MAX64
00064A 4720C038                000654     (1/510)949          BH    OSE64R32_CC3     SET CC3 IF HIGH
00064E 1553                               (1/511)950          CLR   R5,R3
000650 4740C03C                000658     (1/512)951          BL    OSE64R32_EXIT
000654                                    (1/513)952 OSE64R32_CC3 DS 0H
000654 9191C038                000654     (1/514)953          TM    *,X'91'          SET CC3 ALL SEL BITS 1 FOR N64 >= MAX64
000658                                    (1/515)954 OSE64R32_EXIT DS 0H
000658 EBECC6FA0004            000D16     (1/516)955          LMG   R14,R12,ZCSAVE
00065E 07FE                               (1/517)956          BR    R14
000660                                    (1/518)957 *
000660                                    (1/519)958 * GEN PERFORM
000660                                    (1/520)959 *
000660                                    (1/521)960 PERFORM  DS 0H
000660                                    (1/522)961          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000660 LEN=01000 REG=F OFF=00000 LAB=
000660 9823F048                0006A8     (1/523)962          LM    R2,R3,STACKPTR         R2=CUR STACK ENTRY,R3=END STACK
000664                                    (1/524)963          USING PM_STACK_ENTRY,R2
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000660 LEN=01000 REG=F OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
000664 A72A0008                           (1/525)964          AHI   R2,PM_STACK_ENTRY_LEN  INC TO NEXT PERFORM STACK ENTRY
000668                                    (1/526)965          IF    (CLR,R2,NL,R3)
000668 1523                                (4/47)968+         CLR   R2,R3
00066A 4740F018                000678      (4/49)969+         BC    15-NL,#@IF_30_2
00066E 41100006                           (1/527)971                LA  R1,ZCVT_ABORT_STACK
000672 58F09068                000068     (1/528)972                L   R15,ZCVT_ABORT
000676 07FF                               (1/529)973                BR  R15
000678                                    (1/530)974          ENDIF 
000678                                     (8/20)977+#@IF_30_2                                                DS 0H
000678 5020F048                0006A8     (1/531)979          ST    R2,STACKPTR            UPDATE STACK PTR
00067C A50A8000                           (1/532)980          OILH  R0,X'8000'             TURN ON AMODE31 IN PG_EXIT+6 ADDR
000680 90012000                000000     (1/533)981          STM   R0,R1,PM_STACK_ENTRY   STORE PG_EXIT+6 AND RETURN ADDRS
000684 18FE                               (1/534)982          LR    R15,R14
000686                                    (1/535)983          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
000686 07FF                               (1/536)984          BR    R15                    BRANCH TO STARTING PARAGRAPH
000688                                    (1/537)985 *
000688                                    (1/538)986 * GEN END PERFORM CHECK ENTERED VIA BAL R14,END_PERFORM_CHECK
000688                                    (1/539)987 *
000688                                    (1/540)988 PMCHECK  DS 0H
000688                                    (1/541)989          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000688 LEN=01000 REG=F OFF=00000 LAB=
000688 5820F020                0006A8     (1/542)990          L     R2,STACKPTR
00068C                                    (1/543)991          USING PM_STACK_ENTRY,R2
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000688 LEN=01000 REG=F OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
00068C 55E02000                000000     (1/544)992          CL    R14,PM_STACK_PGEND6  DOES THIS PMCHECK MATCH ENDING PG
000690 077E                               (1/545)993          BNER  R14          NO, EXIT TO NEXT SEQ. INSTRUCTION
000692 58E02004                000004     (1/546)994          L     R14,PM_STACK_RETURN YES, SET R14 TO PERFORM EXIT ADDRESS
000696 A72AFFF8                           (1/547)995          AHI   R2,-PM_STACK_ENTRY_LEN REMOVE PERFORM ENTRY FROM STACK
00069A 5020F020                0006A8     (1/548)996          ST    R2,STACKPTR
00069E 07FE                               (1/549)997          BR    R14        EXIT FROM PERFORM
0006A0                                    (1/550)998          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
0006A0 5C5CE2E3C1C3D25C                   (1/551)999          DC    0D,CL8'**STACK*'
0006A8                  00000014         (1/552)1000 MAX_PM   EQU   20  MAXIMUM NESTED PERFORMS
0006A8                  00000008         (1/553)1001 STACK_ENTRY_LEN EQU 8 A(PG-EXIT+6,RETURN)
0006A8 000006B000000750                  (1/554)1002 STACKPTR DC    A(STACKORG,STACKEND)  CUR STACK PTR AND STACK END ADDRS
0006B0                                   (1/555)1003 STACKORG DS    0D
0006B0 0000000000000000                  (1/556)1004          DC    (MAX_PM)XL(STACK_ENTRY_LEN)'00' STACK ENTRIES
000750                  00000750         (1/557)1005 STACKEND EQU *
000750                                   (1/558)1006 *
000750                                   (1/559)1007 * GEN ZC_RND_F ROUND R0=REMAINDER,R1=QUOTIENT,R2=DIVISOR
000750                                   (1/560)1008 *
000750                                   (1/561)1009 ROUNDF   DS 0H
000750                                   (1/562)1010          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=00000750 LEN=01000 REG=F OFF=00000 LAB=
000750 1230                              (1/563)1011          LTR   R3,R0   MOVE REMAINDER TO WORK
000752 A7440017                000780    (1/564)1012          BRM   RND_F_NR
000756 8B300001                          (1/565)1013          SLA   R3,1    DOUBLE POS REMAINDER
00075A 1222                              (1/566)1014          LTR   R2,R2
00075C A744000A                000770    (1/567)1015          BRM   RND_F_PR_ND
000760                                   (1/568)1016 RND_F_PR_PD DS 0H
000760 1932                              (1/569)1017          CR    R3,R2   IS REMAINDER GE HALF OF DIVISOR
000762 A744000E                          (1/570)1018          BRL   R14     NO, EXIT
000766 A71A0001                          (1/571)1019          AHI   R1,1    ADD 1 TO QUOTIENT (MUST BE POS TOO)
00076A 1B02                              (1/572)1020          SR    R0,R2   SUB DIVIDOR FROM REMAINDER
00076C A7F4000E                          (1/573)1021          BRU   R14     EXIT
000770                                   (1/574)1022 RND_F_PR_ND DS 0H
000770 1932                              (1/575)1023          CR    R3,R2   IS REMAINDER GE HALF OF DIVISOR
000772 A744000E                          (1/576)1024          BRL   R14     NO, EXIT
000776 A71A0001                          (1/577)1025          AHI   R1,1    ADD 1 TO QUOTIENT (MUST BE POS TOO)
00077A 1A02                              (1/578)1026          AR    R0,R2   ADD DIVIDOR TO REMAINDER
00077C A7F4000E                          (1/579)1027          BRU   R14     EXIT
000780                                   (1/580)1028 RND_F_NR DS 0H
000780 8B300001                          (1/581)1029          SLA   R3,1    DOUBLE NEG REMAINDER
000784 1222                              (1/582)1030          LTR   R2,R2   IS DIVISOR POS
000786 A744000C                00079E    (1/583)1031          BRM   RND_F_NR_ND
00078C                                   (1/584)1032 RND_F_NR_PD DS 0F
00078C 1333                              (1/585)1033          LCR   R3,R3   GET POS 2*REMAINDER
00078E 1932                              (1/586)1034          CR    R3,R2   IS REMAINDER GE HALF OF DIVISOR
000790 A744000E                          (1/587)1035          BRL   R14     NO, EXIT
000794 A71A0001                          (1/588)1036          AHI   R1,1    ADD 1 TO QUOTIENT (MUST BE MEG TOO)
000798 1B02                              (1/589)1037          SR    R0,R2   SUB DIVIDOR FROM REMAINDER
00079A A7F4000E                          (1/590)1038          BRU   R14     EXIT
00079E                                   (1/591)1039 RND_F_NR_ND DS 0H
00079E 1932                              (1/592)1040          CR    R3,R2   IS REMAINDER LE HALF OF DIVISOR
0007A0 A724000E                          (1/593)1041          BRH   R14     NO, EXIT
0007A4 A71AFFFF                          (1/594)1042          AHI   R1,-1   SUB 1 FROM QUOTIENT (MUST BE NEG TOO)
0007A8 1A02                              (1/595)1043          AR    R0,R2   ADD DIVIDOR TO REMAINDER
0007AA A7F4000E                          (1/596)1044          BRU   R14     EXIT
0007AE                                   (1/597)1045          DROP  R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
0007AE                                   (1/598)1046 *
0007AE                                   (1/599)1047 * TEST ALPHABETIC X   R1=A(FIELD) R2=LENGTH
0007AE                                   (1/600)1048 *
0007AE                                   (1/601)1049 TALPHAX  DS    0H
0007AE                                   (1/602)1050          USING *,R15
LISTUSE ZC390CVT ESD=0003 LOC=00000000 LEN=01000 REG=9 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=0000061C LEN=01000 REG=C OFF=00000 LAB=
LISTUSE PM_STACK_ENTRY ESD=0002 LOC=00000000 LEN=01000 REG=2 OFF=00000 LAB=
LISTUSE ZC390NUC ESD=0001 LOC=000007AE LEN=01000 REG=F OFF=00000 LAB=
0007AE 0620                              (1/603)1051          BCTR  R2,0
0007B0 4420F008                0007B6    (1/604)1052          EX    R2,TRTALPHA
0007B4 07FE                              (1/605)1053          BR    R14
0007B6 DD001000F00E            0007BC    (1/606)1054 TRTALPHA TRT   0(0,R1),TABALPHA
0007BC                                   (1/607)1055          DROP 
LISTUSE NONE
0007BC FFFFFFFFFFFFFFFF                  (1/608)1056 TABALPHA DC    256X'FF'
0008BC                  00087D           (1/609)1057          ORG   TABALPHA+C'A'
00087D 0000000000000000                  (1/610)1058          DC    9X'00'          A-I
000886                  00088D           (1/611)1059          ORG   TABALPHA+C'J'
00088D 0000000000000000                  (1/612)1060          DC    9X'00'          J-R
000896                  00089E           (1/613)1061          ORG   TABALPHA+C'S'
00089E 0000000000000000                  (1/614)1062          DC    8X'00'          S-Z
0008A6                  00083D           (1/615)1063          ORG   TABALPHA+C'a'
00083D 0000000000000000                  (1/616)1064          DC    9X'00'          a-i
000846                  00084D           (1/617)1065          ORG   TABALPHA+C'j'
00084D 0000000000000000                  (1/618)1066          DC    9X'00'          j-r
000856                  00085E           (1/619)1067          ORG   TABALPHA+C's'
00085E 0000000000000000                  (1/620)1068          DC    8X'00'          s-z
000866                  0008BC           (1/621)1069          ORG 
0008BC                                   (1/622)1070 *
0008BC                                   (1/623)1071 * TEST NUMERIC PACKED   R1=A(FIELD) R2=LENGTH
0008BC                                   (1/624)1072 *
0008BC                                   (1/625)1073 TNUMP    DS    0H
0008BC                                   (1/626)1074          USING *,R15
LISTUSE ZC390NUC ESD=0001 LOC=000008BC LEN=01000 REG=F OFF=00000 LAB=
0008BC 4620F00C                0008C8    (1/627)1075          BCT   R2,TRTPN
0008C0 DD001000F026            0008E2    (1/628)1076          TRT   0(1,R1),TABNUMPS  TEST SINGLE BYTE FIELD
0008C6 07FE                              (1/629)1077          BR    R14
0008C8                                   (1/630)1078 TRTPN    DS    0H
0008C8 41312000                          (1/631)1079          LA    R3,0(R1,R2)
0008CC DD003000F026            0008E2    (1/632)1080          TRT   0(1,R3),TABNUMPS  TEST LOW DIGIT AND SIGN FIRST
0008D2 077E                              (1/633)1081          BNZR  R14
0008D4 0620                              (1/634)1082          BCTR  R2,0
0008D6 4420F020                0008DC    (1/635)1083          EX    R2,TRTNUMP
0008DA 07FE                              (1/636)1084          BR    R14
0008DC DD001000F126            0009E2    (1/637)1085 TRTNUMP  TRT   0(0,R1),TABNUMP
0008E2                                   (1/638)1086          DROP 
LISTUSE NONE
0008E2                                   (1/639)1087 *                         A B C D E F
0008E2 FFFFFFFFFFFFFFFF                  (1/640)1088 TABNUMPS DC    10X'FF',X'FFFF0000FF00' 00-0F
0008F2 FFFFFFFFFFFFFFFF                  (1/641)1089          DC    10X'FF',X'FFFF0000FF00' 10-1F
000902 FFFFFFFFFFFFFFFF                  (1/642)1090          DC    10X'FF',X'FFFF0000FF00' 20-2F
000912 FFFFFFFFFFFFFFFF                  (1/643)1091          DC    10X'FF',X'FFFF0000FF00' 30-3F
000922 FFFFFFFFFFFFFFFF                  (1/644)1092          DC    10X'FF',X'FFFF0000FF00' 40-4F
000932 FFFFFFFFFFFFFFFF                  (1/645)1093          DC    10X'FF',X'FFFF0000FF00' 50-5F
000942 FFFFFFFFFFFFFFFF                  (1/646)1094          DC    10X'FF',X'FFFF0000FF00' 60-6F
000952 FFFFFFFFFFFFFFFF                  (1/647)1095          DC    10X'FF',X'FFFF0000FF00' 70-7F
000962 FFFFFFFFFFFFFFFF                  (1/648)1096          DC    10X'FF',X'FFFF0000FF00' 80-8F
000972 FFFFFFFFFFFFFFFF                  (1/649)1097          DC    10X'FF',X'FFFF0000FF00' 90-9F
000982 FFFFFFFFFFFFFFFF                  (1/650)1098          DC    10X'FF',X'FFFFFFFFFFFF' A0-AF
000992 FFFFFFFFFFFFFFFF                  (1/651)1099          DC    10X'FF',X'FFFFFFFFFFFF' B0-BF
0009A2 FFFFFFFFFFFFFFFF                  (1/652)1100          DC    10X'FF',X'FFFFFFFFFFFF' C0-CF
0009B2 FFFFFFFFFFFFFFFF                  (1/653)1101          DC    10X'FF',X'FFFFFFFFFFFF' D0-DF
0009C2 FFFFFFFFFFFFFFFF                  (1/654)1102          DC    10X'FF',X'FFFFFFFFFFFF' E0-EF
0009D2 FFFFFFFFFFFFFFFF                  (1/655)1103          DC    10X'FF',X'FFFFFFFFFFFF' F0-FF
0009E2 0000000000000000                  (1/656)1104 TABNUMP  DC    10X'00',X'FFFFFFFFFFFF' 00-0F
0009F2 0000000000000000                  (1/657)1105          DC    10X'00',X'FFFFFFFFFFFF' 10-1F
000A02 0000000000000000                  (1/658)1106          DC    10X'00',X'FFFFFFFFFFFF' 20-2F
000A12 0000000000000000                  (1/659)1107          DC    10X'00',X'FFFFFFFFFFFF' 30-3F
000A22 0000000000000000                  (1/660)1108          DC    10X'00',X'FFFFFFFFFFFF' 40-4F
000A32 0000000000000000                  (1/661)1109          DC    10X'00',X'FFFFFFFFFFFF' 50-5F
000A42 0000000000000000                  (1/662)1110          DC    10X'00',X'FFFFFFFFFFFF' 60-6F
000A52 0000000000000000                  (1/663)1111          DC    10X'00',X'FFFFFFFFFFFF' 70-7F
000A62 0000000000000000                  (1/664)1112          DC    10X'00',X'FFFFFFFFFFFF' 80-8F
000A72 0000000000000000                  (1/665)1113          DC    10X'00',X'FFFFFFFFFFFF' 90-9F
000A82 FFFFFFFFFFFFFFFF                  (1/666)1114          DC    10X'FF',X'FFFFFFFFFFFF' A0-AF
000A92 FFFFFFFFFFFFFFFF                  (1/667)1115          DC    10X'FF',X'FFFFFFFFFFFF' B0-BF
000AA2 FFFFFFFFFFFFFFFF                  (1/668)1116          DC    10X'FF',X'FFFFFFFFFFFF' C0-CF
000AB2 FFFFFFFFFFFFFFFF                  (1/669)1117          DC    10X'FF',X'FFFFFFFFFFFF' D0-DF
000AC2 FFFFFFFFFFFFFFFF                  (1/670)1118          DC    10X'FF',X'FFFFFFFFFFFF' E0-EF
000AD2 FFFFFFFFFFFFFFFF                  (1/671)1119          DC    10X'FF',X'FFFFFFFFFFFF' F0-FF
000AE2                                   (1/672)1120 *
000AE2                                   (1/673)1121 * TEST NUMERIC CHARACTERS   R1=A(FIELD) R2=LENGTH
000AE2                                   (1/674)1122 *
000AE2                                   (1/675)1123 TNUMX    DS    0H
000AE2                                   (1/676)1124          USING *,R15
LISTUSE ZC390NUC ESD=0001 LOC=00000AE2 LEN=01000 REG=F OFF=00000 LAB=
000AE2 0620                              (1/677)1125          BCTR  R2,0
000AE4 4420F008                000AEA    (1/678)1126          EX    R2,TRTNUMX
000AE8 07FE                              (1/679)1127          BR    R14
000AEA DD001000F134            000C16    (1/680)1128 TRTNUMX  TRT   0(0,R1),TABNUMZ
000AF0                                   (1/681)1129          DROP 
LISTUSE NONE
000AF0                                   (1/682)1130 *
000AF0                                   (1/683)1131 * TEST NUMERIC ZONED   R1=A(FIELD) R2=LENGTH
000AF0                                   (1/684)1132 *
000AF0                                   (1/685)1133 TNUMZ    DS    0H
000AF0                                   (1/686)1134          USING *,R15
LISTUSE ZC390NUC ESD=0001 LOC=00000AF0 LEN=01000 REG=F OFF=00000 LAB=
000AF0 4620F00C                000AFC    (1/687)1135          BCT   R2,TRTZN
000AF4 DD001000F026            000B16    (1/688)1136          TRT   0(1,R1),TABNUMZS  TEST SINGLE BYTE FIELD
000AFA 07FE                              (1/689)1137          BR    R14
000AFC                                   (1/690)1138 TRTZN    DS    0H
000AFC 41312000                          (1/691)1139          LA    R3,0(R1,R2)
000B00 DD003000F026            000B16    (1/692)1140          TRT   0(1,R3),TABNUMZS  TEST LOW DIGIT AND SIGN FIRST
000B06 077E                              (1/693)1141          BNZR  R14
000B08 0620                              (1/694)1142          BCTR  R2,0
000B0A 4420F020                000B10    (1/695)1143          EX    R2,TRTNUMZ
000B0E 07FE                              (1/696)1144          BR    R14
000B10 DD001000F126            000C16    (1/697)1145 TRTNUMZ  TRT   0(0,R1),TABNUMZ
000B16                                   (1/698)1146          DROP 
LISTUSE NONE
000B16                                   (1/699)1147 *                         A B C D E F
000B16 FFFFFFFFFFFFFFFF                  (1/700)1148 TABNUMZS DC    10X'FF',X'FFFFFFFFFFFF' 00-0F
000B26 FFFFFFFFFFFFFFFF                  (1/701)1149          DC    10X'FF',X'FFFFFFFFFFFF' 10-1F
000B36 FFFFFFFFFFFFFFFF                  (1/702)1150          DC    10X'FF',X'FFFFFFFFFFFF' 20-2F
000B46 FFFFFFFFFFFFFFFF                  (1/703)1151          DC    10X'FF',X'FFFFFFFFFFFF' 30-3F
000B56 FFFFFFFFFFFFFFFF                  (1/704)1152          DC    10X'FF',X'FFFFFFFFFFFF' 40-4F
000B66 FFFFFFFFFFFFFFFF                  (1/705)1153          DC    10X'FF',X'FFFFFFFFFFFF' 50-5F
000B76 FFFFFFFFFFFFFFFF                  (1/706)1154          DC    10X'FF',X'FFFFFFFFFFFF' 60-6F
000B86 FFFFFFFFFFFFFFFF                  (1/707)1155          DC    10X'FF',X'FFFFFFFFFFFF' 70-7F
000B96 FFFFFFFFFFFFFFFF                  (1/708)1156          DC    10X'FF',X'FFFFFFFFFFFF' 80-8F
000BA6 FFFFFFFFFFFFFFFF                  (1/709)1157          DC    10X'FF',X'FFFFFFFFFFFF' 90-9F
000BB6 FFFFFFFFFFFFFFFF                  (1/710)1158          DC    10X'FF',X'FFFFFFFFFFFF' A0-AF
000BC6 FFFFFFFFFFFFFFFF                  (1/711)1159          DC    10X'FF',X'FFFFFFFFFFFF' B0-BF
000BD6 0000000000000000                  (1/712)1160          DC    10X'00',X'FFFFFFFFFFFF' C0-CF  C ZONE POS
000BE6 0000000000000000                  (1/713)1161          DC    10X'00',X'FFFFFFFFFFFF' D0-DF  D ZONE NEG
000BF6 FFFFFFFFFFFFFFFF                  (1/714)1162          DC    10X'FF',X'FFFFFFFFFFFF' E0-EF
000C06 0000000000000000                  (1/715)1163          DC    10X'00',X'FFFFFFFFFFFF' F0-FF  F ZONE POS
000C16 FFFFFFFFFFFFFFFF                  (1/716)1164 TABNUMZ  DC    240X'FF',10X'00',6X'FF'        F0-F9 ONLY
000D16                                   (1/717)1165 *
000D16                                   (1/718)1166 * SHARED DATA
000D16                                   (1/719)1167 *
000D16                                   (1/720)1168 ZCSAVE   DS      16XL8 SAVE 64 BIT REGS
000D96                                   (1/721)1169 ZCWORK   DS      2XL16 SAVE WORK FOR 2 QW
000DB6                  00000001         (1/722)1170 TRUE     EQU     1
000DB6                  00000000         (1/723)1171 FALSE    EQU     0
000DB6                                   (1/724)1172          EQUREGS REGS=GPR
000DB6                  00000000         (14/41)1173+R0     EQU 0
000DB6                  00000001         (14/41)1174+R1     EQU 1
000DB6                  00000002         (14/41)1175+R2     EQU 2
000DB6                  00000003         (14/41)1176+R3     EQU 3
000DB6                  00000004         (14/41)1177+R4     EQU 4
000DB6                  00000005         (14/41)1178+R5     EQU 5
000DB6                  00000006         (14/41)1179+R6     EQU 6
000DB6                  00000007         (14/41)1180+R7     EQU 7
000DB6                  00000008         (14/41)1181+R8     EQU 8
000DB6                  00000009         (14/41)1182+R9     EQU 9
000DB6                  0000000A         (14/41)1183+R10    EQU 10
000DB6                  0000000B         (14/41)1184+R11    EQU 11
000DB6                  0000000C         (14/41)1185+R12    EQU 12
000DB6                  0000000D         (14/41)1186+R13    EQU 13
000DB6                  0000000E         (14/41)1187+R14    EQU 14
000DB6                  0000000F         (14/41)1188+R15    EQU 15
000DB6                                   (1/725)1190          EQUREGS REGS=FPR
000DB6                  00000000         (14/41)1191+F0     EQU 0
000DB6                  00000001         (14/41)1192+F1     EQU 1
000DB6                  00000002         (14/41)1193+F2     EQU 2
000DB6                  00000003         (14/41)1194+F3     EQU 3
000DB6                  00000004         (14/41)1195+F4     EQU 4
000DB6                  00000005         (14/41)1196+F5     EQU 5
000DB6                  00000006         (14/41)1197+F6     EQU 6
000DB6                  00000007         (14/41)1198+F7     EQU 7
000DB6                  00000008         (14/41)1199+F8     EQU 8
000DB6                  00000009         (14/41)1200+F9     EQU 9
000DB6                  0000000A         (14/41)1201+F10    EQU 10
000DB6                  0000000B         (14/41)1202+F11    EQU 11
000DB6                  0000000C         (14/41)1203+F12    EQU 12
000DB6                  0000000D         (14/41)1204+F13    EQU 13
000DB6                  0000000E         (14/41)1205+F14    EQU 14
000DB6                  0000000F         (14/41)1206+F15    EQU 15
000DB6                                   (1/726)1208          ZSTREQU 
000DB6                                   (1/727)1210 *
000DB6                                   (1/728)1211 * SHARED DSECTS
000DB6                                   (1/729)1212 *
000000                                   (1/730)1213 PM_STACK_ENTRY DSECT 
000000                                   (1/731)1214 PM_STACK_PGEND6  DS    A  ADDRESS OF ENDING PG LABEL+6
000004                                   (1/732)1215 PM_STACK_RETURN  DS    A  ADDRESS OF PERFORM RETURN WHEN PGEND6 MATCHES
000008                  00000008         (1/733)1216 PM_STACK_ENTRY_LEN EQU *-PM_STACK_ENTRY
000000                                   (1/734)1217 ZC390CVT DSECT 
000000                                   (1/735)1218          COPY ZC390CVT CVT IN R9 AFTER LOADING linklib\ZC390LIB.390
000000                                    (2/31)1219=ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
000004                                    (2/32)1220=ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
000008                                    (2/33)1221=ZCVT_VER           DC    CL8'V1.5.06rx3'    ZCVT VER VERIFIED BY ZC390NUC
000010                                    (2/34)1223=ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
000014                                    (2/35)1224=ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
000018                                    (2/36)1225=ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
00001C                                    (2/37)1226=ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
000020                                    (2/38)1227=ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
000024                                    (2/39)1228=ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
000028                                    (2/40)1229=ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
00002C                                    (2/41)1230=ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
000030                                    (2/42)1231=ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
000034                                    (2/43)1232=ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
000038                                    (2/44)1233=ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
00003C                                    (2/45)1234=ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
000040                                    (2/46)1235=ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
000044                                    (2/47)1236=ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
000048                                    (2/48)1237=ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
00004C                                    (2/49)1238=ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
000050                                    (2/50)1239=ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
000054                                    (2/51)1240=ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
000058                                    (2/52)1241=ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
00005C                                    (2/53)1242=ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
000060                                    (2/54)1243=ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
000064                                    (2/55)1244=ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
000068                                    (2/56)1245=*
000068                                    (2/57)1246=* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
000068                                    (2/58)1247=*
000068                                    (2/59)1248=ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
00006C                  00000001          (2/60)1249=ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
00006C                  00000002          (2/61)1250=ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
00006C                  00000003          (2/62)1251=ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
00006C                  00000004          (2/63)1252=ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
00006C                  00000006          (2/64)1253=ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
00006C                  00000007          (2/65)1254=ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
00006C                  00000008          (2/66)1255=ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
00006C                  00000009          (2/67)1256=ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
00006C                  0000000A          (2/68)1257=ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
00006C                  0000000B          (2/69)1258=ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
00006C                  0000000B          (2/70)1259=ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
00006C                                    (2/71)1260=ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
000070                  00000001          (2/72)1261=ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
000070                  00000002          (2/73)1262=ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
000070                  00000003          (2/74)1263=ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
000070                  00000004          (2/75)1264=ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
000070                  00000005          (2/76)1265=ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
000070                  00000006          (2/77)1266=ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
000070                                    (2/78)1267=ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
000074                                    (2/79)1268=ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
000078                  00000000          (2/80)1269=ZCVT_TALLYING      EQU   0 INSPECT TALLYING
000078                  00000004          (2/81)1270=ZCVT_REPLACING     EQU   4 INSPECT REPLACING
000078                  00000008          (2/82)1271=ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
000078                                    (2/83)1272=*
000078                                    (2/84)1273=* SHARED DATA AREAS
000078                                    (2/85)1274=*
000078                                    (2/86)1275=ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
000080                                    (2/87)1276=               DS 0D
000080                                    (2/88)1277=ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
000090                                    (2/89)1278=ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
0000A0                                    (2/90)1279=ZCVT_PWORK     DS PL8        CVD/CVB WORK
0000A8                                    (2/91)1280=ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
0000B8                                    (2/92)1281=ZCVT_PWORK2    DS PL16       DIV DIVISOR
0000C8                                    (2/93)1282=ZCVT_PWORK3    DS PL16       DIV QUOTIENT
0000D8                                    (2/94)1283=ZCVT_PWORK4    DS PL16       DIV REMAINDER
0000E8                                    (2/95)1284=ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
0000F8                                    (2/96)1285=ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
0001F8                                    (2/97)1286=*
0001F8                                    (2/98)1287=* END OF ZC390CVT
0001F8                                    (2/99)1288=*
0001F8                  000001F8         (2/100)1289=ZCVT_END   EQU   *
000000                                   (1/736)1290 ZC390PVT DSECT 
000000                                   (1/737)1291          COPY ZC390PVT PVT IN R9 WHEN ZC390NUC CALLED FROM ZCOBOL PGM
000000                                    (3/11)1292=PVTPGM   DS    CL8  ZCOBOL PGM NAME
000008                                    (3/12)1293=PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
000010                                    (3/13)1294=PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
000018                                    (3/14)1295=PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
000020                                    (3/15)1296=PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
000021                                    (3/16)1297=PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
000022                                    (3/17)1298=PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
000023                                    (3/18)1299=PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
000024                                    (3/19)1300=PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
000026                                    (3/20)1301=         DS    XL10 RESERVED
000030                                   (1/738)1302          END 
000DB8 FFFFFFFFFFFFFFFF =FL8'-1'
000DC0 5110000000000000 =X'5110000000000000'
000DC8 4300080000000000 =X'4300080000000000'
000DD0 F4F4F4F4         =X'F4F4F4F4'
000DD4 00000FFF         =X'00000FFF'
000DD8 FFFFFFFF         =F'-1'
Relocation Definitions
 ESD=0001 LOC=000006A8 LEN=4 SIGN=+ XESD=0001
 ESD=0001 LOC=000006AC LEN=4 SIGN=+ XESD=0001

Symbol Table Listing

 SYM=#@DO_1_1 LOC=0000023E LEN=00000002 ESD=0001 TYPE=REL  XREF=409 402 
 SYM=#@DO_1_E LOC=0000025E LEN=00000002 ESD=0001 TYPE=REL  XREF=432 408 
 SYM=#@DO_1_T LOC=0000022E LEN=00000002 ESD=0001 TYPE=REL  XREF=395 431 
 SYM=#@DO_2_1 LOC=0000026E LEN=00000002 ESD=0001 TYPE=REL  XREF=453 446 
 SYM=#@DO_2_E LOC=000002B2 LEN=00000002 ESD=0001 TYPE=REL  XREF=496 452 
 SYM=#@DO_2_T LOC=0000025E LEN=00000002 ESD=0001 TYPE=REL  XREF=439 495 
 SYM=#@DO_3_1 LOC=0000027E LEN=00000002 ESD=0001 TYPE=REL  XREF=473 466 
 SYM=#@DO_3_E LOC=00000298 LEN=00000002 ESD=0001 TYPE=REL  XREF=484 472 
 SYM=#@DO_3_T LOC=0000026E LEN=00000002 ESD=0001 TYPE=REL  XREF=459 483 
 SYM=#@IF_10_2 LOC=000001FA LEN=00000002 ESD=0001 TYPE=REL  XREF=360 348 
 SYM=#@IF_10_4 LOC=000001FE LEN=00000002 ESD=0001 TYPE=REL  XREF=366 
 SYM=#@IF_10_E LOC=000001FE LEN=00000002 ESD=0001 TYPE=REL  XREF=367 359 
 SYM=#@IF_11_2 LOC=0000022A LEN=00000002 ESD=0001 TYPE=REL  XREF=388 380 382 
 SYM=#@IF_12_2 LOC=0000023A LEN=00000002 ESD=0001 TYPE=REL  XREF=406 400 
 SYM=#@IF_13_2 LOC=00000250 LEN=00000002 ESD=0001 TYPE=REL  XREF=423 417 
 SYM=#@IF_14_2 LOC=0000026A LEN=00000002 ESD=0001 TYPE=REL  XREF=450 444 
 SYM=#@IF_15_2 LOC=0000027A LEN=00000002 ESD=0001 TYPE=REL  XREF=470 464 
 SYM=#@IF_16_2 LOC=000003B8 LEN=00000002 ESD=0001 TYPE=REL  XREF=603 568 
 SYM=#@IF_16_E LOC=000003E4 LEN=00000002 ESD=0001 TYPE=REL  XREF=633 602 
 SYM=#@IF_17_2 LOC=000003B0 LEN=00000002 ESD=0001 TYPE=REL  XREF=591 580 
 SYM=#@IF_17_E LOC=000003B4 LEN=00000002 ESD=0001 TYPE=REL  XREF=597 590 
 SYM=#@IF_18_2 LOC=000003E0 LEN=00000002 ESD=0001 TYPE=REL  XREF=622 611 
 SYM=#@IF_18_E LOC=000003E4 LEN=00000002 ESD=0001 TYPE=REL  XREF=628 621 
 SYM=#@IF_19_2 LOC=00000452 LEN=00000002 ESD=0001 TYPE=REL  XREF=698 639 
 SYM=#@IF_19_E LOC=00000498 LEN=00000002 ESD=0001 TYPE=REL  XREF=744 697 
 SYM=#@IF_1_2 LOC=0000001E LEN=00000002 ESD=0001 TYPE=REL  XREF=81 71 
 SYM=#@IF_1_4 LOC=00000042 LEN=00000002 ESD=0001 TYPE=REL  XREF=108 83 
 SYM=#@IF_1_E LOC=00000042 LEN=00000002 ESD=0001 TYPE=REL  XREF=109 80 
 SYM=#@IF_20_2 LOC=000003FE LEN=00000002 ESD=0001 TYPE=REL  XREF=653 645 
 SYM=#@IF_21_2 LOC=0000041E LEN=00000002 ESD=0001 TYPE=REL  XREF=673 659 
 SYM=#@IF_21_E LOC=0000044E LEN=00000002 ESD=0001 TYPE=REL  XREF=692 672 
 SYM=#@IF_22_2 LOC=00000498 LEN=00000002 ESD=0001 TYPE=REL  XREF=739 713 
 SYM=#@IF_23_2 LOC=00000486 LEN=00000002 ESD=0001 TYPE=REL  XREF=730 724 
 SYM=#@IF_24_2 LOC=000004BA LEN=00000002 ESD=0001 TYPE=REL  XREF=761 751 
 SYM=#@IF_25_2 LOC=000004DC LEN=00000002 ESD=0001 TYPE=REL  XREF=778 768 
 SYM=#@IF_26_2 LOC=0000059C LEN=00000002 ESD=0001 TYPE=REL  XREF=865 832 
 SYM=#@IF_26_E LOC=000005C4 LEN=00000002 ESD=0001 TYPE=REL  XREF=893 864 
 SYM=#@IF_27_2 LOC=00000594 LEN=00000002 ESD=0001 TYPE=REL  XREF=853 842 
 SYM=#@IF_27_E LOC=00000598 LEN=00000002 ESD=0001 TYPE=REL  XREF=859 852 
 SYM=#@IF_28_2 LOC=000005C0 LEN=00000002 ESD=0001 TYPE=REL  XREF=882 871 
 SYM=#@IF_28_E LOC=000005C4 LEN=00000002 ESD=0001 TYPE=REL  XREF=888 881 
 SYM=#@IF_29_2 LOC=0000060A LEN=00000002 ESD=0001 TYPE=REL  XREF=918 908 
 SYM=#@IF_2_1 LOC=00000038 LEN=00000002 ESD=0001 TYPE=REL  XREF=95 91 
 SYM=#@IF_2_2 LOC=00000030 LEN=00000002 ESD=0001 TYPE=REL  XREF=92 90 
 SYM=#@IF_2_3 LOC=00000042 LEN=00000002 ESD=0001 TYPE=REL  XREF=103 94 
 SYM=#@IF_30_2 LOC=00000678 LEN=00000002 ESD=0001 TYPE=REL  XREF=977 969 
 SYM=#@IF_3_2 LOC=00000066 LEN=00000002 ESD=0001 TYPE=REL  XREF=141 133 
 SYM=#@IF_4_2 LOC=000000B8 LEN=00000002 ESD=0001 TYPE=REL  XREF=191 185 
 SYM=#@IF_5_2 LOC=00000182 LEN=00000002 ESD=0001 TYPE=REL  XREF=292 202 
 SYM=#@IF_5_E LOC=0000018A LEN=00000002 ESD=0001 TYPE=REL  XREF=299 291 
 SYM=#@IF_6_2 LOC=0000010A LEN=00000002 ESD=0001 TYPE=REL  XREF=227 209 
 SYM=#@IF_6_E LOC=0000015C LEN=00000002 ESD=0001 TYPE=REL  XREF=269 226 
 SYM=#@IF_7_2 LOC=0000012E LEN=00000002 ESD=0001 TYPE=REL  XREF=249 239 
 SYM=#@IF_7_E LOC=0000015C LEN=00000002 ESD=0001 TYPE=REL  XREF=264 248 
 SYM=#@IF_8_2 LOC=0000017E LEN=00000002 ESD=0001 TYPE=REL  XREF=286 276 
 SYM=#@IF_9_2 LOC=000001B4 LEN=00000002 ESD=0001 TYPE=REL  XREF=324 317 
 SYM=#@IF_9_E LOC=000001BC LEN=00000002 ESD=0001 TYPE=REL  XREF=331 323 
 SYM=CALL     LOC=00000044 LEN=00000002 ESD=0001 TYPE=REL  XREF=116 17 1224 
 SYM=CALLPARM LOC=00000074 LEN=00000004 ESD=0001 TYPE=REL  XREF=148 120 144 
 SYM=CALLRTN  LOC=00000078 LEN=00000004 ESD=0001 TYPE=REL  XREF=149 121 145 
 SYM=CMP64R32 LOC=0000007C LEN=00000002 ESD=0001 TYPE=REL  XREF=153 18 1225 
 SYM=CMP64R32_H LOC=00000090 LEN=00000002 ESD=0001 TYPE=REL  XREF=165 159 
 SYM=CMP64R32_L LOC=00000088 LEN=00000002 ESD=0001 TYPE=REL  XREF=160 
 SYM=CVTLBTQ  LOC=00000098 LEN=00000002 ESD=0001 TYPE=REL  XREF=174 19 1226 
 SYM=CVTLB_NORM LOC=00000214 LEN=00000002 ESD=0001 TYPE=REL  XREF=374 354 362 
 SYM=CVTLDTP  LOC=00000192 LEN=00000002 ESD=0001 TYPE=REL  XREF=307 20 1227 
 SYM=CVTQTLB  LOC=000001C8 LEN=00000002 ESD=0001 TYPE=REL  XREF=340 21 1228 
 SYM=DIV64R32 LOC=000002C2 LEN=00000002 ESD=0001 TYPE=REL  XREF=508 22 1229 
 SYM=DIV64R32_LCR LOC=00000342 LEN=00000002 ESD=0001 TYPE=REL  XREF=543 512 540 
 SYM=DIVQ128  LOC=00000360 LEN=00000002 ESD=0001 TYPE=REL  XREF=559 23 1230 
 SYM=DIVQ_CALC_REM LOC=000004E4 LEN=00000002 ESD=0001 TYPE=REL  XREF=787 708 735 
 SYM=DIVQ_QUO_NEG LOC=0000051F LEN=00000001 ESD=0001 TYPE=REL  XREF=806 586 593 613 
  624 767 
 SYM=DIVQ_REM_NEG LOC=0000051E LEN=00000001 ESD=0001 TYPE=REL  XREF=805 570 605 750 
 SYM=DIVQ_SAVE LOC=00000520 LEN=00000004 ESD=0001 TYPE=REL  XREF=807 790 795 
 SYM=DIVQ_TRIAL LOC=00000528 LEN=00000010 ESD=0001 TYPE=REL  XREF=808 788 802 
 SYM=E        LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=51 
 SYM=EQ       LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=63 94 185 380 382 
  751 768 908 
 SYM=F0       LOC=00000000 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1191 177 310 311 
  319 327 333 518 526 528 529 532 533 
 SYM=F10      LOC=0000000A LEN=00000001 ESD=0000 TYPE=ABS  XREF=1201 
 SYM=F1       LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1192 524 526 529 
 SYM=F11      LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=1202 
 SYM=F12      LOC=0000000C LEN=00000001 ESD=0000 TYPE=ABS  XREF=1203 
 SYM=F13      LOC=0000000D LEN=00000001 ESD=0000 TYPE=ABS  XREF=1204 
 SYM=F14      LOC=0000000E LEN=00000001 ESD=0000 TYPE=ABS  XREF=1205 
 SYM=F15      LOC=0000000F LEN=00000001 ESD=0000 TYPE=ABS  XREF=1206 
 SYM=F2       LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1193 178 519 534 
 SYM=F3       LOC=00000003 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1194 525 
 SYM=F4       LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1195 370 527 528 
  530 532 
 SYM=F5       LOC=00000005 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1196 
 SYM=F6       LOC=00000006 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1197 371 531 
 SYM=F7       LOC=00000007 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1198 
 SYM=F8       LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1199 
 SYM=F9       LOC=00000009 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1200 
 SYM=FALSE    LOC=00000000 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1171 586 605 624 
  805 806 848 884 923 
 SYM=GE       LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=66 209 239 
 SYM=GOBACK   LOC=00000538 LEN=00000002 ESD=0001 TYPE=REL  XREF=812 24 1231 
 SYM=GT       LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=64 659 
 SYM=H        LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=49 
 SYM=L        LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=50 
 SYM=LE       LOC=0000000D LEN=00000001 ESD=0000 TYPE=ABS  XREF=67 
 SYM=LT       LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=65 
 SYM=M        LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=57 348 713 
 SYM=MAX_PM   LOC=00000014 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1000 1004 
 SYM=MPYQ128  LOC=00000548 LEN=00000002 ESD=0001 TYPE=REL  XREF=824 25 1232 
 SYM=MPYQ_NEG LOC=00000612 LEN=00000001 ESD=0001 TYPE=REL  XREF=923 848 855 877 884 
  907 
 SYM=NE       LOC=00000007 LEN=00000001 ESD=0000 TYPE=ABS  XREF=54 71 83 
 SYM=NH       LOC=0000000D LEN=00000001 ESD=0000 TYPE=ABS  XREF=52 
 SYM=NL       LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=53 969 
 SYM=NM       LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=60 202 317 
 SYM=NO       LOC=0000000E LEN=00000001 ESD=0000 TYPE=ABS  XREF=62 
 SYM=NP       LOC=0000000D LEN=00000001 ESD=0000 TYPE=ABS  XREF=59 
 SYM=NZ       LOC=00000007 LEN=00000001 ESD=0000 TYPE=ABS  XREF=61 133 400 417 724 
 SYM=O        LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=55 276 568 580 611 
  832 842 871 
 SYM=OSE64R32 LOC=00000614 LEN=00000002 ESD=0001 TYPE=REL  XREF=929 26 1233 
 SYM=OSE64R32_CC3 LOC=00000654 LEN=00000002 ESD=0001 TYPE=REL  XREF=952 949 
 SYM=OSE64R32_CR LOC=00000644 LEN=00000002 ESD=0001 TYPE=REL  XREF=946 939 
 SYM=OSE64R32_EXIT LOC=00000658 LEN=00000002 ESD=0001 TYPE=REL  XREF=954 935 948 
  951 
 SYM=P        LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=56 
 SYM=PERFORM  LOC=00000660 LEN=00000002 ESD=0001 TYPE=REL  XREF=960 27 1234 
 SYM=PMCHECK  LOC=00000688 LEN=00000002 ESD=0001 TYPE=REL  XREF=988 28 1235 
 SYM=PM_STACK_ENTRY LOC=00000000 LEN=00000008 ESD=0002 TYPE=DST  XREF=1213 963 981 
  991 1216 
 SYM=PM_STACK_ENTRY_LEN LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1216 964 
  995 
 SYM=PM_STACK_PGEND6 LOC=00000000 LEN=00000004 ESD=0002 TYPE=REL  XREF=1214 992 
 SYM=PM_STACK_RETURN LOC=00000004 LEN=00000004 ESD=0002 TYPE=REL  XREF=1215 994 
 SYM=PVTCICS  LOC=00000020 LEN=00000001 ESD=0004 TYPE=REL  XREF=1296 82 
 SYM=PVTDATE  LOC=00000008 LEN=00000008 ESD=0004 TYPE=REL  XREF=1293 
 SYM=PVTEXTND LOC=00000021 LEN=00000001 ESD=0004 TYPE=REL  XREF=1297 
 SYM=PVTMAXDL LOC=00000024 LEN=00000002 ESD=0004 TYPE=REL  XREF=1300 43 
 SYM=PVTPGM   LOC=00000000 LEN=00000008 ESD=0004 TYPE=REL  XREF=1292 
 SYM=PVTR64   LOC=00000023 LEN=00000001 ESD=0004 TYPE=REL  XREF=1299 
 SYM=PVTTIME  LOC=00000010 LEN=00000008 ESD=0004 TYPE=REL  XREF=1294 
 SYM=PVTTRUNC LOC=00000022 LEN=00000001 ESD=0004 TYPE=REL  XREF=1298 
 SYM=PVTVER   LOC=00000018 LEN=00000008 ESD=0004 TYPE=REL  XREF=1295 70 
 SYM=R0       LOC=00000000 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1173 119 143 155 
  161 166 179 193 196 215 221 241 242 254 258 260 279 282 294 333 347 350 353 355 
  369 379 399 416 425 443 463 475 476 487 488 500 501 511 513 527 535 536 546 549 
  567 571 574 658 664 667 668 678 679 680 681 684 685 687 688 703 704 705 712 723 
  732 734 754 757 789 799 800 831 834 837 895 897 900 903 911 914 936 980 981 1011 
  1020 1026 1037 1043 
 SYM=R10      LOC=0000000A LEN=00000001 ESD=0000 TYPE=ABS  XREF=1183 
 SYM=R1       LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1174 73 97 120 135 
  144 157 163 168 179 216 220 222 241 244 251 259 280 281 295 351 352 369 381 411 
  419 476 477 488 489 513 516 539 547 548 572 573 647 665 667 679 682 683 686 687 
  704 706 718 726 733 755 756 789 798 801 817 835 836 896 912 913 937 971 981 1019 
  1025 1036 1042 1054 1076 1079 1085 1128 1136 1139 1145 
 SYM=R11      LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=1184 89 93 
 SYM=R12      LOC=0000000C LEN=00000001 ESD=0000 TYPE=ABS  XREF=1185 510 512 540 
  541 545 550 931 932 933 955 
 SYM=R13      LOC=0000000D LEN=00000001 ESD=0000 TYPE=ABS  XREF=1186 815 816 818 
 SYM=R14      LOC=0000000E LEN=00000001 ESD=0000 TYPE=ABS  XREF=1187 111 121 145 
  156 158 162 164 167 169 302 335 373 542 781 790 792 793 794 795 796 816 819 921 
  931 955 956 982 992 993 994 997 1018 1021 1024 1027 1035 1038 1041 1044 1053 1077 
  1081 1084 1127 1137 1141 1144 
 SYM=R15      LOC=0000000F LEN=00000001 ESD=0000 TYPE=ABS  XREF=1188 41 74 75 98 
  99 112 132 136 137 143 146 154 170 175 303 308 336 341 503 509 552 560 648 649 
  790 791 792 795 804 814 817 820 825 922 930 934 961 972 973 982 983 984 989 998 
  1010 1045 1050 1074 1124 1134 
 SYM=R2       LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1175 117 118 147 
  155 176 193 194 195 201 208 214 215 216 218 219 222 233 252 253 254 255 256 257 
  258 259 278 279 280 301 309 311 316 319 326 327 334 342 354 362 372 384 502 520 
  535 537 538 539 579 582 585 610 614 617 638 666 682 705 707 734 771 774 788 797 
  799 800 802 841 844 847 870 873 876 902 947 962 963 964 968 979 990 991 995 996 
  1014 1017 1020 1023 1026 1030 1034 1037 1040 1043 1051 1052 1075 1079 1082 1083 
  1125 1126 1135 1139 1142 1143 
 SYM=R3       LOC=00000003 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1176 119 124 157 
  163 168 176 217 218 219 220 221 232 233 238 243 244 251 253 256 257 260 301 309 
  334 390 426 478 490 499 501 520 523 583 584 615 616 644 658 664 665 678 681 684 
  685 686 703 706 733 772 773 788 797 798 801 802 845 846 874 875 897 899 950 962 
  968 1011 1013 1017 1023 1029 1033 1034 1040 1079 1080 1139 1140 
 SYM=R4       LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1177 342 372 561 
  562 571 572 582 583 614 615 753 754 755 770 771 772 780 826 827 834 835 844 845 
  873 874 895 898 910 911 912 920 936 938 942 945 947 
 SYM=R5       LOC=00000005 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1178 896 901 937 
  943 944 950 
 SYM=R6       LOC=00000006 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1179 561 708 735 
  780 803 899 902 940 942 
 SYM=R7       LOC=00000007 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1180 826 898 900 
  901 903 920 941 943 
 SYM=R8       LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1181 42 112 
 SYM=R9       LOC=00000009 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1182 16 
 SYM=RND_F_NR LOC=00000780 LEN=00000002 ESD=0001 TYPE=REL  XREF=1028 1012 
 SYM=RND_F_NR_ND LOC=0000079E LEN=00000002 ESD=0001 TYPE=REL  XREF=1039 1031 
 SYM=RND_F_NR_PD LOC=0000078C LEN=00000004 ESD=0001 TYPE=REL  XREF=1032 
 SYM=RND_F_PR_ND LOC=00000770 LEN=00000002 ESD=0001 TYPE=REL  XREF=1022 1015 
 SYM=RND_F_PR_PD LOC=00000760 LEN=00000002 ESD=0001 TYPE=REL  XREF=1016 
 SYM=ROUNDF   LOC=00000750 LEN=00000002 ESD=0001 TYPE=REL  XREF=1009 29 1236 
 SYM=SIGN     LOC=0000035E LEN=00000001 ESD=0001 TYPE=REL  XREF=551 511 544 
 SYM=STACKEND LOC=00000750 LEN=00000001 ESD=0001 TYPE=REL  XREF=1005 33 1002 1239 
 SYM=STACKORG LOC=000006B0 LEN=00000008 ESD=0001 TYPE=REL  XREF=1003 31 1002 1237 
 SYM=STACKPTR LOC=000006A8 LEN=00000004 ESD=0001 TYPE=REL  XREF=1002 32 962 979 990 
  996 1238 
 SYM=STACK_ENTRY_LEN LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1001 1004 
 SYM=STOPRUN  LOC=00000538 LEN=00000002 ESD=0001 TYPE=REL  XREF=813 30 1240 
 SYM=TABALPHA LOC=000007BC LEN=00000001 ESD=0001 TYPE=REL  XREF=1056 1054 1057 1059 
  1061 1063 1065 1067 
 SYM=TABNUMP  LOC=000009E2 LEN=00000001 ESD=0001 TYPE=REL  XREF=1104 1085 
 SYM=TABNUMPS LOC=000008E2 LEN=00000001 ESD=0001 TYPE=REL  XREF=1088 1076 1080 
 SYM=TABNUMZ  LOC=00000C16 LEN=00000001 ESD=0001 TYPE=REL  XREF=1164 1128 1145 
 SYM=TABNUMZS LOC=00000B16 LEN=00000001 ESD=0001 TYPE=REL  XREF=1148 1136 1140 
 SYM=TALPHAX  LOC=000007AE LEN=00000002 ESD=0001 TYPE=REL  XREF=1049 34 1241 
 SYM=TNUMP    LOC=000008BC LEN=00000002 ESD=0001 TYPE=REL  XREF=1073 35 1242 
 SYM=TNUMX    LOC=00000AE2 LEN=00000002 ESD=0001 TYPE=REL  XREF=1123 36 1243 
 SYM=TNUMZ    LOC=00000AF0 LEN=00000002 ESD=0001 TYPE=REL  XREF=1133 37 1244 
 SYM=TRTALPHA LOC=000007B6 LEN=00000006 ESD=0001 TYPE=REL  XREF=1054 1052 
 SYM=TRTNUMP  LOC=000008DC LEN=00000006 ESD=0001 TYPE=REL  XREF=1085 1083 
 SYM=TRTNUMX  LOC=00000AEA LEN=00000006 ESD=0001 TYPE=REL  XREF=1128 1126 
 SYM=TRTNUMZ  LOC=00000B10 LEN=00000006 ESD=0001 TYPE=REL  XREF=1145 1143 
 SYM=TRTPN    LOC=000008C8 LEN=00000002 ESD=0001 TYPE=REL  XREF=1078 1075 
 SYM=TRTZN    LOC=00000AFC LEN=00000002 ESD=0001 TYPE=REL  XREF=1138 1135 
 SYM=TRUE     LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1170 570 593 613 
  750 767 855 877 907 
 SYM=Z        LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=58 90 444 464 639 
  645 
 SYM=ZC390CVT LOC=00000000 LEN=000001F8 ESD=0003 TYPE=DST  XREF=1217 16 
 SYM=ZC390NUC LOC=00000000 LEN=00000DE0 ESD=0001 TYPE=CST  XREF=15 41 1223 
 SYM=ZC390PVT LOC=00000000 LEN=00000030 ESD=0004 TYPE=DST  XREF=1290 42 
 SYM=ZCSAVE   LOC=00000D16 LEN=00000008 ESD=0001 TYPE=REL  XREF=1168 176 301 309 
  334 342 372 510 541 561 780 826 920 931 955 
 SYM=ZCVT_ABORT LOC=00000068 LEN=00000004 ESD=0003 TYPE=REL  XREF=1248 74 98 136 
  648 972 
 SYM=ZCVT_ABORT_ACCEPT LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=1258 
 SYM=ZCVT_ABORT_ALTER LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1249 
 SYM=ZCVT_ABORT_CALL LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1250 135 
 SYM=ZCVT_ABORT_CICS LOC=0000000A LEN=00000001 ESD=0000 TYPE=ABS  XREF=1257 97 
 SYM=ZCVT_ABORT_DISPLAY LOC=00000003 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1251 
 SYM=ZCVT_ABORT_DIVQ LOC=00000009 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1256 647 
 SYM=ZCVT_ABORT_INT128 LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1255 
 SYM=ZCVT_ABORT_MAXERR LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=1259 
 SYM=ZCVT_ABORT_OPEN LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1252 
 SYM=ZCVT_ABORT_STACK LOC=00000006 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1253 971 
 SYM=ZCVT_ABORT_VERSION LOC=00000007 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1254 73 
 SYM=ZCVT_ACCEPT LOC=0000006C LEN=00000004 ESD=0003 TYPE=REL  XREF=1260 
 SYM=ZCVT_ACCEPT_CONSOLE LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1262 
 SYM=ZCVT_ACCEPT_DATE LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1264 
 SYM=ZCVT_ACCEPT_DDNAME LOC=00000003 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1263 
 SYM=ZCVT_ACCEPT_DEFAULT LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1261 
 SYM=ZCVT_ACCEPT_DOW LOC=00000006 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1266 
 SYM=ZCVT_ACCEPT_TIME LOC=00000005 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1265 
 SYM=ZCVT_CALL LOC=00000014 LEN=00000004 ESD=0003 TYPE=REL  XREF=1224 
 SYM=ZCVT_CMP64R32 LOC=00000018 LEN=00000004 ESD=0003 TYPE=REL  XREF=1225 
 SYM=ZCVT_CONVERTING LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1271 
 SYM=ZCVT_CVTLBTQ LOC=0000001C LEN=00000004 ESD=0003 TYPE=REL  XREF=1226 
 SYM=ZCVT_CVTLDTP LOC=00000020 LEN=00000004 ESD=0003 TYPE=REL  XREF=1227 
 SYM=ZCVT_CVTQTLB LOC=00000024 LEN=00000004 ESD=0003 TYPE=REL  XREF=1228 
 SYM=ZCVT_DISPLAY LOC=00000070 LEN=00000004 ESD=0003 TYPE=REL  XREF=1267 
 SYM=ZCVT_DIV64R32 LOC=00000028 LEN=00000004 ESD=0003 TYPE=REL  XREF=1229 
 SYM=ZCVT_DIVQ128 LOC=0000002C LEN=00000004 ESD=0003 TYPE=REL  XREF=1230 
 SYM=ZCVT_END LOC=000001F8 LEN=00000001 ESD=0003 TYPE=REL  XREF=1289 1220 
 SYM=ZCVT_GOBACK LOC=00000030 LEN=00000004 ESD=0003 TYPE=REL  XREF=1231 
 SYM=ZCVT_HIGH_VALUES LOC=00000090 LEN=00000010 ESD=0003 TYPE=REL  XREF=1278 
 SYM=ZCVT_ID  LOC=00000000 LEN=00000004 ESD=0003 TYPE=REL  XREF=1219 1220 
 SYM=ZCVT_INSPECT LOC=00000074 LEN=00000004 ESD=0003 TYPE=REL  XREF=1268 
 SYM=ZCVT_LEN LOC=00000004 LEN=00000004 ESD=0003 TYPE=REL  XREF=1220 
 SYM=ZCVT_MPYQ128 LOC=00000034 LEN=00000004 ESD=0003 TYPE=REL  XREF=1232 791 
 SYM=ZCVT_NDDX LOC=000000E8 LEN=00000010 ESD=0003 TYPE=REL  XREF=1284 
 SYM=ZCVT_OSE64R32 LOC=00000038 LEN=00000004 ESD=0003 TYPE=REL  XREF=1233 
 SYM=ZCVT_PERFORM LOC=0000003C LEN=00000004 ESD=0003 TYPE=REL  XREF=1234 
 SYM=ZCVT_PMCHECK LOC=00000040 LEN=00000004 ESD=0003 TYPE=REL  XREF=1235 
 SYM=ZCVT_PVTMAXDL LOC=00000078 LEN=00000002 ESD=0003 TYPE=REL  XREF=1275 43 
 SYM=ZCVT_PWORK LOC=000000A0 LEN=00000008 ESD=0003 TYPE=REL  XREF=1279 
 SYM=ZCVT_PWORK1 LOC=000000A8 LEN=00000010 ESD=0003 TYPE=REL  XREF=1280 
 SYM=ZCVT_PWORK2 LOC=000000B8 LEN=00000010 ESD=0003 TYPE=REL  XREF=1281 
 SYM=ZCVT_PWORK3 LOC=000000C8 LEN=00000010 ESD=0003 TYPE=REL  XREF=1282 
 SYM=ZCVT_PWORK4 LOC=000000D8 LEN=00000010 ESD=0003 TYPE=REL  XREF=1283 
 SYM=ZCVT_REPLACING LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1270 
 SYM=ZCVT_ROUNDF LOC=00000044 LEN=00000004 ESD=0003 TYPE=REL  XREF=1236 
 SYM=ZCVT_STACKEND LOC=00000050 LEN=00000004 ESD=0003 TYPE=REL  XREF=1239 
 SYM=ZCVT_STACKORG LOC=00000048 LEN=00000004 ESD=0003 TYPE=REL  XREF=1237 
 SYM=ZCVT_STACKPTR LOC=0000004C LEN=00000004 ESD=0003 TYPE=REL  XREF=1238 
 SYM=ZCVT_STOPRUN LOC=00000054 LEN=00000004 ESD=0003 TYPE=REL  XREF=1240 
 SYM=ZCVT_TALLYING LOC=00000000 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1269 
 SYM=ZCVT_TALPHAX LOC=00000058 LEN=00000004 ESD=0003 TYPE=REL  XREF=1241 
 SYM=ZCVT_TNUMP LOC=0000005C LEN=00000004 ESD=0003 TYPE=REL  XREF=1242 
 SYM=ZCVT_TNUMX LOC=00000060 LEN=00000004 ESD=0003 TYPE=REL  XREF=1243 
 SYM=ZCVT_TNUMZ LOC=00000064 LEN=00000004 ESD=0003 TYPE=REL  XREF=1244 
 SYM=ZCVT_VER LOC=00000008 LEN=00000008 ESD=0003 TYPE=REL  XREF=1221 70 
 SYM=ZCVT_WORKAREA LOC=000000F8 LEN=00000100 ESD=0003 TYPE=REL  XREF=1285 
 SYM=ZCVT_ZC390NUC LOC=00000010 LEN=00000004 ESD=0003 TYPE=REL  XREF=1223 
 SYM=ZCVT_ZERO LOC=00000080 LEN=00000010 ESD=0003 TYPE=REL  XREF=1277 184 282 353 
  549 574 585 617 757 774 837 847 876 914 945 
 SYM=ZCWORK   LOC=00000D96 LEN=00000010 ESD=0001 TYPE=REL  XREF=1169 177 178 179 
  184 275 369 370 371 513 514 515 516 517 518 519 520 521 522 523 524 525 533 534 
  535 678 683 703 789 797 

Literal Table Listing

 LIT=F'-1'    LOC=00000DD8 LEN=00000004 ESD=0001 POOL=0001 XREF=546 547 
 LIT=FL8'-1'  LOC=00000DB8 LEN=00000008 ESD=0001 POOL=0001 XREF=350 351 
 LIT=X'00000FFF' LOC=00000DD4 LEN=00000004 ESD=0001 POOL=0001 XREF=538 
 LIT=X'4300080000000000' LOC=00000DC8 LEN=00000008 ESD=0001 POOL=0001 XREF=531 
 LIT=X'5110000000000000' LOC=00000DC0 LEN=00000008 ESD=0001 POOL=0001 XREF=530 
 LIT=X'F4F4F4F4' LOC=00000DD0 LEN=00000004 ESD=0001 POOL=0001 XREF=93 
 
AZ390I total mnote warnings = 0
AZ390I total mnote errors   = 0
AZ390I max   mnote level    = 0
AZ390I total mz390 errors   = 0
AZ390I total az390 errors   = 0
09:02:45 ZC390NUC  MZ390 ENDED   RC= 0 SEC= 1 MEM(MB)= 69 IO=3385
