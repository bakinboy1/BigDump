*    ZCOBOL PGM='zcobol\test\TESTCMP4' VER=V1.5.06 MM/DD/YY  
*    ZCOBOL OPTIONS=() 
         COPY  TESTCMP4_ZC_LABELS.CPY
*        IDENTIFICATION DIVISION.
*        PROGRAM-ID.    TESTCMP4.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
TESTCMP4 CSECT ,                CSECT WITH PROCEDURE CODE AND WS
         USING *,ZC_R15
         STM   14,12,12+4*(14-14)(13)
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTCMP4'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'0'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0015_EOT-*+1)/2*2
         DC    AL2(WTO#0015_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0015_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0016_EOT-*+1)/2*2
         DC    AL2(WTO#0016_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0016_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
         L     ZC_R2,24(ZC_R13) SET ZC_R2=PARMLIST ADDRESS AFTER LOAD
         LARL  ZC_R1,ZC_WS     ZC_R2=A(WORKING STORAGE WITH SAVEAREA)
         ST    ZC_R1,8(ZC_R13) FORWARD  SAVE CHAIN
         ST    ZC_R13,4(ZC_R1) BACKWARD SAVE CHAIN
         LR    ZC_R13,ZC_R1    LINK SAVE AREA IN ZC390CVT
         USING ZC_WS,ZC_R13    BASE FOR ZCOBOL WS (SEE GEN_SYM_RX.MAC)
         ST    ZC_R13,ZC_WS_START  SAVE ADDR WS IN WS PREFIX
         LARL  ZC_R0,ZC_WS_END
         SR    ZC_R0,ZC_R13
         ST    ZC_R0,ZC_WS_LEN     SAVE LENGTH OF WS IN WS PREFIX
         DROP  ZC_R15              RPI 1042
ZC_WSLOC LOCTR 
ZC_WS    DS    0D           START WORKING STORAGE
ZC390CVT DSECT 
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
ZC_WSLOC LOCTR              CONTINUE WS FOR FD AND DATA
*        AUTHOR.        DON HIGGINS.
*        DATE-WRITTEN.  05/07/12.
*      * TEST COMPUTE WITH SCALING FOR IMPLIED DECIMAL                 
*        ENVIRONMENT DIVISION.
*        DATA DIVISION.
         PRINT DATA
*        WORKING-STORAGE SECTION.
*        77 EH1 FLOAT-HEX-7       VALUE 1.5.
*        77 DH1 FLOAT-HEX-15      VALUE 1.5.
*        77 LH1 FLOAT-HEX-30      VALUE 1.5.
*        77 EB1 FLOAT-BINARY-7    VALUE 1.5.
*        77 DB1 FLOAT-BINARY-16   VALUE 1.5.
*        77 LB1 FLOAT-BINARY-34   VALUE 1.5.
*        77 ED1 FLOAT-DECIMAL-7   VALUE 1.5.
*        77 DD1 FLOAT-DECIMAL-16  VALUE 1.5.
*        77 LD1 FLOAT-DECIMAL-34  VALUE 1.5.
*        77 H1      COMP PIC S9(3)V9       VALUE 1.5.
*        77 F1      COMP PIC S9(7)V99      VALUE 1.5.
*        77 G1      COMP PIC S9(15)V999    VALUE 1.5.
*        77 Q1      COMP PIC S9(35)V9(4)   VALUE 1.5.
*        77 P1      COMP-3 PIC S9(26)V9(5) VALUE 1.5.
*        77 Z1             PIC S9(25)V9(6) VALUE 1.5.
*        77 H2      COMP PIC S9(3)V9       VALUE 1.5.
*        77 F2      COMP PIC S9(7)V99      VALUE 1.5.
*        77 G2      COMP PIC S9(15)V999    VALUE 1.5.
*        77 Q2      COMP PIC S9(35)V9(4)   VALUE 1.5.
*        77 P2      COMP-3 PIC S9(26)V9(5) VALUE 1.5.
*        77 Z2             PIC S9(25)V9(6) VALUE 1.5.
*        77 ZT1            PIC S9 VALUE 5.
*        77 PT1     COMP-3 PIC S9 VALUE 5.
*        77 ZT7            PIC S9(4)V999  VALUE 5.
*        77 PT7     COMP-3 PIC S9(3)V9(4) VALUE 5.
*        77 ZT8            PIC S9(5)V999  VALUE 5.
*        77 PT8     COMP-3 PIC S9(4)V9(4) VALUE 5.
*        77 ZT16           PIC S9(13)V999 VALUE 5.
*        77 ZT31           PIC S9(31) VALUE 5.
*        77 PT31    COMP-3 PIC S9(31) VALUE 5.
*        77 ZT20           PIC S9(20) VALUE 5.
*        77 PT20    COMP-3 PIC S9(20) VALUE 5.
*        77 ZT21           PIC S9(21) VALUE 5.
*        77 PT21    COMP-3 PIC S9(21) VALUE 5.
*        77 PT16    COMP-3 PIC S9(16) VALUE 5.
*        77 LD2 FLOAT-DECIMAL-34  VALUE 1.0.
*        77 GOOD    COMP-3 PIC 9(4)   VALUE 0.
*        77 BAD     COMP-3 PIC 9(4)   VALUE 0.
*        PROCEDURE DIVISION.
*ZC   PROCEDURE DIVISION
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTCMP4 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
*        MAINLINE.
PG_MAINLINE DS 0H
*            DISPLAY 'TESTCMP4 TEST SCALED COMPUTE'.
*ZC     49         DISPLAY 'TESTCMP4 TEST SCALED COMPUTE'
         BRAS  1,*+(WTO#0195_EOT-*+1)/2*2
         DC    AL2(WTO#0195_EOT-*,0),C'TESTCMP4 TEST SCALED COMPUTE'
WTO#0195_EOT     EQU *
         SVC   35
*            COMPUTE ZT7 = PT7 + 1.
*ZC     50         COMPUTE ZT7,=,PT7,+,1
         ZAP   ZCVT_PWORK2,PT7(4)
         SRP   ZCVT_PWORK2,64-1,0
         UNPK  0+ZT7(7),12+ZCVT_PWORK2(4) UNPK #1 NORMAL
         PACK  ZCVT_PWORK1(4),0+ZT7(7) PACK #1 NORMAL
         LARL  ZC_R14,=PL4'1000'
         AP    ZCVT_PWORK1(4),0(4,ZC_R14)
         UNPK  0+ZT7(7),0+ZCVT_PWORK1(4) UNPK #1 NORMAL
*            IF ZT7 = 6 PERFORM GOOD ELSE PERFORM BAD.
*ZC     51         IF    ZT7,=,6
         PACK  ZCVT_PWORK1(4),0+ZT7(7) PACK #1 NORMAL
         LARL  ZC_R1,=PL4'6000'
         CP    ZCVT_PWORK1(4),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_1_1
*ZC     51         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     51         ELSE
         J     PG_IF_1_E
PG_IF_1_1    DS    0H  &TYPE
*ZC     51         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_1_E    DS    0H  &TYPE
*            COMPUTE ZT8 = PT8 + 1.
*ZC     52         COMPUTE ZT8,=,PT8,+,1
         ZAP   ZCVT_PWORK2,PT8(5)
         SRP   ZCVT_PWORK2,64-1,0
         UNPK  0+ZT8(8),11+ZCVT_PWORK2(5) UNPK #1 NORMAL
         PACK  ZCVT_PWORK1(5),0+ZT8(8) PACK #1 NORMAL
         LARL  ZC_R14,=PL4'1000'
         AP    ZCVT_PWORK1(5),0(4,ZC_R14)
         UNPK  0+ZT8(8),0+ZCVT_PWORK1(5) UNPK #1 NORMAL
*            IF ZT8 = 6 PERFORM GOOD ELSE PERFORM BAD.
*ZC     53         IF    ZT8,=,6
         PACK  ZCVT_PWORK1(5),0+ZT8(8) PACK #1 NORMAL
         LARL  ZC_R1,=PL4'6000'
         CP    ZCVT_PWORK1(5),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_2_1
*ZC     53         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     53         ELSE
         J     PG_IF_2_E
PG_IF_2_1    DS    0H  &TYPE
*ZC     53         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_2_E    DS    0H  &TYPE
*            COMPUTE ZT16 = PT1 + 1.
*ZC     54         COMPUTE ZT16,=,PT1,+,1
         ZAP   ZCVT_PWORK2,PT1(1)
         SRP   ZCVT_PWORK2,3,0
         UNPK  0+ZT16(14),7+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  13+ZT16(3),14+ZCVT_PWORK2(2) UNPK #2 FINAL
         PACK  ZCVT_PWORK1(8),0+ZT16(14) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(2),13+ZT16(3)  PACK #2 FINAL
         LARL  ZC_R14,=PL4'1000'
         AP    ZCVT_PWORK1(9),0(4,ZC_R14)
         UNPK  0+ZT16(14),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  13+ZT16(3),7+ZCVT_PWORK1(2) UNPK #2 FINAL
*            IF ZT16 = 6 PERFORM GOOD ELSE PERFORM BAD.
*ZC     55         IF    ZT16,=,6
         PACK  ZCVT_PWORK1(8),0+ZT16(14) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(2),13+ZT16(3)  PACK #2 FINAL
         LARL  ZC_R1,=PL4'6000'
         CP    ZCVT_PWORK1(9),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_3_1
*ZC     55         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     55         ELSE
         J     PG_IF_3_E
PG_IF_3_1    DS    0H  &TYPE
*ZC     55         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_3_E    DS    0H  &TYPE
*            MOVE 1234567890123.456 TO ZT16
*ZC     56         MOVE  1234567890123.456,TO,ZT16
          LARL  ZC_R1,=ZL16'1234567890123456'
          MVC   ZT16,0(ZC_R1)
*            IF ZT16 = 1234567890123.456 PERFORM GOOD ELSE PERFORM BAD.
*ZC     57         IF    ZT16,=,1234567890123.456
         PACK  ZCVT_PWORK1(8),0+ZT16(14) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(2),13+ZT16(3)  PACK #2 FINAL
         LARL  ZC_R1,=PL10'1234567890123456'
         CP    ZCVT_PWORK1(9),0(10,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_4_1
*ZC     57         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     57         ELSE
         J     PG_IF_4_E
PG_IF_4_1    DS    0H  &TYPE
*ZC     57         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_4_E    DS    0H  &TYPE
*            COMPUTE ZT20 = 12345678901234567890
*ZC     58         COMPUTE ZT20,=,12345678901234567890
          LARL  ZC_R1,=ZL20'12345678901234567890'
          MVC   ZT20,0(ZC_R1)
*            COMPUTE LD2  = 12345678901234567890
*ZC     59         COMPUTE LD2,=,12345678901234567890
          LARL  ZC_R1,=LD'12345678901234567890'
          MVC   LD2,0(ZC_R1)
*            IF ZT20 = LD2 PERFORM GOOD ELSE PERFORM BAD.
*ZC     60         IF    ZT20,=,LD2
         PACK  ZCVT_PWORK1(13),0+ZT20(14) PACK #1 FULL
         PACK  12+ZCVT_PWORK1(4),13+ZT20(7)  PACK #2 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         CXTR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_5_1
*ZC     60         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     60         ELSE
         J     PG_IF_5_E
PG_IF_5_1    DS    0H  &TYPE
*ZC     60         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_5_E    DS    0H  &TYPE
*            COMPUTE ZT21 = 123456789012345678901
*ZC     61         COMPUTE ZT21,=,123456789012345678901
          LARL  ZC_R1,=ZL22'123456789012345678901'
          MVC   ZT21,1(ZC_R1)
*            COMPUTE LD2  = 123456789012345678901
*ZC     62         COMPUTE LD2,=,123456789012345678901
          LARL  ZC_R1,=LD'123456789012345678901'
          MVC   LD2,0(ZC_R1)
*            IF ZT21 = LD2 PERFORM GOOD ELSE PERFORM BAD.
*ZC     63         IF    ZT21,=,LD2
         PACK  ZCVT_PWORK1(13),0+ZT21(15) PACK #1 FULL
         PACK  12+ZCVT_PWORK1(4),14+ZT21(7)  PACK #2 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         CXTR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_6_1
*ZC     63         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     63         ELSE
         J     PG_IF_6_E
PG_IF_6_1    DS    0H  &TYPE
*ZC     63         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_6_E    DS    0H  &TYPE
*            COMPUTE PT16 = PT1
*ZC     64         COMPUTE PT16,=,PT1
         ZAP   PT16,PT1
*            IF PT16 = PT1 ERFORM GOOD ELSE PERFORM BAD.
*ZC     65         IF    PT16,=,PT1,ERFORM,GOOD
         CP    PT16,PT1
         BRC   15-ZC_EQ,PG_IF_7_1
*ZC     65         ELSE
         J     PG_IF_7_E
PG_IF_7_1    DS    0H  &TYPE
*ZC     65         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_7_E    DS    0H  &TYPE
*            COMPUTE ZT21 = PT21 + 1,
*ZC     66         COMPUTE ZT21,=,PT21,+,1
         UNPK  0+ZT21(15),0+PT21(8)     UNPK #1 FULL
         UNPK  14+ZT21(7),7+PT21(4) UNPK #2 FINAL
         PACK  ZCVT_PWORK1(8),0+ZT21(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(4),14+ZT21(7)  PACK #2 FINAL
         LARL  ZC_R14,=PL2'1'
         AP    ZCVT_PWORK1(11),0(2,ZC_R14)
         UNPK  0+ZT21(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+ZT21(7),7+ZCVT_PWORK1(4) UNPK #2 FINAL
*            IF ZT21 = 6 PERFORM GOOD ELSE PERFORM BAD.
*ZC     67         IF    ZT21,=,6
         PACK  ZCVT_PWORK1(8),0+ZT21(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(4),14+ZT21(7)  PACK #2 FINAL
         LARL  ZC_R1,=PL2'6'
         CP    ZCVT_PWORK1(11),0(2,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_8_1
*ZC     67         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     67         ELSE
         J     PG_IF_8_E
PG_IF_8_1    DS    0H  &TYPE
*ZC     67         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_8_E    DS    0H  &TYPE
*            COMPUTE ZT20 = PT20 + 1,
*ZC     68         COMPUTE ZT20,=,PT20,+,1
         UNPK  0+ZT20(14),0+PT20(8)     UNPK #1 FULL
         UNPK  13+ZT20(7),7+PT20(4) UNPK #2 FINAL
         PACK  ZCVT_PWORK1(8),0+ZT20(14) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(4),13+ZT20(7)  PACK #2 FINAL
         LARL  ZC_R14,=PL2'1'
         AP    ZCVT_PWORK1(11),0(2,ZC_R14)
         UNPK  0+ZT20(14),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  13+ZT20(7),7+ZCVT_PWORK1(4) UNPK #2 FINAL
*            IF ZT20 = 6 PERFORM GOOD ELSE PERFORM BAD.
*ZC     69         IF    ZT20,=,6
         PACK  ZCVT_PWORK1(8),0+ZT20(14) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(4),13+ZT20(7)  PACK #2 FINAL
         LARL  ZC_R1,=PL2'6'
         CP    ZCVT_PWORK1(11),0(2,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_9_1
*ZC     69         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     69         ELSE
         J     PG_IF_9_E
PG_IF_9_1    DS    0H  &TYPE
*ZC     69         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_9_E    DS    0H  &TYPE
*            COMPUTE ZT31 = PT31 + 1,
*ZC     70         COMPUTE ZT31,=,PT31,+,1
         UNPK  0+ZT31(15),0+PT31(8)     UNPK #1 FULL
         UNPK  14+ZT31(15),7+PT31(8)     UNPK #2 FULL
         UNPK  28+ZT31(3),14+PT31(2) UNPK #3 FINAL
         PACK  ZCVT_PWORK1(8),0+ZT31(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+ZT31(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+ZT31(3)  PACK #3 FINAL
         LARL  ZC_R14,=PL2'1'
         AP    ZCVT_PWORK1(16),0(2,ZC_R14)
         UNPK  0+ZT31(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+ZT31(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+ZT31(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF ZT31 = 6 PERFORM GOOD ELSE PERFORM BAD.
*ZC     71         IF    ZT31,=,6
         PACK  ZCVT_PWORK1(8),0+ZT31(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+ZT31(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+ZT31(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL2'6'
         CP    ZCVT_PWORK1(16),0(2,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_10_1
*ZC     71         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     71         ELSE
         J     PG_IF_10_E
PG_IF_10_1   DS    0H  &TYPE
*ZC     71         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_10_E   DS    0H  &TYPE
*            COMPUTE ZT1 = PT1 + 1,
*ZC     72         COMPUTE ZT1,=,PT1,+,1
         UNPK  0+ZT1(1),0+PT1(1) UNPK #1 NORMAL
         PACK  ZCVT_PWORK1(1),0+ZT1(1) PACK #1 NORMAL
         LARL  ZC_R14,=PL2'1'
         AP    ZCVT_PWORK1(1),0(2,ZC_R14)
         UNPK  0+ZT1(1),0+ZCVT_PWORK1(1) UNPK #1 NORMAL
*            IF ZT1 = 6 PERFORM GOOD ELSE PERFORM BAD.
*ZC     73         IF    ZT1,=,6
         PACK  ZCVT_PWORK1(1),0+ZT1(1) PACK #1 NORMAL
         LARL  ZC_R1,=PL2'6'
         CP    ZCVT_PWORK1(1),0(2,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_11_1
*ZC     73         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     73         ELSE
         J     PG_IF_11_E
PG_IF_11_1   DS    0H  &TYPE
*ZC     73         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_11_E   DS    0H  &TYPE
*            COMPUTE Z2 = EH1+DH1+LH1
*                        +EB1+DB1+LB1
*                        +ED1+DD1+LD1
*                        +H1+F1+G1
*                        +Q1+P1+Z1
*ZC     74         COMPUTE Z2,=,EH1,+,DH1,+,LH1,+,EB1,+,DB1,+,LB1,+,ED1X
               ,+,DD1,+,LD1,+,H1,+,F1,+,G1,+,Q1,+,P1,+,Z1
         LE    ZC_F4,EH1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
         STD   0,ZCVT_WORKAREA+0
         STD   2,8+ZCVT_WORKAREA+0
         LD    ZC_F4,DH1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LD    ZC_F4,LH1
         LD    ZC_F6,8+LH1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LE    ZC_F4,EB1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_EB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LD    ZC_F4,DB1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_DB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LD    ZC_F4,LB1
         LD    ZC_F6,8+LB1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LE    ZC_F4,ED1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LD    ZC_F4,DD1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LD    ZC_F0,LD1
         LD    ZC_F2,8+LD1
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LGH   ZC_R0,H1
         CXGTR ZC_F0,ZC_R0
         LARL  ZC_R1,=LD'1E1'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXTR  ZC_F0,ZC_F0,ZC_F1
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LGF   ZC_R0,F1
         CXGTR ZC_F0,ZC_R0
         LARL  ZC_R1,=LD'1E2'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXTR  ZC_F0,ZC_F0,ZC_F1
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LG    ZC_R0,G1
         CXGTR ZC_F0,ZC_R0
         LARL  ZC_R1,=LD'1E3'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXTR  ZC_F0,ZC_F0,ZC_F1
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LG    ZC_R0,Q1
         LG    ZC_R1,8+Q1
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LARL  ZC_R1,=LD'1E4'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXTR  ZC_F0,ZC_F0,ZC_F1
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         ZAP   ZCVT_PWORK1,P1
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
         LARL  ZC_R1,=LD'1E5'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         DXTR  ZC_F0,ZC_F0,ZC_F1
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         LD    ZC_F4,ZCVT_WORKAREA+0
         LD    ZC_F6,8+ZCVT_WORKAREA+0
         LARL  ZC_R1,=LD'1E6'
         LD    ZC_F3,8(ZC_R1)
         LD    ZC_F1,0(ZC_R1)
         MXTR  ZC_F4,ZC_F4,ZC_F1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 22.5 PERFORM GOOD ELSE PERFORM BAD.
*ZC     79         IF    Z2,=,22.5
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL6'22500000'
         CP    ZCVT_PWORK1(16),0(6,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_12_1
*ZC     79         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     79         ELSE
         J     PG_IF_12_E
PG_IF_12_1   DS    0H  &TYPE
*ZC     79         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_12_E   DS    0H  &TYPE
*            COMPUTE Z2 = Z1+P1+Q1
*                        +G1+F1+H1
*                        +LD1+DD1+ED1
*                        +LB1+DB1+EB1
*                        +LH1+DH1+EH1
*ZC     80         COMPUTE Z2,=,Z1,+,P1,+,Q1,+,G1,+,F1,+,H1,+,LD1,+,DD1X
               ,+,ED1,+,LB1,+,DB1,+,EB1,+,LH1,+,DH1,+,EH1
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         ZAP   ZCVT_PWORK2,P1
         SRP ZCVT_PWORK2,1,0
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         ALG   ZC_R1,8+ZCVT_WORKAREA+0
         ALCG  ZC_R0,ZCVT_WORKAREA+0
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),ZCVT_WORKAREA+0  ALIGN LEFT X OTHER
         LMG   ZC_R0,ZC_R1,Q1
         LARL  ZC_R2,=FL8'1E2'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         ALG   ZC_R1,8+ZCVT_WORKAREA+16
         ALCG  ZC_R0,ZCVT_WORKAREA+16
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),ZCVT_WORKAREA+16  ALIGN LEFT X OTHER
         LG    ZC_R0,G1
         LARL  ZC_R1,=FL8'1E3'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         ALG   ZC_R1,8+ZCVT_WORKAREA+0
         ALCG  ZC_R0,ZCVT_WORKAREA+0
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),ZCVT_WORKAREA+0  ALIGN LEFT X OTHER
         LGF   ZC_R0,F1
         LARL  ZC_R1,=FL8'1E4'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         ALG   ZC_R1,8+ZCVT_WORKAREA+16
         ALCG  ZC_R0,ZCVT_WORKAREA+16
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),ZCVT_WORKAREA+16  ALIGN LEFT X OTHER
         LGH   ZC_R0,H1
         LARL  ZC_R1,=FL8'1E5'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         ALG   ZC_R1,8+ZCVT_WORKAREA+0
         ALCG  ZC_R0,ZCVT_WORKAREA+0
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         LG    ZC_R0,ZCVT_WORKAREA+0
         LG    ZC_R1,8+ZCVT_WORKAREA+0
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         STD   0,ZCVT_WORKAREA+16
         STD   2,8+ZCVT_WORKAREA+16
         LD    ZC_F0,LD1
         LD    ZC_F2,8+LD1
         LARL  ZC_R1,=LD'1E6'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXTR  ZC_F0,ZC_F0,ZC_F1
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         LD    ZC_F0,ZCVT_WORKAREA+16
         LD    ZC_F2,8+ZCVT_WORKAREA+16
         LARL  ZC_R1,=LD'1E6'
         LD    ZC_F3,8(ZC_R1)
         LD    ZC_F1,0(ZC_R1)
         DXTR  ZC_F0,ZC_F0,ZC_F1
         STD   0,ZCVT_WORKAREA+0
         STD   2,8+ZCVT_WORKAREA+0
         LD    ZC_F4,DD1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LE    ZC_F4,ED1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LD    ZC_F4,LB1
         LD    ZC_F6,8+LB1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LD    ZC_F4,DB1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_DB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LE    ZC_F4,EB1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_EB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),16-16+ZCVT_WORKAREA+0 ALN RIGHT 9ZP
         LD    ZC_F4,LH1
         LD    ZC_F6,8+LH1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+16
         LD    ZC_F3,8+ZCVT_WORKAREA+16
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+16
         STD   ZC_F2,8+ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),16-16+ZCVT_WORKAREA+16 ALN RIGHT 9ZP
         LD    ZC_F4,DH1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,ZCVT_WORKAREA+0
         LD    ZC_F3,8+ZCVT_WORKAREA+0
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,ZCVT_WORKAREA+0
         STD   ZC_F2,8+ZCVT_WORKAREA+0
         LD    ZC_F4,ZCVT_WORKAREA+0
         LD    ZC_F6,8+ZCVT_WORKAREA+0
         LARL  ZC_R1,=LD'1E6'
         LD    ZC_F3,8(ZC_R1)
         LD    ZC_F1,0(ZC_R1)
         MXTR  ZC_F4,ZC_F4,ZC_F1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         LE    ZC_F0,EH1
         LARL  ZC_R1,=EH'1E6'
         ME    ZC_R0,0(ZC_R1)
         LER   ZC_F4,ZC_F0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 22.5 PERFORM GOOD ELSE PERFORM BAD.
*ZC     85         IF    Z2,=,22.5
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL6'22500000'
         CP    ZCVT_PWORK1(16),0(6,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_13_1
*ZC     85         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     85         ELSE
         J     PG_IF_13_E
PG_IF_13_1   DS    0H  &TYPE
*ZC     85         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_13_E   DS    0H  &TYPE
*            COMPUTE Z2 = 1.5
*ZC     86         COMPUTE Z2,=,1.5
          LARL  ZC_R1,=ZL32'1500000'
          MVC   Z2,1(ZC_R1)
*            IF Z2 = 1.5  PERFORM GOOD ELSE PERFORM BAD.
*ZC     87         IF    Z2,=,1.5
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'1500000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_14_1
*ZC     87         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     87         ELSE
         J     PG_IF_14_E
PG_IF_14_1   DS    0H  &TYPE
*ZC     87         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_14_E   DS    0H  &TYPE
*            COMPUTE Z2 = H1
*ZC     88         COMPUTE Z2,=,H1
         LH    0,H1
         CVD   0,ZCVT_PWORK
         ZAP   ZCVT_PWORK2,ZCVT_PWORK
         SRP   ZCVT_PWORK2,5,0
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
*            IF Z2 = 1.5  PERFORM GOOD ELSE PERFORM BAD.
*ZC     89         IF    Z2,=,1.5
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'1500000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_15_1
*ZC     89         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     89         ELSE
         J     PG_IF_15_E
PG_IF_15_1   DS    0H  &TYPE
*ZC     89         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_15_E   DS    0H  &TYPE
*            COMPUTE Z2 = 1.5 + 1.5
*ZC     90         COMPUTE Z2,=,1.5,+,1.5
          LARL  ZC_R1,=ZL32'1500000'
          MVC   Z2,1(ZC_R1)
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R14,=PL6'1500000'
         AP    ZCVT_PWORK1(16),0(6,ZC_R14)
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 3    PERFORM GOOD ELSE PERFORM BAD.
*ZC     91         IF    Z2,=,3
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'3000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_16_1
*ZC     91         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     91         ELSE
         J     PG_IF_16_E
PG_IF_16_1   DS    0H  &TYPE
*ZC     91         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_16_E   DS    0H  &TYPE
*            COMPUTE Z2 = 1.5 - 1.5
*ZC     92         COMPUTE Z2,=,1.5,-,1.5
          LARL  ZC_R1,=ZL32'1500000'
          MVC   Z2,1(ZC_R1)
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R14,=PL6'1500000'
         SP    ZCVT_PWORK1(16),0(6,ZC_R14)
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 0    PERFORM GOOD ELSE PERFORM BAD.
*ZC     93         IF    Z2,=,0
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'0000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_17_1
*ZC     93         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     93         ELSE
         J     PG_IF_17_E
PG_IF_17_1   DS    0H  &TYPE
*ZC     93         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_17_E   DS    0H  &TYPE
*            COMPUTE Z2 = 1.5 * 1.5
*ZC     94         COMPUTE Z2,=,1.5,*,1.5
          LARL  ZC_R1,=ZL32'1500000'
          MVC   Z2,1(ZC_R1)
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R14,=PL4'15'
         MP    ZCVT_PWORK1(16),0(4,ZC_R14)
         SRP ZCVT_PWORK1(16),64-1,0
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
*ZC     95         IF    Z2,=,2.25
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'2250000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_18_1
*ZC     95         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     95         ELSE
         J     PG_IF_18_E
PG_IF_18_1   DS    0H  &TYPE
*ZC     95         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_18_E   DS    0H  &TYPE
*            COMPUTE Z2 = 1.5 / 1.5
*ZC     96         COMPUTE Z2,=,1.5,/,1.5
          LARL  ZC_R1,=ZL32'1500000'
          MVC   Z2,1(ZC_R1)
         LARL  ZC_R2,=DD'1.5'
         LARL  ZC_R1,=DD'1.5'
         LD    ZC_F0,0(ZC_R1)
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,0(ZC_R2)
         LARL  ZC_R2,=DD'1E6'
         LD    ZC_F4,0(ZC_R2)
         MDTR  ZC_F0,ZC_F0,ZC_F4
         DDTR  ZC_F0,ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
*            IF Z2 = 1    PERFORM GOOD ELSE PERFORM BAD.
*ZC     97         IF    Z2,=,1
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'1000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_19_1
*ZC     97         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     97         ELSE
         J     PG_IF_19_E
PG_IF_19_1   DS    0H  &TYPE
*ZC     97         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_19_E   DS    0H  &TYPE
*            COMPUTE H2 = 1111 + 2222
*ZC     98         COMPUTE H2,=,1111,+,2222
          MVHHI H2,11110
         LH    ZC_R0,H2
         AHI   ZC_R0,22220
         STH   ZC_R0,H2
*            IF H2 = 3333 PERFORM GOOD ELSE PERFORM BAD.
*ZC     99         IF    H2,=,3333
         LH    0,H2
         CHI   0,33330
         BRC   15-ZC_EQ,PG_IF_20_1
*ZC     99         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     99         ELSE
         J     PG_IF_20_E
PG_IF_20_1   DS    0H  &TYPE
*ZC     99         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_20_E   DS    0H  &TYPE
*            COMPUTE F2 = 111111111 + 222222222
*ZC    100         COMPUTE F2,=,111111111,+,222222222
          LARL  ZC_R1,=F'11111111100'
          MVC   F2,0(ZC_R1)
         L     ZC_R0,F2
         AFI   ZC_R0,22222222200
         ST    ZC_R0,F2
*            IF F2 = 333333333 PERFORM GOOD ELSE PERFORM BAD.
*ZC    101         IF    F2,=,333333333
         L     0,F2
         CFI   0,33333333300
         BRC   15-ZC_EQ,PG_IF_21_1
*ZC    101         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    101         ELSE
         J     PG_IF_21_E
PG_IF_21_1   DS    0H  &TYPE
*ZC    101         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_21_E   DS    0H  &TYPE
*            COMPUTE LD2 = 111111111111111.111
*ZC    102         COMPUTE LD2,=,111111111111111.111
          LARL  ZC_R1,=LD'111111111111111.111'
          MVC   LD2,0(ZC_R1)
*            COMPUTE G2  = LD2 + LD2
*ZC    103         COMPUTE G2,=,LD2,+,LD2
         LD    ZC_F4,LD2
         LD    ZC_F6,8+LD2
         LARL  ZC_R1,=LD'1E3'
         LD    ZC_F3,8(ZC_R1)
         LD    ZC_F1,0(ZC_R1)
         MXTR   ZC_F4,ZC_F4,ZC_F1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         LGR   0,1  IGNORE HIGH 64 BITS
         STG   0,G2
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LARL  ZC_R1,=LD'1E3'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXTR  ZC_F0,ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         LGR   ZC_R0,ZC_R1
         AG    ZC_R0,G2
         STG   ZC_R0,G2
*            COMPUTE LD2 = LD2 + LD2
*ZC    104         COMPUTE LD2,=,LD2,+,LD2
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,LD2
         STD   ZC_F2,8+LD2
*            IF G2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
*ZC    105         IF    G2,=,LD2
         LG    ZC_R0,G2
         CXGTR ZC_F0,ZC_R0
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         STD   ZC_F0,ZCVT_PWORK
         STD   ZC_F2,ZCVT_PWORK+8
         LARL  ZC_R2,=LD'1E3'
         LD    ZC_F0,0(ZC_R2)
         LD    ZC_F2,8(ZC_R2)
         MXTR  ZC_F1,ZC_F1,ZC_F0
         LD    ZC_F0,ZCVT_PWORK
         LD    ZC_F2,ZCVT_PWORK+8
         CXTR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_22_1
*ZC    105         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    105         ELSE
         J     PG_IF_22_E
PG_IF_22_1   DS    0H  &TYPE
*ZC    105         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_22_E   DS    0H  &TYPE
*            COMPUTE LD2 = 1111111111111111111111111111111.1111
*ZC    106         COMPUTE LD2,=,1111111111111111111111111111111.1111
          LARL  ZC_R1,=LD'1111111111111111111111111111111.1111'
          MVC   LD2,0(ZC_R1)
*            COMPUTE Q2  = LD2 + LD2
*ZC    107         COMPUTE Q2,=,LD2,+,LD2
         LD    ZC_F4,LD2
         LD    ZC_F6,8+LD2
         LARL  ZC_R1,=LD'1E4'
         LD    ZC_F3,8(ZC_R1)
         LD    ZC_F1,0(ZC_R1)
         MXTR  ZC_F4,ZC_F4,ZC_F1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,Q2
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LARL  ZC_R1,=LD'1E4'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXTR  ZC_F0,ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         ALG   ZC_R1,8+Q2
         ALCG  ZC_R0,Q2
         STMG  ZC_R0,ZC_R1,Q2
*            COMPUTE LD2 = LD2 + LD2
*ZC    108         COMPUTE LD2,=,LD2,+,LD2
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,LD2
         STD   ZC_F2,8+LD2
*            IF Q2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
*ZC    109         IF    Q2,=,LD2
         LG    ZC_R0,Q2
         LG    ZC_R1,8+Q2
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         STD   ZC_F0,ZCVT_PWORK
         STD   ZC_F2,ZCVT_PWORK+8
         LARL  ZC_R2,=LD'1E4'
         LD    ZC_F0,0(ZC_R2)
         LD    ZC_F2,8(ZC_R2)
         MXTR  ZC_F1,ZC_F1,ZC_F0
         LD    ZC_F0,ZCVT_PWORK
         LD    ZC_F2,ZCVT_PWORK+8
         CXTR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_23_1
*ZC    109         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    109         ELSE
         J     PG_IF_23_E
PG_IF_23_1   DS    0H  &TYPE
*ZC    109         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_23_E   DS    0H  &TYPE
*            COMPUTE LD2 = 11111111111111111111111111.11111
*ZC    110         COMPUTE LD2,=,11111111111111111111111111.11111
          LARL  ZC_R1,=LD'11111111111111111111111111.11111'
          MVC   LD2,0(ZC_R1)
*            COMPUTE P2  = LD2 + LD2
*ZC    111         COMPUTE P2,=,LD2,+,LD2
         LD    ZC_F4,LD2
         LD    ZC_F6,8+LD2
         LARL  ZC_R1,=LD'1E5'
         LD    ZC_F3,8(ZC_R1)
         LD    ZC_F1,0(ZC_R1)
         MXTR  ZC_F4,ZC_F4,ZC_F1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         ZAP   P2,ZCVT_PWORK2
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LARL  ZC_R1,=LD'1E5'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXTR  ZC_F0,ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         AP    P2,ZCVT_PWORK2
*            COMPUTE LD2 = LD2 + LD2
*ZC    112         COMPUTE LD2,=,LD2,+,LD2
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,LD2
         STD   ZC_F2,8+LD2
*            IF P2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
*ZC    113         IF    P2,=,LD2
         ZAP   ZCVT_PWORK1,P2
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         STD   ZC_F0,ZCVT_PWORK
         STD   ZC_F2,ZCVT_PWORK+8
         LARL  ZC_R2,=LD'1E5'
         LD    ZC_F0,0(ZC_R2)
         LD    ZC_F2,8(ZC_R2)
         MXTR  ZC_F1,ZC_F1,ZC_F0
         LD    ZC_F0,ZCVT_PWORK
         LD    ZC_F2,ZCVT_PWORK+8
         CXTR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_24_1
*ZC    113         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    113         ELSE
         J     PG_IF_24_E
PG_IF_24_1   DS    0H  &TYPE
*ZC    113         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_24_E   DS    0H  &TYPE
*            COMPUTE LD2 = 1111111111111111111111111.111111
*ZC    114         COMPUTE LD2,=,1111111111111111111111111.111111
          LARL  ZC_R1,=LD'1111111111111111111111111.111111'
          MVC   LD2,0(ZC_R1)
*            COMPUTE Z2  = LD2 + LD2
*ZC    115         COMPUTE Z2,=,LD2,+,LD2
         LD    ZC_F4,LD2
         LD    ZC_F6,8+LD2
         LARL  ZC_R1,=LD'1E6'
         LD    ZC_F3,8(ZC_R1)
         LD    ZC_F1,0(ZC_R1)
         MXTR  ZC_F4,ZC_F4,ZC_F1
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LARL  ZC_R1,=LD'1E6'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         MXTR  ZC_F0,ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            COMPUTE LD2 = LD2 + LD2
*ZC    116         COMPUTE LD2,=,LD2,+,LD2
         LD    ZC_F0,LD2
         LD    ZC_F2,8+LD2
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         AXTR  ZC_F0,ZC_F0,ZC_F1
         STD   ZC_F0,LD2
         STD   ZC_F2,8+LD2
*            IF Z2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
*ZC    117         IF    Z2,=,LD2
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
         LD    ZC_F1,LD2
         LD    ZC_F3,8+LD2
         STD   ZC_F0,ZCVT_PWORK
         STD   ZC_F2,ZCVT_PWORK+8
         LARL  ZC_R2,=LD'1E6'
         LD    ZC_F0,0(ZC_R2)
         LD    ZC_F2,8(ZC_R2)
         MXTR  ZC_F1,ZC_F1,ZC_F0
         LD    ZC_F0,ZCVT_PWORK
         LD    ZC_F2,ZCVT_PWORK+8
         CXTR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_25_1
*ZC    117         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    117         ELSE
         J     PG_IF_25_E
PG_IF_25_1   DS    0H  &TYPE
*ZC    117         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_25_E   DS    0H  &TYPE
*            COMPUTE Z2 = H1+F1+G1+Q1+P1+Z1
*ZC    118         COMPUTE Z2,=,H1,+,F1,+,G1,+,Q1,+,P1,+,Z1
         LGH   0,H1
         LARL  ZC_R1,=FL8'1E1'
         MSG   ZC_R0,0(ZC_R1)
         STG   0,ZCVT_WORKAREA+0
         LGF   ZC_R0,F1
         AG    ZC_R0,ZCVT_WORKAREA+0
         STG   ZC_R0,ZCVT_WORKAREA+0
         LG    ZC_R0,ZCVT_WORKAREA+0
         LARL  ZC_R1,=FL8'1E1'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LG    ZC_R0,G1
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         ALG   ZC_R1,8+ZCVT_WORKAREA+16
         ALCG  ZC_R0,ZCVT_WORKAREA+16
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LMG   ZC_R0,ZC_R1,ZCVT_WORKAREA+16    IGNORE HIGH 64 BITS
         LARL  ZC_R2,=FL8'1E1'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         LMG   ZC_R0,ZC_R1,Q1
         ALG   ZC_R1,8+ZCVT_WORKAREA+0
         ALCG  ZC_R0,ZCVT_WORKAREA+0
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         LMG   ZC_R0,ZC_R1,ZCVT_WORKAREA+0    IGNORE HIGH 64 BITS
         LARL  ZC_R2,=FL8'1E1'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         ZAP   ZCVT_PWORK2,P1
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         ALG   ZC_R1,8+ZCVT_WORKAREA+16
         ALCG  ZC_R0,ZCVT_WORKAREA+16
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LG    ZC_R0,ZCVT_WORKAREA+16
         LG    ZC_R1,8+ZCVT_WORKAREA+16
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SRP ZCVT_PWORK2,1,0                   RPI 1178
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 9    PERFORM GOOD ELSE PERFORM BAD.
*ZC    119         IF    Z2,=,9
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'9000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_26_1
*ZC    119         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    119         ELSE
         J     PG_IF_26_E
PG_IF_26_1   DS    0H  &TYPE
*ZC    119         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_26_E   DS    0H  &TYPE
*            COMPUTE Z2 = Z1+P1+Q1+G1+F1+H1
*ZC    120         COMPUTE Z2,=,Z1,+,P1,+,Q1,+,G1,+,F1,+,H1
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         ZAP   ZCVT_PWORK2,P1
         SRP ZCVT_PWORK2,1,0
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         ALG   ZC_R1,8+ZCVT_WORKAREA+0
         ALCG  ZC_R0,ZCVT_WORKAREA+0
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),ZCVT_WORKAREA+0  ALIGN LEFT X OTHER
         LMG   ZC_R0,ZC_R1,Q1
         LARL  ZC_R2,=FL8'1E2'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         ALG   ZC_R1,8+ZCVT_WORKAREA+16
         ALCG  ZC_R0,ZCVT_WORKAREA+16
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         MVC   ZCVT_WORKAREA+0(16),ZCVT_WORKAREA+16  ALIGN LEFT X OTHER
         LG    ZC_R0,G1
         LARL  ZC_R1,=FL8'1E3'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         ALG   ZC_R1,8+ZCVT_WORKAREA+0
         ALCG  ZC_R0,ZCVT_WORKAREA+0
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+0
         MVC   ZCVT_WORKAREA+16(16),ZCVT_WORKAREA+0  ALIGN LEFT X OTHER
         LGF   ZC_R0,F1
         LARL  ZC_R1,=FL8'1E4'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         ALG   ZC_R1,8+ZCVT_WORKAREA+16
         ALCG  ZC_R0,ZCVT_WORKAREA+16
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LG    ZC_R0,ZCVT_WORKAREA+16
         LG    ZC_R1,8+ZCVT_WORKAREA+16
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SRP ZCVT_PWORK2,64-0,0                RPI 1178
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         LGH   ZC_R0,H1
         CVDG  ZC_R0,ZCVT_PWORK2
         SRP   ZCVT_PWORK2,5,0
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 9    PERFORM GOOD ELSE PERFORM BAD.
*ZC    121         IF    Z2,=,9
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'9000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_27_1
*ZC    121         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    121         ELSE
         J     PG_IF_27_E
PG_IF_27_1   DS    0H  &TYPE
*ZC    121         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_27_E   DS    0H  &TYPE
*            COMPUTE Z2 = (H1 -F1)+(G1 -Q1)+(P1 -Z1)
*ZC    122         COMPUTE Z2,=,'(',H1,-,F1,')',+,'(',G1,-,Q1,')',+,'('X
               ,P1,-,Z1,')'
         LGH   0,H1
         LARL  ZC_R1,=FL8'1E1'
         MSG   ZC_R0,0(ZC_R1)
         STG   0,ZCVT_WORKAREA+0
         LGF   ZC_R0,F1
         LG    ZC_R1,ZCVT_WORKAREA+0
         SGR   ZC_R1,ZC_R0
         STG   ZC_R1,ZCVT_WORKAREA+0
         LG    ZC_R0,G1
         LARL  ZC_R1,=FL8'1E1'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LMG   ZC_R0,ZC_R1,Q1
         LMG   ZC_R2,ZC_R3,ZCVT_WORKAREA+16
         SLGR  ZC_R3,ZC_R1
         SLBGR ZC_R2,ZC_R0
         STMG  ZC_R2,ZC_R3,ZCVT_WORKAREA+16
         LG    ZC_R0,ZCVT_WORKAREA+0
         LARL  ZC_R1,=FL8'1E2'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+32
         LMG   ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         ALG   ZC_R1,8+ZCVT_WORKAREA+32
         ALCG  ZC_R0,ZCVT_WORKAREA+32
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+32
         ZAP   ZCVT_PWORK2,P1
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         LARL  ZC_R2,=FL8'1E1'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         LMG   ZC_R2,ZC_R3,ZCVT_WORKAREA+16
         SLGR  ZC_R3,ZC_R1
         SLBGR ZC_R2,ZC_R0
         STMG  ZC_R2,ZC_R3,ZCVT_WORKAREA+16
         LG    ZC_R0,ZCVT_WORKAREA+32
         LG    ZC_R1,8+ZCVT_WORKAREA+32
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SRP ZCVT_PWORK2,2,0                   RPI 1178
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         LG    ZC_R0,ZCVT_WORKAREA+16
         LG    ZC_R1,8+ZCVT_WORKAREA+16
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 0    PERFORM GOOD ELSE PERFORM BAD.
*ZC    123         IF    Z2,=,0
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'0000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_28_1
*ZC    123         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    123         ELSE
         J     PG_IF_28_E
PG_IF_28_1   DS    0H  &TYPE
*ZC    123         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_28_E   DS    0H  &TYPE
*            COMPUTE Z2 = H1*F1+G1*Q1+P1*Z1
*ZC    124         COMPUTE Z2,=,H1,*,F1,+,G1,*,Q1,+,P1,*,Z1
         LGH   0,H1
         LARL  ZC_R1,=FL8'1E1'
         MSG   ZC_R0,0(ZC_R1)
         STG   0,ZCVT_WORKAREA+0
         LGF   ZC_R0,F1
         MSG   ZC_R0,ZCVT_WORKAREA+0
         LGR   ZC_R1,ZC_R0
         LARL  ZC_R2,=FL8'1E2'
         DSG   ZC_R0,0(ZC_R2)
         LGR   ZC_R0,ZC_R1
         STG   ZC_R0,ZCVT_WORKAREA+0
         LG    ZC_R0,G1
         LARL  ZC_R1,=FL8'1E1'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LMG   ZC_R0,ZC_R1,Q1
         LMG   ZC_R2,ZC_R3,ZCVT_WORKAREA+16
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         LARL  ZC_R2,=FL8'1E4'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_DIVQ128
         BASR  ZC_R14,ZC_R15
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LG    ZC_R0,ZCVT_WORKAREA+0
         LARL  ZC_R1,=FL8'1E2'
         MSG   ZC_R0,0(ZC_R1)
         LGR   ZC_R1,ZC_R0
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+32
         LMG   ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         ALG   ZC_R1,8+ZCVT_WORKAREA+32
         ALCG  ZC_R0,ZCVT_WORKAREA+32
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+32
         ZAP   ZCVT_PWORK2,P1
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         LARL  ZC_R2,=FL8'1E1'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLBTQ CVT LB IN F0-F2 TO Q IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         LMG   ZC_R2,ZC_R3,ZCVT_WORKAREA+16
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         LARL  ZC_R2,=FL8'1E6'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_DIVQ128
         BASR  ZC_R14,ZC_R15
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LG    ZC_R0,ZCVT_WORKAREA+32
         LG    ZC_R1,8+ZCVT_WORKAREA+32
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SRP ZCVT_PWORK2,2,0                   RPI 1178
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         LG    ZC_R0,ZCVT_WORKAREA+16
         LG    ZC_R1,8+ZCVT_WORKAREA+16
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 6.75 PERFORM GOOD ELSE PERFORM BAD.
*ZC    125         IF    Z2,=,6.75
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'6750000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_29_1
*ZC    125         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    125         ELSE
         J     PG_IF_29_E
PG_IF_29_1   DS    0H  &TYPE
*ZC    125         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_29_E   DS    0H  &TYPE
*            COMPUTE Z2 = H1/F1+G1/Q1
*ZC    126         COMPUTE Z2,=,H1,/,F1,+,G1,/,Q1
         MVC   ZCVT_NDDX(2),H1
         LGF   ZC_R2,F1
         LGH   ZC_R1,ZCVT_NDDX
         LARL  ZC_R15,=FL8'1E3'
         MSG   1,0(ZC_R15)
         DSGR    0,2
         LGFR  1,1
         STG   1,ZCVT_WORKAREA+0
         MVC   ZCVT_NDDX(8),G1
         LG    2,8+Q1  IGNORE HIGH 64 BITS
         LG    1,ZCVT_NDDX
         LARL  ZC_R15,=FL8'1E5'
         MSG   1,0(ZC_R15)
         DSGR    0,2
         LGR   ZC_R0,ZC_R1
         SRAG  ZC_R0,ZC_R0,63
         STMG  ZC_R0,ZC_R1,ZCVT_WORKAREA+16
         LG    0,ZCVT_WORKAREA+0
         CVDG  0,ZCVT_PWORK2
         SRP   ZCVT_PWORK2,4,0
         UNPK  0+Z2(15),0+ZCVT_PWORK2(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK2(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK2(2) UNPK #3 FINAL
         LG    ZC_R0,ZCVT_WORKAREA+16
         LG    ZC_R1,8+ZCVT_WORKAREA+16
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LD,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         L     ZC_R15,ZCVT_CVTLDTP IN F0-F2 TO PL31 IN ZC_R0-ZC_R1
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK2
         SRP   ZCVT_PWORK2,2,0
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 2    PERFORM GOOD ELSE PERFORM BAD.
*ZC    127         IF    Z2,=,2
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'2000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_30_1
*ZC    127         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    127         ELSE
         J     PG_IF_30_E
PG_IF_30_1   DS    0H  &TYPE
*ZC    127         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_30_E   DS    0H  &TYPE
*            COMPUTE H2 = H1+H1
*ZC    128         COMPUTE H2,=,H1,+,H1
         MVC   H2,H1  ALIGN LEFT X OTHER
         LH    ZC_R0,H1
         AH    ZC_R0,H2
         STH   ZC_R0,H2
*            IF H2 = 3    PERFORM GOOD ELSE PERFORM BAD..
*ZC    129         IF    H2,=,3
         LH    0,H2
         CHI   0,30
         BRC   15-ZC_EQ,PG_IF_31_1
*ZC    129         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    129         ELSE
         J     PG_IF_31_E
PG_IF_31_1   DS    0H  &TYPE
*ZC    129         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_31_E   DS    0H  &TYPE
*            COMPUTE F2 = F1+F1
*ZC    130         COMPUTE F2,=,F1,+,F1
         MVC   F2,F1  ALIGN LEFT X OTHER
         L     ZC_R0,F1
         A     ZC_R0,F2
         ST    ZC_R0,F2
*            IF F2 = 3    PERFORM GOOD ELSE PERFORM BAD..
*ZC    131         IF    F2,=,3
         L     0,F2
         CFI   0,300
         BRC   15-ZC_EQ,PG_IF_32_1
*ZC    131         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    131         ELSE
         J     PG_IF_32_E
PG_IF_32_1   DS    0H  &TYPE
*ZC    131         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_32_E   DS    0H  &TYPE
*            COMPUTE G2 = G1+G1
*ZC    132         COMPUTE G2,=,G1,+,G1
         MVC   G2,G1  ALIGN LEFT X OTHER
         LG    ZC_R0,G1
         AG    ZC_R0,G2
         STG   ZC_R0,G2
*            IF G2 = 3    PERFORM GOOD ELSE PERFORM BAD..
*ZC    133         IF    G2,=,3
         LG     0,G2
         LARL   ZC_R1,=FL8'3000'
         CG     0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_33_1
*ZC    133         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    133         ELSE
         J     PG_IF_33_E
PG_IF_33_1   DS    0H  &TYPE
*ZC    133         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_33_E   DS    0H  &TYPE
*            COMPUTE Q2 = Q1+Q1
*ZC    134         COMPUTE Q2,=,Q1,+,Q1
         MVC   Q2,Q1  ALIGN LEFT X OTHER
         LMG   ZC_R0,ZC_R1,Q1
         ALG   ZC_R1,8+Q2
         ALCG  ZC_R0,Q2
         STMG  ZC_R0,ZC_R1,Q2
*            IF Q2 = 3    PERFORM GOOD ELSE PERFORM BAD..
*ZC    135         IF    Q2,=,3
         LMG   ZC_R0,ZC_R1,Q2
         LARL  ZC_R2,=FL16'30000'
         CG    0,0(ZC_R2)
         JNE   *+4+6
         CLG   1,8(ZC_R2)
         BRC   15-ZC_EQ,PG_IF_34_1
*ZC    135         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    135         ELSE
         J     PG_IF_34_E
PG_IF_34_1   DS    0H  &TYPE
*ZC    135         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_34_E   DS    0H  &TYPE
*            COMPUTE P2 = P1+P1
*ZC    136         COMPUTE P2,=,P1,+,P1
         MVC   P2,16-16+P1 ALN RIGHT 9ZP
         AP    P2,P1
*            IF P2 = 3    PERFORM GOOD ELSE PERFORM BAD..
*ZC    137         IF    P2,=,3
         LARL  ZC_R1,=PL16'300000'
         CP    P2,0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_35_1
*ZC    137         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    137         ELSE
         J     PG_IF_35_E
PG_IF_35_1   DS    0H  &TYPE
*ZC    137         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_35_E   DS    0H  &TYPE
*            COMPUTE Z2 = Z1+Z1
*ZC    138         COMPUTE Z2,=,Z1,+,Z1
         MVC   Z2,31-31+Z1 ALN RIGHT 9ZP
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         AP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 3    PERFORM GOOD ELSE PERFORM BAD..
*ZC    139         IF    Z2,=,3
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'3000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_36_1
*ZC    139         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    139         ELSE
         J     PG_IF_36_E
PG_IF_36_1   DS    0H  &TYPE
*ZC    139         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_36_E   DS    0H  &TYPE
*            COMPUTE H2 = H1 -H1
*ZC    140         COMPUTE H2,=,H1,-,H1
         MVC   H2,H1  ALIGN LEFT X OTHER
         LH    ZC_R0,H1
         LH    ZC_R1,H2
         SR    ZC_R1,ZC_R0
         STH   ZC_R1,H2
*            IF H2 = 0    PERFORM GOOD ELSE PERFORM BAD..
*ZC    141         IF    H2,=,0
         LH    0,H2
         CHI   0,00
         BRC   15-ZC_EQ,PG_IF_37_1
*ZC    141         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    141         ELSE
         J     PG_IF_37_E
PG_IF_37_1   DS    0H  &TYPE
*ZC    141         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_37_E   DS    0H  &TYPE
*            COMPUTE F2 = F1 -F1
*ZC    142         COMPUTE F2,=,F1,-,F1
         MVC   F2,F1  ALIGN LEFT X OTHER
         L     ZC_R0,F1
         L     ZC_R1,F2
         SR    ZC_R1,ZC_R0
         ST    ZC_R1,F2
*            IF F2 = 0    PERFORM GOOD ELSE PERFORM BAD..
*ZC    143         IF    F2,=,0
         L     0,F2
         CFI   0,000
         BRC   15-ZC_EQ,PG_IF_38_1
*ZC    143         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    143         ELSE
         J     PG_IF_38_E
PG_IF_38_1   DS    0H  &TYPE
*ZC    143         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_38_E   DS    0H  &TYPE
*            COMPUTE G2 = G1 -G1
*ZC    144         COMPUTE G2,=,G1,-,G1
         MVC   G2,G1  ALIGN LEFT X OTHER
         LG    ZC_R0,G1
         LG    ZC_R1,G2
         SGR   ZC_R1,ZC_R0
         STG   ZC_R1,G2
*            IF G2 = 0    PERFORM GOOD ELSE PERFORM BAD.
*ZC    145         IF    G2,=,0
         LG     0,G2
         LARL   ZC_R1,=FL8'0000'
         CG     0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_39_1
*ZC    145         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    145         ELSE
         J     PG_IF_39_E
PG_IF_39_1   DS    0H  &TYPE
*ZC    145         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_39_E   DS    0H  &TYPE
*            COMPUTE Q2 = Q1 -Q1
*ZC    146         COMPUTE Q2,=,Q1,-,Q1
         MVC   Q2,Q1  ALIGN LEFT X OTHER
         LMG   ZC_R0,ZC_R1,Q1
         LMG   ZC_R2,ZC_R3,Q2
         SLGR  ZC_R3,ZC_R1
         SLBGR ZC_R2,ZC_R0
         STMG  ZC_R2,ZC_R3,Q2
*            IF Q2 = 0    PERFORM GOOD ELSE PERFORM BAD.
*ZC    147         IF    Q2,=,0
         LMG   ZC_R0,ZC_R1,Q2
         LARL  ZC_R2,=FL16'00000'
         CG    0,0(ZC_R2)
         JNE   *+4+6
         CLG   1,8(ZC_R2)
         BRC   15-ZC_EQ,PG_IF_40_1
*ZC    147         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    147         ELSE
         J     PG_IF_40_E
PG_IF_40_1   DS    0H  &TYPE
*ZC    147         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_40_E   DS    0H  &TYPE
*            COMPUTE P2 = P1 -P1
*ZC    148         COMPUTE P2,=,P1,-,P1
         MVC   P2,16-16+P1 ALN RIGHT 9ZP
         SP    P2,P1
*            IF P2 = 0    PERFORM GOOD ELSE PERFORM BAD.
*ZC    149         IF    P2,=,0
         LARL  ZC_R1,=PL16'000000'
         CP    P2,0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_41_1
*ZC    149         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    149         ELSE
         J     PG_IF_41_E
PG_IF_41_1   DS    0H  &TYPE
*ZC    149         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_41_E   DS    0H  &TYPE
*            COMPUTE Z2 = Z1 -Z1
*ZC    150         COMPUTE Z2,=,Z1,-,Z1
         MVC   Z2,31-31+Z1 ALN RIGHT 9ZP
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         SP    ZCVT_PWORK1(16),ZCVT_PWORK2
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 0    PERFORM GOOD ELSE PERFORM BAD.
*ZC    151         IF    Z2,=,0
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'0000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_42_1
*ZC    151         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    151         ELSE
         J     PG_IF_42_E
PG_IF_42_1   DS    0H  &TYPE
*ZC    151         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_42_E   DS    0H  &TYPE
*            COMPUTE H2 = H1*H1
*ZC    152         COMPUTE H2,=,H1,*,H1
         MVC   H2,H1  ALIGN LEFT X OTHER
         LGH   ZC_R0,H1
         LGH   ZC_R1,H2
         MSGR  ZC_R0,ZC_R1
         LGR   ZC_R1,ZC_R0
         LARL  ZC_R2,=FL8'1E1'
         DSG   ZC_R0,0(ZC_R2)
         LGR   ZC_R0,ZC_R1
         STH   ZC_R0,H2
*            IF H2 = 2.2  PERFORM GOOD ELSE PERFORM BAD.
*ZC    153         IF    H2,=,2.2
         LH    0,H2
         CHI   0,22
         BRC   15-ZC_EQ,PG_IF_43_1
*ZC    153         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    153         ELSE
         J     PG_IF_43_E
PG_IF_43_1   DS    0H  &TYPE
*ZC    153         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_43_E   DS    0H  &TYPE
*            COMPUTE F2 = F1*F1
*ZC    154         COMPUTE F2,=,F1,*,F1
         MVC   F2,F1  ALIGN LEFT X OTHER
         LGF   ZC_R0,F1
         MSGF  ZC_R0,F2
         LGR   ZC_R1,ZC_R0
         LARL  ZC_R2,=FL8'1E2'
         DSG   ZC_R0,0(ZC_R2)
         LGR   ZC_R0,ZC_R1
         ST    ZC_R0,F2
*            IF F2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
*ZC    155         IF    F2,=,2.25
         L     0,F2
         CFI   0,225
         BRC   15-ZC_EQ,PG_IF_44_1
*ZC    155         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    155         ELSE
         J     PG_IF_44_E
PG_IF_44_1   DS    0H  &TYPE
*ZC    155         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_44_E   DS    0H  &TYPE
*            COMPUTE G2 = G1*G1
*ZC    156         COMPUTE G2,=,G1,*,G1
         MVC   G2,G1  ALIGN LEFT X OTHER
         LG    ZC_R0,G1
         MSG   ZC_R0,G2
         LGR   ZC_R1,ZC_R0
         LARL  ZC_R2,=FL8'1E3'
         DSG   ZC_R0,0(ZC_R2)
         LGR   ZC_R0,ZC_R1
         STG   ZC_R0,G2
*            IF G2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
*ZC    157         IF    G2,=,2.25
         LG     0,G2
         LARL   ZC_R1,=FL8'2250'
         CG     0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_45_1
*ZC    157         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    157         ELSE
         J     PG_IF_45_E
PG_IF_45_1   DS    0H  &TYPE
*ZC    157         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_45_E   DS    0H  &TYPE
*            COMPUTE Q2 = Q1*Q1
*ZC    158         COMPUTE Q2,=,Q1,*,Q1
         MVC   Q2,Q1  ALIGN LEFT X OTHER
         LMG   ZC_R0,ZC_R1,Q1
         LMG   ZC_R2,ZC_R3,Q2
         L     ZC_R15,ZCVT_MPYQ128
         BASR  ZC_R14,ZC_R15
         LARL  ZC_R2,=FL8'1E4'
         LG    ZC_R3,0(ZC_R2)
         SGR   ZC_R2,ZC_R2
         L     ZC_R15,ZCVT_DIVQ128
         BASR  ZC_R14,ZC_R15
         LGR   ZC_R0,ZC_R2
         LGR   ZC_R1,ZC_R3
         STMG  ZC_R0,ZC_R1,Q2
*            IF Q2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
*ZC    159         IF    Q2,=,2.25
         LMG   ZC_R0,ZC_R1,Q2
         LARL  ZC_R2,=FL16'22500'
         CG    0,0(ZC_R2)
         JNE   *+4+6
         CLG   1,8(ZC_R2)
         BRC   15-ZC_EQ,PG_IF_46_1
*ZC    159         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    159         ELSE
         J     PG_IF_46_E
PG_IF_46_1   DS    0H  &TYPE
*ZC    159         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_46_E   DS    0H  &TYPE
*            COMPUTE P2 = P1*P1
*ZC    160         COMPUTE P2,=,P1,*,P1
         MVC   P2,16-16+P1 ALN RIGHT 9ZP
         MP    P2,P1
         SRP   P2,64-5,0
*            IF P2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
*ZC    161         IF    P2,=,2.25
         LARL  ZC_R1,=PL16'225000'
         CP    P2,0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_47_1
*ZC    161         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    161         ELSE
         J     PG_IF_47_E
PG_IF_47_1   DS    0H  &TYPE
*ZC    161         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_47_E   DS    0H  &TYPE
*            COMPUTE Z2 = Z1*Z1
*ZC    162         COMPUTE Z2,=,Z1,*,Z1
         MVC   Z2,31-31+Z1 ALN RIGHT 9ZP
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         MP    ZCVT_PWORK1(16),ZCVT_PWORK2
         SRP ZCVT_PWORK1(16),64-6,0
         UNPK  0+Z2(15),0+ZCVT_PWORK1(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK1(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK1(2) UNPK #3 FINAL
*            IF Z2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
*ZC    163         IF    Z2,=,2.25
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'2250000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_48_1
*ZC    163         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    163         ELSE
         J     PG_IF_48_E
PG_IF_48_1   DS    0H  &TYPE
*ZC    163         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_48_E   DS    0H  &TYPE
*            COMPUTE H2 = H1/H1
*ZC    164         COMPUTE H2,=,H1,/,H1
         MVC   H2,H1  ALIGN LEFT X OTHER
         MVC   ZCVT_NDDX(2),H1
         LGH   ZC_R2,H1
         LGH   ZC_R1,ZCVT_NDDX
         LARL  ZC_R15,=FL8'1E1'
         MSG   1,0(ZC_R15)
         DSGR    0,2
         STH   1,H2
*            IF H2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
*ZC    165         IF    H2,=,1.0
         LH    0,H2
         CHI   0,10
         BRC   15-ZC_EQ,PG_IF_49_1
*ZC    165         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    165         ELSE
         J     PG_IF_49_E
PG_IF_49_1   DS    0H  &TYPE
*ZC    165         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_49_E   DS    0H  &TYPE
*            COMPUTE F2 = F1/F1
*ZC    166         COMPUTE F2,=,F1,/,F1
         MVC   F2,F1  ALIGN LEFT X OTHER
         MVC   ZCVT_NDDX(4),F1
         LGF   ZC_R2,F1
         LGF   ZC_R1,ZCVT_NDDX
         LARL  ZC_R15,=FL8'1E2'
         MSG   1,0(ZC_R15)
         DSGR    0,2
         ST    1,F2
*            IF F2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
*ZC    167         IF    F2,=,1.0
         L     0,F2
         CFI   0,100
         BRC   15-ZC_EQ,PG_IF_50_1
*ZC    167         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    167         ELSE
         J     PG_IF_50_E
PG_IF_50_1   DS    0H  &TYPE
*ZC    167         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_50_E   DS    0H  &TYPE
*            COMPUTE G2 = G1/G1
*ZC    168         COMPUTE G2,=,G1,/,G1
         MVC   G2,G1  ALIGN LEFT X OTHER
         MVC   ZCVT_NDDX(8),G1
         LG    2,G1
         LG    1,ZCVT_NDDX
         LARL  ZC_R15,=FL8'1E3'
         MSG   1,0(ZC_R15)
         DSGR    0,2
         STG   1,G2
*            IF G2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
*ZC    169         IF    G2,=,1.0
         LG     0,G2
         LARL   ZC_R1,=FL8'1000'
         CG     0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_51_1
*ZC    169         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    169         ELSE
         J     PG_IF_51_E
PG_IF_51_1   DS    0H  &TYPE
*ZC    169         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_51_E   DS    0H  &TYPE
*            COMPUTE Q2 = Q1/Q1
*ZC    170         COMPUTE Q2,=,Q1,/,Q1
         MVC   Q2,Q1  ALIGN LEFT X OTHER
         MVC   ZCVT_NDDX,Q1
         LMG   ZC_R2,ZC_R3,Q1
         LMG   ZC_R0,ZC_R1,ZCVT_NDDX
         STMG  ZC_R2,ZC_R3,ZCVT_WORKAREA
         LARL  ZC_R15,=FL16'1E4'
         LMG   ZC_R2,ZC_R3,0(ZC_R15)
         L     ZC_R15,ZCVT_MPYQ128      MPY DIVIDEND
         BASR  ZC_R14,ZC_R15
         LMG   ZC_R2,ZC_R3,ZCVT_WORKAREA   REST0RE DIVISOR
         L     ZC_R15,ZCVT_DIVQ128 DIVIDE SCALED DIVIDEND BY QUOTIENT
         BASR  ZC_R14,ZC_R15
         LTGR  ZC_R0,ZC_R0
         JNM   ZC_LPQR_1
         XG    ZC_R0,ZCVT_HIGH_VALUES
         XG    ZC_R0+1,ZCVT_HIGH_VALUES
         ALGFI ZC_R0+1,1
         ALCG  ZC_R0,ZCVT_ZERO
ZC_LPQR_1            DS 0H
         STMG  ZC_R2,ZC_R3,Q2
*            IF Q2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
*ZC    171         IF    Q2,=,1.0
         LMG   ZC_R0,ZC_R1,Q2
         LARL  ZC_R2,=FL16'10000'
         CG    0,0(ZC_R2)
         JNE   *+4+6
         CLG   1,8(ZC_R2)
         BRC   15-ZC_EQ,PG_IF_52_1
*ZC    171         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    171         ELSE
         J     PG_IF_52_E
PG_IF_52_1   DS    0H  &TYPE
*ZC    171         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_52_E   DS    0H  &TYPE
*            COMPUTE P2 = P1/P1
*ZC    172         COMPUTE P2,=,P1,/,P1
         MVC   P2,16-16+P1 ALN RIGHT 9ZP
         ZAP ZCVT_PWORK1(16),P1
         ZAP   ZCVT_PWORK2(16),P1
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F1,ZC_R0
         LARL  ZC_R2,=LD'1E5'
         LD    ZC_F4,0(ZC_R2)
         LD    ZC_F6,8(ZC_R2)
         MXTR  ZC_F0,ZC_F0,ZC_F4
         DXTR  ZC_F0,ZC_F0,ZC_F1
         L     ZC_R15,ZCVT_CVTLDTP
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK4                   PW4=QUOTIENT
         ZAP   P2,ZCVT_PWORK4(16)
*            IF P2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
*ZC    173         IF    P2,=,1.0
         LARL  ZC_R1,=PL16'100000'
         CP    P2,0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_53_1
*ZC    173         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    173         ELSE
         J     PG_IF_53_E
PG_IF_53_1   DS    0H  &TYPE
*ZC    173         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_53_E   DS    0H  &TYPE
*            COMPUTE Z2 = Z1/Z1
*ZC    174         COMPUTE Z2,=,Z1,/,Z1
         MVC   Z2,31-31+Z1 ALN RIGHT 9ZP
         PACK  ZCVT_PWORK1(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z1(3)  PACK #3 FINAL
         PACK  ZCVT_PWORK2(8),0+Z1(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+Z1(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+Z1(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F0,ZC_R0
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F1,ZC_R0
         LARL  ZC_R2,=LD'1E6'
         LD    ZC_F4,0(ZC_R2)
         LD    ZC_F6,8(ZC_R2)
         MXTR  ZC_F0,ZC_F0,ZC_F4
         DXTR  ZC_F0,ZC_F0,ZC_F1
         L     ZC_R15,ZCVT_CVTLDTP
         BASR  ZC_R14,ZC_R15
         STMG  ZC_R0,ZC_R1,ZCVT_PWORK4                   PW4=QUOTIENT
         UNPK  0+Z2(15),0+ZCVT_PWORK4(8)     UNPK #1 FULL
         UNPK  14+Z2(15),7+ZCVT_PWORK4(8)     UNPK #2 FULL
         UNPK  28+Z2(3),14+ZCVT_PWORK4(2) UNPK #3 FINAL
*            IF Z2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
*ZC    175         IF    Z2,=,1.0
         PACK  ZCVT_PWORK1(8),0+Z2(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+Z2(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+Z2(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL4'1000000'
         CP    ZCVT_PWORK1(16),0(4,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_54_1
*ZC    175         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    175         ELSE
         J     PG_IF_54_E
PG_IF_54_1   DS    0H  &TYPE
*ZC    175         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_54_E   DS    0H  &TYPE
*            DISPLAY 'TOTAL GOOD = ' GOOD ' TOTAL BAD = ' BAD.
*ZC    176         DISPLAY 'TOTAL GOOD = ',GOOD,' TOTAL BAD = ',BAD
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL14'TOTAL GOOD = ' PAD TO EVEN LEN LIT
         LA    ZC_R1,13
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,GOOD
         LA    ZC_R1,3  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'P'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         LARL  ZC_R0,=CL14' TOTAL BAD = ' PAD TO EVEN LEN LIT
         LA    ZC_R1,13
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,24(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BAD
         LA    ZC_R1,3  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'P'
         STM   ZC_R0,ZC_R2,36(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    48-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            STOP RUN.
*ZC    177         STOP  RUN
         LH    ZC_R1,RETURN_CODE      PASS RETURN CODE IN R1
         L     ZC_R15,ZCVT_GOBACK
         BR    ZC_R15
*        GOOD.
PG_MAINLINE_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOOD  DS    0H
*            DISPLAY 'GOOD-TEST'
*ZC    179         DISPLAY 'GOOD-TEST'
         BRAS  1,*+(WTO#2206_EOT-*+1)/2*2
         DC    AL2(WTO#2206_EOT-*,0),C'GOOD-TEST'
WTO#2206_EOT     EQU *
         SVC   35
*            ADD 1 TO GOOD.
*ZC    180         ADD   1,TO,GOOD
         BRAS  ZC_R14,3 SET ZC_R1 TO A(INLINE LIT) AND SKIP OVER IT
         DC    PL2'1'
         AP    GOOD,0(2,ZC_R14)
*        BAD.
PG_GOOD_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BAD   DS    0H
*            DISPLAY 'BAD-TEST'
*ZC    182         DISPLAY 'BAD-TEST'
         BRAS  1,*+(WTO#2218_EOT-*+1)/2*2
         DC    AL2(WTO#2218_EOT-*,0),C'BAD-TEST'
WTO#2218_EOT     EQU *
         SVC   35
*            MOVE 16 TO RETURN-CODE
*ZC    183         MOVE  16,TO,RETURN_CODE
          MVHHI RETURN_CODE,16
*            ADD 1 TO BAD.
*ZC    184         ADD   1,TO,BAD
         BRAS  ZC_R14,3 SET ZC_R1 TO A(INLINE LIT) AND SKIP OVER IT
         DC    PL2'1'
         AP    BAD,0(2,ZC_R14)
PG_BAD_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  ZC_SAVEAREA                    00000000 00000048 1   X   X(72)X
                      
*    01  ZC_WS_ID                       00000048 00000008 1   X   X(8) X
                     ''WS*WS*WS'' 
*    01  ZC_WS_START                    00000050 00000004 1   A        X
                      
*    01  ZC_WS_LEN                      00000054 00000004 1   F   9(9) X
                      
*    01  FILLER                         00000058 00000000 1   X        X
                      
*    01  EH1                            00000058 00000004 1   1        X
                     1.5 
*    01  DH1                            0000005C 00000008 1   2        X
                     1.5 
*    01  LH1                            00000064 00000010 1   3        X
                     1.5 
*    01  EB1                            00000074 00000004 1   4        X
                     1.5 
*    01  DB1                            00000078 00000008 1   5        X
                     1.5 
*    01  LB1                            00000080 00000010 1   6        X
                     1.5 
*    01  ED1                            00000090 00000004 1   7        X
                     1.5 
*    01  DD1                            00000094 00000008 1   8        X
                     1.5 
*    01  LD1                            0000009C 00000010 1   9        X
                     1.5 
*    01  H1                             000000AC 00000002 1   H   9(3)VX
               9     15 
*    01  F1                             000000AE 00000004 1   F   9(7)VX
               99    150 
*    01  G1                             000000B2 00000008 1   G   9(15)X
               V999  1500 
*    01  Q1                             000000BA 00000010 1   Q   9(35)X
               V9(4) 15000 
*    01  P1                             000000CA 00000010 1   P   9(26)X
               V9(5) 150000 
*    01  Z1                             000000DA 0000001F 1   Z   9(25)X
               V9(6) 1500000 
*    01  H2                             000000F9 00000002 1   H   9(3)VX
               9     15 
*    01  F2                             000000FB 00000004 1   F   9(7)VX
               99    150 
*    01  G2                             000000FF 00000008 1   G   9(15)X
               V999  1500 
*    01  Q2                             00000107 00000010 1   Q   9(35)X
               V9(4) 15000 
*    01  P2                             00000117 00000010 1   P   9(26)X
               V9(5) 150000 
*    01  Z2                             00000127 0000001F 1   Z   9(25)X
               V9(6) 1500000 
*    01  ZT1                            00000146 00000001 1   Z   9    X
                     5 
*    01  PT1                            00000147 00000001 1   P   9    X
                     5 
*    01  ZT7                            00000148 00000007 1   Z   9(4)VX
               999   5000 
*    01  PT7                            0000014F 00000004 1   P   9(3)VX
               9(4)  50000 
*    01  ZT8                            00000153 00000008 1   Z   9(5)VX
               999   5000 
*    01  PT8                            0000015B 00000005 1   P   9(4)VX
               9(4)  50000 
*    01  ZT16                           00000160 00000010 1   Z   9(13)X
               V999  5000 
*    01  ZT31                           00000170 0000001F 1   Z   9(31)X
                     5 
*    01  PT31                           0000018F 00000010 1   P   9(31)X
                     5 
*    01  ZT20                           0000019F 00000014 1   Z   9(20)X
                     5 
*    01  PT20                           000001B3 0000000B 1   P   9(20)X
                     5 
*    01  ZT21                           000001BE 00000015 1   Z   9(21)X
                     5 
*    01  PT21                           000001D3 0000000B 1   P   9(21)X
                     5 
*    01  PT16                           000001DE 00000009 1   P   9(16)X
                     5 
*    01  LD2                            000001E7 00000010 1   9        X
                     1.0 
*    01  GOOD                           000001F7 00000003 1   P   9(4) X
                     0 
*    01  BAD                            000001FA 00000003 1   P   9(4) X
                     0 
*    01  DEBUG_ITEM                     000001FD 00000058 1   X        X
                      
*    02  DEBUG_LINE                     000001FD 00000006 1   X   X(6) X
                      
*    02  FILLER                         00000203 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     00000204 0000001E 1   X   X(30)X
                      
*    02  FILLER                         00000222 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    00000223 00000004 1   Z   9999 X
                      
*    02  FILLER                         00000227 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    00000228 00000004 1   Z   9999 X
                      
*    02  FILLER                         0000022C 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    0000022D 00000004 1   Z   9999 X
                      
*    02  FILLER                         00000231 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 00000232 00000023 1   X   X(35)X
                      
*    01  TRUE                           00000255 00000001 1   Z   9    X
                     1 
*    01  FALSE                          00000256 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    00000257 00000002 1   H   9(4) X
                     0 
ZC_WSLOC LOCTR 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_SAVEAREA DS CL72
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID DC CL8'WS*WS*WS'
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_START DS AL4
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_LEN DS FL4
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL0
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
EH1      DC EHL4'1.5'
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DH1      DC DHL8'1.5'
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LH1      DC LHL16'1.5'
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
EB1      DC EBL4'1.5'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DB1      DC DBL8'1.5'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LB1      DC LBL16'1.5'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ED1      DC EDL4'1.5'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DD1      DC DDL8'1.5'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LD1      DC LDL16'1.5'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
H1       DC AL2(15)                  RPI 1065
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
F1       DC AL4(150)                  RPI 1065
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G1       DC FL8'1500'                  RPI 1065
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
Q1       DC FL16'15000'                 RPI 1065
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
P1       DC PL16'150000'
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
Z1       DC ZL31'1500000'
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
H2       DC AL2(15)                  RPI 1065
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
F2       DC AL4(150)                  RPI 1065
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
G2       DC FL8'1500'                  RPI 1065
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
Q2       DC FL16'15000'                 RPI 1065
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
P2       DC PL16'150000'
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
Z2       DC ZL31'1500000'
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZT1      DC ZL1'5'
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PT1      DC PL1'5'
ZC_WS_LOC_29 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZT7      DC ZL7'5000'
ZC_WS_LOC_30 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PT7      DC PL4'50000'
ZC_WS_LOC_31 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZT8      DC ZL8'5000'
ZC_WS_LOC_32 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PT8      DC PL5'50000'
ZC_WS_LOC_33 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZT16     DC ZL16'5000'
ZC_WS_LOC_34 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZT31     DC ZL31'5'
ZC_WS_LOC_35 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PT31     DC PL16'5'
ZC_WS_LOC_36 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZT20     DC ZL20'5'
ZC_WS_LOC_37 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PT20     DC PL11'5'
ZC_WS_LOC_38 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZT21     DC ZL21'5'
ZC_WS_LOC_39 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PT21     DC PL11'5'
ZC_WS_LOC_40 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PT16     DC PL9'5'
ZC_WS_LOC_41 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
LD2      DC LDL16'1.0'
ZC_WS_LOC_42 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GOOD     DC PL3'0'
ZC_WS_LOC_43 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BAD      DC PL3'0'
ZC_WS_LOC_44 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_45 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_46 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_47 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_48 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_49 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_50 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_51 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_52 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_53 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_54 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_55 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_56 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_57 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_58 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
ZC_WSLOC LOCTR 
ZC_WSLOC LOCTR 
ZC_WS_DIFF EQU  *-ZC_WS-601  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 58'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
         END 
