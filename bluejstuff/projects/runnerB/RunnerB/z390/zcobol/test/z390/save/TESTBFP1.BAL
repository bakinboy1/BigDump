*    ZCOBOL PGM='zcobol\test\TESTBFP1' VER=V1.5.06 MM/DD/YY  
*    ZCOBOL OPTIONS=(FLOAT(BINARY)) 
         COPY  TESTBFP1_ZC_LABELS.CPY
*        IDENTIFICATION DIVISION.
*        PROGRAM-ID.    TESTBFP1.
         PRINT NOLIST,NOGEN,NOLISTUSE    SET LIST OPTION FOR INTERNAL CX
               ODE
TESTBFP1 CSECT ,                CSECT WITH PROCEDURE CODE AND WS
         USING *,ZC_R15
         STM   14,12,12+4*(14-14)(13)
         CNOP  4,8             FORCE ZC390PVT TO DOUBLEWORD BOUNDARY
         BRAS  ZC_R8,ZC_LOAD
         USING *,ZC_R8            BASE FOR LOAD AND CICS V5 USE
*
*  THESE FIELDS MUST BE KEPT IN SYNC WITH zcobol\ZC390PVT.CPY
*
         DC    CL8'TESTBFP1'    PVTPGM   ZCOBOL PGM NAME
         DC    CL8'01/02/05'   PVTDATE  ZCOBOL COMPILE DATE
         DC    CL8'22.33'   PVTTIME  ZCOBOL COMPILE TIME
         DC    CL8'V1.5.06'    PVTVER   ZCOBOL COMPILER VERSION
         DC    C'0'     PVTCICS  ZCOBOL EXEC CICS PGM
         DC    C'1'   PVTEXTND ZCOBOL EXTENDED PRECISION
         DC    C'0'    PVTTRUNC ZCOBOL TRUNCATE TO PICTURE
         DC    C'1'      PVTR64   ZCOBOL USE 64 BIT REGISTERS
         DC    H'80' MAX DISPLAY LINE LEN  RPI 1118
         DS    XL10            RESERVED
ZC_LOAD  DS    0H
         LA    0,=CL8'ZC390LIB'
         SR    15,15 USE DEFAULT SYS390 SEARCH
         SVC   8 LOAD R0=A(NAME) R15=DDNAME/DSNAME ADDR OR 0
         LTR   ZC_R15,ZC_R15
         JZ    ZC_LOAD_OK
         BRAS  1,*+(WTO#0015_EOT-*+1)/2*2
         DC    AL2(WTO#0015_EOT-*,0),C'ZC390LIB NOT FOUND'
WTO#0015_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
ZC_LOAD_OK DS  0H
         LR    ZC_R9,ZC_R0
         USING ZC390CVT,ZC_R9    R9=CVT
         CLC   ZCVT_ID,=C'ZCVT'              CHECK ZCVT ID AND LENGTH
         JNE   ZC_VER_ERR                    IN ZC390LIB.390 MATCH
         CLC   ZCVT_LEN,=A(ZCVT_END-ZCVT_ID) ZCOBOL PGM COMPILED ID/LEN
         BNE   ZC_VER_ERR
         L     ZC_R15,ZCVT_ZC390NUC
         BASR  ZC_R14,ZC_R15 CALL ZC390NUC TO VERIFY VER, OPTIONS
         J     ZC_VER_OK
ZC_VER_ERR DS 0H
         BRAS  1,*+(WTO#0016_EOT-*+1)/2*2
         DC    AL2(WTO#0016_EOT-*,0),C'ZC390LIB ZCVT VERIFY ERROR'
WTO#0016_EOT     EQU *
         SVC   35
         LA  ZC_R15,16
         SVC 3      EXIT TO CALLER WITH RC=16
         LTORG 
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
ZC_R0    EQU   0
ZC_R1    EQU   1
ZC_R2    EQU   2
ZC_R3    EQU   3
ZC_R4    EQU   4
ZC_R5    EQU   5
ZC_R6    EQU   6
ZC_R7    EQU   7
ZC_R8    EQU   8
ZC_R9    EQU   9
ZC_R10   EQU  10
ZC_R11   EQU  11
ZC_R12   EQU  12
ZC_R13   EQU  13
ZC_R14   EQU  14
ZC_R15   EQU  15
ZC_F0    EQU   0
ZC_F1    EQU   1
ZC_F2    EQU   2
ZC_F3    EQU   3
ZC_F4    EQU   4
ZC_F5    EQU   5
ZC_F6    EQU   6
ZC_F7    EQU   7
ZC_F8    EQU   8
ZC_F9    EQU   9
ZC_F10   EQU  10
ZC_F11   EQU  11
ZC_F12   EQU  12
ZC_F13   EQU  13
ZC_F14   EQU  14
ZC_F15   EQU  15
ZC_H     EQU   2   HIGH
ZC_L     EQU   4   LOW
ZC_E     EQU   8   EQUAL
ZC_NH    EQU   13  NOT HIGHT
ZC_NL    EQU   11  NOT LOW
ZC_NE    EQU   7   NOT EQUAL
ZC_O     EQU   1   OVERFLOW
ZC_P     EQU   2   POSITIVE
ZC_M     EQU   4   MINUS
ZC_Z     EQU   8   ZERO
ZC_NP    EQU   13  NOT POSITIVE
ZC_NM    EQU   11  NOT MINUS
ZC_NZ    EQU   7   NOT ZERO
ZC_NO    EQU   14  NOT OVERFLOW
ZC_EQ    EQU   8   EQUAL
ZC_GT    EQU   2   GREATER THAN
ZC_LT    EQU   4   LESS    THAN
ZC_GE    EQU   11  GREATER THAN OR EQUAL
ZC_LE    EQU   13  LESS    THAN OR EQUAL
         POP   PRINT,NOPRINT
PFPO_TEST    EQU  X'80' PFPO TEST IF VALID OPCODE (NOT SUPPORTED YET)
PFPO_RADIX   EQU  1 PFPO OPCODE - CONVERT FROM ONE RADIX TO ANOTHER
PFPO_RND     EQU  0 PFOP ROUNDING OPTION (ONLY DEFAULT ALLOWED)
PFPO_TYPE_EH EQU  0 EH HFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DH EQU  1 ED HFP LONG      64 BITS 15 DIGITS
PFPO_TYPE_LH EQU  2 EL HFP EXTENDED 128 BITS 30 DIGITS
PFPO_TYPE_EB EQU  5 EB BFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DB EQU  6 DB BFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LB EQU  7 LB BFP EXTENDED 128 BITS 34 DIGITS
PFPO_TYPE_ED EQU  8 ED DFP SHORT     32 BITS 7  DIGITS
PFPO_TYPE_DD EQU  9 DD DFP LONG      64 BITS 16 DIGITS
PFPO_TYPE_LD EQU 10 LD DFP EXTENDED 128 BITS 34 DIGITS
ZC_VER_OK DS   0H
         L     ZC_R2,24(ZC_R13) SET ZC_R2=PARMLIST ADDRESS AFTER LOAD
         LARL  ZC_R1,ZC_WS     ZC_R2=A(WORKING STORAGE WITH SAVEAREA)
         ST    ZC_R1,8(ZC_R13) FORWARD  SAVE CHAIN
         ST    ZC_R13,4(ZC_R1) BACKWARD SAVE CHAIN
         LR    ZC_R13,ZC_R1    LINK SAVE AREA IN ZC390CVT
         USING ZC_WS,ZC_R13    BASE FOR ZCOBOL WS (SEE GEN_SYM_RX.MAC)
         ST    ZC_R13,ZC_WS_START  SAVE ADDR WS IN WS PREFIX
         LARL  ZC_R0,ZC_WS_END
         SR    ZC_R0,ZC_R13
         ST    ZC_R0,ZC_WS_LEN     SAVE LENGTH OF WS IN WS PREFIX
         DROP  ZC_R15              RPI 1042
ZC_WSLOC LOCTR 
ZC_WS    DS    0D           START WORKING STORAGE
ZC390CVT DSECT 
ZCVT_ID            DC    C'ZCVT'             ZCVT ID  VERIFIED BY ZCOB
ZCVT_LEN           DC    A(ZCVT_END-ZCVT_ID) ZCVT LEN VERIFIED BY ZCOB
ZCVT_VER           DC    CL8'V1.5.06'    ZCVT VER VERIFIED BY ZC390NUC
ZCVT_ZC390NUC  DC V(ZC390NUC)      MODULE  SYSTEM ROUTINE MODULE INIT
ZCVT_CALL           DC V(CALL)       ENTRY R0=A(PGM),R1=A(PARMLIST)
ZCVT_CMP64R32       DC V(CMP64R32)   ENTRY COMPARE R0-1=FLD1 R2-3=FLD2
ZCVT_CVTLBTQ        DC V(CVTLBTQ)    ENTRY CVT LB IN F4-6 TO Q IN R0-1
ZCVT_CVTLDTP        DC V(CVTLDTP)    ENTRY CVT LD IN F0-2 TO PL31 R0-1
ZCVT_CVTQTLB        DC V(CVTQTLB)    ENTRY CVT Q IN R0-1 TO LB IN F4-6
ZCVT_DIV64R32       DC V(DIV64R32)   ENTRY DIVIDE R0-1=N64, R2-3=MAX64
ZCVT_DIVQ128        DC V(DIVQ128)    ENTRY DIVIDE Q128 R0-R1 BY R2-R3
ZCVT_GOBACK         DC V(GOBACK)     ENTRY R1=RC
ZCVT_MPYQ128        DC V(MPYQ128)    ENTRY MULTIPLY Q128 R0-R1 BY R2-R3
ZCVT_OSE64R32       DC V(OSE64R32)   ENTRY ON SIZE ERR R0-1=N, R2-3=MAX
ZCVT_PERFORM        DC V(PERFORM)    ENTRY R14=PGTAR,R0=PGEXT,R1=PMRET
ZCVT_PMCHECK        DC V(PMCHECK)    ENTRY R14=RETURN TO NEXT INSTR.
ZCVT_ROUNDF         DC V(ROUNDF)     ENTRY R0=REM,R1=QUO,R2=DIVISOR
ZCVT_STACKORG       DC V(STACKORG)   ENTRY PERFORM STACK ORIGIN
ZCVT_STACKPTR       DC V(STACKPTR)   ENTRY CUR ENTRY A(PG_END+4,RET)
ZCVT_STACKEND       DC V(STACKEND)   ENTRY PERFORM STACK END
ZCVT_STOPRUN        DC V(STOPRUN)    ENTRY R1=RC
ZCVT_TALPHAX        DC V(TALPHAX)    ENTRY TEST ALPHABETIC X
ZCVT_TNUMP          DC V(TNUMP)      ENTRY TEST NUMERIC P
ZCVT_TNUMX          DC V(TNUMX)      ENTRY TEST NUMERIC X
ZCVT_TNUMZ          DC V(TNUMZ)      ENTRY TEST NUMERIC Z
*
* ADDITIONAL SEPARATE MODULES LINKED WITH Z390NUC IN ZC390LIB.390
*
ZCVT_ABORT     DC V(ABORT)         MODULE  R1=ABORT ERROR MSG #
ZCVT_ABORT_ALTER   EQU    1 ABORT ALTER DUE TO BRC NOT FOUND AT TARGET
ZCVT_ABORT_CALL    EQU    2 ABORT DYNAMIC CALL - PGM NOT FOUND
ZCVT_ABORT_DISPLAY EQU    3 ABORT DISPLAY DUE TO BUFFER EXCEEDED
ZCVT_ABORT_OPEN    EQU    4 ABORT OPEN  INVALID DCB
ZCVT_ABORT_STACK   EQU    6 ABORT PEROFRM STACK OVERFLOW
ZCVT_ABORT_VERSION EQU    7 ABORT ZC390NUC INIT ZCOBOL VERSION ERROR
ZCVT_ABORT_INT128  EQU    8 ABORT INTEGER 128 CONVERSION OVERFLO
ZCVT_ABORT_DIVQ    EQU    9 ABORT DIVIDE Q IF DIVISOR 0 OR > 2**63
ZCVT_ABORT_CICS    EQU   10 ABORT THIS PGM REQUIRES EXEC CICS TRANS MGR
ZCVT_ABORT_ACCEPT  EQU   11 ABORT ACCEPT EOF
ZCVT_ABORT_MAXERR  EQU   11 ABORT MAX ERROR CODE
ZCVT_ACCEPT    DC V(ACCEPT)        MODULE  R1=A(TYPE,FLD_ADD,FLD_LEN)
ZCVT_ACCEPT_DEFAULT EQU   1 INPUT DEFAULT DDNAME=SYSIN
ZCVT_ACCEPT_CONSOLE EQU   2 INPUT VIA WTOR FROM CONSOLE
ZCVT_ACCEPT_DDNAME  EQU   3 INPUT FROM DDNAME WITH DDNAME ADDR IN R3
ZCVT_ACCEPT_DATE    EQU   4 RETURN DAY OF WEEK PIC 9(8) MMDDYYYY
ZCVT_ACCEPT_TIME    EQU   5 RETURN DAY OF WEEK PIC 9(8) HHMMSSTH
ZCVT_ACCEPT_DOW     EQU   6 RETURN DAY OF WEEK PIC 9 1-7
ZCVT_DISPLAY   DC V(DISPLAY)       MODULE  R1=A(ADDR,LEN,TYPE)
ZCVT_INSPECT   DC V(INSPECT)       MODULE  R0=TYPE,R1=PARMLIST
ZCVT_TALLYING      EQU   0 INSPECT TALLYING
ZCVT_REPLACING     EQU   4 INSPECT REPLACING
ZCVT_CONVERTING    EQU   8 INSPECT CONVERTING
*
* SHARED DATA AREAS
*
ZCVT_PVTMAXDL  DS H          MAXIMUM DISPLAY LINE LENGTH  RPI 1118
               DS 0D
ZCVT_ZERO      DC XL16'00'   BINARY ZEROS
ZCVT_HIGH_VALUES DC 0XL16,16X'FF' BINARY FF'S     RPI 1181
ZCVT_PWORK     DS PL8        CVD/CVB WORK
ZCVT_PWORK1    DS PL16       DIV DIVIDEND, CVDG/CVBG WORK
ZCVT_PWORK2    DS PL16       DIV DIVISOR
ZCVT_PWORK3    DS PL16       DIV QUOTIENT
ZCVT_PWORK4    DS PL16       DIV REMAINDER
ZCVT_NDDX      DS XL16       DIV DIVIDEND HOLD AREA
ZCVT_WORKAREA  DS XL256      GEN_INSPECT PARMS, GEN_EDIT WORK, ETC.
*
* END OF ZC390CVT
*
ZCVT_END   EQU   *
ZC390PVT DSECT 
PVTPGM   DS    CL8  ZCOBOL PGM NAME
PVTDATE  DS    CL8  ZCOBOL COMPILE DATE
PVTTIME  DS    CL8  ZCOBOL COMPILE TIME
PVTVER   DS    CL8  ZCOBOL COMPILER VERSION
PVTCICS  DS    C    ZCOBOL EXEC CICS PGM
PVTEXTND DS    C    ZCOBOL EXTENDED PRECISION
PVTTRUNC DS    C    ZCOBOL TRUNCATE TO PICTURE
PVTR64   DS    C    ZCOBOL USE 64 BIT REGISTERS
PVTMAXDL DS    H    ZCOBOL MAX DISPLAY LINE LENGTH
         DS    XL10 RESERVED
ZC_WSLOC LOCTR              CONTINUE WS FOR FD AND DATA
*        AUTHOR.        DON HIGGINS.
*        DATE-WRITTEN.  03/12/09.
*      ***************************************************************
*      * REGRESSION TEST BFP FLOATING POINT - REQUIRES FLOAT(BINARY)   
*      ***************************************************************
*      * 03/23/09 RPI 1004 INITIAL CODING TO TEST BFP                  
*      ***************************************************************
*        ENVIRONMENT DIVISION.
*        DATA DIVISION.
         PRINT DATA
*        WORKING-STORAGE SECTION.
*      * THE FOLLOWING 3 TYPES ARE MAPPED TO BFP USING FLOAT(BINARY)
*        77 FLT-SRT FLOAT-SHORT.
*        77 FLT-LNG FLOAT-LONG.
*        77 FLT-EXT FLOAT-EXTENDED.
*      * THE FOLLOWING 9 TYPES ALWAYS MAP TO HFP, BFP, AND DFP.
*        77 HFP-SRT FLOAT-HEX-7      VALUE 1234567.
*        77 HFP-LNG FLOAT-HEX-15     VALUE 123456789012345.
*        77 HFP-EXT FLOAT-HEX-30
*                   VALUE 123456789012345678901234567890.
*        77 BFP-SRT FLOAT-BINARY-7   VALUE 1234567.
*        77 BFP-LNG FLOAT-BINARY-16  VALUE 1234567890123456.
*        77 BFP-EXT FLOAT-BINARY-34
*                   VALUE 1234567890123456789012345678901234.
*        77 DFP-SRT FLOAT-DECIMAL-7  VALUE 1234567.
*        77 DFP-LNG FLOAT-DECIMAL-16 VALUE 1234567890123456.
*        77 DFP-EXT FLOAT-DECIMAL-34
*                   VALUE 1234567890123456789012345678901234.
*      * THE FOLLOWING 4 TYPES DEFINE 16, 32, 64, AND 128 BINARY TYPES
*      * NOTE 18 DIGIT DW LIMITED TO 16 DIGITS TO FIT IN BFP/DFP_LNG
*      * NOTE 39 DIGIT QW LIMITED TO 34 DIGITS TO FIT IN BFP/DFP_EXT
*        77 HW      COMP PIC S9(4)  VALUE 1234.
*        77 FW      COMP PIC S9(9)  VALUE 123456789.
*        77 DW      COMP PIC S9(18) VALUE 1234567890123456.
*        77 QW      COMP PIC S9(39)
*                   VALUE 1234567890123456789012345678901234.
*      * THE FOLLOWING 2 TYPES DEFINE 31 DIGIT PACKED AND ZONED DECIMAL
*        77 PD      COMP-3 PIC S9(31)
*                   VALUE 1234567890123456789012345678901.
*        77 ZD             PIC S9(31)
*                   VALUE 1234567890123456789012345678901.
*        77 GOOD    COMP-3 PIC S9(4) VALUE 0.
*        PROCEDURE DIVISION.
*ZC   PROCEDURE DIVISION
         PRINT LIST,GEN,LISTUSE TURN PRINT LISTING ON FOR USER CODE GEN
TESTBFP1 CSECT                SWITCH TO PROCEDURE CODE AHEAD OF WS
*        MAINLINE.
PG_MAINLINE DS 0H
*            DISPLAY 'TESTBFP1 STARTING'
*ZC     46         DISPLAY 'TESTBFP1 STARTING'
         BRAS  1,*+(WTO#0138_EOT-*+1)/2*2
         DC    AL2(WTO#0138_EOT-*,0),C'TESTBFP1 STARTING'
WTO#0138_EOT     EQU *
         SVC   35
*            DISPLAY 'HFP_SRT=' HFP-SRT
*ZC     47         DISPLAY 'HFP_SRT=',HFP_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'HFP_SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HFP_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'1'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'HFP_LNG=' HFP-LNG
*ZC     48         DISPLAY 'HFP_LNG=',HFP_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'HFP_LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HFP_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'2'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'HFP_EXT=' HFP-EXT
*ZC     49         DISPLAY 'HFP_EXT=',HFP_EXT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'HFP_EXT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HFP_EXT
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'3'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'BFP_SRT=' BFP-SRT
*ZC     50         DISPLAY 'BFP_SRT=',BFP_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'BFP_SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BFP_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'4'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'BFP_LNG=' BFP-LNG
*ZC     51         DISPLAY 'BFP_LNG=',BFP_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'BFP_LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BFP_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'5'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'BFP_EXT=' BFP-EXT
*ZC     52         DISPLAY 'BFP_EXT=',BFP_EXT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'BFP_EXT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,BFP_EXT
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'6'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'DFP_SRT=' DFP-SRT
*ZC     53         DISPLAY 'DFP_SRT=',DFP_SRT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'DFP_SRT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,DFP_SRT
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'7'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'DFP_LNG=' DFP-LNG
*ZC     54         DISPLAY 'DFP_LNG=',DFP_LNG
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'DFP_LNG=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,DFP_LNG
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'8'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'DFP_EXT=' DFP-EXT
*ZC     55         DISPLAY 'DFP_EXT=',DFP_EXT
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL8'DFP_EXT=' PAD TO EVEN LEN LIT
         LA    ZC_R1,8
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,DFP_EXT
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'9'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'HW=' HW
*ZC     56         DISPLAY 'HW=',HW
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'HW=' PAD TO EVEN LEN LIT
         LA    ZC_R1,3
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,HW
         LA    ZC_R1,2  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'H'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'FW=' FW
*ZC     57         DISPLAY 'FW=',FW
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'FW=' PAD TO EVEN LEN LIT
         LA    ZC_R1,3
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,FW
         LA    ZC_R1,4  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'F'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'DW=' DW
*ZC     58         DISPLAY 'DW=',DW
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'DW=' PAD TO EVEN LEN LIT
         LA    ZC_R1,3
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,DW
         LA    ZC_R1,8  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'G'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'QW=' QW
*ZC     59         DISPLAY 'QW=',QW
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'QW=' PAD TO EVEN LEN LIT
         LA    ZC_R1,3
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,QW
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'Q'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'PD=' PD
*ZC     60         DISPLAY 'PD=',PD
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'PD=' PAD TO EVEN LEN LIT
         LA    ZC_R1,3
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,PD
         LA    ZC_R1,16  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'P'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            DISPLAY 'ZD=' ZD
*ZC     61         DISPLAY 'ZD=',ZD
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL4'ZD=' PAD TO EVEN LEN LIT
         LA    ZC_R1,3
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,ZD
         LA    ZC_R1,31  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'Z'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            IF HFP-SRT = 1234567
*ZC     62         IF    HFP_SRT,=,1234567
         LE    0,HFP_SRT
         LARL  ZC_R1,=E'1234567'
         CE    0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_1_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     63         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     63         ELSE
         J     PG_IF_1_E
PG_IF_1_1    DS    0H  &TYPE
*ZC     63         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_1_E    DS    0H  &TYPE
*            IF HFP-LNG = 123456789012345
*ZC     64         IF    HFP_LNG,=,123456789012345
         LD    0,HFP_LNG
         LARL  ZC_R1,=D'123456789012345'
         CD    0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_2_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     65         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     65         ELSE
         J     PG_IF_2_E
PG_IF_2_1    DS    0H  &TYPE
*ZC     65         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_2_E    DS    0H  &TYPE
*            IF HFP-EXT = 123456789012345678901234567890
*ZC     66         IF    HFP_EXT,=,123456789012345678901234567890
         LD    0,HFP_EXT
         LD    2,8+HFP_EXT
         LARL  ZC_R1,=LH'123456789012345678901234567890'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXR   0,1
         BRC   15-ZC_EQ,PG_IF_3_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     67         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     67         ELSE
         J     PG_IF_3_E
PG_IF_3_1    DS    0H  &TYPE
*ZC     67         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_3_E    DS    0H  &TYPE
*            IF BFP-SRT = 1234567
*ZC     68         IF    BFP_SRT,=,1234567
         LE    0,BFP_SRT
         LARL  ZC_R1,=EB'1234567'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_4_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     69         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     69         ELSE
         J     PG_IF_4_E
PG_IF_4_1    DS    0H  &TYPE
*ZC     69         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_4_E    DS    0H  &TYPE
*            IF BFP-LNG = 1234567890123456
*ZC     70         IF    BFP_LNG,=,1234567890123456
         LD    0,BFP_LNG
         LARL  ZC_R1,=DB'1234567890123456'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_5_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     71         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     71         ELSE
         J     PG_IF_5_E
PG_IF_5_1    DS    0H  &TYPE
*ZC     71         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_5_E    DS    0H  &TYPE
*            IF BFP-EXT = 1234567890123456789012345678901234
*ZC     72         IF    BFP_EXT,=,1234567890123456789012345678901234
         LD    0,BFP_EXT
         LD    2,8+BFP_EXT
         LARL  ZC_R1,=LB'1234567890123456789012345678901234'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_6_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     73         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     73         ELSE
         J     PG_IF_6_E
PG_IF_6_1    DS    0H  &TYPE
*ZC     73         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_6_E    DS    0H  &TYPE
*            IF DFP-SRT = 1234567
*ZC     74         IF    DFP_SRT,=,1234567
         LE    0,DFP_SRT
         LARL  ZC_R1,=ED'1234567'
         LE    ZC_F1,0(ZC_R1)
         LDETR 0,0,0
         LDETR 1,1,0
         CDTR  0,1
         BRC   15-ZC_EQ,PG_IF_7_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     75         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     75         ELSE
         J     PG_IF_7_E
PG_IF_7_1    DS    0H  &TYPE
*ZC     75         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_7_E    DS    0H  &TYPE
*            IF DFP-LNG = 1234567890123456
*ZC     76         IF    DFP_LNG,=,1234567890123456
         LD    0,DFP_LNG
         LARL  ZC_R1,=DD'1234567890123456'
         LD    ZC_F1,0(ZC_R1)
         CDTR  0,1
         BRC   15-ZC_EQ,PG_IF_8_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     77         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     77         ELSE
         J     PG_IF_8_E
PG_IF_8_1    DS    0H  &TYPE
*ZC     77         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_8_E    DS    0H  &TYPE
*            IF DFP-EXT = 1234567890123456789012345678901234
*ZC     78         IF    DFP_EXT,=,1234567890123456789012345678901234
         LD    0,DFP_EXT
         LD    2,8+DFP_EXT
         LARL  ZC_R1,=LD'1234567890123456789012345678901234'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXTR  0,1
         BRC   15-ZC_EQ,PG_IF_9_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     79         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     79         ELSE
         J     PG_IF_9_E
PG_IF_9_1    DS    0H  &TYPE
*ZC     79         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_9_E    DS    0H  &TYPE
*            IF HW      = 1234
*ZC     80         IF    HW,=,1234
         LH    0,HW
         CHI   0,1234
         BRC   15-ZC_EQ,PG_IF_10_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     81         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     81         ELSE
         J     PG_IF_10_E
PG_IF_10_1   DS    0H  &TYPE
*ZC     81         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_10_E   DS    0H  &TYPE
*            IF FW      = 123456789
*ZC     82         IF    FW,=,123456789
         L     0,FW
         CFI   0,123456789
         BRC   15-ZC_EQ,PG_IF_11_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     83         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     83         ELSE
         J     PG_IF_11_E
PG_IF_11_1   DS    0H  &TYPE
*ZC     83         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_11_E   DS    0H  &TYPE
*            IF DW      = 1234567890123456
*ZC     84         IF    DW,=,1234567890123456
         LG     0,DW
         LARL   ZC_R1,=FL8'1234567890123456'
         CG     0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_12_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     85         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     85         ELSE
         J     PG_IF_12_E
PG_IF_12_1   DS    0H  &TYPE
*ZC     85         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_12_E   DS    0H  &TYPE
*            IF QW      = 1234567890123456789012345678901234
*ZC     86         IF    QW,=,1234567890123456789012345678901234
         LMG   ZC_R0,ZC_R1,QW
         LARL  ZC_R2,=FL16'1234567890123456789012345678901234'
         CG    0,0(ZC_R2)
         JNE   *+4+6
         CLG   1,8(ZC_R2)
         BRC   15-ZC_EQ,PG_IF_13_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     87         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     87         ELSE
         J     PG_IF_13_E
PG_IF_13_1   DS    0H  &TYPE
*ZC     87         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_13_E   DS    0H  &TYPE
*            IF PD      = 1234567890123456789012345678901
*ZC     88         IF    PD,=,1234567890123456789012345678901
         LARL  ZC_R1,=PL16'1234567890123456789012345678901'
         CP    PD,0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_14_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     89         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     89         ELSE
         J     PG_IF_14_E
PG_IF_14_1   DS    0H  &TYPE
*ZC     89         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_14_E   DS    0H  &TYPE
*            IF ZD      = 1234567890123456789012345678901
*ZC     90         IF    ZD,=,1234567890123456789012345678901
         PACK  ZCVT_PWORK1(8),0+ZD(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+ZD(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+ZD(3)  PACK #3 FINAL
         LARL  ZC_R1,=PL16'1234567890123456789012345678901'
         CP    ZCVT_PWORK1(16),0(16,ZC_R1)
         BRC   15-ZC_EQ,PG_IF_15_1
*               PERFORM GOOD ELSE PERFORM BAD.
*ZC     91         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     91         ELSE
         J     PG_IF_15_E
PG_IF_15_1   DS    0H  &TYPE
*      * TEST ADD
*ZC     91         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_15_E   DS    0H  &TYPE
*            MOVE       0 TO FLT-SRT
*ZC     93         MOVE  0,TO,FLT_SRT
          LARL  ZC_R1,=EB'0'
          MVC   FLT_SRT,0(ZC_R1)
*            ADD  HFP-SRT TO FLT-SRT
*ZC     94         ADD   HFP_SRT,TO,FLT_SRT
         LE    ZC_F4,HFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
         LEDBR ZC_F0,ZC_F0
         AEB   ZC_F0,FLT_SRT
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = HFP-SRT
*ZC     95         IF    FLT_SRT,=,HFP_SRT
         LE    ZC_F4,HFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_EB,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,FLT_SRT
         CEBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_16_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC     96         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC     96         ELSE
         J     PG_IF_16_E
PG_IF_16_1   DS    0H  &TYPE
*ZC     96         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_16_E   DS    0H  &TYPE
*            MOVE       0 TO FLT-LNG
*ZC     97         MOVE  0,TO,FLT_LNG
          LARL  ZC_R1,=DB'0'
          MVC   FLT_LNG,0(ZC_R1)
*            ADD  HFP-LNG TO FLT-LNG
*ZC     98         ADD   HFP_LNG,TO,FLT_LNG
         LD    ZC_F4,HFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         ADB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = HFP-LNG
*ZC     99         IF    FLT_LNG,=,HFP_LNG
         LD    ZC_F4,HFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,FLT_LNG
         CDBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_17_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    100         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    100         ELSE
         J     PG_IF_17_E
PG_IF_17_1   DS    0H  &TYPE
*ZC    100         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_17_E   DS    0H  &TYPE
*            MOVE       0 TO FLT-EXT
*ZC    101         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  HFP-EXT TO FLT-EXT
*ZC    102         ADD   HFP_EXT,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LD    ZC_F4,HFP_EXT
         LD    ZC_F6,8+HFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = HFP-EXT
*ZC    103         IF    FLT_EXT,=,HFP_EXT
         LD    ZC_F4,HFP_EXT
         LD    ZC_F6,8+HFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         CXBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_18_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    104         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    104         ELSE
         J     PG_IF_18_E
PG_IF_18_1   DS    0H  &TYPE
*ZC    104         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_18_E   DS    0H  &TYPE
*            MOVE       0 TO FLT_SRT
*ZC    105         MOVE  0,TO,FLT_SRT
          LARL  ZC_R1,=EB'0'
          MVC   FLT_SRT,0(ZC_R1)
*            ADD  BFP-SRT TO FLT-SRT
*ZC    106         ADD   BFP_SRT,TO,FLT_SRT
         LE    ZC_F4,BFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_EB,PFPO_RNDX
               )
         PFPO 
         LEDBR ZC_F0,ZC_F0
         AEB   ZC_F0,FLT_SRT
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = BFP_SRT
*ZC    107         IF    FLT_SRT,=,BFP_SRT
         LE    ZC_F0,FLT_SRT
         LE    ZC_F1,BFP_SRT
         CEBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_19_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    108         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    108         ELSE
         J     PG_IF_19_E
PG_IF_19_1   DS    0H  &TYPE
*ZC    108         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_19_E   DS    0H  &TYPE
*            MOVE       0 TO FLT_LNG
*ZC    109         MOVE  0,TO,FLT_LNG
          LARL  ZC_R1,=DB'0'
          MVC   FLT_LNG,0(ZC_R1)
*            ADD  BFP-LNG TO FLT-LNG
*ZC    110         ADD   BFP_LNG,TO,FLT_LNG
         LD    ZC_F0,BFP_LNG
         ADB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = BFP_LNG
*ZC    111         IF    FLT_LNG,=,BFP_LNG
         LD    ZC_F0,FLT_LNG
         LD    ZC_F1,BFP_LNG
         CDBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_20_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    112         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    112         ELSE
         J     PG_IF_20_E
PG_IF_20_1   DS    0H  &TYPE
*ZC    112         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_20_E   DS    0H  &TYPE
*            MOVE       0 TO FLT_EXT
*ZC    113         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  BFP-EXT TO FLT-EXT
*ZC    114         ADD   BFP_EXT,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LD    ZC_F0,BFP_EXT
         LD    ZC_F2,8+BFP_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = BFP_EXT
*ZC    115         IF    FLT_EXT,=,BFP_EXT
         LD    ZC_F0,BFP_EXT
         LD    ZC_F2,8+BFP_EXT
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         CXBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_21_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    116         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    116         ELSE
         J     PG_IF_21_E
PG_IF_21_1   DS    0H  &TYPE
*ZC    116         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_21_E   DS    0H  &TYPE
*            MOVE       0 TO FLT_SRT
*ZC    117         MOVE  0,TO,FLT_SRT
          LARL  ZC_R1,=EB'0'
          MVC   FLT_SRT,0(ZC_R1)
*            ADD  DFP-SRT TO FLT-SRT
*ZC    118         ADD   DFP_SRT,TO,FLT_SRT
         LE    ZC_F4,DFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
         LEDBR ZC_F0,ZC_F0
         AEB   ZC_F0,FLT_SRT
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = DFP_SRT
*ZC    119         IF    FLT_SRT,=,DFP_SRT
         LE    ZC_F4,DFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_EB,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,FLT_SRT
         CEBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_22_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    120         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    120         ELSE
         J     PG_IF_22_E
PG_IF_22_1   DS    0H  &TYPE
*ZC    120         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_22_E   DS    0H  &TYPE
*            MOVE       0 TO FLT_LNG
*ZC    121         MOVE  0,TO,FLT_LNG
          LARL  ZC_R1,=DB'0'
          MVC   FLT_LNG,0(ZC_R1)
*            ADD  DFP-LNG TO FLT-LNG
*ZC    122         ADD   DFP_LNG,TO,FLT_LNG
         LD    ZC_F4,DFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         ADB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = DFP_LNG
*ZC    123         IF    FLT_LNG,=,DFP_LNG
         LD    ZC_F4,DFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,FLT_LNG
         CDBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_23_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    124         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    124         ELSE
         J     PG_IF_23_E
PG_IF_23_1   DS    0H  &TYPE
*ZC    124         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_23_E   DS    0H  &TYPE
*            MOVE       0 TO FLT_EXT
*ZC    125         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  DFP-EXT TO FLT-EXT
*ZC    126         ADD   DFP_EXT,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LD    ZC_F4,DFP_EXT
         LD    ZC_F6,8+DFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = DFP_EXT
*ZC    127         IF    FLT_EXT,=,DFP_EXT
         LD    ZC_F4,DFP_EXT
         LD    ZC_F6,8+DFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         CXBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_24_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    128         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    128         ELSE
         J     PG_IF_24_E
PG_IF_24_1   DS    0H  &TYPE
*ZC    128         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_24_E   DS    0H  &TYPE
*            MOVE       0 TO FLT-SRT
*ZC    129         MOVE  0,TO,FLT_SRT
          LARL  ZC_R1,=EB'0'
          MVC   FLT_SRT,0(ZC_R1)
*            ADD  HW      TO FLT-SRT
*ZC    130         ADD   HW,TO,FLT_SRT
         LH    ZC_R0,HW
         CDFBR ZC_F0,ZC_R0
         LEDBR ZC_F0,ZC_F0
         AEB   ZC_F0,FLT_SRT
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = 1234
*ZC    131         IF    FLT_SRT,=,1234
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'1234'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_25_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    132         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    132         ELSE
         J     PG_IF_25_E
PG_IF_25_1   DS    0H  &TYPE
*ZC    132         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_25_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-LNG
*ZC    133         MOVE  0,TO,FLT_LNG
          LARL  ZC_R1,=DB'0'
          MVC   FLT_LNG,0(ZC_R1)
*            ADD  HW      TO FLT-LNG
*ZC    134         ADD   HW,TO,FLT_LNG
         LH    ZC_R0,HW
         CDFBR ZC_F0,ZC_R0
         ADB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 1234
*ZC    135         IF    FLT_LNG,=,1234
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'1234'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_26_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    136         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    136         ELSE
         J     PG_IF_26_E
PG_IF_26_1   DS    0H  &TYPE
*ZC    136         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_26_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-EXT
*ZC    137         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  HW      TO FLT-EXT
*ZC    138         ADD   HW,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LH    ZC_R0,HW
         CXFBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 1234
*ZC    139         IF    FLT_EXT,=,1234
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'1234'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_27_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    140         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    140         ELSE
         J     PG_IF_27_E
PG_IF_27_1   DS    0H  &TYPE
*ZC    140         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_27_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-LNG
*ZC    141         MOVE  0,TO,FLT_LNG
          LARL  ZC_R1,=DB'0'
          MVC   FLT_LNG,0(ZC_R1)
*            ADD  FW      TO FLT-LNG
*ZC    142         ADD   FW,TO,FLT_LNG
         L     ZC_R0,FW
         CDFBR ZC_F0,ZC_R0
         ADB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 123456789
*ZC    143         IF    FLT_LNG,=,123456789
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'123456789'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_28_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    144         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    144         ELSE
         J     PG_IF_28_E
PG_IF_28_1   DS    0H  &TYPE
*ZC    144         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_28_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-EXT
*ZC    145         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  FW      TO FLT-EXT
*ZC    146         ADD   FW,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         L     ZC_R0,FW
         CXFBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789
*ZC    147         IF    FLT_EXT,=,123456789
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_29_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    148         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    148         ELSE
         J     PG_IF_29_E
PG_IF_29_1   DS    0H  &TYPE
*ZC    148         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_29_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-LNG
*ZC    149         MOVE  0,TO,FLT_LNG
          LARL  ZC_R1,=DB'0'
          MVC   FLT_LNG,0(ZC_R1)
*            ADD  DW      TO FLT-LNG
*ZC    150         ADD   DW,TO,FLT_LNG
         LG    ZC_R0,DW
         CDGBR ZC_F0,ZC_R0
         ADB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 1234567890123456
*ZC    151         IF    FLT_LNG,=,1234567890123456
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'1234567890123456'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_30_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    152         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    152         ELSE
         J     PG_IF_30_E
PG_IF_30_1   DS    0H  &TYPE
*ZC    152         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_30_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-EXT
*ZC    153         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  DW      TO FLT-EXT
*ZC    154         ADD   DW,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LG    ZC_R0,DW
         CXGBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 1234567890123456
*ZC    155         IF    FLT_EXT,=,1234567890123456
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'1234567890123456'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_31_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    156         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    156         ELSE
         J     PG_IF_31_E
PG_IF_31_1   DS    0H  &TYPE
*ZC    156         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_31_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-EXT
*ZC    157         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  QW      TO FLT-EXT
*ZC    158         ADD   QW,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LG    ZC_R0,QW
         LG    ZC_R1,8+QW
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LH,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = QW
*ZC    159         IF    FLT_EXT,=,QW
         LG    ZC_R0,QW
         LG    ZC_R1,8+QW
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         CXBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_32_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    160         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    160         ELSE
         J     PG_IF_32_E
PG_IF_32_1   DS    0H  &TYPE
*ZC    160         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_32_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-EXT
*ZC    161         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  PD      TO FLT-EXT
*ZC    162         ADD   PD,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         ZAP   ZCVT_PWORK1,PD
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = PD
*ZC    163         IF    FLT_EXT,=,PD
         ZAP   ZCVT_PWORK2,PD
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         CXBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_33_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    164         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    164         ELSE
         J     PG_IF_33_E
PG_IF_33_1   DS    0H  &TYPE
*ZC    164         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_33_E   DS    0H  &TYPE
*            MOVE 0       TO FLT-EXT
*ZC    165         MOVE  0,TO,FLT_EXT
          LARL  ZC_R1,=LB'0'
          MVC   FLT_EXT,0(ZC_R1)
*            ADD  ZD      TO FLT-EXT
*ZC    166         ADD   ZD,TO,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         PACK  ZCVT_PWORK1(8),0+ZD(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+ZD(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+ZD(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         AXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = ZD
*ZC    167         IF    FLT_EXT,=,ZD
         PACK  ZCVT_PWORK2(8),0+ZD(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+ZD(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+ZD(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         CXBR  ZC_F0,ZC_F1
         BRC   15-ZC_EQ,PG_IF_34_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    168         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    168         ELSE
         J     PG_IF_34_E
PG_IF_34_1   DS    0H  &TYPE
*      * TEST SUBTRACT
*ZC    168         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_34_E   DS    0H  &TYPE
*            MOVE      HFP-SRT TO   FLT-SRT
*ZC    170         MOVE  HFP_SRT,TO,FLT_SRT
         LE    ZC_F4,HFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_EB,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
         STE   0,FLT_SRT
*            SUBTRACT  HFP-SRT FROM FLT-SRT
*ZC    171         SUBTRACT HFP_SRT,FROM,FLT_SRT
         LE    ZC_F4,HFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
         LEDBR ZC_F0,ZC_F0
         LE    ZC_F1,FLT_SRT
         SEBR  ZC_F1,ZC_F0
         STE   ZC_F1,FLT_SRT
*            IF   FLT-SRT = ZERO
*ZC    172         IF    FLT_SRT,=,ZERO
         LE    0,FLT_SRT
         LTEBR 0,0
         BRC   15-ZC_EQ,PG_IF_35_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    173         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    173         ELSE
         J     PG_IF_35_E
PG_IF_35_1   DS    0H  &TYPE
*ZC    173         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_35_E   DS    0H  &TYPE
*            MOVE      HFP-LNG TO   FLT-LNG
*ZC    174         MOVE  HFP_LNG,TO,FLT_LNG
         LD    ZC_F4,HFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         STD   0,FLT_LNG
*            SUBTRACT  HFP-LNG FROM FLT-LNG
*ZC    175         SUBTRACT HFP_LNG,FROM,FLT_LNG
         LD    ZC_F4,HFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_LNG
         SDBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_LNG
*            IF   FLT-LNG = ZERO
*ZC    176         IF    FLT_LNG,=,ZERO
         LD    0,FLT_LNG
         LTDBR 0,0
         BRC   15-ZC_EQ,PG_IF_36_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    177         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    177         ELSE
         J     PG_IF_36_E
PG_IF_36_1   DS    0H  &TYPE
*ZC    177         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_36_E   DS    0H  &TYPE
*            MOVE      HFP-EXT TO   FLT-EXT
*ZC    178         MOVE  HFP_EXT,TO,FLT_EXT
         LD    ZC_F4,HFP_EXT
         LD    ZC_F6,8+HFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  HFP-EXT FROM FLT-EXT
*ZC    179         SUBTRACT HFP_EXT,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LD    ZC_F4,HFP_EXT
         LD    ZC_F6,8+HFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO
*ZC    180         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_37_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    181         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    181         ELSE
         J     PG_IF_37_E
PG_IF_37_1   DS    0H  &TYPE
*ZC    181         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_37_E   DS    0H  &TYPE
*            MOVE      BFP-SRT TO   FLT-SRT
*ZC    182         MOVE  BFP_SRT,TO,FLT_SRT
         MVC   FLT_SRT,BFP_SRT  ALIGN LEFT X OTHER
*            SUBTRACT  BFP-SRT FROM FLT-SRT
*ZC    183         SUBTRACT BFP_SRT,FROM,FLT_SRT
         LE    ZC_F4,BFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_EB,PFPO_RNDX
               )
         PFPO 
         LEDBR ZC_F0,ZC_F0
         LE    ZC_F1,FLT_SRT
         SEBR  ZC_F1,ZC_F0
         STE   ZC_F1,FLT_SRT
*            IF   FLT-SRT = ZERO                                       
*ZC    184         IF    FLT_SRT,=,ZERO
         LE    0,FLT_SRT
         LTEBR 0,0
         BRC   15-ZC_EQ,PG_IF_38_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    185         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    185         ELSE
         J     PG_IF_38_E
PG_IF_38_1   DS    0H  &TYPE
*ZC    185         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_38_E   DS    0H  &TYPE
*            MOVE      BFP-LNG TO   FLT-LNG
*ZC    186         MOVE  BFP_LNG,TO,FLT_LNG
         MVC   FLT_LNG,BFP_LNG  ALIGN LEFT X OTHER
*            SUBTRACT  BFP-LNG FROM FLT-LNG
*ZC    187         SUBTRACT BFP_LNG,FROM,FLT_LNG
         LD    ZC_F0,BFP_LNG
         LD    ZC_F1,FLT_LNG
         SDBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_LNG
*            IF   FLT-LNG = ZERO                                       
*ZC    188         IF    FLT_LNG,=,ZERO
         LD    0,FLT_LNG
         LTDBR 0,0
         BRC   15-ZC_EQ,PG_IF_39_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    189         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    189         ELSE
         J     PG_IF_39_E
PG_IF_39_1   DS    0H  &TYPE
*ZC    189         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_39_E   DS    0H  &TYPE
*            MOVE      BFP-EXT TO   FLT-EXT
*ZC    190         MOVE  BFP_EXT,TO,FLT_EXT
         MVC   FLT_EXT,BFP_EXT  ALIGN LEFT X OTHER
*            SUBTRACT  BFP-EXT FROM FLT-EXT
*ZC    191         SUBTRACT BFP_EXT,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LD    ZC_F0,BFP_EXT
         LD    ZC_F2,8+BFP_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    192         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_40_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    193         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    193         ELSE
         J     PG_IF_40_E
PG_IF_40_1   DS    0H  &TYPE
*ZC    193         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_40_E   DS    0H  &TYPE
*            MOVE      DFP-SRT TO   FLT-SRT
*ZC    194         MOVE  DFP_SRT,TO,FLT_SRT
         LE    ZC_F4,DFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_EB,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
         STE   0,FLT_SRT
*            SUBTRACT  DFP-SRT FROM FLT-SRT
*ZC    195         SUBTRACT DFP_SRT,FROM,FLT_SRT
         LE    ZC_F4,DFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
         LEDBR ZC_F0,ZC_F0
         LE    ZC_F1,FLT_SRT
         SEBR  ZC_F1,ZC_F0
         STE   ZC_F1,FLT_SRT
*            IF   FLT-SRT = ZERO                                       
*ZC    196         IF    FLT_SRT,=,ZERO
         LE    0,FLT_SRT
         LTEBR 0,0
         BRC   15-ZC_EQ,PG_IF_41_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    197         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    197         ELSE
         J     PG_IF_41_E
PG_IF_41_1   DS    0H  &TYPE
*ZC    197         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_41_E   DS    0H  &TYPE
*            MOVE      DFP-LNG TO   FLT-LNG
*ZC    198         MOVE  DFP_LNG,TO,FLT_LNG
         LD    ZC_F4,DFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         STD   0,FLT_LNG
*            SUBTRACT  DFP-LNG FROM FLT-LNG
*ZC    199         SUBTRACT DFP_LNG,FROM,FLT_LNG
         LD    ZC_F4,DFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_LNG
         SDBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_LNG
*            IF   FLT-LNG = ZERO                                       
*ZC    200         IF    FLT_LNG,=,ZERO
         LD    0,FLT_LNG
         LTDBR 0,0
         BRC   15-ZC_EQ,PG_IF_42_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    201         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    201         ELSE
         J     PG_IF_42_E
PG_IF_42_1   DS    0H  &TYPE
*ZC    201         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_42_E   DS    0H  &TYPE
*            MOVE      DFP-EXT TO   FLT-EXT
*ZC    202         MOVE  DFP_EXT,TO,FLT_EXT
         LD    ZC_F4,DFP_EXT
         LD    ZC_F6,8+DFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  DFP-EXT FROM FLT-EXT
*ZC    203         SUBTRACT DFP_EXT,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LD    ZC_F4,DFP_EXT
         LD    ZC_F6,8+DFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    204         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_43_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    205         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    205         ELSE
         J     PG_IF_43_E
PG_IF_43_1   DS    0H  &TYPE
*ZC    205         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_43_E   DS    0H  &TYPE
*            MOVE      HW      TO   FLT-SRT
*ZC    206         MOVE  HW,TO,FLT_SRT
         LH    0,HW
         CEFBR 0,0
         STE   0,FLT_SRT
*            SUBTRACT  HW      FROM FLT-SRT
*ZC    207         SUBTRACT HW,FROM,FLT_SRT
         LH    ZC_R0,HW
         CDFBR ZC_F0,ZC_R0
         LEDBR ZC_F0,ZC_F0
         LE    ZC_F1,FLT_SRT
         SEBR  ZC_F1,ZC_F0
         STE   ZC_F1,FLT_SRT
*            IF   FLT-SRT = ZERO                                       
*ZC    208         IF    FLT_SRT,=,ZERO
         LE    0,FLT_SRT
         LTEBR 0,0
         BRC   15-ZC_EQ,PG_IF_44_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    209         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    209         ELSE
         J     PG_IF_44_E
PG_IF_44_1   DS    0H  &TYPE
*ZC    209         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_44_E   DS    0H  &TYPE
*            MOVE      HW      TO   FLT-LNG
*ZC    210         MOVE  HW,TO,FLT_LNG
         LH    0,HW
         CDFBR 0,0
         STD   0,FLT_LNG
*            SUBTRACT  HW      FROM FLT-LNG
*ZC    211         SUBTRACT HW,FROM,FLT_LNG
         LH    ZC_R0,HW
         CDFBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_LNG
         SDBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_LNG
*            IF   FLT-LNG = ZERO                                       
*ZC    212         IF    FLT_LNG,=,ZERO
         LD    0,FLT_LNG
         LTDBR 0,0
         BRC   15-ZC_EQ,PG_IF_45_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    213         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    213         ELSE
         J     PG_IF_45_E
PG_IF_45_1   DS    0H  &TYPE
*ZC    213         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_45_E   DS    0H  &TYPE
*            MOVE      HW      TO   FLT-EXT
*ZC    214         MOVE  HW,TO,FLT_EXT
         LH    0,HW
         CXFBR ZC_F0,0
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  HW      FROM FLT-EXT
*ZC    215         SUBTRACT HW,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LH    ZC_R0,HW
         CXFBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    216         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_46_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    217         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    217         ELSE
         J     PG_IF_46_E
PG_IF_46_1   DS    0H  &TYPE
*ZC    217         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_46_E   DS    0H  &TYPE
*            MOVE      FW      TO   FLT-LNG
*ZC    218         MOVE  FW,TO,FLT_LNG
         L     0,FW
         CDFBR 0,0
         STD   0,FLT_LNG
*            SUBTRACT  FW      FROM FLT-LNG
*ZC    219         SUBTRACT FW,FROM,FLT_LNG
         L     ZC_R0,FW
         CDFBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_LNG
         SDBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_LNG
*            IF   FLT-LNG = ZERO                                       
*ZC    220         IF    FLT_LNG,=,ZERO
         LD    0,FLT_LNG
         LTDBR 0,0
         BRC   15-ZC_EQ,PG_IF_47_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    221         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    221         ELSE
         J     PG_IF_47_E
PG_IF_47_1   DS    0H  &TYPE
*ZC    221         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_47_E   DS    0H  &TYPE
*            MOVE      FW      TO   FLT-EXT
*ZC    222         MOVE  FW,TO,FLT_EXT
         L     0,FW
         CXFBR ZC_F0,ZC_R0
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  FW      FROM FLT-EXT
*ZC    223         SUBTRACT FW,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         L     ZC_R0,FW
         CXFBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    224         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_48_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    225         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    225         ELSE
         J     PG_IF_48_E
PG_IF_48_1   DS    0H  &TYPE
*ZC    225         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_48_E   DS    0H  &TYPE
*            MOVE      DW      TO   FLT-LNG
*ZC    226         MOVE  DW,TO,FLT_LNG
         LG    0,DW
         CDGBR 0,0
         STD   0,FLT_LNG
*            SUBTRACT  DW      FROM FLT-LNG
*ZC    227         SUBTRACT DW,FROM,FLT_LNG
         LG    ZC_R0,DW
         CDGBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_LNG
         SDBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_LNG
*            IF   FLT-EXT = ZERO                                       
*ZC    228         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_49_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    229         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    229         ELSE
         J     PG_IF_49_E
PG_IF_49_1   DS    0H  &TYPE
*ZC    229         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_49_E   DS    0H  &TYPE
*            MOVE      DW      TO   FLT-EXT
*ZC    230         MOVE  DW,TO,FLT_EXT
         LG    0,DW
         CXGBR ZC_F0,ZC_R0
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  DW      FROM FLT-EXT
*ZC    231         SUBTRACT DW,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LG    ZC_R0,DW
         CXGBR ZC_F0,ZC_R0
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    232         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_50_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    233         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    233         ELSE
         J     PG_IF_50_E
PG_IF_50_1   DS    0H  &TYPE
*ZC    233         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_50_E   DS    0H  &TYPE
*            MOVE      QW      TO   FLT-EXT
*ZC    234         MOVE  QW,TO,FLT_EXT
         LG    ZC_R0,QW
         LG    ZC_R1,8+QW
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  QW      FROM FLT-EXT
*ZC    235         SUBTRACT QW,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         LG    ZC_R0,QW
         LG    ZC_R1,8+QW
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LH,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    236         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_51_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    237         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    237         ELSE
         J     PG_IF_51_E
PG_IF_51_1   DS    0H  &TYPE
*ZC    237         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_51_E   DS    0H  &TYPE
*            MOVE      PD      TO   FLT-EXT
*ZC    238         MOVE  PD,TO,FLT_EXT
         ZAP   ZCVT_PWORK2,PD
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  PD      FROM FLT-EXT
*ZC    239         SUBTRACT PD,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         ZAP   ZCVT_PWORK1,PD
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    240         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_52_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    241         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    241         ELSE
         J     PG_IF_52_E
PG_IF_52_1   DS    0H  &TYPE
*ZC    241         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_52_E   DS    0H  &TYPE
*            MOVE      ZD      TO   FLT-EXT
*ZC    242         MOVE  ZD,TO,FLT_EXT
         PACK  ZCVT_PWORK2(8),0+ZD(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+ZD(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+ZD(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            SUBTRACT  ZD      FROM FLT-EXT
*ZC    243         SUBTRACT ZD,FROM,FLT_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         PACK  ZCVT_PWORK1(8),0+ZD(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+ZD(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+ZD(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         SXBR  ZC_F1,ZC_F0
         STD   ZC_F1,FLT_EXT
         STD   ZC_F3,8+FLT_EXT
*            IF   FLT-EXT = ZERO                                       
*ZC    244         IF    FLT_EXT,=,ZERO
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LTXBR 0,0
         BRC   15-ZC_EQ,PG_IF_53_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    245         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    245         ELSE
         J     PG_IF_53_E
PG_IF_53_1   DS    0H  &TYPE
*      * TEST MULTIPLY
*ZC    245         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_53_E   DS    0H  &TYPE
*            MOVE      10      TO   FLT-SRT
*ZC    247         MOVE  10,TO,FLT_SRT
          LARL  ZC_R1,=EB'10'
          MVC   FLT_SRT,0(ZC_R1)
*            MOVE      123456  TO   HFP-SRT
*ZC    248         MOVE  123456,TO,HFP_SRT
          LARL  ZC_R1,=EH'123456'
          MVC   HFP_SRT,0(ZC_R1)
*            MULTIPLY  HFP-SRT BY   FLT-SRT
*ZC    249         MULTIPLY HFP_SRT,BY,FLT_SRT
         LE    ZC_F4,HFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
        LE     ZC_R1,FLT_SRT
        LDEBR  ZC_R1,ZC_R1
        MDBR   ZC_F0,ZC_R1
        LEDBR  ZC_F0,ZC_F0
        STE    ZC_F0,FLT_SRT
*            IF   FLT-SRT = 1234560
*ZC    250         IF    FLT_SRT,=,1234560
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'1234560'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_54_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    251         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    251         ELSE
         J     PG_IF_54_E
PG_IF_54_1   DS    0H  &TYPE
*ZC    251         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_54_E   DS    0H  &TYPE
*            MOVE      10              TO   FLT-LNG
*ZC    252         MOVE  10,TO,FLT_LNG
          LARL  ZC_R1,=DB'10'
          MVC   FLT_LNG,0(ZC_R1)
*            MOVE      123456789012345 TO   HFP-LNG
*ZC    253         MOVE  123456789012345,TO,HFP_LNG
          LARL  ZC_R1,=DH'123456789012345'
          MVC   HFP_LNG,0(ZC_R1)
*            MULTIPLY  HFP-LNG         BY   FLT-LNG
*ZC    254         MULTIPLY HFP_LNG,BY,FLT_LNG
         LD    ZC_F4,HFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         MDB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 1234567890123450                           
*ZC    255         IF    FLT_LNG,=,1234567890123450
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'1234567890123450'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_55_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    256         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    256         ELSE
         J     PG_IF_55_E
PG_IF_55_1   DS    0H  &TYPE
*ZC    256         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_55_E   DS    0H  &TYPE
*            MOVE      10                            TO FLT-EXT
*ZC    257         MOVE  10,TO,FLT_EXT
          LARL  ZC_R1,=LB'10'
          MVC   FLT_EXT,0(ZC_R1)
*            MOVE      12345678901234567890123456789 TO HFP-EXT
*ZC    258         MOVE  12345678901234567890123456789,TO,HFP_EXT
          LARL  ZC_R1,=LH'12345678901234567890123456789'
          MVC   HFP_EXT,0(ZC_R1)
*            MULTIPLY  HFP-EXT                       BY FLT-EXT
*ZC    259         MULTIPLY HFP_EXT,BY,FLT_EXT
         LD    ZC_F4,HFP_EXT
         LD    ZC_F6,8+HFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         MXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789012345678901234567890             
*ZC    260         IF    FLT_EXT,=,123456789012345678901234567890
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789012345678901234567890'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_56_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    261         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    261         ELSE
         J     PG_IF_56_E
PG_IF_56_1   DS    0H  &TYPE
*ZC    261         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_56_E   DS    0H  &TYPE
*            MOVE      10       TO   FLT-SRT
*ZC    262         MOVE  10,TO,FLT_SRT
          LARL  ZC_R1,=EB'10'
          MVC   FLT_SRT,0(ZC_R1)
*            MOVE      123456   TO   BFP-SRT
*ZC    263         MOVE  123456,TO,BFP_SRT
          LARL  ZC_R1,=EB'123456'
          MVC   BFP_SRT,0(ZC_R1)
*            MULTIPLY  BFP-SRT  BY   FLT-SRT
*ZC    264         MULTIPLY BFP_SRT,BY,FLT_SRT
         LE    ZC_F4,BFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_EB,PFPO_RNDX
               )
         PFPO 
        LE     ZC_R1,FLT_SRT
        LDEBR  ZC_R1,ZC_R1
        MDBR   ZC_F0,ZC_R1
        LEDBR  ZC_F0,ZC_F0
        STE    ZC_F0,FLT_SRT
*            IF   FLT-SRT = 1234560                                    
*ZC    265         IF    FLT_SRT,=,1234560
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'1234560'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_57_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    266         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    266         ELSE
         J     PG_IF_57_E
PG_IF_57_1   DS    0H  &TYPE
*ZC    266         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_57_E   DS    0H  &TYPE
*            MOVE      10                TO   FLT-LNG
*ZC    267         MOVE  10,TO,FLT_LNG
          LARL  ZC_R1,=DB'10'
          MVC   FLT_LNG,0(ZC_R1)
*            MOVE      123456789012345   TO   BFP-LNG
*ZC    268         MOVE  123456789012345,TO,BFP_LNG
          LARL  ZC_R1,=DB'123456789012345'
          MVC   BFP_LNG,0(ZC_R1)
*            MULTIPLY  BFP-LNG           BY   FLT-LNG
*ZC    269         MULTIPLY BFP_LNG,BY,FLT_LNG
         LD    ZC_F0,BFP_LNG
         MDB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 1234567890123450                           
*ZC    270         IF    FLT_LNG,=,1234567890123450
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'1234567890123450'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_58_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    271         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    271         ELSE
         J     PG_IF_58_E
PG_IF_58_1   DS    0H  &TYPE
*ZC    271         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_58_E   DS    0H  &TYPE
*            MOVE      10                                TO FLT-EXT
*ZC    272         MOVE  10,TO,FLT_EXT
          LARL  ZC_R1,=LB'10'
          MVC   FLT_EXT,0(ZC_R1)
*            MOVE      123456789012345678901234567890123 TO BFP-EXT
*ZC    273         MOVE  123456789012345678901234567890123,TO,BFP_EXT
          LARL  ZC_R1,=LB'123456789012345678901234567890123'
          MVC   BFP_EXT,0(ZC_R1)
*            MULTIPLY  BFP-EXT                           BY FLT-EXT
*ZC    274         MULTIPLY BFP_EXT,BY,FLT_EXT
         LD    ZC_F0,BFP_EXT
         LD    ZC_F2,8+BFP_EXT
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         MXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 1234567890123456789012345678901230         
*ZC    275         IF    FLT_EXT,=,1234567890123456789012345678901230
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'1234567890123456789012345678901230'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_59_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    276         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    276         ELSE
         J     PG_IF_59_E
PG_IF_59_1   DS    0H  &TYPE
*ZC    276         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_59_E   DS    0H  &TYPE
*            MOVE      10      TO   FLT-SRT
*ZC    277         MOVE  10,TO,FLT_SRT
          LARL  ZC_R1,=EB'10'
          MVC   FLT_SRT,0(ZC_R1)
*            MOVE      123456   TO  DFP-SRT
*ZC    278         MOVE  123456,TO,DFP_SRT
          LARL  ZC_R1,=ED'123456'
          MVC   DFP_SRT,0(ZC_R1)
*            MULTIPLY  DFP-SRT BY   FLT-SRT
*ZC    279         MULTIPLY DFP_SRT,BY,FLT_SRT
         LE    ZC_F4,DFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
        LE     ZC_R1,FLT_SRT
        LDEBR  ZC_R1,ZC_R1
        MDBR   ZC_F0,ZC_R1
        LEDBR  ZC_F0,ZC_F0
        STE    ZC_F0,FLT_SRT
*            IF   FLT-SRT = 1234560                                    
*ZC    280         IF    FLT_SRT,=,1234560
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'1234560'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_60_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    281         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    281         ELSE
         J     PG_IF_60_E
PG_IF_60_1   DS    0H  &TYPE
*ZC    281         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_60_E   DS    0H  &TYPE
*            MOVE      10                TO   FLT-LNG
*ZC    282         MOVE  10,TO,FLT_LNG
          LARL  ZC_R1,=DB'10'
          MVC   FLT_LNG,0(ZC_R1)
*            MOVE      123456789012345   TO   DFP-LNG
*ZC    283         MOVE  123456789012345,TO,DFP_LNG
          LARL  ZC_R1,=DD'123456789012345'
          MVC   DFP_LNG,0(ZC_R1)
*            MULTIPLY  DFP-LNG           BY   FLT-LNG
*ZC    284         MULTIPLY DFP_LNG,BY,FLT_LNG
         LD    ZC_F4,DFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         MDB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 1234567890123450                           
*ZC    285         IF    FLT_LNG,=,1234567890123450
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'1234567890123450'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_61_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    286         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    286         ELSE
         J     PG_IF_61_E
PG_IF_61_1   DS    0H  &TYPE
*ZC    286         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_61_E   DS    0H  &TYPE
*            MOVE      10                                TO FLT-EXT
*ZC    287         MOVE  10,TO,FLT_EXT
          LARL  ZC_R1,=LB'10'
          MVC   FLT_EXT,0(ZC_R1)
*            MOVE      123456789012345678901234567890123 TO DFP-EXT
*ZC    288         MOVE  123456789012345678901234567890123,TO,DFP_EXT
          LARL  ZC_R1,=LD'123456789012345678901234567890123'
          MVC   DFP_EXT,0(ZC_R1)
*            MULTIPLY  DFP-EXT                           BY FLT-EXT
*ZC    289         MULTIPLY DFP_EXT,BY,FLT_EXT
         LD    ZC_F4,DFP_EXT
         LD    ZC_F6,8+DFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         MXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 1234567890123456789012345678901230         
*ZC    290         IF    FLT_EXT,=,1234567890123456789012345678901230
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'1234567890123456789012345678901230'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_62_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    291         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    291         ELSE
         J     PG_IF_62_E
PG_IF_62_1   DS    0H  &TYPE
*ZC    291         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_62_E   DS    0H  &TYPE
*            MOVE      10      TO   FLT-SRT
*ZC    292         MOVE  10,TO,FLT_SRT
          LARL  ZC_R1,=EB'10'
          MVC   FLT_SRT,0(ZC_R1)
*            MOVE      12345   TO   HW
*ZC    293         MOVE  12345,TO,HW
          MVHHI HW,12345
*            MULTIPLY  HW      BY   FLT-SRT
*ZC    294         MULTIPLY HW,BY,FLT_SRT
         LH    ZC_R0,HW
         CDFBR ZC_F0,ZC_R0
        LE     ZC_R1,FLT_SRT
        LDEBR  ZC_R1,ZC_R1
        MDBR   ZC_F0,ZC_R1
        LEDBR  ZC_F0,ZC_F0
        STE    ZC_F0,FLT_SRT
*            IF   FLT-SRT = 123450                                     
*ZC    295         IF    FLT_SRT,=,123450
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'123450'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_63_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    296         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    296         ELSE
         J     PG_IF_63_E
PG_IF_63_1   DS    0H  &TYPE
*ZC    296         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_63_E   DS    0H  &TYPE
*            MOVE      10          TO   FLT-LNG
*ZC    297         MOVE  10,TO,FLT_LNG
          LARL  ZC_R1,=DB'10'
          MVC   FLT_LNG,0(ZC_R1)
*            MOVE      123456789   TO   FW
*ZC    298         MOVE  123456789,TO,FW
          LARL  ZC_R1,=F'123456789'
          MVC   FW,0(ZC_R1)
*            MULTIPLY  FW          BY   FLT-LNG
*ZC    299         MULTIPLY FW,BY,FLT_LNG
         L     ZC_R0,FW
         CDFBR ZC_F0,ZC_R0
         MDB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 1234567890                                 
*ZC    300         IF    FLT_LNG,=,1234567890
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'1234567890'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_64_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    301         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    301         ELSE
         J     PG_IF_64_E
PG_IF_64_1   DS    0H  &TYPE
*ZC    301         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_64_E   DS    0H  &TYPE
*            MOVE      10                TO   FLT-LNG
*ZC    302         MOVE  10,TO,FLT_LNG
          LARL  ZC_R1,=DB'10'
          MVC   FLT_LNG,0(ZC_R1)
*            MOVE      123456789012345   TO   DW
*ZC    303         MOVE  123456789012345,TO,DW
          LARL  ZC_R1,=FL8'123456789012345'
          MVC   DW,0(ZC_R1)
*            MULTIPLY  DW                BY   FLT-LNG
*ZC    304         MULTIPLY DW,BY,FLT_LNG
         LG    ZC_R0,DW
         CDGBR ZC_F0,ZC_R0
         MDB   ZC_F0,FLT_LNG
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 1234567890123450                           
*ZC    305         IF    FLT_LNG,=,1234567890123450
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'1234567890123450'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_65_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    306         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    306         ELSE
         J     PG_IF_65_E
PG_IF_65_1   DS    0H  &TYPE
*ZC    306         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_65_E   DS    0H  &TYPE
*            MOVE      10                                TO FLT-EXT
*ZC    307         MOVE  10,TO,FLT_EXT
          LARL  ZC_R1,=LB'10'
          MVC   FLT_EXT,0(ZC_R1)
*            MOVE      123456789012345678901234567890123 TO QW
*ZC    308         MOVE  123456789012345678901234567890123,TO,QW
          LARL  ZC_R1,=FL16'123456789012345678901234567890123'
          MVC   QW,0(ZC_R1)
*            MULTIPLY  QW                                BY FLT-EXT
*ZC    309         MULTIPLY QW,BY,FLT_EXT
         LG    ZC_R0,QW
         LG    ZC_R1,8+QW
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LH,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         MXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 1234567890123456789012345678901230         
*ZC    310         IF    FLT_EXT,=,1234567890123456789012345678901230
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'1234567890123456789012345678901230'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_66_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    311         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    311         ELSE
         J     PG_IF_66_E
PG_IF_66_1   DS    0H  &TYPE
*ZC    311         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_66_E   DS    0H  &TYPE
*            MOVE      10                               TO   FLT-EXT
*ZC    312         MOVE  10,TO,FLT_EXT
          LARL  ZC_R1,=LB'10'
          MVC   FLT_EXT,0(ZC_R1)
*            MOVE      123456789012345678901234567890   TO   PD
*ZC    313         MOVE  123456789012345678901234567890,TO,PD
          LARL  ZC_R1,=PL16'123456789012345678901234567890'
          MVC   PD,0(ZC_R1)
*            MULTIPLY  PD                               BY   FLT-EXT
*ZC    314         MULTIPLY PD,BY,FLT_EXT
         ZAP   ZCVT_PWORK1,PD
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         MXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 1234567890123456789012345678900            
*ZC    315         IF    FLT_EXT,=,1234567890123456789012345678900
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'1234567890123456789012345678900'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_67_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    316         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    316         ELSE
         J     PG_IF_67_E
PG_IF_67_1   DS    0H  &TYPE
*ZC    316         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_67_E   DS    0H  &TYPE
*            MOVE      10                               TO   FLT-EXT
*ZC    317         MOVE  10,TO,FLT_EXT
          LARL  ZC_R1,=LB'10'
          MVC   FLT_EXT,0(ZC_R1)
*            MOVE      123456789012345678901234567890   TO   ZD
*ZC    318         MOVE  123456789012345678901234567890,TO,ZD
          LARL  ZC_R1,=ZL32'123456789012345678901234567890'
          MVC   ZD,1(ZC_R1)
*            MULTIPLY  ZD                               BY   FLT-EXT
*ZC    319         MULTIPLY ZD,BY,FLT_EXT
         PACK  ZCVT_PWORK1(8),0+ZD(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK1(8),14+ZD(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK1(2),28+ZD(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK1
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LD    ZC_F1,FLT_EXT
         LD    ZC_F3,8+FLT_EXT
         MXBR  ZC_F0,ZC_F1
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 1234567890123456789012345678900            
*ZC    320         IF    FLT_EXT,=,1234567890123456789012345678900
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'1234567890123456789012345678900'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_68_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    321         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    321         ELSE
         J     PG_IF_68_E
PG_IF_68_1   DS    0H  &TYPE
*      * TEST DIVIDE
*ZC    321         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_68_E   DS    0H  &TYPE
*            MOVE      10      TO   HFP-SRT
*ZC    323         MOVE  10,TO,HFP_SRT
          LARL  ZC_R1,=EH'10'
          MVC   HFP_SRT,0(ZC_R1)
*            MOVE      1234560 TO   FLT-SRT
*ZC    324         MOVE  1234560,TO,FLT_SRT
          LARL  ZC_R1,=EB'1234560'
          MVC   FLT_SRT,0(ZC_R1)
*            DIVIDE    HFP-SRT INTO FLT-SRT
*ZC    325         DIVIDE HFP_SRT,INTO,FLT_SRT
         LE    ZC_F4,HFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_EB,PFPO_TYPE_EH,PFPO_RNDX
               )
         PFPO 
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,FLT_SRT
         DEBR  0,1
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = 123456
*ZC    326         IF    FLT_SRT,=,123456
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'123456'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_69_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    327         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    327         ELSE
         J     PG_IF_69_E
PG_IF_69_1   DS    0H  &TYPE
*ZC    327         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_69_E   DS    0H  &TYPE
*            MOVE      10               TO   HFP-LNG
*ZC    328         MOVE  10,TO,HFP_LNG
          LARL  ZC_R1,=DH'10'
          MVC   HFP_LNG,0(ZC_R1)
*            MOVE      1234567890123450 TO   FLT-LNG
*ZC    329         MOVE  1234567890123450,TO,FLT_LNG
          LARL  ZC_R1,=DB'1234567890123450'
          MVC   FLT_LNG,0(ZC_R1)
*            DIVIDE    HFP-LNG          INTO FLT-LNG
*ZC    330         DIVIDE HFP_LNG,INTO,FLT_LNG
         LD    ZC_F4,HFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DH,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,FLT_LNG
         DDBR  0,1
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 123456789012345                            
*ZC    331         IF    FLT_LNG,=,123456789012345
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'123456789012345'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_70_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    332         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    332         ELSE
         J     PG_IF_70_E
PG_IF_70_1   DS    0H  &TYPE
*ZC    332         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_70_E   DS    0H  &TYPE
*            MOVE      10                                 TO   HFP-EXT
*ZC    333         MOVE  10,TO,HFP_EXT
          LARL  ZC_R1,=LH'10'
          MVC   HFP_EXT,0(ZC_R1)
*            MOVE      1234567890123456789012345678901230 TO   FLT-EXT
*ZC    334         MOVE  1234567890123456789012345678901230,TO,FLT_EXT
          LARL  ZC_R1,=LB'1234567890123456789012345678901230'
          MVC   FLT_EXT,0(ZC_R1)
*            DIVIDE    HFP-EXT                            INTO FLT-EXT
*ZC    335         DIVIDE HFP_EXT,INTO,FLT_EXT
         LD    ZC_F4,HFP_EXT
         LD    ZC_F6,8+HFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LH,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         DXBR  ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LDR   ZC_F0,ZC_F4
         LDR   ZC_F2,ZC_F6
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789012345678901234567890123          
*ZC    336         IF    FLT_EXT,=,123456789012345678901234567890123
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789012345678901234567890123'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_71_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    337         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    337         ELSE
         J     PG_IF_71_E
PG_IF_71_1   DS    0H  &TYPE
*ZC    337         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_71_E   DS    0H  &TYPE
*            MOVE      10      TO   BFP-SRT
*ZC    338         MOVE  10,TO,BFP_SRT
          LARL  ZC_R1,=EB'10'
          MVC   BFP_SRT,0(ZC_R1)
*            MOVE      1234560 TO   FLT-SRT
*ZC    339         MOVE  1234560,TO,FLT_SRT
          LARL  ZC_R1,=EB'1234560'
          MVC   FLT_SRT,0(ZC_R1)
*            DIVIDE    BFP-SRT INTO FLT-SRT
*ZC    340         DIVIDE BFP_SRT,INTO,FLT_SRT
         LE    ZC_F0,BFP_SRT
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,FLT_SRT
         DEBR  0,1
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = 123456                                     
*ZC    341         IF    FLT_SRT,=,123456
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'123456'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_72_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    342         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    342         ELSE
         J     PG_IF_72_E
PG_IF_72_1   DS    0H  &TYPE
*ZC    342         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_72_E   DS    0H  &TYPE
*            MOVE      10               TO   BFP-LNG
*ZC    343         MOVE  10,TO,BFP_LNG
          LARL  ZC_R1,=DB'10'
          MVC   BFP_LNG,0(ZC_R1)
*            MOVE      1234567890123450 TO   FLT-LNG
*ZC    344         MOVE  1234567890123450,TO,FLT_LNG
          LARL  ZC_R1,=DB'1234567890123450'
          MVC   FLT_LNG,0(ZC_R1)
*            DIVIDE    BFP-LNG          INTO FLT-LNG
*ZC    345         DIVIDE BFP_LNG,INTO,FLT_LNG
         LD    ZC_F0,BFP_LNG
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,FLT_LNG
         DDBR  0,1
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 123456789012345                            
*ZC    346         IF    FLT_LNG,=,123456789012345
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'123456789012345'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_73_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    347         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    347         ELSE
         J     PG_IF_73_E
PG_IF_73_1   DS    0H  &TYPE
*ZC    347         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_73_E   DS    0H  &TYPE
*            MOVE      10                                 TO   BFP-EXT
*ZC    348         MOVE  10,TO,BFP_EXT
          LARL  ZC_R1,=LB'10'
          MVC   BFP_EXT,0(ZC_R1)
*            MOVE      1234567890123456789012345678901230 TO   FLT-EXT
*ZC    349         MOVE  1234567890123456789012345678901230,TO,FLT_EXT
          LARL  ZC_R1,=LB'1234567890123456789012345678901230'
          MVC   FLT_EXT,0(ZC_R1)
*            DIVIDE    BFP-EXT                            INTO FLT-EXT
*ZC    350         DIVIDE BFP_EXT,INTO,FLT_EXT
         LD    ZC_F0,BFP_EXT
         LD    ZC_F2,8+BFP_EXT
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         DXBR  ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LDR   ZC_F0,ZC_F4
         LDR   ZC_F2,ZC_F6
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789012345678901234567890123          
*ZC    351         IF    FLT_EXT,=,123456789012345678901234567890123
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789012345678901234567890123'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_74_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    352         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    352         ELSE
         J     PG_IF_74_E
PG_IF_74_1   DS    0H  &TYPE
*ZC    352         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_74_E   DS    0H  &TYPE
*            MOVE      10       TO   DFP-SRT
*ZC    353         MOVE  10,TO,DFP_SRT
          LARL  ZC_R1,=ED'10'
          MVC   DFP_SRT,0(ZC_R1)
*            MOVE      1234560  TO   FLT-SRT
*ZC    354         MOVE  1234560,TO,FLT_SRT
          LARL  ZC_R1,=EB'1234560'
          MVC   FLT_SRT,0(ZC_R1)
*            DIVIDE    DFP-SRT  INTO FLT-SRT
*ZC    355         DIVIDE DFP_SRT,INTO,FLT_SRT
         LE    ZC_F4,DFP_SRT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_EB,PFPO_TYPE_ED,PFPO_RNDX
               )
         PFPO 
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,FLT_SRT
         DEBR  0,1
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = 123456                                     
*ZC    356         IF    FLT_SRT,=,123456
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'123456'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_75_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    357         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    357         ELSE
         J     PG_IF_75_E
PG_IF_75_1   DS    0H  &TYPE
*ZC    357         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_75_E   DS    0H  &TYPE
*            MOVE      10               TO   DFP-LNG
*ZC    358         MOVE  10,TO,DFP_LNG
          LARL  ZC_R1,=DD'10'
          MVC   DFP_LNG,0(ZC_R1)
*            MOVE      1234567890123450 TO   FLT-LNG
*ZC    359         MOVE  1234567890123450,TO,FLT_LNG
          LARL  ZC_R1,=DB'1234567890123450'
          MVC   FLT_LNG,0(ZC_R1)
*            DIVIDE    DFP-LNG          INTO FLT-LNG
*ZC    360         DIVIDE DFP_LNG,INTO,FLT_LNG
         LD    ZC_F4,DFP_LNG
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_DB,PFPO_TYPE_DD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,FLT_LNG
         DDBR  0,1
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 123456789012345                            
*ZC    361         IF    FLT_LNG,=,123456789012345
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'123456789012345'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_76_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    362         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    362         ELSE
         J     PG_IF_76_E
PG_IF_76_1   DS    0H  &TYPE
*ZC    362         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_76_E   DS    0H  &TYPE
*            MOVE      10                                 TO   DFP-EXT
*ZC    363         MOVE  10,TO,DFP_EXT
          LARL  ZC_R1,=LD'10'
          MVC   DFP_EXT,0(ZC_R1)
*            MOVE      1234567890123456789012345678901230 TO   FLT-EXT
*ZC    364         MOVE  1234567890123456789012345678901230,TO,FLT_EXT
          LARL  ZC_R1,=LB'1234567890123456789012345678901230'
          MVC   FLT_EXT,0(ZC_R1)
*            DIVIDE    DFP-EXT                            INTO FLT-EXT
*ZC    365         DIVIDE DFP_EXT,INTO,FLT_EXT
         LD    ZC_F4,DFP_EXT
         LD    ZC_F6,8+DFP_EXT
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         DXBR  ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LDR   ZC_F0,ZC_F4
         LDR   ZC_F2,ZC_F6
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789012345678901234567890123          
*ZC    366         IF    FLT_EXT,=,123456789012345678901234567890123
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789012345678901234567890123'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_77_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    367         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    367         ELSE
         J     PG_IF_77_E
PG_IF_77_1   DS    0H  &TYPE
*ZC    367         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_77_E   DS    0H  &TYPE
*            MOVE      10      TO   HW
*ZC    368         MOVE  10,TO,HW
          MVHHI HW,10
*            MOVE      1234560 TO   FLT-SRT
*ZC    369         MOVE  1234560,TO,FLT_SRT
          LARL  ZC_R1,=EB'1234560'
          MVC   FLT_SRT,0(ZC_R1)
*            DIVIDE    HW      INTO FLT-SRT
*ZC    370         DIVIDE HW,INTO,FLT_SRT
         LH    ZC_R0,HW
         CEFBR ZC_F0,ZC_R0
         LER   ZC_F1,ZC_F0
         LE    ZC_F0,FLT_SRT
         DEBR  0,1
         STE   ZC_F0,FLT_SRT
*            IF   FLT-SRT = 123456                                     
*ZC    371         IF    FLT_SRT,=,123456
         LE    0,FLT_SRT
         LARL  ZC_R1,=EB'123456'
         CEB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_78_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    372         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    372         ELSE
         J     PG_IF_78_E
PG_IF_78_1   DS    0H  &TYPE
*ZC    372         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_78_E   DS    0H  &TYPE
*            MOVE      10               TO   FW
*ZC    373         MOVE  10,TO,FW
          MVHI  FW,10
*            MOVE      1234567890123450 TO   FLT-LNG
*ZC    374         MOVE  1234567890123450,TO,FLT_LNG
          LARL  ZC_R1,=DB'1234567890123450'
          MVC   FLT_LNG,0(ZC_R1)
*            DIVIDE    FW               INTO FLT-LNG
*ZC    375         DIVIDE FW,INTO,FLT_LNG
         L     ZC_R0,FW
         CDFBR ZC_F0,ZC_R0
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,FLT_LNG
         DDBR  0,1
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 123456789012345                            
*ZC    376         IF    FLT_LNG,=,123456789012345
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'123456789012345'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_79_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    377         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    377         ELSE
         J     PG_IF_79_E
PG_IF_79_1   DS    0H  &TYPE
*ZC    377         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_79_E   DS    0H  &TYPE
*            MOVE      10               TO   DW
*ZC    378         MOVE  10,TO,DW
          MVGHI DW,10
*            MOVE      1234567890123450 TO   FLT-LNG
*ZC    379         MOVE  1234567890123450,TO,FLT_LNG
          LARL  ZC_R1,=DB'1234567890123450'
          MVC   FLT_LNG,0(ZC_R1)
*            DIVIDE    DW               INTO FLT-LNG
*ZC    380         DIVIDE DW,INTO,FLT_LNG
         LG    ZC_R0,DW
         CDGBR ZC_F0,ZC_R0
         LDR   ZC_F1,ZC_F0
         LD    ZC_F0,FLT_LNG
         DDBR  0,1
         STD   ZC_F0,FLT_LNG
*            IF   FLT-LNG = 123456789012345                            
*ZC    381         IF    FLT_LNG,=,123456789012345
         LD    0,FLT_LNG
         LARL  ZC_R1,=DB'123456789012345'
         CDB   0,0(ZC_R1)
         BRC   15-ZC_EQ,PG_IF_80_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    382         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    382         ELSE
         J     PG_IF_80_E
PG_IF_80_1   DS    0H  &TYPE
*ZC    382         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_80_E   DS    0H  &TYPE
*            MOVE      10                                 TO   QW
*ZC    383         MOVE  10,TO,QW
          LARL  ZC_R1,=FL16'10'
          MVC   QW,0(ZC_R1)
*            MOVE      1234567890123456789012345678901230 TO   FLT-EXT
*ZC    384         MOVE  1234567890123456789012345678901230,TO,FLT_EXT
          LARL  ZC_R1,=LB'1234567890123456789012345678901230'
          MVC   FLT_EXT,0(ZC_R1)
*            DIVIDE    QW                                 INTO FLT-EXT
*ZC    385         DIVIDE QW,INTO,FLT_EXT
         LMG   ZC_R0,ZC_R1,QW
         L     ZC_R15,ZCVT_CVTQTLB   CVT Q IN ZC_R0-ZC_R1              X
                                     TO LB IN ZC_F4-ZC_F6
         BASR  ZC_R14,ZC_R15
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LB,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         DXBR  ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LDR   ZC_F0,ZC_F4
         LDR   ZC_F2,ZC_F6
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789012345678901234567890123          
*ZC    386         IF    FLT_EXT,=,123456789012345678901234567890123
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789012345678901234567890123'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_81_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    387         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    387         ELSE
         J     PG_IF_81_E
PG_IF_81_1   DS    0H  &TYPE
*ZC    387         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_81_E   DS    0H  &TYPE
*            MOVE      10                                  TO   PD     
*ZC    388         MOVE  10,TO,PD
          LARL  ZC_R1,=PL16'10'
          MVC   PD,0(ZC_R1)
*            MOVE      1234567890123456789012345678901230  TO   FLT-EXT
*ZC    389         MOVE  1234567890123456789012345678901230,TO,FLT_EXT
          LARL  ZC_R1,=LB'1234567890123456789012345678901230'
          MVC   FLT_EXT,0(ZC_R1)
*            DIVIDE    PD                                  INTO FLT-EXT
*ZC    390         DIVIDE PD,INTO,FLT_EXT
         ZAP   ZCVT_PWORK2,PD
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         DXBR  ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LDR   ZC_F0,ZC_F4
         LDR   ZC_F2,ZC_F6
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789012345678901234567890123          
*ZC    391         IF    FLT_EXT,=,123456789012345678901234567890123
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789012345678901234567890123'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_82_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    392         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    392         ELSE
         J     PG_IF_82_E
PG_IF_82_1   DS    0H  &TYPE
*ZC    392         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_82_E   DS    0H  &TYPE
*            MOVE      10                                  TO   ZD
*ZC    393         MOVE  10,TO,ZD
          LARL  ZC_R1,=ZL32'10'
          MVC   ZD,1(ZC_R1)
*            MOVE      1234567890123456789012345678901230  TO   FLT-EXT
*ZC    394         MOVE  1234567890123456789012345678901230,TO,FLT_EXT
          LARL  ZC_R1,=LB'1234567890123456789012345678901230'
          MVC   FLT_EXT,0(ZC_R1)
*            DIVIDE    ZD                                  INTO FLT-EXT
*ZC    395         DIVIDE ZD,INTO,FLT_EXT
         PACK  ZCVT_PWORK2(8),0+ZD(15) PACK #1 FULL
         PACK  7+ZCVT_PWORK2(8),14+ZD(15) PACK #2 FULL
         PACK  14+ZCVT_PWORK2(2),28+ZD(3)  PACK #3 FINAL
         LMG   ZC_R0,ZC_R1,ZCVT_PWORK2
         CXSTR ZC_F4,ZC_R0
         LRL   ZC_R0,=AL1(PFPO_RADIX,PFPO_TYPE_LB,PFPO_TYPE_LD,PFPO_RNDX
               )
         PFPO 
         LDR   ZC_F1,ZC_F0
         LDR   ZC_F3,ZC_F2
         LD    ZC_F0,FLT_EXT
         LD    ZC_F2,8+FLT_EXT
         DXBR  ZC_F0,ZC_F1
         LDR   ZC_F4,ZC_F0
         LDR   ZC_F6,ZC_F2
         LDR   ZC_F0,ZC_F4
         LDR   ZC_F2,ZC_F6
         STD   ZC_F0,FLT_EXT
         STD   ZC_F2,8+FLT_EXT
*            IF   FLT-EXT = 123456789012345678901234567890123          
*ZC    396         IF    FLT_EXT,=,123456789012345678901234567890123
         LD    0,FLT_EXT
         LD    2,8+FLT_EXT
         LARL  ZC_R1,=LB'123456789012345678901234567890123'
         LD    ZC_F1,0(ZC_R1)
         LD    ZC_F3,8(ZC_R1)
         CXBR  0,1
         BRC   15-ZC_EQ,PG_IF_83_1
*                 PERFORM GOOD ELSE PERFORM BAD.
*ZC    397         PERFORM GOOD
         LARL  ZC_R14,PG_GOOD
         LARL  ZC_R0,PG_GOOD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
*ZC    397         ELSE
         J     PG_IF_83_E
PG_IF_83_1   DS    0H  &TYPE
*ZC    397         PERFORM BAD
         LARL  ZC_R14,PG_BAD
         LARL  ZC_R0,PG_BAD_END+6
         L     ZC_R15,ZCVT_PERFORM
         BASR  ZC_R1,ZC_R15
PG_IF_83_E   DS    0H  &TYPE
*            DISPLAY 'TESTBFP1 GOOD TESTS =' GOOD
*ZC    398         DISPLAY 'TESTBFP1 GOOD TESTS =',GOOD
         LA    ZC_R3,ZCVT_WORKAREA  ZC_R3=CVT LIST WORK AREA
         LARL  ZC_R0,=CL22'TESTBFP1 GOOD TESTS =' PAD TO EVEN LEN LIT
         LA    ZC_R1,21
         LA    ZC_R2,C'X'
         STM   ZC_R0,ZC_R2,0(ZC_R3)  SET DISPLAY LIST ENTRY
         LA    ZC_R0,GOOD
         LA    ZC_R1,3  RPI 1182 WAS &SYM_LEN(&FIELD_IX)
         LA    ZC_R2,C'P'
         STM   ZC_R0,ZC_R2,12(ZC_R3)  SET DISPLAY LIST ENTRY
         OI    24-4(ZC_R3),X'80' SET VL BIT IN LAST WORD OF PARM LIST
         LR    ZC_R1,ZC_R3
         L     ZC_R15,ZCVT_DISPLAY
         BASR  ZC_R14,ZC_R15
*            STOP RUN.
*ZC    399         STOP  RUN
         LH    ZC_R1,RETURN_CODE      PASS RETURN CODE IN R1
         L     ZC_R15,ZCVT_GOBACK
         BR    ZC_R15
*        GOOD.
PG_MAINLINE_END L ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_GOOD  DS    0H
*            ADD 1 TO GOOD.
*ZC    401         ADD   1,TO,GOOD
         BRAS  ZC_R14,3 SET ZC_R1 TO A(INLINE LIT) AND SKIP OVER IT
         DC    PL2'1'
         AP    GOOD,0(2,ZC_R14)
*        BAD.
PG_GOOD_END L  ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
PG_BAD   DS    0H
*            MOVE 16 TO RETURN-CODE
*ZC    403         MOVE  16,TO,RETURN_CODE
          MVHHI RETURN_CODE,16
*            STOP RUN.
*ZC    404         STOP  RUN
         LH    ZC_R1,RETURN_CODE      PASS RETURN CODE IN R1
         L     ZC_R15,ZCVT_GOBACK
         BR    ZC_R15
PG_BAD_END L   ZC_R15,ZCVT_PMCHECK
         BASR  ZC_R14,ZC_R15 CHECK FOR END OF CURRENT PERFORM
SN_END_PROCEDURE DS 0H SECTION
*        PROCEDURE END
         LH    ZC_R1,RETURN_CODE
         L     ZC_R15,ZCVT_GOBACK
         BASR  ZC_R14,ZC_R15
         LTORG 
*    ZCOBOL WORKING STORAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
*    01  ZC_SAVEAREA                    00000000 00000048 1   X   X(72)X
                      
*    01  ZC_WS_ID                       00000048 00000008 1   X   X(8) X
                     ''WS*WS*WS'' 
*    01  ZC_WS_START                    00000050 00000004 1   A        X
                      
*    01  ZC_WS_LEN                      00000054 00000004 1   F   9(9) X
                      
*    01  FILLER                         00000058 00000000 1   X        X
                      
*    01  FLT_SRT                        00000058 00000004 1   4        X
                      
*    01  FLT_LNG                        0000005C 00000008 1   5        X
                      
*    01  FLT_EXT                        00000064 00000010 1   6        X
                      
*    01  HFP_SRT                        00000074 00000004 1   1        X
                     1234567 
*    01  HFP_LNG                        00000078 00000008 1   2        X
                     123456789012345 
*    01  HFP_EXT                        00000080 00000010 1   3        X
                     123456789012345678901234567890 
*    01  BFP_SRT                        00000090 00000004 1   4        X
                     1234567 
*    01  BFP_LNG                        00000094 00000008 1   5        X
                     1234567890123456 
*    01  BFP_EXT                        0000009C 00000010 1   6        X
                     1234567890123456789012345678901234 
*    01  DFP_SRT                        000000AC 00000004 1   7        X
                     1234567 
*    01  DFP_LNG                        000000B0 00000008 1   8        X
                     1234567890123456 
*    01  DFP_EXT                        000000B8 00000010 1   9        X
                     1234567890123456789012345678901234 
*    01  HW                             000000C8 00000002 1   H   9(4) X
                     1234 
*    01  FW                             000000CA 00000004 1   F   9(9) X
                     123456789 
*    01  DW                             000000CE 00000008 1   G   9(18)X
                     1234567890123456 
*    01  QW                             000000D6 00000010 1   Q   9(39)X
                     1234567890123456789012345678901234 
*    01  PD                             000000E6 00000010 1   P   9(31)X
                     1234567890123456789012345678901 
*    01  ZD                             000000F6 0000001F 1   Z   9(31)X
                     1234567890123456789012345678901 
*    01  GOOD                           00000115 00000003 1   P   9(4) X
                     0 
*    01  DEBUG_ITEM                     00000118 00000058 1   X        X
                      
*    02  DEBUG_LINE                     00000118 00000006 1   X   X(6) X
                      
*    02  FILLER                         0000011E 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_NAME                     0000011F 0000001E 1   X   X(30)X
                      
*    02  FILLER                         0000013D 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_1                    0000013E 00000004 1   Z   9999 X
                      
*    02  FILLER                         00000142 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_2                    00000143 00000004 1   Z   9999 X
                      
*    02  FILLER                         00000147 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_SUB_3                    00000148 00000004 1   Z   9999 X
                      
*    02  FILLER                         0000014C 00000001 1   X   X    X
                     SPACE 
*    02  DEBUG_CONTENTS                 0000014D 00000023 1   X   X(35)X
                      
*    01  TRUE                           00000170 00000001 1   Z   9    X
                     1 
*    01  FALSE                          00000171 00000001 1   Z   9    X
                     0 
*    01  RETURN_CODE                    00000172 00000002 1   H   9(4) X
                     0 
ZC_WSLOC LOCTR 
ZC_WS_LOC_1  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_SAVEAREA DS CL72
ZC_WS_LOC_2  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_ID DC CL8'WS*WS*WS'
ZC_WS_LOC_3  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_START DS AL4
ZC_WS_LOC_4  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZC_WS_LEN DS FL4
ZC_WS_LOC_5  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DS  0CL0
ZC_WS_LOC_6  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FLT_SRT  DS EBL4
ZC_WS_LOC_7  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FLT_LNG  DS DBL8
ZC_WS_LOC_8  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FLT_EXT  DS LBL16
ZC_WS_LOC_9  EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HFP_SRT  DC EHL4'1234567'
ZC_WS_LOC_10 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HFP_LNG  DC DHL8'123456789012345'
ZC_WS_LOC_11 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HFP_EXT  DC LHL16'123456789012345678901234567890'
ZC_WS_LOC_12 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BFP_SRT  DC EBL4'1234567'
ZC_WS_LOC_13 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BFP_LNG  DC DBL8'1234567890123456'
ZC_WS_LOC_14 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
BFP_EXT  DC LBL16'1234567890123456789012345678901234'
ZC_WS_LOC_15 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFP_SRT  DC EDL4'1234567'
ZC_WS_LOC_16 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFP_LNG  DC DDL8'1234567890123456'
ZC_WS_LOC_17 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DFP_EXT  DC LDL16'1234567890123456789012345678901234'
ZC_WS_LOC_18 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
HW       DC AL2(1234)                  RPI 1065
ZC_WS_LOC_19 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FW       DC AL4(123456789)                  RPI 1065
ZC_WS_LOC_20 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DW       DC FL8'1234567890123456'                  RPI 1065
ZC_WS_LOC_21 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
QW       DC FL16'1234567890123456789012345678901234'                 RPX
               I 1065
ZC_WS_LOC_22 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
PD       DC PL16'1234567890123456789012345678901'
ZC_WS_LOC_23 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
ZD       DC ZL31'1234567890123456789012345678901'
ZC_WS_LOC_24 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
GOOD     DC PL3'0'
ZC_WS_LOC_25 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_ITEM DS 0CL88
ZC_WS_LOC_26 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_LINE DS CL6
ZC_WS_LOC_27 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_28 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_NAME DS CL30
ZC_WS_LOC_29 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_30 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_1 DS ZL4
ZC_WS_LOC_31 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_32 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_2 DS ZL4
ZC_WS_LOC_33 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_34 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_SUB_3 DS ZL4
ZC_WS_LOC_35 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
         DC CL1' '
ZC_WS_LOC_36 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
DEBUG_CONTENTS DS CL35
ZC_WS_LOC_37 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
TRUE     DC CL1'1'
ZC_WS_LOC_38 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
FALSE    DC CL1'0'
ZC_WS_LOC_39 EQU *-ZC_WS CHECK &SYM_NAME(&I) WS LOC
RETURN_CODE DC AL2(0)                  RPI 1065
*    ZCOBOL LINKAGE SECTION DATA ITEMS 
*    LVL DATA NAME                      ADDR     LEN      DUP TYP PIC  X
                     VALUE 
ZC_WSLOC LOCTR 
ZC_WSLOC LOCTR 
ZC_WS_DIFF EQU  *-ZC_WS-372  DIFF BETWEEN ALLOC AND CALC WS
ZC_WS_END DS   0D
         MNOTE *,'ZCOBOL TOTAL SYMBOLS                 = 39'
         MNOTE *,'ZCOBOL TOTAL SYMBOL DUPLICATES       = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL MAX DUP CHAIN    = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LEVEL 88         = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL SET INDEXES      = 0'
         MNOTE *,'ZCOBOL TOTAL SYMBOL LINKAGE SECTIONS = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE SECTIONS      = 0'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPHS    = 3'
         MNOTE *,'ZCOBOL TOTAL PROCEDURE PARAGRAPH DUP = 0'
         END 
