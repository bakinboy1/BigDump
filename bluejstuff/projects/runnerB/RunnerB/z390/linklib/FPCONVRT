FPCONVRT  MZ390 START
AZ390I Copyright 2011 Automated Software Tools Corporation
AZ390I z390 is licensed under GNU General Public License
AZ390I program = linklib\FPCONVRT
AZ390I options = W:\work\z390\z390.OPT=(time(60)) bal notiming sysmac(mac) 
  syscpy(mac) stats sysmac(mac+linklib) systerm(linklib\rtlink)
External Symbol Definitions
 ESD=0002 LOC=00000000 LEN=00001738 TYPE=CST NAME=FPCONVRT
Assembler Listing
000000                                        (1/1)1          ARCHLVL 
000000                                       (2/11)2+         MNOTE 'ARCHLVL=7 ARCHSFX=G'
000000                                        (1/3)4 fpconvrt FPCONVRT Type=Rsect,ArchLvl=7,Linkage=OS,Regs=GR
000000                                      (3/159)6+***********************************************************************
000000                                      (3/160)7+*        FPCON - Floating Point Conversion Request Block              *
000000                                      (3/161)8+*                                                                     *
000000                                      (3/162)9+*        For conversion from a string to a floating point value:      *
000000                                     (3/163)10+*        * ValueE, ValueD or ValueL will contain the result,          *
000000                                     (3/164)11+*          depending on the ValueLen. The result will be usable       *
000000                                     (3/165)12+*          only if the return code is less than 12.                   *
000000                                     (3/166)13+*        * StringAddr and StringSize must contain the address         *
000000                                     (3/167)14+*          and length of the string to be converted.                  *
000000                                     (3/168)15+*        * ValueLen must be set.                                      *
000000                                     (3/169)16+*        * If Base, Zero, Exponent, ExpAlt and Decimal                *
000000                                     (3/170)17+*          are not set, defaults will be provided.                    *
000000                                     (3/171)18+*                                                                     *
000000                                     (3/172)19+*        For conversion from a floating point value to a string:      *
000000                                     (3/173)20+*        * ValueE, ValueD or ValueL must contain the value to         *
000000                                     (3/174)21+*          be converted, depending on the ValueLen.                   *
000000                                     (3/175)22+*        * StringAddr and StringSize must contain the address         *
000000                                     (3/176)23+*          and length of the buffer to be used for the result.        *
000000                                     (3/177)24+*          StringLen will be set to the actual length of the          *
000000                                     (3/178)25+*          result if the return code is less than 8.                  *
000000                                     (3/179)26+*        * ValueLen must be set.                                      *
000000                                     (3/180)27+*        * If Base, Zero, Exponent, Decimal, Plus and Minus           *
000000                                     (3/181)28+*          are not set, defaults will be provided.                    *
000000                                     (3/182)29+*        * MaxDigits must be from 0 to 34.  If zero, a default        *
000000                                     (3/183)30+*          will be computed from the base and length.                 *
000000                                     (3/184)31+*        * MaxLeading must be non-negative.  Maximum leading          *
000000                                     (3/185)32+*          digits when using exponential notation.                    *
000000                                     (3/186)33+*        * MinDecimal must be -1 or greater. Minimum digits after     *
000000                                     (3/187)34+*          the decimal point. (-1: remove decimal point if no         *
000000                                     (3/188)35+*          non-zero decimal digits). Cannot be 0 or -1 if             *
000000                                     (3/189)36+*          MaxLeading is zero.                                        *
000000                                     (3/190)37+*        * MaxDecimal must be non-negative.  If positive, maximum     *
000000                                     (3/191)38+*          decimal digits (including leading zeros) without using     *
000000                                     (3/192)39+*          exponential notation.                                      *
000000                                     (3/193)40+*        * MinExpon must be 0-4.  If 0, exponent will be supressed    *
000000                                     (3/194)41+*          if zero.                                                   *
000000                                     (3/195)42+*        * If ValuePlus is not set, leading plus sign will be         *
000000                                     (3/196)43+*          supressed.                                                 *
000000                                     (3/197)44+*        * If ExponPlus is not set, leading exponent plus sign        *
000000                                     (3/198)45+*          will be supressed.                                         *
000000                                     (3/199)46+*                                                                     *
000000                                     (3/200)47+***********************************************************************
000000                                     (3/201)48+Fpcon        DSECT ,           Floating Point Conversion Request Block
000000                                     (3/204)49+FpconSave       DS 18FD           Save area used by FPCONVRT
000090                                     (3/206)50+FpconValueE     DS 0E              Short floating point value
000090                                     (3/207)51+FpconValueD     DS 0D              Long floating point value
000090                                     (3/208)52+FpconValueL     DS L               Extended floating point value
0000A0                                     (3/209)53+FpconStringAddr DS AD             Address of string buffer
0000A8                                     (3/210)54+FpconReturnCode DS F               Return code (output)
0000AC                  00000000           (3/211)55+FpconRetOk     EQU 0                   Success
0000AC                  00000004           (3/212)56+FpconRetUndFlo EQU 4                   String value is too small
0000AC                  00000004           (3/213)57+FpconRetDenorm EQU 4                   FP value is denormalized
0000AC                  00000008           (3/214)58+FpconRetOvrFlo EQU 8                   String value is too big
0000AC                  00000008           (3/215)59+FpconRetInf    EQU 8                   IEEE FP value is an infinity
0000AC                  0000000C           (3/216)60+FpconRetNan    EQU 12                  IEEE FP value is a NAN
0000AC                  0000000C           (3/217)61+FpconRetBadStr EQU 12                  Invalid floating point string
0000AC                  00000010           (3/218)62+FpconRetBadPrm EQU 16                  Invalid parameters
0000AC                                     (3/219)63+FpconStringSize DS H               Size of string buffer
0000AE                                     (3/220)64+FpconStringLen  DS H               Length of string (output)
0000B0                                     (3/221)65+*                                  Offset to bad character (RetBadStr)
0000B0                                     (3/222)66+FpconMaxDigits  DS H               Maximum non-zero digits generated
0000B2                                     (3/223)67+FpconMaxLeading DS H               Maximum digits before decimal point
0000B4                                     (3/224)68+FpconMinDecimal DS H               Minimum digits after decimal point
0000B6                                     (3/225)69+FpconMaxDecimal DS H               Maximum digits after decimal point
0000B8                                     (3/226)70+FpconMinExpon   DS H               Minimum exponent digits
0000BA                                     (3/228)71+FpconGenDigits  DS 0H              (Set/used by FPCONVERT)
0000BA                                     (3/230)72+FpconExponent10 DS H               Base 10 exponent (output)
0000BC                                     (3/231)73+FpconValueLen   DS FL1             Length of floating point value (in)
0000BD                  00000004           (3/232)74+FpconValueLenE EQU 4                   Short
0000BD                  00000008           (3/233)75+FpconValueLenD EQU 8                   Long
0000BD                  00000010           (3/234)76+FpconValueLenL EQU 16                  Extended
0000BD                                     (3/235)77+FpconBase       DS FL1             Base of floating point value (in)
0000BE                  00000002           (3/236)78+FpconBase2     EQU 2                   Binary IEEE-754 (default)
0000BE                  0000000A           (3/237)79+FpconBase10    EQU 10                  Decimal (IEEE-754r)
0000BE                  00000010           (3/238)80+FpconBase16    EQU 16                  Hexadecimal S/360
0000BE                                     (3/239)81+FpconFlags      DS X               Flags (in)
0000BF                  00000040           (3/240)82+FpconToValue   EQU X'40'               Convert string to value
0000BF                                     (3/241)83+*                                      (otherwise convert to string)
0000BF                  00000020           (3/242)84+FpconValuePlus EQU X'20'               If leading mantissa plus sign
0000BF                  00000010           (3/243)85+FpconExponPlus EQU X'10'               If leading exponent plus sign
0000BF                  00000008           (3/244)86+FpconZeroPlus  EQU X'08'               If zero is always positive
0000BF                  00000004           (3/245)87+FpconZeroSign  EQU X'04'               If zero can be negative
0000BF                  00000002           (3/246)88+FpconFixedDec  EQU X'02'               Round decimals to fit
0000BF                  00000001           (3/247)89+FpconRetDigits EQU X'01'               Return digits only (ecvt/fcvt)
0000BF                                     (3/248)90+FpconZero       DS C               ASCII or EBCDIC '0' character
0000C0                                     (3/249)91+FpconPlus       DS C               ASCII or EBCDIC '+' character
0000C1                                     (3/250)92+FpconMinus      DS C               ASCII or EBCDIC '-' character
0000C2                                     (3/251)93+FpconDecimal    DS C               ASCII or EBCDIC decimal point char.
0000C3                                     (3/252)94+FpconExponent   DS C               Exponent character
0000C4                                     (3/253)95+FpconExpAlt     DS C               Alternate exponent character
0000C5                                     (3/255)96+FpconBlank      DS C               (Set/used by FPCONVRT)
0000C6                                     (3/256)97+FpconNine       DS C               (Set/used by FPCONVRT)
0000C7                                     (3/257)98+FpconFive       DS C               (Set/used by FPCONVRT)
0000C8                                     (3/260)99+                DS 0d              Align to doubleword
0000C8                                    (3/261)100+FpconWork       DS XL2096          Internal work area
0008F8                                    (3/262)101+FpconEnd        DS 0d              End of request block
0008F8                  000008F8          (3/263)102+FpconLength    EQU *-Fpcon          length of request block
0008F8                                    (3/264)103+***********************************************************************
0008F8                                    (3/540)124+FPCONVRT TITLE 'Floating Point Conversion - Module Entry'
0008F8                                    (3/541)125+         PRINT On,Gen,Data,Uhead
0008F8                                    (3/542)126+         ACONTROL Flag(0,Align,Cont,NoImplen,Page0,Substr)
000000                                    (3/543)127+FPCONVRT Rsect ,
000000                                    (3/545)128+FPCONVRT RMODE Any
000000                                    (3/547)129+FPCONVRT AMODE 64 - s/b Any64 but the z/OS binder does not like it.
000000                                    (3/553)130+FPCONVRT ALIAS C'fpconvrt'
000000 EBECD0080024                       (3/568)131+         STMG  R14,R12,8(R13)      Save caller's registers
000006 E31010000004                       (3/569)132+         LG    R1,0(,R1)           Get FPCON address
00000C C0C00000014A            0002A0     (3/570)133+         LARL  R12,Static          Get static storage address
000012 E3D010800024                       (3/571)134+         STG   R13,128(,R1)        Save caller's save area address
000018 E310D0880024                       (3/572)135+         STG   R1,136(,R13)        Set forward chain
00001E D2031004C078                       (3/573)136+         MVC   4(4,R1),=C'F4SA'-Static(R12) Indicate format-4 save area
000024 41D01000                           (3/574)137+         LA    R13,0(,R1)          Get FPCON address
000028 D73710C810C8                       (3/575)138+         XC    FpconWork-Fpcon(14*4,R1),FpconWork-Fpcon(R1)
00002E EBEB10C80096                       (3/576)139+         LMH   R14,R11,FpconWork-Fpcon(R1) Clear upper register halves
000034                                    (3/591)140+         USING (Fpcon,FpconEnd+1),R13
LISTUSE FPCON    ESD=0001 LOC=00000000 LEN=008F9 REG=D OFF=00000 LAB=
000034                                    (3/592)141+         USING (Static,StaticEnd),R12
LISTUSE FPCON    ESD=0001 LOC=00000000 LEN=008F9 REG=D OFF=00000 LAB=
LISTUSE FPCONVRT ESD=0002 LOC=000002A0 LEN=00098 REG=C OFF=00000 LAB=
000034 D703D0A8D0A8     0000A8 0000A8     (3/594)143+         XC    FpconReturnCode,FpconReturnCode Hope all is OK
00003A E310D0A00004            0000A0     (3/595)144+         LG    R1,FpconStringAddr  Get entire string address
000040 41001000                           (3/596)145+         LA    R0,0(,R1)           Remove non-address bits
000044 EC08011B007C            00027A     (3/597)146+         CGIJE   R0,0,ReturnBadParm Null string address: branch
00004A EC0101186065            00027A     (3/598)147+         CLGRJNE   R0,R1,ReturnBadParm Non-address bits: branch
000050 4800D0AC                0000AC     (3/599)148+         LH    R0,FpconStringSize  Get string length
000054 EC0C0113007E            00027A     (3/600)149+         CIJNH R0,0,ReturnBadParm      bad: branch
00005A 9504D0BC                0000BC     (3/601)150+         CLI   FpconValueLen,FpconValueLenE Valid length code?
00005E A784000A                000072     (3/602)151+         JE    Enter000                yes: branch
000062 9508D0BC                0000BC     (3/603)152+         CLI   FpconValueLen,FpconValueLenD
000066 A7840006                000072     (3/604)153+         JE    Enter000                yes: branch
00006A 9510D0BC                0000BC     (3/605)154+         CLI   FpconValueLen,FpconValueLenL
00006E A7740106                00027A     (3/606)155+         JNE   ReturnBadParm           no: branch
000072                                    (3/607)156+Enter000 DC    0h'0'
000072 9502D0BD                0000BD     (3/608)157+         CLI   FpconBase,FpconBase2 Valid base?
000076 A7840010                000096     (3/609)158+         JE    Enter005                yes: branch
00007A 950AD0BD                0000BD     (3/610)159+         CLI   FpconBase,FpconBase10   *
00007E A784000C                000096     (3/611)160+         JE    Enter005                yes: branch
000082 9510D0BD                0000BD     (3/612)161+         CLI   FpconBase,FpconBase16   *
000086 A7840008                000096     (3/613)162+         JE    Enter005                yes: branch
00008A 9500D0BD                0000BD     (3/614)163+         CLI   FpconBase,0             *
00008E A77400F6                00027A     (3/615)164+         JNE   ReturnBadParm           no: branch
000092 9202D0BD                0000BD     (3/616)165+         MVI   FpconBase,FpconBase2 Set default base
000096                                    (3/617)166+Enter005 DC    0h'0'
000096 4110C08F                00032F     (3/619)168+         LA    R1,ASCII            Assume ASCII
00009A                                    (3/620)169+         USING (Charset,CharsetEnd),R1
LISTUSE FPCON    ESD=0001 LOC=00000000 LEN=008F9 REG=D OFF=00000 LAB=
LISTUSE FPCONVRT ESD=0002 LOC=000002A0 LEN=00098 REG=C OFF=00000 LAB=
LISTUSE CHARSET  ESD=0006 LOC=00000000 LEN=00007 REG=1 OFF=00000 LAB=
00009A D500D0BF1000     0000BF 000000     (3/621)170+         CLC   FpconZero,CsZero    Is character set ASCII?
0000A0 A7840010                0000C0     (3/622)171+         JE    Enter010
0000A4 4110C088                000328     (3/623)172+         LA    R1,EBCDIC           Assume EBCDIC
0000A8 D500D0BF1000     0000BF 000000     (3/624)173+         CLC   FpconZero,CsZero    Is character set EBCDIC?
0000AE A7840009                0000C0     (3/625)174+         JE    Enter010
0000B2 9500D0BF                0000BF     (3/626)175+         CLI   FpconZero,0         Default character set?
0000B6 A77400E2                00027A     (3/627)176+         JNE   ReturnBadParm           invalid: branch
0000BA D200D0BF1000     0000BF 000000     (3/628)177+         MVC   FpconZero,CsZero    Default is EBCDIC
0000C0                                    (3/630)179+Enter010 DC    0h'0'
0000C0 D200D0C71000     0000C7 000000     (3/631)180+         MVC   FpconFive,CsZero    Compute '5' character
0000C6 9605D0C7                0000C7     (3/632)181+         OI    FpconFive,5              *
0000CA D200D0C61000     0000C6 000000     (3/633)182+         MVC   FpconNine,CsZero    Compute '9' character
0000D0 9609D0C6                0000C6     (3/634)183+         OI    FpconNine,9              *
0000D4 D200D0C51006     0000C5 000006     (3/635)184+         MVC   FpconBlank,CsBlank  Remember blank character
0000DA D500D0C01006     0000C0 000006     (3/636)185+         CLC   FpconPlus,CsBlank   Plus symbol set?
0000E0 A7240005                0000EA     (3/637)186+         JH    Enter020                yes: branch
0000E4 D200D0C01001     0000C0 000001     (3/638)187+         MVC   FpconPlus,CsPlus    Set default plus symbol
0000EA                                    (3/639)188+Enter020 DC    0h'0'
0000EA D500D0C11006     0000C1 000006     (3/640)189+         CLC   FpconMinus,CsBlank  Minus symbol set?
0000F0 A7240005                0000FA     (3/641)190+         JH    Enter030                yes: branch
0000F4 D200D0C11002     0000C1 000002     (3/642)191+         MVC   FpconMinus,CsMinus  Set default minus symbol
0000FA                                    (3/643)192+Enter030 DC    0h'0'
0000FA D500D0C21006     0000C2 000006     (3/644)193+         CLC   FpconDecimal,CsBlank Decimal point symbol set?
000100 A7240005                00010A     (3/645)194+         JH    Enter040                yes: branch
000104 D200D0C21003     0000C2 000003     (3/646)195+         MVC   FpconDecimal,CsDecimal Set default decimal point symbol
00010A                                    (3/647)196+Enter040 DC    0h'0'
00010A D500D0C31006     0000C3 000006     (3/648)197+         CLC   FpconExponent,CsBlank Exponent character set?
000110 A7240005                00011A     (3/649)198+         JH    Enter050                yes: branch
000114 D200D0C31004     0000C3 000004     (3/650)199+         MVC   FpconExponent,CsExponent Set default exponent character
00011A                                    (3/651)200+Enter050 DC    0h'0'
00011A D500D0C41006     0000C4 000006     (3/652)201+         CLC   FpconExpAlt,CsBlank Alternate exponent character set?
000120 A724000F                00013E     (3/653)202+         JH    Enter070                yes: branch
000124 D500D0C31004     0000C3 000004     (3/654)203+         CLC   FpconExponent,CsExponent Default exponent set?
00012A A7740007                000138     (3/655)204+         JNE   Enter060                no: branch
00012E D200D0C41005     0000C4 000005     (3/656)205+         MVC   FpconExpAlt,CsExpAlt Set default alternate to lowercase
000134 A7F40005                00013E     (3/657)206+         J     Enter070
000138                                    (3/658)207+Enter060 DC    0h'0'
000138 D200D0C4D0C3     0000C4 0000C3     (3/659)208+         MVC   FpconExpAlt,FpconExponent Set alternate same as normal
00013E                                    (3/660)209+Enter070 DC    0h'0'
00013E                                    (3/661)210+         DROP  R1
LISTUSE FPCON    ESD=0001 LOC=00000000 LEN=008F9 REG=D OFF=00000 LAB=
LISTUSE FPCONVRT ESD=0002 LOC=000002A0 LEN=00098 REG=C OFF=00000 LAB=
00013E 9140D0BE                0000BE     (3/662)211+         TM    FpconFlags,FpconToValue Convert string to value?
000142 A77405B9                000CB4     (3/671)212+         JNZ   ToValue                 yes: branch
000146 4800D0B0                0000B0     (3/674)214+         LH    R0,FpconMaxDigits   Get maximum digits
00014A EC020098227E            00027A     (3/675)215+         CIJH  R0,34,ReturnBadParm     invalid: branch
000150 1200                               (3/676)216+         LTR   R0,R0                   *
000152 A724002A                0001A6     (3/677)217+         JP    Enter120                valid: branch
000156 A7440092                00027A     (3/678)218+         JM    ReturnBadParm           bad: branch
00015A 950AD0BD                0000BD     (3/680)220+         CLI   FpconBase,FpconBase10 Decimal value?
00015E A7840016                00018A     (3/681)221+         JE    Enter105                yes: branch
000162 A708000F                           (3/682)222+         LHI   R0,15               Get default for long (bin and hex)
000166 9508D0BC                0000BC     (3/683)223+         CLI   FpconValueLen,FpconValueLenD Long value?
00016A A784001E                0001A6     (3/684)224+         JE    Enter120                yes: branch
00016E 9502D0BD                0000BD     (3/685)225+         CLI   FpconBase,FpconBase2 Binary value?
000172 A7840012                000196     (3/686)226+         JE    Enter110                yes: branch
000176 A7080006                           (3/687)227+         LHI   R0,6                Get default for short hex
00017A 9504D0BC                0000BC     (3/688)228+         CLI   FpconValueLen,FpconValueLenE Short value?
00017E A7840014                0001A6     (3/689)229+         JE    Enter120                yes: branch
000182 A7080020                           (3/690)230+         LHI   R0,32               Get default for extended hex
000186 A7F40010                0001A6     (3/691)231+         J     Enter120
00018A                                    (3/692)232+Enter105 DC    0h'0'
00018A A7080010                           (3/693)233+         LHI   R0,16               Get default for long decimal
00018E 9508D0BC                0000BC     (3/694)234+         CLI   FpconValueLen,FpconValueLenD Long value?
000192 A784000A                0001A6     (3/695)235+         JE    Enter120                yes: branch
000196                                    (3/696)236+Enter110 DC    0h'0'
000196 A7080007                           (3/697)237+         LHI   R0,7                Get default for short binary/decimal
00019A 9504D0BC                0000BC     (3/698)238+         CLI   FpconValueLen,FpconValueLenE Short value?
00019E A7840004                0001A6     (3/699)239+         JE    Enter120                yes: branch
0001A2 A7080022                           (3/700)240+         LHI   R0,34               Get default for ext. binary/decimal
0001A6                                    (3/701)241+Enter120 DC    0h'0'
0001A6 4000D0BA                0000BA     (3/702)242+         STH   R0,FpconGenDigits   Return maximum digits
0001AA 4810D0B6                0000B6     (3/704)244+         LH    R1,FpconMaxDecimal  Get maximum decimal digits
0001AE EC140066007E            00027A     (3/705)245+         CIJL  R1,0,ReturnBadParm      bad: branch
0001B4 EC0100042076            0001BC     (3/706)246+         CRJH  R0,R1,Enter130      Get greater of the
0001BA 1801                               (3/707)247+         LR    R0,R1                   two values in R0
0001BC                                    (3/708)248+Enter130 DC    0h'0'
0001BC 4810D0B2                0000B2     (3/709)249+         LH    R1,FpconMaxLeading  Get maximum leading digits
0001C0 EC14005D007E            00027A     (3/710)250+         CIJL  R1,0,ReturnBadParm      bad: branch
0001C6 4820D0B4                0000B4     (3/711)251+         LH    R2,FpconMinDecimal  Get minimum decimal digits
0001CA A72EFFFF                           (3/712)252+         CHI   R2,-1                   *
0001CE A7440056                00027A     (3/713)253+         JL    ReturnBadParm           bad: branch
0001D2 A7840003                0001D8     (3/714)254+         JE    Enter140                -1: branch
0001D6 1A12                               (3/715)255+         AR    R1,R2               Get leading + trailing
0001D8                                    (3/716)256+Enter140 DC    0h'0'
0001D8 EC0100042076            0001E0     (3/717)257+         CRJH  R0,R1,Enter150      Get string size
0001DE 1801                               (3/718)258+         LR    R0,R1                   *
0001E0                                    (3/719)259+Enter150 DC    0h'0'                   *
0001E0 A7180001                           (3/720)260+         LHI   R1,1                Get extra bytes needed
0001E4 9101D0BE                0000BE     (3/721)261+         TM    FpconFlags,FpconRetDigits Format result?
0001E8 A7740004                0001F0     (3/722)262+         JNZ   Enter155                no: branch
0001EC A7180008                           (3/723)263+         LHI   R1,8                    *
0001F0                                    (3/724)264+Enter155 DC    0h'0'                   *
0001F0 1A01                               (3/725)265+         AR    R0,R1               Add extra bytes needed
0001F2 4900D0AC                0000AC     (3/726)266+         CH    R0,FpconStringSize  Buffer big enough?
0001F6 A7240042                00027A     (3/727)267+         JH    ReturnBadParm           no: branch
0001FA EC220008007E            00020A     (3/729)269+         CIJH  R2,0,Enter160       Min. decimal digits positive: branch
000200 4800D0B2                0000B2     (3/730)270+         LH    R0,FpconMaxLeading  Is maximum leading digits zero?
000204 EC0C003B007E            00027A     (3/731)271+         CIJNH R0,0,ReturnBadParm      yes: branch
00020A                                    (3/733)273+Enter160 DC    0h'0'
00020A 9102D0BE                0000BE     (3/734)274+         TM    FpconFlags,FpconFixedDec Fixed length decimal?
00020E A7840017                00023C     (3/735)275+         JZ    Enter180                no: branch
000212 4800D0B6                0000B6     (3/736)276+         LH    R0,FpconMaxDecimal  Get maximum decimal digits
000216 EC080009007E            000228     (3/737)277+         CIJE  R0,0,Enter170           zero: branch
00021C 4900D0B4                0000B4     (3/738)278+         CH    R0,FpconMinDecimal  Maximum same as minimum?
000220 A784000E                00023C     (3/739)279+         JE    Enter180                yes: branch
000224 A7F4002B                00027A     (3/740)280+         J     ReturnBadParm           no: branch
000228                                    (3/741)281+Enter170 DC    0h'0'
000228 4800D0B4                0000B4     (3/742)282+         LH    R0,FpconMinDecimal  Minimum decimal digits 0 or -1?
00022C EC020027007E            00027A     (3/743)283+         CIJH  R0,0,ReturnBadParm      no: branch
000232 4800D0B2                0000B2     (3/744)284+         LH    R0,FpconMaxLeading  Maximum leading digits is zero?
000236 EC0C0022007E            00027A     (3/745)285+         CIJNH R0,0,ReturnBadParm      yes: branch
00023C                                    (3/747)287+Enter180 DC    0h'0'
00023C 4800D0B8                0000B8     (3/748)288+         LH    R0,FpconMinExpon    Get minimum exponent digits
000240 EC04001D007E            00027A     (3/749)289+         CIJL  R0,0,ReturnBadParm      bad: branch
000246 EC02001A047E            00027A     (3/750)290+         CIJH  R0,4,ReturnBadParm      bad: branch
00024C A7F40076                000338     (3/758)292+         J     ToString            Go to "ToString"
000250                                    (3/760)293+         TITLE 'Floating Point Conversion - Module Exit'
000250                                    (3/766)294+ReturnOverFlow DC 0h'0'            String value is too big
000250 A7F90008                           (3/767)295+         LGHI   R15,FpconRetOvrFlo
000254 A7F40015                00027E     (3/768)296+         J     ReturnSet
000258                                    (3/770)298+ReturnInfinity DC 0h'0'            IEEE FP value is an infinity
000258 A7F90008                           (3/771)299+         LGHI   R15,FpconRetInf
00025C A7F40011                00027E     (3/772)300+         J     ReturnSet
000260                                    (3/774)302+ReturnNan DC 0h'0'                 IEEE FP value is a Not-A-Number
000260 A7F9000C                           (3/775)303+         LGHI   R15,FpconRetNan
000264 A7F4000D                00027E     (3/776)304+         J     ReturnSet
000268                                    (3/778)306+ReturnBadString DC 0h'0'           Input string value is bad
000268 E310D0A0000B            0000A0     (3/779)307+         SLG   R1,FpconStringAddr  Compute offset to bad character
00026E 4010D0AE                0000AE     (3/780)308+         STH   R1,FpconStringLen   Return offset
000272 A7F9000C                           (3/781)309+         LGHI   R15,FpconRetBadStr
000276 A7F40004                00027E     (3/782)310+         J     ReturnSet
00027A                                    (3/784)312+ReturnBadParm DC 0h'0'             Parameter is bad
00027A A7F90010                           (3/785)313+         LGHI   R15,FpconRetBadPrm
00027E                                    (3/788)315+ReturnSet DC   0h'0'
00027E 50F0D0A8                0000A8     (3/789)316+         ST    R15,FpconReturnCode Set return code
000282 A7F40005                00028C     (3/790)317+         J     Return
000286                                    (3/792)319+ReturnOk DC    0h'0'
000286 E3F0D0A80014            0000A8     (3/793)320+         LGF   R15,FpconReturnCode Get return code
00028C                                    (3/794)321+Return   DC    0h'0'
00028C E3D0D0800004                       (3/802)322+         LG    R13,128(,R13)       Get caller's save area address
000292 E3E0D0080004                       (3/803)323+         LG    R14,8(,R13)         Get return address to caller
000298 EB0CD0180004                       (3/804)324+         LMG   R0,R12,24(R13)      Restore caller's registers
00029E 07FE                               (3/815)325+         BR    R14                 Return to caller
0002A0                                    (3/818)327+         DC    0d'0'
0002A0                                    (3/819)328+Static   LOCTR 
0002A0                                    (3/821)329+         TITLE 'Convert From Floating Point Value To String'
000338                                    (3/822)330+ToString LOCTR ,
000338 950AD0BD                0000BD     (3/826)331+         CLI   FpconBase,FpconBase10 Decimal floating point?
00033C A784020B                000752     (3/827)332+         JE    ToString0600            yes: branch
000340 9502D0BD                0000BD     (3/828)333+         CLI   FpconBase,FpconBase2 Binary floating point?
000344 A7840079                000436     (3/829)334+         JE    ToString0100            yes: branch
000348 4300D090                000090     (3/830)335+         IC    R0,FpconValueE      Get the base-16 exponent
00034C C00B0000007F            00007F     (3/831)336+         NILF  R0,127                  *
000352 A70AFFC0                           (3/832)337+         AHI   R0,-64                  *
000356 41B0D0C8                0000C8     (3/833)338+         LA    R11,FpconWork       Get address of work area
00035A 9504D0BC                0000BC     (3/834)339+         CLI   FpconValueLen,FpconValueLenE Short value?
00035E A7840020                00039E     (3/835)340+         JE    ToString0010            yes: branch
000362 9508D0BC                0000BC     (3/836)341+         CLI   FpconValueLen,FpconValueLenD Long value?
000366 A7840032                0003CA     (3/837)342+         JE    ToString0030            yes: branch
00036A D206B000D091            000091     (3/838)343+         MVC   0(7,R11),FpconValueL+1 Get extended mantissa
000370 D206B007D099            000099     (3/839)344+         MVC   7(7,R11),FpconValueL+9  *
000376 41E0B00E                           (3/840)345+         LA    R14,14(,R11)        Get end of mantissa
00037A 9101D090                000090     (3/841)346+         TM    FpconValueL,1       Need to shift mantissa?
00037E A784003A                0003F2     (3/842)347+         JZ    ToString0050            no: branch
000382 9200B00F                           (3/843)348+         MVI   15(R11),0           Shift mantissa 4 bits right
000386 D20DB010B000                       (3/844)349+         MVC   16(14,R11),0(R11)       *
00038C F1EDB000B010                       (3/845)350+         MVO   0(15,R11),16(14,R11)    *
000392 A70A0001                           (3/846)351+         AHI   R0,1                Increment exponent
000396 41E0B00F                           (3/847)352+         LA    R14,15(,R11)        Get end of mantissa
00039A A7F4002C                0003F2     (3/848)353+         J     ToString0050
00039E                                    (3/849)354+ToString0010 DC 0h'0'
00039E 9101D090                000090     (3/850)355+         TM    FpconValueE,1       Need to shift mantissa?
0003A2 A7740009                0003B4     (3/851)356+         JNZ   ToString0020            yes: branch
0003A6 D202B000D091            000091     (3/852)357+         MVC   0(3,R11),FpconValueE+1 Get short mantissa
0003AC 41E0B003                           (3/853)358+         LA    R14,3(,R11)         Get end of mantissa
0003B0 A7F40021                0003F2     (3/854)359+         J     ToString0050
0003B4                                    (3/855)360+ToString0020 DC 0h'0'
0003B4 9200B003                           (3/856)361+         MVI   3(R11),0            Get short mantissa
0003B8 F132B000D091            000091     (3/857)362+         MVO   0(4,R11),FpconValueE+1(3) shifted 4 bits right
0003BE A70A0001                           (3/858)363+         AHI   R0,1                Increment exponent
0003C2 41E0B004                           (3/859)364+         LA    R14,4(,R11)         Get end of mantissa
0003C6 A7F40016                0003F2     (3/860)365+         J     ToString0050
0003CA                                    (3/861)366+ToString0030 DC 0h'0'
0003CA 9101D090                000090     (3/862)367+         TM    FpconValueD,1       Need to shift mantissa?
0003CE A7740009                0003E0     (3/863)368+         JNZ   ToString0040            yes: branch
0003D2 D206B000D091            000091     (3/864)369+         MVC   0(7,R11),FpconValueD+1 Get long mantissa
0003D8 41E0B007                           (3/865)370+         LA    R14,7(,R11)         Get end of mantissa
0003DC A7F4000B                0003F2     (3/866)371+         J     ToString0050
0003E0                                    (3/867)372+ToString0040 DC 0h'0'
0003E0 9200B007                           (3/868)373+         MVI   7(R11),0            Get long mantissa
0003E4 F176B000D091            000091     (3/869)374+         MVO   0(8,R11),FpconValueD+1(7) shifted 4 bits right
0003EA A70A0001                           (3/870)375+         AHI   R0,1                Increment exponent
0003EE 41E0B008                           (3/871)376+         LA    R14,8(,R11)         Get end of mantissa
0003F2                                    (3/872)377+* Note: base-16 exponent in R0 should be even at this point
0003F2                                    (3/873)378+ToString0050 DC 0h'0'              Find last non-zero digit
0003F2 ECEB03D5C065            000B9C     (3/874)379+         CLGRJNH   R14,R11,ToStringZero all zero: branch
0003F8 E3E0EFFFFF71                       (3/344)381+         LAY   R14,-1(,R14)
0003FE 9500E000                           (3/876)383+         CLI   0(R14),0                *
000402 A784FFF8                0003F2     (3/877)384+         JE    ToString0050            *
000406 41E0E001                           (3/878)385+         LA    R14,1(,R14)             *
00040A 8A000001                           (3/879)386+         SRA   R0,1                Set exponent for base 256
00040E 91F0D091                000091     (3/880)387+         TM    FpconValueE+1,X'F0' Denormalized?
000412 A77400B0                000572     (3/881)388+         JNZ   ToString0200            no: branch
000416 9204D0AB                0000AB     (3/882)389+         MVI   FpconReturnCode+3,FpconRetDenorm yes: set return code
00041A 9500B000                           (3/883)390+         CLI   0(R11),0            First digit all zero?
00041E A77400AA                000572     (3/884)391+         JNE   ToString0200            no: branch
000422                                    (3/885)392+ToString0060 DC 0h'0'              Find first non-zero digit
000422 41B0B001                           (3/886)393+         LA    R11,1(,R11)             *
000426 A70AFFFF                           (3/887)394+         AHI   R0,-1                   *
00042A 9500B000                           (3/888)395+         CLI   0(R11),0                *
00042E A784FFFA                000422     (3/889)396+         JE    ToString0060            *
000432 A7F400A0                000572     (3/890)397+         J     ToString0200            found: branch
000436                                    (3/892)399+***********************************************************************
000436                                    (3/893)400+*        Convert binary value to base-256                             *
000436                                    (3/894)401+***********************************************************************
000436                                    (3/895)402+ToString0100 DC 0h'0'
000436 41B0D0C8                0000C8     (3/896)403+         LA    R11,FpconWork       Get start of number
00043A 4810D090                000090     (3/897)404+         LH    R1,FpconValueL      Get exponent bytes
00043E 9504D0BC                0000BC     (3/898)405+         CLI   FpconValueLen,FpconValueLenE Short value?
000442 A784001F                000480     (3/899)406+         JE    ToString0110            yes: branch
000446 9508D0BC                0000BC     (3/900)407+         CLI   FpconValueLen,FpconValueLenD Long value?
00044A A7840036                0004B6     (3/901)408+         JE    ToString0120            yes: branch
00044E A7087FFF                           (3/902)409+         LHI   R0,32767            Get exponent mask
000452 A7283FFF                           (3/903)410+         LHI   R2,16383            Get exponent bias
000456 A7380008                           (3/904)411+         LHI   R3,8                Get added fraction bits
00045A 1401                               (3/905)412+         NR    R0,R1               Extract biased exponent
00045C 9200B000                           (3/906)413+         MVI   0(R11),0            Clear high digit
000460 D20DB001D092            000092     (3/907)414+         MVC   1(14,R11),FpconValueL+2 Get the mantissa
000466 41E0B00F                           (3/908)415+         LA    R14,15(,R11)        Get end of mantissa
00046A EC080041007E            0004EC     (3/909)416+         CIJE  R0,0,ToString0130   Biased exponent is zero: branch
000470 1B02                               (3/910)417+         SR    R0,R2               Compute unbiased exponent
000472 EC0204102076            000C92     (3/911)418+         CRJH  R0,R2,ToStringNanBin Invalid exponent: branch
000478 9201B000                           (3/912)419+         MVI   0(R11),1            Set normalized mantissa
00047C A7F4004A                000510     (3/913)420+         J     ToString0150        Go handle normalized number
000480                                    (3/915)422+ToString0110 DC 0h'0'
000480 A70800FF                           (3/916)423+         LHI   R0,255              Get exponent mask
000484 A728007F                           (3/917)424+         LHI   R2,127              Get exponent bias
000488 A7380001                           (3/918)425+         LHI   R3,1                Get added fraction bits
00048C 88100007                           (3/919)426+         SRL   R1,7                Extract biased exponent
000490 1401                               (3/920)427+         NR    R0,R1                   *
000492 D202B000D091            000091     (3/921)428+         MVC   0(3,R11),FpconValueE+1 Get the normalized mantissa
000498 947FB000                           (3/922)429+         NI    0(R11),X'7F'        Clear high digit
00049C 41E0B003                           (3/923)430+         LA    R14,3(,R11)         Get end of mantissa
0004A0 EC080026007E            0004EC     (3/924)431+         CIJE  R0,0,ToString0130   Biased exponent is zero: branch
0004A6 1B02                               (3/925)432+         SR    R0,R2               Compute unbiased exponent
0004A8 EC0203F52076            000C92     (3/926)433+         CRJH  R0,R2,ToStringNanBin Invalid exponent: branch
0004AE 9680B000                           (3/927)434+         OI    0(R11),X'80'        Set normalized mantissa
0004B2 A7F4002F                000510     (3/928)435+         J     ToString0150        Go handle normalized number
0004B6                                    (3/930)437+ToString0120 DC 0h'0'
0004B6 A70807FF                           (3/931)438+         LHI   R0,2047             Get exponent mask
0004BA A72803FF                           (3/932)439+         LHI   R2,1023             Get exponent bias
0004BE A7380004                           (3/933)440+         LHI   R3,4                Get added fraction bits
0004C2 88100004                           (3/934)441+         SRL   R1,4                Extract biased exponent
0004C6 1401                               (3/935)442+         NR    R0,R1                   *
0004C8 D206B000D091            000091     (3/936)443+         MVC   0(7,R11),FpconValueD+1 Get the normalized mantissa
0004CE 940FB000                           (3/937)444+         NI    0(R11),X'0F'        Clear high digit
0004D2 41E0B007                           (3/938)445+         LA    R14,7(,R11)         Get end of mantissa
0004D6 EC08000B007E            0004EC     (3/939)446+         CIJE  R0,0,ToString0130   Biased exponent is zero: branch
0004DC 1B02                               (3/940)447+         SR    R0,R2               Compute unbiased exponent
0004DE EC0203DA2076            000C92     (3/941)448+         CRJH  R0,R2,ToStringNanBin Invalid exponent: branch
0004E4 9610B000                           (3/942)449+         OI    0(R11),X'10'        Set normalized mantissa
0004E8 A7F40014                000510     (3/943)450+         J     ToString0150        Go handle normalized number
0004EC                                    (3/945)452+ToString0130 DC 0h'0'              Denormal or zero:
0004EC 9500B000                           (3/946)453+         CLI   0(R11),0            Find first non-zero digit
0004F0 A774000B                000506     (3/947)454+         JNE   ToString0140            found: branch
0004F4 A73AFFF8                           (3/948)455+         AHI   R3,-8                   *
0004F8 41B0B001                           (3/949)456+         LA    R11,1(,R11)             *
0004FC ECBEFFF84065            0004EC     (3/950)457+         CLGRJL   R11,R14,ToString0130 *
000502 A7F4034D                000B9C     (3/951)458+         J     ToStringZero            all zero: branch
000506                                    (3/952)459+ToString0140 DC 0h'0'
000506 9204D0AB                0000AB     (3/953)460+         MVI   FpconReturnCode+3,FpconRetDenorm Indicate denormalized
00050A A7080001                           (3/954)461+         LHI   R0,1                Compute unbiased exponent
00050E 1B02                               (3/955)462+         SR    R0,R2                   *
000510                                    (3/956)463+ToString0150 DC 0h'0'
000510 1A03                               (3/957)464+         AR    R0,R3               Compute actual base-2 exponent
000512 A7180007                           (3/958)465+         LHI   R1,7                Compute bits to shift right
000516 1410                               (3/959)466+         NR    R1,R0                   to get base-256 exponent
000518 A784002B                00056E     (3/960)467+         JZ    ToString0190            none: branch
00051C 1311                               (3/961)468+         LCR   R1,R1                   *
00051E A71A0008                           (3/962)469+         AHI   R1,8                    *
000522 1A01                               (3/963)470+         AR    R0,R1               Update exponent
000524 1B22                               (3/965)472+         SR    R2,R2               Shift the value right
000526 B904003B                           (3/966)473+         LGR   R3,R11                  *
00052A                                    (3/967)474+ToString0160 DC 0h'0'                  *
00052A E34030000094                       (3/968)475+         LLC   R4,0(,R3)               *
000530 1642                               (3/969)476+         OR    R4,R2                   *
000532 1824                               (3/970)477+         LR    R2,R4                   *
000534 88401000                           (3/971)478+         SRL   R4,0(R1)                *
000538 42403000                           (3/972)479+         STC   R4,0(,R3)               *
00053C 89200008                           (3/973)480+         SLL   R2,8                    *
000540 41303001                           (3/974)481+         LA    R3,1(,R3)               *
000544 EC3EFFF34065            00052A     (3/975)482+         CLGRJL   R3,R14,ToString0160  *
00054A 88201000                           (3/976)483+         SRL   R2,0(R1)                *
00054E 4220E000                           (3/977)484+         STC   R2,0(,R14)              *
000552 41E0E001                           (3/978)485+         LA    R14,1(,R14)             *
000556 9500B000                           (3/979)486+         CLI   0(R11),0            High digit now zero?
00055A A774000A                00056E     (3/980)487+         JNE   ToString0190            no: branch
00055E D20FB000B001                       (3/981)488+         MVC   0(16,R11),1(R11)    Move number back 1 byte
000564 E3E0EFFFFF71                       (3/344)490+         LAY   R14,-1(,R14)
00056A A70AFFF8                           (3/983)492+         AHI   R0,-8               Adjust exponent
00056E                                    (3/985)494+ToString0190 DC 0h'0'
00056E 8A000003                           (3/986)495+         SRA   R0,3                Convert base-2 to base-256
000572                                    (3/988)497+***********************************************************************
000572                                    (3/989)498+*        Convert base-256 value to "GenDigits" decimal digits.        *
000572                                    (3/990)499+*        R0:  base-256 exponent (range 2048 to -2061)                 *
000572                                    (3/991)500+*        R11: address of start of number                              *
000572                                    (3/992)501+*             Number is base-256 with implied decimal point           *
000572                                    (3/993)502+*             just before the digit at R11.                           *
000572                                    (3/994)503+*        R14: address of end of number (no more than 15 from start)   *
000572                                    (3/995)504+***********************************************************************
000572                                    (3/996)505+ToString0200 DC 0h'0'
000572 B9120030                           (3/997)506+         LTGFR   R3,R0             Greater than 1?
000576 A7D40058                000626     (3/998)507+         JNP   ToString0300            no: branch
00057A B90A003B                           (3/999)508+         ALGR   R3,R11             Decimal point within number?
00057E B9040013                          (3/1000)509+         LGR   R1,R3                   *
000582 B909003E                          (3/1001)510+         SGR   R3,R14                  *
000586 A7D40008                000596    (3/1002)511+         JNP   ToString0210            yes: branch
00058A B904002E                          (3/1003)512+         LGR   R2,R14              Clear number to zeros
00058E 1B55                              (3/1004)513+         SR    R5,R5                   out to decimal point
000590 0E24                              (3/1005)514+         MVCL  R2,R4                   *
000592 B90400E2                          (3/1006)515+         LGR   R14,R2                  *
000596                                   (3/1008)517+***********************************************************************
000596                                   (3/1009)518+*        Divide integer part of number by 10 until it is 0,           *
000596                                   (3/1010)519+*        extracting each remainder as a result digit.                 *
000596                                   (3/1011)520+*        R1:  address of decimal point                                *
000596                                   (3/1012)521+*        R11: address of start of number                              *
000596                                   (3/1013)522+*             Number is base-256 with implied decimal point           *
000596                                   (3/1014)523+*             just before the digit at R11.                           *
000596                                   (3/1015)524+*        R14: address of end of number (no more than 2048 from start) *
000596                                   (3/1016)525+***********************************************************************
000596                                   (3/1017)526+ToString0210 DC 0h'0'
000596 1B88                              (3/1018)527+         SR    R8,R8               Base-10 exponent
000598 4170D8D0                0008D0    (3/1019)528+         LA    R7,FpconWork+2056   Convert the integer part to decimal
00059C 4160D8F3                0008F3    (3/1020)529+         LA    R6,FpconWork+2056+35    with the digits reversed
0005A0                                   (3/1021)530+ToString0220 DC 0h'0'                  starting at FpconWork+2056
0005A0 A78A0001                          (3/1022)531+         AHI   R8,1                    up to 36 decimal digits
0005A4 B904002B                          (3/1023)532+         LGR   R2,R11                  *
0005A8 1B55                              (3/1024)533+         SR    R5,R5                   *
0005AA                                   (3/1025)534+ToString0230 DC 0h'0'                  *
0005AA 89500008                          (3/1026)535+         SLL   R5,8                    *
0005AE 43502000                          (3/1027)536+         IC    R5,0(,R2)               *
0005B2 1B44                              (3/1028)537+         SR    R4,R4                   *
0005B4 5D40C07C                00031C    (3/1029)538+         D     R4,=F'10'               *
0005B8 42502000                          (3/1030)539+         STC   R5,0(,R2)               *
0005BC 1854                              (3/1031)540+         LR    R5,R4                   *
0005BE 41202001                          (3/1032)541+         LA    R2,1(,R2)               *
0005C2 EC21FFF44065            0005AA    (3/1033)542+         CLGRJL   R2,R1,ToString0230   *
0005C8 EC760007C065            0005D6    (3/1034)543+         CLGRJNH   R7,R6,ToString0240  *
0005CE D222D8D0D8D1     0008D0 0008D1    (3/1035)544+         MVC   FpconWork+2056(35),FpconWork+2057
0005D4 1876                              (3/1036)545+         LR    R7,R6                   *
0005D6                                   (3/1037)546+ToString0240 DC 0h'0'                  *
0005D6 42507000                          (3/1038)547+         STC   R5,0(,R7)               *
0005DA D6007000D0BF            0000BF    (3/1039)548+         OC    0(1,R7),FpconZero       *
0005E0 41707001                          (3/1040)549+         LA    R7,1(,R7)               *
0005E4 9500B000                          (3/1041)550+         CLI   0(R11),0                *
0005E8 A774FFDC                0005A0    (3/1042)551+         JNE   ToString0220            *
0005EC 41B0B001                          (3/1043)552+         LA    R11,1(,R11)             *
0005F0 ECB1FFD84065            0005A0    (3/1044)553+         CLGRJL   R11,R1,ToString0220  *
0005F6                                   (3/1046)555+***********************************************************************
0005F6                                   (3/1047)556+*        Copy the decimal digits (up to GenDigits+1) into the         *
0005F6                                   (3/1048)557+*        string, putting them back into the correct order.            *
0005F6                                   (3/1049)558+*        R1:  address of decimal point                                *
0005F6                                   (3/1050)559+*        R7:  address past high-order decimal digit                   *
0005F6                                   (3/1051)560+*        R8:  base-10 exponent                                        *
0005F6                                   (3/1052)561+*        R11: address of decimal point                                *
0005F6                                   (3/1053)562+*        R14: address of end of number                                *
0005F6                                   (3/1054)563+***********************************************************************
0005F6 4160D8D0                0008D0    (3/1055)564+         LA    R6,FpconWork+2056   Reverse the digits into the string
0005FA E320D0A00004            0000A0    (3/1056)565+         LG    R2,FpconStringAddr      *
000600 A7380001                          (3/1057)566+         LHI   R3,1                    *
000604 4A30D0BA                0000BA    (3/1058)567+         AH    R3,FpconGenDigits       *
000608                                   (3/1059)568+ToString0250 DC 0h'0'                  *
000608 E3707FFFFF71                       (3/344)570+         LAY   R7,-1(,R7)
00060E EC76005F4065            0006CC    (3/1061)572+         CLGRJL   R7,R6,ToString0500   have all of them: branch
000614 D20020007000                      (3/1062)573+         MVC   0(1,R2),0(R7)           *
00061A 41202001                          (3/1063)574+         LA    R2,1(,R2)               *
00061E A736FFF5                000608    (3/1064)575+         BRCT  R3,ToString0250         *
000622 A7F4011E                00085E    (3/1065)576+         J     ToString1000            have enough digits: branch
000626                                   (3/1067)578+***********************************************************************
000626                                   (3/1068)579+*        Determine the exponent of a number less than 1 by            *
000626                                   (3/1069)580+*        multiplying by 10 until it is greater than 1.                *
000626                                   (3/1070)581+*        R0:  base-256 exponent (range 0 to -2061)                    *
000626                                   (3/1071)582+*        R11: address of start of number                              *
000626                                   (3/1072)583+*             Number is base-256 with implied decimal point           *
000626                                   (3/1073)584+*             just before the digit at R11.                           *
000626                                   (3/1074)585+*        R14: address of end of number (no more than 15 from start)   *
000626                                   (3/1075)586+***********************************************************************
000626                                   (3/1076)587+ToString0300 DC 0h'0'
000626 A7880001                          (3/1077)588+         LHI   R8,1                Initialize base-10 exponent
00062A E3E0EFFFFF71                       (3/344)591+         LAY   R14,-1(,R14)
000630 1B33                              (3/1079)593+         SR    R3,R3               Clear carry register
000632 B904005B                          (3/1080)594+         LGR   R5,R11              Get address of first non-zero
000636 1310                              (3/1081)595+         LCR   R1,R0               Is decimal position at number?
000638 A7D40012                00065C    (3/1082)596+         JNP   ToString0310            yes: branch
00063C D20FD8D8B000     0008D8           (3/1083)597+         MVC   FpconWork+2064(16),0(R11) Move number to end
000642 B90B00EB                          (3/1084)598+         SLGR   R14,R11                of work area
000646 41B0D8D8                0008D8    (3/1085)599+         LA    R11,FpconWork+2064  Set R11 to decimal point position
00064A 41EED8D8                0008D8    (3/1086)600+         LA    R14,FpconWork+2064(R14) and R14 to last digit
00064E 4150D8D8                0008D8    (3/1087)601+         LA    R5,FpconWork+2064       and R5 to first non-zero
000652 B91800B0                          (3/1088)602+         AGFR   R11,R0                 *
000656 B904000B                          (3/1089)603+         LGR   R0,R11              Clear digits between
00065A 0E02                              (3/1090)604+         MVCL  R0,R2                   decimal point and number
00065C                                   (3/1091)605+ToString0310 DC 0h'0'              Until carry:
00065C B904002E                          (3/1092)606+         LGR   R2,R14                  *
000660 A78AFFFF                          (3/1093)607+         AHI   R8,-1                   decrement base-10 exponent
000664                                   (3/1094)608+ToString0320 DC 0h'0'                  multiply the number by 10
000664 E34020000094                      (3/1095)609+         LLC   R4,0(,R2)               *
00066A A74C000A                          (3/1096)610+         MHI   R4,10                   *
00066E 1A43                              (3/1097)611+         AR    R4,R3                   *
000670 42402000                          (3/1098)612+         STC   R4,0(,R2)               *
000674 1834                              (3/1099)613+         LR    R3,R4                   *
000676 E3202FFFFF71                       (3/344)615+         LAY   R2,-1(,R2)
00067C 88300008                          (3/1101)617+         SRL   R3,8                    *
000680 EC25FFF2A065            000664    (3/1102)618+         CLGRJNL   R2,R5,ToString0320  *
000686 9500E000                          (3/1103)619+         CLI   0(R14),0                If last digit
00068A A7740005                000694    (3/1104)620+         JNE   ToString0330            is now zero,
00068E E3E0EFFFFF71                       (3/344)623+         LAY   R14,-1(,R14)
000694                                   (3/1106)625+ToString0330 DC 0h'0'                  *
000694 EC38FFE4007E            00065C    (3/1107)626+         CIJE  R3,0,ToString0310       no carry: branch
00069A EC5B000BC065            0006B0    (3/1108)627+         CLGRJNH   R5,R11,ToString0340 carry from decimal point: branch
0006A0 E3505FFFFF71                       (3/344)630+         LAY   R5,-1(,R5)
0006A6 42305000                          (3/1110)632+         STC   R3,0(,R5)               set new high non-zero digit
0006AA 1B33                              (3/1111)633+         SR    R3,R3                   clear carry
0006AC A7F4FFD8                00065C    (3/1112)634+         J     ToString0310            and go do another multiply
0006B0                                   (3/1113)635+ToString0340 DC 0h'0'
0006B0 41E0E001                          (3/1114)636+         LA    R14,1(,R14)         Reset R14 to end of number
0006B4 E320D0A00004            0000A0    (3/1115)637+         LG    R2,FpconStringAddr  Put the carry digit into
0006BA 42302000                          (3/1116)638+         STC   R3,0(,R2)               the string
0006BE D6002000D0BF            0000BF    (3/1117)639+         OC    0(1,R2),FpconZero       *
0006C4 41202001                          (3/1118)640+         LA    R2,1(,R2)               *
0006C8 4830D0BA                0000BA    (3/1119)641+         LH    R3,FpconGenDigits   Get number of digits needed
0006CC                                   (3/1121)643+***********************************************************************
0006CC                                   (3/1122)644+*        Extract the rest of the needed fraction digits needed        *
0006CC                                   (3/1123)645+*        by multiplying the number by 10 and extracting the carry.    *
0006CC                                   (3/1124)646+*        R2:  address of where to put next digit                      *
0006CC                                   (3/1125)647+*        R3:  number of digits needed                                 *
0006CC                                   (3/1126)648+*        R8:  base-10 exponent                                        *
0006CC                                   (3/1127)649+*        R11: address of start of number                              *
0006CC                                   (3/1128)650+*             Number is base-256 with implied decimal point           *
0006CC                                   (3/1129)651+*             just before the digit at R11.                           *
0006CC                                   (3/1130)652+*        R14: address of end of number                                *
0006CC                                   (3/1131)653+***********************************************************************
0006CC                                   (3/1132)654+ToString0500 DC 0h'0'
0006CC ECBE00C9A065            00085E    (3/1133)655+         CLGRJNL   R11,R14,ToString1000 No fraction left: branch
0006D2 E3E0EFFFFF71                       (3/344)658+         LAY   R14,-1(,R14)
0006D8 B9140003                          (3/1135)660+         LGFR   R0,R3              Don't need to use more than
0006DC 88000001                          (3/1136)661+         SRL   R0,1                    R3/2 digits of the fraction
0006E0 B90A000B                          (3/1137)662+         ALGR   R0,R11                 *
0006E4 ECE0000E4065            000700    (3/1138)663+         CLGRJL   R14,R0,ToString0520  *
0006EA B90400E0                          (3/1139)664+         LGR   R14,R0                  *
0006EE                                   (3/1140)665+ToString0510 DC 0h'0'              Find last non-zero digit
0006EE 9500E000                          (3/1141)666+         CLI   0(R14),0                *
0006F2 A7740007                000700    (3/1142)667+         JNE   ToString0520            *
0006F6 ECEB00B4C065            00085E    (3/1143)668+         CLGRJNH   R14,R11,ToString1000
0006FC A7E7FFF9                0006EE    (3/1144)669+         BRCTG   R14,ToString0510      *
000700                                   (3/1145)670+ToString0520 DC 0h'0'              For each needed digit:
000700 1B00                              (3/1146)671+         SR    R0,R0                   *
000702 B904001E                          (3/1147)672+         LGR   R1,R14                  *
000706                                   (3/1148)673+ToString0530 DC 0h'0'                  multiply the number by 10
000706 E34010000094                      (3/1149)674+         LLC   R4,0(,R1)               *
00070C A74C000A                          (3/1150)675+         MHI   R4,10                   *
000710 1E40                              (3/1151)676+         ALR   R4,R0                   *
000712 42401000                          (3/1152)677+         STC   R4,0(,R1)               *
000716 1804                              (3/1153)678+         LR    R0,R4                   *
000718 E3101FFFFF71                       (3/344)680+         LAY   R1,-1(,R1)
00071E 88000008                          (3/1155)682+         SRL   R0,8                    *
000722 EC1BFFF2A065            000706    (3/1156)683+         CLGRJNL   R1,R11,ToString0530 *
000728 42002000                          (3/1157)684+         STC   R0,0(,R2)               extract carry as
00072C D6002000D0BF            0000BF    (3/1158)685+         OC    0(1,R2),FpconZero       next decimal digit
000732 41202001                          (3/1159)686+         LA    R2,1(,R2)               *
000736 9500E000                          (3/1160)687+         CLI   0(R14),0                If last digit
00073A A7740008                00074A    (3/1161)688+         JNE   ToString0540            is now zero,
00073E E3E0EFFFFF71                       (3/344)691+         LAY   R14,-1(,R14)
000744 ECBE008D2065            00085E    (3/1163)693+         CLGRJH   R11,R14,ToString1000 no more fraction: branch
00074A                                   (3/1164)694+ToString0540 DC 0h'0'                  *
00074A A736FFDB                000700    (3/1165)695+         BRCT  R3,ToString0520         go get next digit
00074E A7F40088                00085E    (3/1166)696+         J     ToString1000
000752                                   (3/1168)698+***********************************************************************
000752                                   (3/1169)699+*        Extract the digits of a decimal floating point number        *
000752                                   (3/1170)700+*        to the string buffer.                                        *
000752                                   (3/1171)701+***********************************************************************
000752                                   (3/1172)702+ToString0600 DC 0h'0'
000752 9178D090                000090    (3/1173)703+         TM    FpconValueE,B'01111000' NAN or INF?
000756 A71402A9                000CA8    (3/1174)704+         JO    ToStringNanDec          yes: branch
00075A E320D0A00004            0000A0    (3/1175)705+         LG    R2,FpconStringAddr  Get address of string buffer
000760 9510D0BC                0000BC    (3/1178)706+         CLI   FpconValueLen,FpconValueLenL Extended value?
000764 A7840029                0007B6    (3/1179)707+         JE    ToString0620            yes: branch
000768 6000D0C8                0000C8    (3/1183)708+         STD   FPR0,FpconWork      Save FPR0
00076C 6800D090                000090    (3/1185)709+         LD    FPR0,FpconValueD    Get short/long value
000770 9508D0BC                0000BC    (3/1186)710+         CLI   FpconValueLen,FpconValueLenD Long value?
000774 A7840004                00077C    (3/1187)711+         JE    ToString0610            yes: branch
000778 B3D40000                          (3/1188)712+         LDETR FPR0,FPR0,0         Convert short to long
00077C                                   (3/1189)713+ToString0610 DC 0h'0'
00077C B3E700F0                          (3/1190)714+         ESDTR R15,FPR0            Get number of significant digits
000780 ECF8006B007E            000856    (3/1191)715+         CIJE  R15,0,ToStringZeroR0       No significant digits: branch
000786 B3E50080                          (3/1192)716+         EEDTR R8,FPR0             Get biased exponent
00078A B3E20000                          (3/1193)717+         CUDTR R0,FPR0             Convert digits to packed
00078E 6800D0C8                0000C8    (3/1194)718+         LD    FPR0,FpconWork      Restore FPR0
000792 A78AFE72                          (3/1195)719+         AHI   R8,-398             Compute unbiased exponent
000796 1A8F                              (3/1196)720+         AR    R8,R15                  *
000798 E300D0D80024            0000D8    (3/1197)721+         STG   R0,FpconWork+16     Save packed digits
00079E B9090000                          (3/1198)722+         SGR   R0,R0               Clear R0
0007A2 F3E7D0C8D0D8     0000C8 0000D8    (3/1199)723+         UNPK  FpconWork(15),FpconWork+16(8) Convert digits
0007A8 F321D0D6D0DF     0000D6 0000DF    (3/1200)724+         UNPK  FpconWork+14(3),FpconWork+16+7(2) to EBCDIC
0007AE 41E0D0D8                0000D8    (3/1201)725+         LA    R14,FpconWork+16    Get address past last digit
0007B2 A7F40036                00081E    (3/1202)726+         J     ToString0640
0007B6                                   (3/1203)727+ToString0620 DC 0h'0'
0007B6 6000D0C8                0000C8    (3/1206)728+         STD   FPR0,FpconWork      Save FPR0
0007BA 6020D0D0                0000D0    (3/1207)729+         STD   FPR2,FpconWork+8     and FPR2
0007BE 6800D090                000090    (3/1209)730+         LD    FPR0,FpconValueL    Get extended value
0007C2 6820D098                000098    (3/1210)731+         LD    FPR2,FpconValueL+8      *
0007C6 B3EF00F0                          (3/1211)732+         ESXTR R15,FPR0            Get number of significant digits
0007CA ECF80044007E            000852    (3/1212)733+         CIJE  R15,0,ToStringZeroR2       No significant digits: branch
0007D0 B3ED0080                          (3/1213)734+         EEXTR R8,FPR0             Get biased exponent
0007D4 B3EA0000                          (3/1214)735+         CUXTR R0,FPR0             Convert low-order digits to packed
0007D8 EB01D0F00024            0000F0    (3/1215)736+         STMG  R0,R1,FpconWork+40  Save low-order packed digits
0007DE B9090000                          (3/1216)737+         SGR   R0,R0               Clear R0
0007E2 B9090011                          (3/1217)738+         SGR   R1,R1                 and R1
0007E6 ECFC0008207E            0007F6    (3/1218)739+         CIJNH R15,32,ToString0630 Non-zero high-order digits: branch
0007EC ED0000200049                      (3/1219)740+         SRXT  FPR0,FPR0,32        Convert high-order digits
0007F2 B3EA0000                          (3/1220)741+         CUXTR R0,FPR0                 to packed
0007F6                                   (3/1221)742+ToString0630 DC 0h'0'
0007F6 4210D0EF                0000EF    (3/1222)743+         STC   R1,FpconWork+39     Save high-order packed digits
0007FA 6800D0C8                0000C8    (3/1223)744+         LD    FPR0,FpconWork      Restore FPR0
0007FE 6820D0D0                0000D0    (3/1224)745+         LD    FPR2,FpconWork+8        and FPR2
000802 A78AE7E0                          (3/1225)746+         AHI   R8,-6176            Compute unbiased exponent
000806 1A8F                              (3/1226)747+         AR    R8,R15                  *
000808 F3E7D0C8D0EF     0000C8 0000EF    (3/1227)748+         UNPK  FpconWork(15),FpconWork+39(8) Convert digits
00080E F3E7D0D6D0F6     0000D6 0000F6    (3/1228)749+         UNPK  FpconWork+14(15),FpconWork+39+7(8) to EBCDIC
000814 F363D0E4D0FD     0000E4 0000FD    (3/1229)750+         UNPK  FpconWork+28(7),FpconWork+39+14(4)
00081A 41E0D0EA                0000EA    (3/1230)751+         LA    R14,FpconWork+34    Get address past last digit
00081E                                   (3/1231)752+ToString0640 DC 0h'0'
00081E 183F                              (3/1232)753+         LR    R3,R15              Copy significant digits
000820 B90900EF                          (3/1233)754+         SGR   R14,R15                 to string buffer
000824 0E2E                              (3/1234)755+         MVCL  R2,R14                  *
000826 95F0D0BF                0000BF    (3/1235)756+         CLI   FpconZero,C'0'      EBCDIC?
00082A A784001A                00085E    (3/1236)757+         JE    ToString1000            yes: branch
00082E B90400F2                          (3/1237)758+         LGR   R15,R2              Convert digits to ASCII
000832 E3E0D0A00004            0000A0    (3/1238)759+         LG    R14,FpconStringAddr     *
000838 B90900FE                          (3/1239)760+         SGR   R15,R14                 *
00083C                                   (3/1240)761+ToString0650 DC 0h'0'                  *
00083C 940FE000                          (3/1241)762+         NI    0(R14),X'0F'            *
000840 D600E000D0BF            0000BF    (3/1242)763+         OC    0(1,R14),FpconZero      *
000846 41E0E001                          (3/1243)764+         LA    R14,1(,R14)             *
00084A A7F6FFF9                00083C    (3/1244)765+         BRCT  R15,ToString0650        *
00084E A7F40008                00085E    (3/1246)766+         J     ToString1000
000852                                   (3/1247)767+ToStringZeroR2 DC 0h'0'
000852 6820D0D0                0000D0    (3/1248)768+         LD    FPR2,FpconWork+8    Restore FPR2
000856                                   (3/1249)769+ToStringZeroR0 DC 0h'0'
000856 6800D0C8                0000C8    (3/1250)770+         LD    FPR0,FpconWork      Restore FPR0
00085A A7F401A1                000B9C    (3/1251)771+         J     ToStringZero
00085E                                   (3/1521)773+***********************************************************************
00085E                                   (3/1522)774+*        The significant decimal character digits are now in          *
00085E                                   (3/1523)775+*        the string buffer (up to GenDigits+1) with the implied       *
00085E                                   (3/1524)776+*        decimal point before the first digit.                        *
00085E                                   (3/1525)777+*        R2:  address after last digit in buffer                      *
00085E                                   (3/1526)778+*        R8:  base-10 exponent                                        *
00085E                                   (3/1527)779+***********************************************************************
00085E                                   (3/1528)780+ToString1000 DC 0h'0'
00085E E330D0A00004            0000A0    (3/1529)781+         LG    R3,FpconStringAddr  Get buffer address
000864 B9040042                          (3/1530)782+         LGR   R4,R2               Compute number of digits in buffer
000868 B90B0043                          (3/1531)783+         SLGR   R4,R3                  *
00086C E310D0BA0015            0000BA    (3/1532)784+         LGH   R1,FpconGenDigits   Get number of digits wanted
000872                                   (3/1533)785+***********************************************************************
000872                                   (3/1534)786+*        R1:  maximum digits needed                                   *
000872                                   (3/1535)787+*        R2:  address after last digit in buffer                      *
000872                                   (3/1536)788+*        R3:  address of string buffer                                *
000872                                   (3/1537)789+*        R4:  number of digits in buffer                              *
000872                                   (3/1538)790+*        R8:  base-10 exponent                                        *
000872                                   (3/1539)791+***********************************************************************
000872 9102D0BE                0000BE    (3/1540)792+         TM    FpconFlags,FpconFixedDec Decimal truncation wanted?
000876 A7840024                0008BE    (3/1541)793+         JZ    ToString1020            no: branch
00087A 1804                              (3/1542)794+         LR    R0,R4               Compute number of decimal digits
00087C 1B08                              (3/1543)795+         SR    R0,R8                   *
00087E 4900D0B6                0000B6    (3/1544)796+         CH    R0,FpconMaxDecimal  Too many decimal digits?
000882 A7D4001E                0008BE    (3/1545)797+         JNH   ToString1020            no: branch
000886 E310D0B60015            0000B6    (3/1546)798+         LGH   R1,FpconMaxDecimal  Compute number of digits to keep
00088C B9180018                          (3/1547)799+         AGFR   R1,R8                  *
000890 A7240017                0008BE    (3/1548)800+         JP    ToString1020            at least 1: branch
000894 B9040023                          (3/1549)801+         LGR   R2,R3                   (get string buffer address)
000898 A7440007                0008A6    (3/1550)802+         JM    ToString1010            less than 0: branch
00089C D500D0C73000     0000C7           (3/1551)803+         CLC   FpconFive,0(R3)     Round to 1 in last position?
0008A2 A7D40034                00090A    (3/1552)804+         JNH   ToString1040            yes: branch
0008A6                                   (3/1553)805+ToString1010 DC 0h'0'
0008A6 D2002000D0BF            0000BF    (3/1554)806+         MVC   0(1,R2),FpconZero   Set number to 0
0008AC 4880D0B2                0000B2    (3/1555)807+         LH    R8,FpconMaxLeading  Leading digits wanted?
0008B0 EC880048007E            000940    (3/1556)808+         CIJE  R8,0,ToString1100       no: branch (.0)
0008B6 A7880001                          (3/1557)809+         LHI   R8,1                Set exponent to 1 (0.)
0008BA A7F40043                000940    (3/1558)810+         J     ToString1100
0008BE                                   (3/1560)812+ToString1020 DC 0h'0'
0008BE EC41002FC076            00091C    (3/1561)813+         CRJNH R4,R1,ToString1050  Not more digits than needed: branch
0008C4 41213000                          (3/1562)814+         LA    R2,0(R1,R3)         Get address of rounding digit
0008C8 D500D0C72000     0000C7           (3/1563)815+         CLC   FpconFive,0(R2)     Need to round up?
0008CE A7D40006                0008DA    (3/1564)816+         JNH   ToString1030            yes: branch
0008D2 92002000                          (3/1565)817+         MVI   0(R2),0             Truncate number here
0008D6 A7F40023                00091C    (3/1566)818+         J     ToString1050
0008DA                                   (3/1567)819+ToString1030 DC 0h'0'              Increment the number
0008DA 92002000                          (3/1568)820+         MVI   0(R2),0                 *
0008DE EC230016C065            00090A    (3/1569)821+         CLGRJNH   R2,R3,ToString1040  overflow: branch
0008E4 E3202FFFFF71                       (3/344)823+         LAY   R2,-1(,R2)
0008EA E31020000094                      (3/1571)825+         LLC   R1,0(,R2)               *
0008F0 A71A0001                          (3/1572)826+         AHI   R1,1                    *
0008F4 42102000                          (3/1573)827+         STC   R1,0(,R2)               *
0008F8 D500D0C62000     0000C6           (3/1574)828+         CLC   FpconNine,0(R2)         *
0008FE A744FFEE                0008DA    (3/1575)829+         JL    ToString1030            *
000902 41202001                          (3/1576)830+         LA    R2,1(,R2)           Get end of number address
000906 A7F4000B                00091C    (3/1577)831+         J     ToString1050
00090A                                   (3/1578)832+ToString1040 DC 0h'0'
00090A 92012000                          (3/1579)833+         MVI   0(R2),1             Set number to 1.0
00090E D6002000D0BF            0000BF    (3/1580)834+         OC    0(1,R2),FpconZero       *
000914 A78A0001                          (3/1581)835+         AHI   R8,1                Increment exponent
000918 A7F40014                000940    (3/1582)836+         J     ToString1100
00091C                                   (3/1584)838+ToString1050 DC 0h'0'
00091C E3202FFFFF71                       (3/344)841+         LAY   R2,-1(,R2)
000922 950AD0BD                0000BD    (3/1586)843+         CLI   FpconBase,FpconBase10 Decimal floating point?
000926 A784000D                000940    (3/1587)844+         JE    ToString1100            yes: branch
00092A                                   (3/1588)845+ToString1060 DC 0h'0'              Remove all trailing zeros
00092A EC23000BC065            000940    (3/1589)846+         CLGRJNH   R2,R3,ToString1100  from number
000930 910F2000                          (3/1590)847+         TM    0(R2),15                *
000934 A7740006                000940    (3/1591)848+         JNZ   ToString1100            *
000938 92002000                          (3/1592)849+         MVI   0(R2),0                 *
00093C A727FFF7                00092A    (3/1593)850+         BRCTG   R2,ToString1060       *
000940                                   (3/1595)852+***********************************************************************
000940                                   (3/1596)853+*        The significant decimal character digits (rounded if needed) *
000940                                   (3/1597)854+*        are in the string buffer (up to GenDigits) with the implied  *
000940                                   (3/1598)855+*        decimal point before the first digit.  The number is ready   *
000940                                   (3/1599)856+*        to be formatted.                                             *
000940                                   (3/1600)857+*        R2:  address of last digit in buffer                         *
000940                                   (3/1601)858+*        R3:  address of string buffer                                *
000940                                   (3/1602)859+*        R8:  base-10 exponent                                        *
000940                                   (3/1603)860+***********************************************************************
000940                                   (3/1604)861+ToString1100 DC 0h'0'
000940 9101D0BE                0000BE    (3/1605)862+         TM    FpconFlags,FpconRetDigits Format result?
000944 A774019D                000C7E    (3/1606)863+         JNZ   ToStringRetDigits       no: branch
000948 B90B0023                          (3/1607)864+         SLGR   R2,R3              Compute digits-1
00094C 4140D0C8                0000C8    (3/1608)865+         LA    R4,FpconWork        Copy digits from string buffer
000950 C620FFFFFCAE            0002AC    (3/1609)866+         EXRL  R2,MVC_R4_R3            to work area
000956 C620FFFFFCB7            0002C4    (3/1610)867+         EXRL  R2,XC_R3_R3             and clear buffer
00095C 9180D090                000090    (3/1611)868+         TM    FpconValueE,X'80'   Is value negative?
000960 A774000D                00097A    (3/1612)869+         JNZ   ToString1110            yes: branch
000964 9120D0BE                0000BE    (3/1613)870+         TM    FpconFlags,FpconValuePlus Plus sign wanted?
000968 A784000E                000984    (3/1614)871+         JZ    ToString1120            no: branch
00096C D2003000D0C0            0000C0    (3/1615)872+         MVC   0(1,R3),FpconPlus   Set plus sign
000972 41303001                          (3/1616)873+         LA    R3,1(,R3)               *
000976 A7F40007                000984    (3/1617)874+         J     ToString1120
00097A                                   (3/1618)875+ToString1110 DC 0h'0'
00097A D2003000D0C1            0000C1    (3/1619)876+         MVC   0(1,R3),FpconMinus  Set minus sign
000980 41303001                          (3/1620)877+         LA    R3,1(,R3)               *
000984                                   (3/1621)878+***********************************************************************
000984                                   (3/1622)879+*        R2:  number of available digits - 1                          *
000984                                   (3/1623)880+*        R3:  address of string buffer past sign (if any)             *
000984                                   (3/1624)881+*        R4:  address of digits in FpconWork                          *
000984                                   (3/1625)882+*        R8:  base-10 exponent                                        *
000984                                   (3/1626)883+***********************************************************************
000984                                   (3/1627)884+ToString1120 DC 0h'0'
000984 EC8C004C007E            000A1C    (3/1628)885+         CIJNH R8,0,ToString1200   Number not at least 1.0: branch
00098A 4800D0B2                0000B2    (3/1629)886+         LH    R0,FpconMaxLeading  Get number of leading digits wanted
00098E EC0C007B017E            000A84    (3/1630)887+         CIJNH R0,1,ToString1300   .99999 or 9.9999 format: branch
000994 EC8000782076            000A84    (3/1631)888+         CRJH  R8,R0,ToString1300  Number won't fit: branch
00099A                                   (3/1633)890+***********************************************************************
00099A                                   (3/1634)891+*        Format number as 999999.999999                               *
00099A                                   (3/1635)892+***********************************************************************
00099A C620FFFFFC8C            0002B2    (3/1636)893+         EXRL  R2,MVC_R3_R4        Move digits to string
0009A0 B9180038                          (3/1637)894+         AGFR   R3,R8              Point to decimal point position
0009A4 1B28                              (3/1638)895+         SR    R2,R8               Any digits after decimal?
0009A6 A7B4001E                0009E2    (3/1639)896+         JNM   ToString1150            yes: branch
0009AA A72A0001                          (3/1640)897+         AHI   R2,1                Any trailing zeros in integer?
0009AE A784000C                0009C6    (3/1641)898+         JZ    ToString1140            no: branch
0009B2 B9180032                          (3/1642)899+         AGFR   R3,R2              Point to first zero
0009B6 1322                              (3/1643)900+         LCR   R2,R2               Fill integer part with zeros
0009B8                                   (3/1644)901+ToString1130 DC 0h'0'                  *
0009B8 D2003000D0BF            0000BF    (3/1645)902+         MVC   0(1,R3),FpconZero       *
0009BE 41303001                          (3/1646)903+         LA    R3,1(,R3)               *
0009C2 A726FFFB                0009B8    (3/1647)904+         BRCT  R2,ToString1130         *
0009C6                                   (3/1648)905+ToString1140 DC 0h'0'
0009C6 4800D0B4                0000B4    (3/1649)906+         LH    R0,FpconMinDecimal  Get trailing decimal positions
0009CA 1200                              (3/1650)907+         LTR   R0,R0               Decimal point wanted?
0009CC A7440025                000A16    (3/1651)908+         JM    ToString1190            no: branch
0009D0 D2003000D0C2            0000C2    (3/1652)909+         MVC   0(1,R3),FpconDecimal Set decimal point
0009D6 41303001                          (3/1653)910+         LA    R3,1(,R3)               *
0009DA A7240017                000A08    (3/1654)911+         JP    ToString1160        Go fill decimal zeros
0009DE A7F4001C                000A16    (3/1655)912+         J     ToString1190        No zeros needed: branch
0009E2                                   (3/1657)914+ToString1150 DC 0h'0'
0009E2 B9180048                          (3/1658)915+         AGFR   R4,R8              Point to first decimal digit
0009E6 D2003000D0C2            0000C2    (3/1659)916+         MVC   0(1,R3),FpconDecimal Set decimal point
0009EC 41303001                          (3/1660)917+         LA    R3,1(,R3)               *
0009F0 C620FFFFFC61            0002B2    (3/1661)918+         EXRL  R2,MVC_R3_R4        Move decimal digits to string
0009F6 A72A0001                          (3/1662)919+         AHI   R2,1                    *
0009FA B91A0032                          (3/1663)920+         ALGFR   R3,R2                 *
0009FE 4800D0B4                0000B4    (3/1664)921+         LH    R0,FpconMinDecimal  Get trailing decimal positions
000A02 1B02                              (3/1665)922+         SR    R0,R2               Any more decimal zeros needed?
000A04 A7D40009                000A16    (3/1666)923+         JNP   ToString1190            no: branch
000A08                                   (3/1667)924+ToString1160 DC 0h'0'              Fill minimum decimal digits
000A08 D2003000D0BF            0000BF    (3/1668)925+         MVC   0(1,R3),FpconZero       with zeros
000A0E 41303001                          (3/1669)926+         LA    R3,1(,R3)               *
000A12 A706FFFB                000A08    (3/1670)927+         BRCT  R0,ToString1160         *
000A16                                   (3/1672)929+ToString1190 DC 0h'0'
000A16 1B88                              (3/1673)930+         SR    R8,R8               Don't need exponent now
000A18 A7F4006D                000AF2    (3/1674)931+         J     ToString1500
000A1C                                   (3/1676)933+***********************************************************************
000A1C                                   (3/1677)934+*        Number is less than 1.0                                      *
000A1C                                   (3/1678)935+***********************************************************************
000A1C                                   (3/1679)936+ToString1200 DC 0h'0'
000A1C 4800D0B6                0000B6    (3/1680)937+         LH    R0,FpconMaxDecimal  Get maximum decimal digits
000A20 EC080032007E            000A84    (3/1681)938+         CIJE  R0,0,ToString1300       zero: branch
000A26 A7180001                          (3/1682)939+         LHI   R1,1                Will the number fit?
000A2A 1A12                              (3/1683)940+         AR    R1,R2                   *
000A2C 1B18                              (3/1684)941+         SR    R1,R8                   *
000A2E EC10002B2076            000A84    (3/1685)942+         CRJH  R1,R0,ToString1300      no: branch
000A34                                   (3/1686)943+***********************************************************************
000A34                                   (3/1687)944+*        Format as .00009999 or 0.00009999                            *
000A34                                   (3/1688)945+***********************************************************************
000A34 4800D0B2                0000B2    (3/1689)946+         LH    R0,FpconMaxLeading  .99999 format?
000A38 EC080008007E            000A48    (3/1690)947+         CIJE  R0,0,ToString1210       yes: branch
000A3E D2003000D0BF            0000BF    (3/1691)948+         MVC   0(1,R3),FpconZero   Set leading zero
000A44 41303001                          (3/1692)949+         LA    R3,1(,R3)               *
000A48                                   (3/1693)950+ToString1210 DC 0h'0'
000A48 D2003000D0C2            0000C2    (3/1694)951+         MVC   0(1,R3),FpconDecimal Set decimal point
000A4E 41303001                          (3/1695)952+         LA    R3,1(,R3)               *
000A52 4800D0B4                0000B4    (3/1696)953+         LH    R0,FpconMinDecimal  Get minimum decimal positions
000A56 1388                              (3/1697)954+         LCR   R8,R8               Get number of leading zeros
000A58 A784000A                000A6C    (3/1698)955+         JZ    ToString1230            none: branch
000A5C                                   (3/1699)956+ToString1220 DC 0h'0'              Set leading zeros
000A5C 0600                              (3/1700)957+         BCTR  R0,0                    *
000A5E D2003000D0BF            0000BF    (3/1701)958+         MVC   0(1,R3),FpconZero       *
000A64 41303001                          (3/1702)959+         LA    R3,1(,R3)               *
000A68 A786FFFA                000A5C    (3/1703)960+         BRCT  R8,ToString1220         *
000A6C                                   (3/1704)961+ToString1230 DC 0h'0'
000A6C C620FFFFFC23            0002B2    (3/1705)962+         EXRL  R2,MVC_R3_R4        Move the digits
000A72 A72A0001                          (3/1706)963+         AHI   R2,1                    *
000A76 B91A0032                          (3/1707)964+         ALGFR   R3,R2                 *
000A7A 1B02                              (3/1708)965+         SR    R0,R2               Compute trailing zeros needed
000A7C A7240034                000AE4    (3/1709)966+         JP    ToString1400            some needed: branch
000A80 A7F40039                000AF2    (3/1710)967+         J     ToString1500        No zeros needed: branch
000A84                                   (3/1712)969+***********************************************************************
000A84                                   (3/1713)970+*        Format number as 9.9999999                                   *
000A84                                   (3/1714)971+***********************************************************************
000A84                                   (3/1715)972+ToString1300 DC 0h'0'
000A84 4800D0B2                0000B2    (3/1716)973+         LH    R0,FpconMaxLeading  .99999 format?
000A88 EC0C001D007E            000AC2    (3/1717)974+         CIJNH R0,0,ToString1350       yes: branch
000A8E 0680                              (3/1718)975+         BCTR  R8,0                Decrement exponent
000A90 D20030004000                      (3/1719)976+         MVC   0(1,R3),0(R4)       Set units digit
000A96 41303001                          (3/1720)977+         LA    R3,1(,R3)               *
000A9A EC220011007E            000ABC    (3/1721)978+         CIJH  R2,0,ToString1310   Any decimal digits: branch
000AA0 4800D0B4                0000B4    (3/1722)979+         LH    R0,FpconMinDecimal  Get trailing decimal positions
000AA4 1200                              (3/1723)980+         LTR   R0,R0               Decimal point wanted?
000AA6 A7440026                000AF2    (3/1724)981+         JM    ToString1500            no: branch
000AAA D2003000D0C2            0000C2    (3/1725)982+         MVC   0(1,R3),FpconDecimal Set decimal point
000AB0 41303001                          (3/1726)983+         LA    R3,1(,R3)               *
000AB4 A7240018                000AE4    (3/1727)984+         JP    ToString1400        Go fill decimal zeros
000AB8 A7F4001D                000AF2    (3/1728)985+         J     ToString1500        No zeros needed: branch
000ABC                                   (3/1730)987+ToString1310 DC 0h'0'
000ABC 41404001                          (3/1731)988+         LA    R4,1(,R4)           Point to first decimal digit
000AC0 0620                              (3/1732)989+         BCTR  R2,0                Set length for move
000AC2                                   (3/1734)991+***********************************************************************
000AC2                                   (3/1735)992+*        Format number as .99999999                                   *
000AC2                                   (3/1736)993+***********************************************************************
000AC2                                   (3/1737)994+ToString1350 DC 0h'0'
000AC2 D2003000D0C2            0000C2    (3/1738)995+         MVC   0(1,R3),FpconDecimal Set decimal point
000AC8 41303001                          (3/1739)996+         LA    R3,1(,R3)               *
000ACC C620FFFFFBF3            0002B2    (3/1740)997+         EXRL  R2,MVC_R3_R4            *
000AD2 A72A0001                          (3/1741)998+         AHI   R2,1                    *
000AD6 B91A0032                          (3/1742)999+         ALGFR   R3,R2                 *
000ADA 4800D0B4                0000B4   (3/1743)1000+         LH    R0,FpconMinDecimal  Get trailing decimal positions
000ADE 1B02                             (3/1744)1001+         SR    R0,R2               Any more decimal zeros needed?
000AE0 A7D40009                000AF2   (3/17 and bias                                *
*        R7: bits to shift exponent left in halfword                  *
*        R11: address of start of number in FpconWork                 *
*        R14: address of end of number in FpconWork                   *
***********************************************************************
ToValue1150 DC 0h'0'
         CRJH  R0,R6,ToValueOverflow Exponent is too large: branch
         AR    R0,R6               Compute biased exponent
         JNP   ToValueUnderflow        too small: branch
         CLI   FpconValueLen,FpconValueLenE Short?
         JE    ToValue1170             yes: branch
         CLI   FpconValueLen,FpconValueLenD Long?
         JNE   ToValue1200             no: branch
         SPACE 1
         SR    R1,R1               Shift the value 4 bits left
         SR    R2,R2                   *
         LGR   R3,R14                  *
ToValue1160 DC 0h'0'                   *
*MCALL #=    25 LV= 2          BCTGR   R3,0                  *
         LAY   R3,-1(,R3)
*MEXIT #=    25 LV= 2 BCTGR
         IC    R2,0(,R3)               *
         SLL   R2,4                    *
         OR    R2,R1                   *
         STC   R2,0(,R3)               *
         SRL   R2,8                    *
         LR    R1,R2                   *
         CLGRJH   R3,R11,ToValue1160   *
*MCALL #=    26 LV= 2          BCTGR   R14,0             Last byte is nX
               ow zero
         LAY   R14,-1(,R14)
*MEXIT #=    26 LV= 2 BCTGR
         MVN   FpconValueD+1(1),0(R11) Copy the first digit
         J     ToValue1200
         SPACE 1
ToValue1170 DC 0h'0'
         LA    R3,1(,R11)          Any fraction digits to shift?
         CLGRJNL   R3,R14,ToValue1220  no: branch
         SR    R1,R1               Shift the fraction 1 bit right
ToValue1180 DC 0h'0'                   *
         LLC   R2,0(,R3)               *
         OR    R2,R1                   *
         LR    R1,R2                   *
         SRL   R2,1                    *
         STC   R2,0(,R3)               *
         SLL   R1,8                    *
         LA    R3,1(,R3)               *
         CLGRJL   R3,R14,ToValue1180   *
         SPACE 1
ToValue1200 DC 0h'0'
         LA    R11,1(,R11)         Skip X'01' byte
         SGR   R14,R11             Copy the mantissa
         JNP   ToValue1220             *
         CRJL  R14,R5,ToValue1210      *
         LR    R14,R5                  *
ToValue1210 DC 0h'0'                   *
         BCTR  R14,0                   *
         EXRL  R14,MVC_R4_R11          *
ToValue1220 DC 0h'0'
         SLL   R0,0(R7)            Get exponent in correct position
         LH    R1,FpconValueE      OR into first halfword of value
         OR    R1,R0                   *
         STH   R1,FpconValueE          *
         J     ReturnOk            All done!
         SPACE 1
***********************************************************************
*    Convert non-zero number to decimal floating point value.         *
*        R4: exponent (power of 10)                                   *
*        R5: number of bytes of FpconWork used for number.            *
*            Number is base-10 with each digit in a separate          *
*            byte and with the implied decimal point at end.          *
***********************************************************************
ToValue1500 DC 0h'0'
         CLI   FpconValueLen,FpconValueLenD Long value?
         JE    ToValue1520             yes: branch
         CLI   FpconValueLen,FpconValueLenE Short value?
         JE    ToValue1510             yes: branch
         LA    R1,34               Number of digits for extended
         LHI   R0,12287            Maximum exponent
         AHI   R4,6176             Add exponent bais
         J     ToValue1530
ToValue1510 DC 0h'0'
         LA    R1,7                Number of digits for short
         LHI   R0,191              Maximum exponent
         AHI   R4,101              Add exponent bias
         J     ToValue1530
ToValue1520 DC 0h'0'
         LA    R1,16               Number of digits for long
         LHI   R0,767              Maximum exponent
         AHI   R4,398              Add exponent bias
         SPACE 1
ToValue1530 DC 0h'0'               While exponent is too large:
         CRJNL R0,R4,ToValue1540       exponent not too large: branch
         LA    R14,FpconWork(R5)       get address of next digit
         CRJNL R5,R1,ToValueOverflow   too many digits: branch
         MVI   0(R14),0                add another zero
         AHI   R5,1                    increment number of digits
         BRCT  R4,ToValue1530          decrement exponent
         SPACE 1
ToValue1540 DC 0h'0'
         CIJNL R4,0,ToValue1560    Exponent not too small: branch
         AR    R5,R4               Are any digits left?
         JNP   ToValueUnderflow        no: branch
         SR    R4,R4               Exponent is now zero
         LA    R14,FpconWork-1(R5) Get address of new last digit
         CLI   1(R14),5            Need to round up?
         JL    ToValue1560             no: branch
         LA    R0,FpconWork        Get address of first digit
         SR    R15,R15             Round up value
ToValue1550 DC 0h'0'                   *
         IC    R15,0(,R14)             *
         AHI   R15,1                   *
         STC   R15,0(,R14)             *
         CIJNH R15,9,ToValue1560       no carry: branch
         MVI   0(R14),0                *
*MCALL #=    27 LV= 2          BCTGR   R14,0                 *
         LAY   R14,-1(,R14)
*MEXIT #=    27 LV= 2 BCTGR
         CLGRJNH   R0,R14,ToValue1550  *
         MVI   FpconWork,1         All 9's, so set to 10000...
         AHI   R4,1                Increment exponent
         SPACE 1
ToValue1560 DC 0h'0'
         SR    R1,R5               Compute # of zeros to prepend
         JNP   ToValue1600             none: branch
         LA    R15,FpconWork-1(R5) Shift digits to end of value
         LA    R14,0(R1,R15)           *
ToValue1570 DC 0h'0'                   *
         MVC   0(1,R14),0(R15)         *
*MCALL #=    28 LV= 2          BCTGR   R14,0                 *
         LAY   R14,-1(,R14)
*MEXIT #=    28 LV= 2 BCTGR
*MCALL #=    29 LV= 2          BCTGR   R15,0                 *
         LAY   R15,-1(,R15)
*MEXIT #=    29 LV= 2 BCTGR
         BRCT  R5,ToValue1570          *
         BCTR  R1,0                Set leading digits to zero
         EXRL  R1,ToValue1570_XC       *
Static   LOCTR ,
ToValue1570_XC XC FpconWork(0),FpconWork EXecuted instruction
ToValue  LOCTR ,
         SPACE 1
***********************************************************************
*    Convert digits in FpconWork to decimal floating point value.     *
*        R4: biased exponent                                          *
*        Value in FpconWork is the correct number of digits           *
*        for the size of the floating point value.                    *
***********************************************************************
ToValue1600 DC 0h'0'
         MVC   FpconWork+32(1),FpconValueE  Save sign bit
         STD   FPR0,FpconWork      Save FPR0
         CLI   FpconValueLen,FpconValueLenD Long value?
         JE    ToValue1610             yes: branch
         CLI   FpconValueLen,FpconValueLenL Extended value?
         JE    ToValue1620             yes: branch
         PACK  FpconWork+8(5),FpconWork(8) Pack digits
         LGF   R0,FpconWork+8      Convert digits to DFP
         CDUTR FPR0,R0                 *
         AHI   R4,398-101          Set exponent
         IEDTR FPR0,FPR0,R4            *
         LEDTR FPR0,0,FPR0,0       Convert to short
         STE   FPR0,FpconValueE    Return short value
         J     ToValue1640         Set sign and return
ToValue1610 DC 0h'0'               Long DFP:
         PACK  FpconWork+16(8),FpconWork(15) Pack digits
         PACK  FpconWork+16+7(2),FpconWork+14(3)
         LG    R0,FpconWork+16     Convert digits to DFP
         CDUTR FPR0,R0                 *
         IEDTR FPR0,FPR0,R4        Set exponent
         STD   FPR0,FpconValueD    Return long value
         J     ToValue1640         Set sign and return
ToValue1620 DC 0h'0'               Extended DFP:
         STD   FPR2,FpconWork+8    Save FPR2
         PACK  FpconWork+39(8),FpconWork(15) Pack digits
         PACK  FpconWork+39+7(8),FpconWork+14(15)
         PACK  FpconWork+39+14(4),FpconWork+28(7)
         LMG   R0,R1,FpconWork+40  Convert low-order digits to DFP
         CXUTR FPR0,R0                 *
         LLGC  R1,FpconWork+39     Get high-order 2 digits
         CIJE  R1,0,ToValue1630    High order 2 digits are zero: branch
         STD   FPR4,FpconWork+16   Save FPR4
         STD   FPR6,FpconWork+24    and FPR6
         SGR   R0,R0               Convert high-order digits to DFP
         CXUTR FPR4,R0                 *
         SLXT  FPR4,FPR4,32        Shift to high order
         AXTR  FPR0,FPR0,FPR4      Add high-order digits
         LD    FPR4,FpconWork+16   Restore FPR4
         LD    FPR6,FpconWork+24       and FPR6
ToValue1630 DC 0h'0'
         IEXTR FPR0,FPR0,R4        Set exponent
         STD   FPR0,FpconValueL    Return extended value
         STD   FPR2,FpconValueL+8      *
         LD    FPR2,FpconWork+8    Restore FPR2
ToValue1640 DC 0h'0'
         LD    FPR0,FpconWork      Restore FPR0
         OC    FpconValueE(1),FpconWork+32   Set sign bit
         J     ReturnOk            All done!
         SPACE 1
***********************************************************************
*        The number is too large.  Set the number to (MAX) and        *
*        return with the appropriate return code.                     *
***********************************************************************
ToValueOverflow DC 0h'0'
         CLI   FpconBase,FpconBase2 Binary format?
         JE    ToValueOverflowB        yes: branch
         CLI   FpconBase,FpconBase10 Decimal format?
         JE    ToValueOverflowD        yes: branch
         CLI   FpconValueLen,FpconValueLenE Short?
         JE    ToValueOverflowEH       yes: branch
         CLI   FpconValueLen,FpconValueLenD Long?
         JE    ToValueOverflowDH       yes: branch
         MVC   FpconValueL+8(1),FpconValueL Copy sign to second half
         OC    FpconValueL,=LH'(MAX)'    Set to extended maximum value
         J     ReturnOverflow
ToValueOverflowEH DC 0h'0'
         OC    FpconValueE,=LH'(MAX)'    Set to short maximum value
         J     ReturnOverflow
ToValueOverflowDH DC 0h'0'
         OC    FpconValueD,=LH'(MAX)'    Set to long maximum value
         J     ReturnOverflow
ToValueOverflowB DC 0h'0'
         CLI   FpconValueLen,FpconValueLenE Short binary?
         JE    ToValueOverflowEB       yes: branch
         CLI   FpconValueLen,FpconValueLenD Long binary?
         JE    ToValueOverflowDB       yes: branch
         OC    FpconValueL,=LB'(MAX)'    Set to extended maxiumum value
         J     ReturnOverflow
ToValueOverflowEB DC 0h'0'
         OC    FpconValueE,=EB'(MAX)'    Set to short maximum value
         J     ReturnOverflow
ToValueOverflowDB DC 0h'0'
         OC    FpconValueD,=DB'(MAX)'    Set to long maximum value
         J     ReturnOverflow
ToValueOverflowD DC 0h'0'
         CLI   FpconValueLen,FpconValueLenE Short decimal?
         JE    ToValueOverflowED       yes: branch
         CLI   FpconValueLen,FpconValueLenD Long decimal?
         JE    ToValueOverflowDD       yes: branch
         OC    FpconValueL,=LD'(MAX)'    Set to extended maxiumum value
         J     ReturnOverflow
ToValueOverflowED DC 0h'0'
         OC    FpconValueE,=ED'(MAX)'    Set to short maximum value
         J     ReturnOverflow
ToValueOverflowDD DC 0h'0'
         OC    FpconValueD,=DD'(MAX)'    Set to long maximum value
         J     ReturnOverflow
         SPACE 1
ToValueUnderflow DC 0h'0'
***********************************************************************
*        The number is too small.  Just set it to zero.               *
***********************************************************************
         MVI   FpconReturnCode+3,FpconRetUndFlo Indicate underflow
         SPACE 1
ToValueZero DC 0h'0'
***********************************************************************
*        The number is zero.  Leave the sign for IEEE format.         *
*        Remove the sign for IBM S/360 format.                        *
***********************************************************************
         CLI   FpconBase,FpconBase16 S/360 format?
         JNE   ReturnOk                no: branch (leave sign)
         MVI   FpconValueL,0       Clear sign bit
         J     ReturnOk            Done with conversion
         SPACE 1
         DROP  ,
         PRINT NoUhead
         TITLE 'Floating Point Conversion - Static Storage'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*        Static Data Area - Addressible via R12                       *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Static   LOCTR ,
         SPACE 1
MVC_R4_R3  MVC 0(0,R4),0(R3)       EXecuted instruction
MVC_R3_R4  MVC 0(0,R3),0(R4)       EXecuted instruction
MVC_R2_R11 MVC 0(0,R2),0(R11)      EXecuted instruction
MVC_R4_R11 MVC 0(0,R4),0(R11)      EXecuted instruction
XC_R3_R3   XC  0(0,R3),0(R3)       EXecuted instruction
         SPACE 1
         LTORG ,
         SPACE 1
EBCDIC   DC    X'F0 4E 60 4B C5 85 40'    0 + - . E e blank
ASCII    DC    X'30 2B 2D 2E 45 65 20'    0 + - . E e blank
         SPACE 1
StaticEnd DC   0d'0'
         SPACE 1
*        Register Equates
R0       EQU   0,,,,GR
R1       EQU   1,,,,GR
R2       EQU   2,,,,GR
R3       EQU   3,,,,GR
R4       EQU   4,,,,GR
R5       EQU   5,,,,GR
R6       EQU   6,,,,GR
R7       EQU   7,,,,GR
R8       EQU   8,,,,GR
R9       EQU   9,,,,GR
R10      EQU   10,,,,GR
R11      EQU   11,,,,GR
R12      EQU   12,,,,GR
R13      EQU   13,,,,GR
R14      EQU   14,,,,GR
R15      EQU   15,,,,GR
         SPACE 1
FPR0     EQU   0,,,,FPR
FPR1     EQU   1,,,,FPR
FPR2     EQU   2,,,,FPR
FPR3     EQU   3,,,,FPR
FPR4     EQU   4,,,,FPR
FPR5     EQU   5,,,,FPR
FPR6     EQU   6,,,,FPR
FPR7     EQU   7,,,,FPR
FPR8     EQU   8,,,,FPR
FPR9     EQU   9,,,,FPR
FPR10    EQU   10,,,,FPR
FPR11    EQU   11,,,,FPR
FPR12    EQU   12,,,,FPR
FPR13    EQU   13,,,,FPR
FPR14    EQU   14,,,,FPR
FPR15    EQU   15,,,,FPR
         SPACE 1
Charset  DSECT ,                   EBCDIC/ASCII character set tables
CsZero      DS C                       Zero character
CsPlus      DS C                       Plus sign
CsMinus     DS C                       Minus sign
CsDecimal   DS C                       Decimal point symbol
CsExponent  DS C                       Uppercase 'E'
CsExpAlt    DS C                       Lowercase 'e'
CsBlank     DS C                       Blank character
CharsetEnd EQU *
*MEXIT #=     2 LV= 1 FPCONVRT
*
* NOTE ARCHLVL 2-5 MUST MATCH ARCHLVL IN FPCONMFC.MLC FOR FPCON DEF.
*
         END 
 0h'0'
000CA8 9104D090                000090   (3/1900)1157+         TM    FpconValueE,B'00000100' Infinity?
000CAC A784FAD6                000258   (3/1901)1158+         JZ    ReturnInfinity          yes: branch
000CB0 A7F4FAD8                000260   (3/1902)1159+         J     ReturnNan               no: return
000CB4                                  (3/1908)1161+         TITLE 'Convert From String To Floating Point Value'
000CB4                                  (3/1909)1162+ToValue  LOCTR ,
000CB4 E310D0A00004            0000A0   (3/1914)1164+         LG    R1,FpconStringAddr  Get string address
000CBA E300D0AC0015            0000AC   (3/1915)1165+         LGH   R0,FpconStringSize  Get string length
000CC0 B90A0001                         (3/1916)1166+         ALGR   R0,R1              Get end of string address
000CC4 D70FD090D090     000090 000090   (3/1918)1168+         XC    FpconValueL,FpconValueL Clear value
000CCA                                  (3/1920)1170+ToValue0010 DC 0h'0'               Skip any leading blanks
000CCA D500D0C51000     0000C5          (3/1921)1171+         CLC   FpconBlank,0(R1)        *
000CD0 A744000B                000CE6   (3/1922)1172+         JL    ToValue0020             start found: branch
000CD4 A724FACA                000268   (3/1923)1173+         JH    ReturnBadString         bad character: branch
000CD8 41101001                         (3/1924)1174+         LA    R1,1(,R1)               *
000CDC EC10FFF74065            000CCA   (3/1925)1175+         CLGRJL   R1,R0,ToValue0010    *
000CE2 A7F4FAC3                000268   (3/1926)1176+         J     ReturnBadString         empty string: branch
000CE6                                  (3/1928)1178+***********************************************************************
000CE6                                  (3/1929)1179+*        Convert string mantissa to binary value in FpconWork         *
000CE6                                  (3/1930)1180+*                                                                     *
000CE6                                  (3/1931)1181+*        R0: address of end of string                                 *
000CE6                                  (3/1932)1182+*        R1: address of first non-blank in string                     *
000CE6                                  (3/1933)1183+*        When complete, the mantissa in the string (the part of the   *
000CE6                                  (3/1934)1184+*        number before the exponent) will be converted to a binary    *
000CE6                                  (3/1935)1185+*        value of up to 16 bytes.  This is long enough to allow       *
000CE6                                  (3/1936)1186+*        the exponent to be applied without loss of precision.        *
000CE6                                  (3/1937)1187+*        Any mantissa digits after the 38 (or 39th) place will be     *
000CE6                                  (3/1938)1188+*        ignored (after rounding).  The actual maximum mantissa       *
000CE6                                  (3/1939)1189+*        is 250*256**15-1, or about 3.323E38.                         *
000CE6                                  (3/1940)1190+*                                                                     *
000CE6                                  (3/1941)1191+*        For conversion to a decimal floating point value, the digit  *
000CE6                                  (3/1942)1192+*        characters are converted to byte values 0-9 in FpconWork.    *
000CE6                                  (3/1943)1193+*                                                                     *
000CE6                                  (3/1944)1194+***********************************************************************
000CE6                  00000010        (3/1945)1195+BinDigitsToString EQU 16
000CE6                                  (3/1946)1196+ToValue0020 DC 0h'0'
000CE6 1B22                             (3/1947)1197+         SR    R2,R2               Indicate no digits yet
000CE8 1B33                             (3/1948)1198+         SR    R3,R3               Indicate no decimal point yet
000CEA 1B44                             (3/1949)1199+         SR    R4,R4               Indicate no decimal digits yet
000CEC B9090055                         (3/1950)1200+         SGR   R5,R5               Indicate no number yet
000CF0 1B77                             (3/1951)1201+         SR    R7,R7               Indicate no truncation yet
000CF2 D70FD0C8D0C8     0000C8 0000C8   (3/1952)1202+         XC    FpconWork(BinDigitsToString),FpconWork
000CF8 950AD0BD                0000BD   (3/1954)1204+         CLI   FpconBase,FpconBase10 Decimal floating point?
000CFC A7740010                000D1C   (3/1955)1205+         JNE   ToValue0025             no: branch
000D00 A7780010                         (3/1956)1206+         LHI   R7,16               Maximum digits for long
000D04 9508D0BC                0000BC   (3/1957)1207+         CLI   FpconValueLen,FpconValueLenD Long value?
000D08 A784000A                000D1C   (3/1958)1208+         JE    ToValue0025             yes: branch
000D0C A7780007                         (3/1959)1209+         LHI   R7,7                Maximum digits for short
000D10 9504D0BC                0000BC   (3/1960)1210+         CLI   FpconValueLen,FpconValueLenE Short value?
000D14 A7840004                000D1C   (3/1961)1211+         JE    ToValue0025             yes: branch
000D18 A7780022                         (3/1962)1212+         LHI   R7,34               Maximum digits for extended
000D1C                                  (3/1964)1214+***********************************************************************
000D1C                                  (3/1965)1215+*        R0: address of end of string                                 *
000D1C                                  (3/1966)1216+*        R1: address of first non-blank in string                     *
000D1C                                  (3/1967)1217+*        R2: 0/1 if any digits in number (used for syntax checking)   *
000D1C                                  (3/1968)1218+*        R3: 0/1 if decimal point seen                                *
000D1C                                  (3/1969)1219+*        R4: power of 10 to adjust exponent                           *
000D1C                                  (3/1970)1220+*        R5: number of bytes of FpconWork used for number             *
000D1C                                  (3/1971)1221+*        R7: 0/1 if number truncated (hexadecimal or binary)          *
000D1C                                  (3/1972)1222+*            maximum digits to convert or -1=truncated (decimal)      *
000D1C                                  (3/1973)1223+***********************************************************************
000D1C                                  (3/1974)1224+ToValue0025 DC 0h'0'
000D1C D500D0C01000     0000C0          (3/1975)1225+         CLC   FpconPlus,0(R1)     Leading plus sign?
000D22 A7840009                000D34   (3/1976)1226+         JE    ToValue0030             yes: branch
000D26 D500D0C11000     0000C1          (3/1977)1227+         CLC   FpconMinus,0(R1)    Leading minus sign?
000D2C A7740009                000D3E   (3/1978)1228+         JNE   ToValue0040             no: branch
000D30 9280D090                000090   (3/1979)1229+         MVI   FpconValueL,X'80'   Indicate value is negative
000D34                                  (3/1980)1230+ToValue0030 DC 0h'0'
000D34 41101001                         (3/1981)1231+         LA    R1,1(,R1)           Skip leading sign
000D38 EC10FA98A065            000268   (3/1982)1232+         CLGRJNL   R1,R0,ReturnBadString No more characters: branch
000D3E                                  (3/1984)1234+ToValue0040 DC 0h'0'               Skip any leading zeros
000D3E D500D0BF1000     0000BF          (3/1985)1235+         CLC   FpconZero,0(R1)         *
000D44 A774000B                000D5A   (3/1986)1236+         JNE   ToValue0050             non-zero found: branch
000D48 A7280001                         (3/1987)1237+         LHI   R2,1                    indicate digit seen
000D4C 41101001                         (3/1988)1238+         LA    R1,1(,R1)               *
000D50 EC10FFF74065            000D3E   (3/1989)1239+         CLGRJL   R1,R0,ToValue0040    *
000D56 A7F400B6                000EC2   (3/1990)1240+         J     ToValue0200             all zero: branch
000D5A                                  (3/1992)1242+ToValue0050 DC 0h'0'               Convert the digits to binary:
000D5A D500D0C21000     0000C2          (3/1993)1243+         CLC   FpconDecimal,0(R1)      decimal point?
000D60 A7740009                000D72   (3/1994)1244+         JNE   ToValue0060                 no: branch
000D64 EC36FA82007E            000268   (3/1995)1245+         CIJNE R3,0,ReturnBadString    decimal point seen: branch
000D6A A7380001                         (3/1996)1246+         LHI   R3,1                    indicate decimal point seen
000D6E A7F400A5                000EB8   (3/1997)1247+         J     ToValue0190             done with character
000D72                                  (3/1998)1248+ToValue0060 DC 0h'0'                   *
000D72 D500D0BF1000     0000BF          (3/1999)1249+         CLC   FpconZero,0(R1)         valid digit?
000D78 A72400A5                000EC2   (3/2000)1250+         JH    ToValue0200                 no: branch
000D7C D500D0C61000     0000C6          (3/2001)1251+         CLC   FpconNine,0(R1)             *
000D82 A74400A0                000EC2   (3/2002)1252+         JL    ToValue0200                 no: branch
000D86 43801000                         (3/2003)1253+         IC    R8,0(,R1)               get the new decimal digit
000D8A C08B0000000F            00000F   (3/2004)1254+         NILF  R8,15                       *
000D90 A7280001                         (3/2005)1255+         LHI   R2,1                    indicate digit seen
000D94 950AD0BD                0000BD   (3/2006)1256+         CLI   FpconBase,FpconBase10   decimal floating point?
000D98 A7840057                000E46   (3/2007)1257+         JE    ToValue0130                 yes: branch
000D9C 9518D0C8                0000C8   (3/2008)1258+         CLI   FpconWork,24            enough digits seen?
000DA0 A7D40023                000DE6   (3/2009)1259+         JNH   ToValue0090                 no: branch
000DA4 EC360005007E            000DAE   (3/2010)1260+         CIJNE R3,0,ToValue0070        decimal point seen: branch
000DAA A74A0001                         (3/2011)1261+         AHI   R4,1                    increment exponent
000DAE                                  (3/2012)1262+ToValue0070 DC 0h'0'                       *
000DAE EC760085007E            000EB8   (3/2013)1263+         CIJNE R7,0,ToValue0190        already truncated: branch
000DB4 A7780001                         (3/2014)1264+         LHI   R7,1                    indicate truncation
000DB8 D500D0C71000     0000C7          (3/2015)1265+         CLC   FpconFive,0(R1)         need to round up number?
000DBE A7B4007D                000EB8   (3/2016)1266+         JNL   ToValue0190                 no: branch
000DC2 1BBB                             (3/2017)1267+         SR    R11,R11                 increment the value
000DC4 41E0D0D8                0000D8   (3/2018)1268+         LA    R14,FpconWork+BinDigitsToString end of binary number
000DC8                                  (3/2019)1269+ToValue0080 DC 0h'0'                       *
000DC8 E3E0EFFFFF71                      (3/344)1272+         LAY   R14,-1(,R14)
000DCE 43B0E000                         (3/2021)1274+         IC    R11,0(,R14)                     *
000DD2 A7BA0001                         (3/2022)1275+         AHI   R11,1                       increment it
000DD6 42B0E000                         (3/2023)1276+         STC   R11,0(,R14)                 save new digit value
000DDA 8AB00008                         (3/2024)1277+         SRA   R11,8                       any carry?
000DDE A774FFF5                000DC8   (3/2025)1278+         JNZ   ToValue0080                     yes: branch
000DE2 A7F4006B                000EB8   (3/2026)1279+         J     ToValue0190             done with character
000DE6                                  (3/2027)1280+ToValue0090 DC 0h'0'                   *
000DE6 EC380005007E            000DF0   (3/2028)1281+         CIJE  R3,0,ToValue0100        decimal point not seen: branch
000DEC A74AFFFF                         (3/2029)1282+         AHI   R4,-1                   decrement exponent
000DF0                                  (3/2030)1283+ToValue0100 DC 0h'0'                   *
000DF0 EC56000C007E            000E08   (3/2031)1284+         CIJNE R5,0,ToValue0110        prior non-zero digits: branch
000DF6 EC880061007E            000EB8   (3/2032)1285+         CIJE  R8,0,ToValue0190        another zero: branch
000DFC 4280D0D7                0000D7   (3/2033)1286+         STC   R8,FpconWork+BinDigitsToString-1 set the first digit
000E00 A7580001                         (3/2034)1287+         LHI   R5,1                    set length of binary number
000E04 A7F4005A                000EB8   (3/2035)1288+         J     ToValue0190             done with character
000E08                                  (3/2036)1289+ToValue0110 DC 0h'0'                   *
000E08 41E0D0D8                0000D8   (3/2037)1290+         LA    R14,FpconWork+BinDigitsToString end of binary number
000E0C 1875                             (3/2038)1291+         LR    R7,R5                   For each binary digit:
000E0E 1BBB                             (3/2039)1292+         SR    R11,R11                     *
000E10                                  (3/2040)1293+ToValue0120 DC 0h'0'                       *
000E10 E3E0EFFFFF71                      (3/344)1296+         LAY   R14,-1(,R14)
000E16 43B0E000                         (3/2042)1298+         IC    R11,0(,R14)                     *
000E1A A7BC000A                         (3/2043)1299+         MHI   R11,10                      times 10
000E1E 1AB8                             (3/2044)1300+         AR    R11,R8                      plus the carry
000E20 42B0E000                         (3/2045)1301+         STC   R11,0(,R14)                 save new digit value
000E24 88B00008                         (3/2046)1302+         SRL   R11,8                       get the carry
000E28 188B                             (3/2047)1303+         LR    R8,R11                          *
000E2A A776FFF3                000E10   (3/2048)1304+         BRCT  R7,ToValue0120              Go do next digit
000E2E EC880045007E            000EB8   (3/2049)1305+         CIJE  R8,0,ToValue0190        No carry from high pos.: branch
000E34 E3E0EFFFFF71                      (3/344)1308+         LAY   R14,-1(,R14)
000E3A 4280E000                         (3/2051)1310+         STC   R8,0(,R14)                  *
000E3E A75A0001                         (3/2052)1311+         AHI   R5,1                    Increment binary number length
000E42 A7F4003B                000EB8   (3/2053)1312+         J     ToValue0190             Go get the next character
000E46                                  (3/2055)1314+ToValue0130 DC 0h'0'                   Decimal floating point:
000E46 EC57002E4076            000EA2   (3/2056)1315+         CRJL  R5,R7,ToValue0170       not enough digits seen: branch
000E4C EC360005007E            000E56   (3/2057)1316+         CIJNE R3,0,ToValue0140        decimal point seen: branch
000E52 A74A0001                         (3/2058)1317+         AHI   R4,1                    increment exponent
000E56                                  (3/2059)1318+ToValue0140 DC 0h'0'                   *
000E56 EC740031007E            000EB8   (3/2060)1319+         CIJL  R7,0,ToValue0190        already truncated: branch
000E5C D500D0C71000     0000C7          (3/2061)1320+         CLC   FpconFive,0(R1)         need to round up number?
000E62 A724001C                000E9A   (3/2062)1321+         JH    ToValue0160                 no: branch
000E66 41E5D0C7                0000C7   (3/2063)1322+         LA    R14,FpconWork-1(R5)     address of end of number
000E6A 4170D0C8                0000C8   (3/2064)1323+         LA    R7,FpconWork            address of start of number
000E6E 1BFF                             (3/2065)1324+         SR    R15,R15                 increment the value
000E70                                  (3/2066)1325+ToValue0150 DC 0h'0'                       *
000E70 43F0E000                         (3/2067)1326+         IC    R15,0(,R14)                 get the digit
000E74 A7FA0001                         (3/2068)1327+         AHI   R15,1                       increment it
000E78 42F0E000                         (3/2069)1328+         STC   R15,0(,R14)                 save new digit value
000E7C ECFC000F097E            000E9A   (3/2070)1329+         CIJNH R15,9,ToValue0160           no carry: branch
000E82 9200E000                         (3/2071)1330+         MVI   0(R14),0                    reset digit to zero
000E86 E3E0EFFFFF71                      (3/344)1333+         LAY   R14,-1(,R14)
000E8C EC7EFFF2C065            000E70   (3/2073)1335+         CLGRJNH   R7,R14,ToValue0150      no overflow: branch
000E92 9201D0C8                0000C8   (3/2074)1336+         MVI   FpconWork,1             set to 100000...
000E96 A74A0001                         (3/2075)1337+         AHI   R4,1                    increment exponent
000E9A                                  (3/2076)1338+ToValue0160 DC 0h'0'                   *
000E9A A778FFFF                         (3/2077)1339+         LHI   R7,-1                   indicate truncation
000E9E A7F4000D                000EB8   (3/2078)1340+         J     ToValue0190             done with character
000EA2                                  (3/2079)1341+ToValue0170 DC 0h'0'                   *
000EA2 41E5D0C8                0000C8   (3/2080)1342+         LA    R14,FpconWork(R5)       get address of output digit
000EA6 EC380005007E            000EB0   (3/2081)1343+         CIJE  R3,0,ToValue0180        no decimal point seen: branch
000EAC A74AFFFF                         (3/2082)1344+         AHI   R4,-1                   decrement exponent
000EB0                                  (3/2083)1345+ToValue0180 DC 0h'0'                   *
000EB0 4280E000                         (3/2084)1346+         STC   R8,0(,R14)              save the digit
000EB4 A75A0001                         (3/2085)1347+         AHI   R5,1                    increment number of digits
000EB8                                  (3/2087)1349+ToValue0190 DC 0h'0'
000EB8 41101001                         (3/2088)1350+         LA    R1,1(,R1)               point to next character
000EBC EC10FF4F4065            000D5A   (3/2089)1351+         CLGRJL   R1,R0,ToValue0050    more characters: branch
000EC2                                  (3/2091)1353+***********************************************************************
000EC2                                  (3/2092)1354+*        End of mantissa found.                                       *
000EC2                                  (3/2093)1355+*        R0: address of end of string                                 *
000EC2                                  (3/2094)1356+*        R1: address of first non-digit in string                     *
000EC2                                  (3/2095)1357+*        R2: 0/1 if any digits in number (used for syntax checking)   *
000EC2                                  (3/2096)1358+*        R4: power of 10 to adjust exponent                           *
000EC2                                  (3/2097)1359+*        R5: number of bytes of FpconWork used for number             *
000EC2                                  (3/2098)1360+***********************************************************************
000EC2                                  (3/2099)1361+ToValue0200 DC 0h'0'
000EC2 EC28F9D3007E            000268   (3/2100)1362+         CIJE  R2,0,ReturnBadString No digits seen: branch
000EC8 EC100068A065            000F98   (3/2101)1363+         CLGRJNL   R1,R0,ToValue0300 End of string: branch
000ECE 1B66                             (3/2102)1364+         SR    R6,R6               Exponent is zero so far
000ED0 D500D0C51000     0000C5          (3/2103)1365+         CLC   FpconBlank,0(R1)    End of number?
000ED6 A7840053                000F7C   (3/2104)1366+         JE    ToValue0270             yes: branch
000EDA D500D0C31000     0000C3          (3/2105)1367+         CLC   FpconExponent,0(R1) Valid exponent character?
000EE0 A7840007                000EEE   (3/2106)1368+         JE    ToValue0210             yes: branch
000EE4 D500D0C41000     0000C4          (3/2107)1369+         CLC   FpconExpAlt,0(R1)       *
000EEA A774F9BF                000268   (3/2108)1370+         JNE   ReturnBadString         no: branch
000EEE                                  (3/2109)1371+ToValue0210 DC 0h'0'
000EEE 41101001                         (3/2110)1372+         LA    R1,1(,R1)           Point to next character
000EF2 EC10F9BBA065            000268   (3/2111)1373+         CLGRJNL   R1,R0,ReturnBadString No more characters: branch
000EF8                                  (3/2112)1374+***********************************************************************
000EF8                                  (3/2113)1375+*        Convert the exponent (if any).                               *
000EF8                                  (3/2114)1376+*        R0: address of end of string                                 *
000EF8                                  (3/2115)1377+*        R1: address of first non-blank in string                     *
000EF8                                  (3/2116)1378+*        R2: 0/1 if any digits in exponent (used for syntax checking) *
000EF8                                  (3/2117)1379+*        R3: 0/-1 if exponent is negative                             *
000EF8                                  (3/2118)1380+*        R4: power of 10 to adjust exponent                           *
000EF8                                  (3/2119)1381+*        R5: number of bytes of FpconWork used for number             *
000EF8                                  (3/2120)1382+*        R6: exponent value                                           *
000EF8                                  (3/2121)1383+***********************************************************************
000EF8 1B22                             (3/2122)1384+         SR    R2,R2               Indicate no digits yet
000EFA 1B33                             (3/2123)1385+         SR    R3,R3               Assume positive exponent
000EFC D500D0C01000     0000C0          (3/2124)1386+         CLC   FpconPlus,0(R1)     Positive exponent?
000F02 A7840008                000F12   (3/2125)1387+         JE    ToValue0220             yes: branch
000F06 D500D0C11000     0000C1          (3/2126)1388+         CLC   FpconMinus,0(R1)    Negative exponent?
000F0C A7740008                000F1C   (3/2127)1389+         JNE   ToValue0230             no: branch
000F10 0630                             (3/2128)1390+         BCTR  R3,0                Indicate negative exponent
000F12                                  (3/2129)1391+ToValue0220 DC 0h'0'
000F12 41101001                         (3/2130)1392+         LA    R1,1(,R1)           Point to next character
000F16 EC10F9A9A065            000268   (3/2131)1393+         CLGRJNL   R1,R0,ReturnBadString No more characters: branch
000F1C                                  (3/2132)1394+ToValue0230 DC 0h'0'               For each exponent digit:
000F1C D500D0C51000     0000C5          (3/2133)1395+         CLC   FpconBlank,0(R1)        end of string?
000F22 A784001F                000F60   (3/2134)1396+         JE    ToValue0250                 yes: branch
000F26 D500D0BF1000     0000BF          (3/2135)1397+         CLC   FpconZero,0(R1)         valid digit?
000F2C A724F99E                000268   (3/2136)1398+         JH    ReturnBadString             no: branch
000F30 D500D0C61000     0000C6          (3/2137)1399+         CLC   FpconNine,0(R1)             *
000F36 A744F999                000268   (3/2138)1400+         JL    ReturnBadString             no: branch
000F3A A7280001                         (3/2139)1401+         LHI   R2,1                    indicate digit found
000F3E A76E270F                         (3/2140)1402+         CHI   R6,9999                 Exponent too big?
000F42 A724000A                000F56   (3/2141)1403+         JH    ToValue0240                 yes: branch
000F46 43B01000                         (3/2142)1404+         IC    R11,0(,R1)              Accumulate exponent value
000F4A C0BB0000000F            00000F   (3/2143)1405+         NILF  R11,15                      *
000F50 A76C000A                         (3/2144)1406+         MHI   R6,10                       *
000F54 1A6B                             (3/2145)1407+         AR    R6,R11                      *
000F56                                  (3/2146)1408+ToValue0240 DC 0h'0'               For each exponent digit:
000F56 41101001                         (3/2147)1409+         LA    R1,1(,R1)               Point to next character
000F5A EC10FFE14065            000F1C   (3/2148)1410+         CLGRJL   R1,R0,ToValue0230    More characters: branch
000F60                                  (3/2149)1411+ToValue0250 DC 0h'0'
000F60 EC28F984007E            000268   (3/2150)1412+         CIJE  R2,0,ReturnBadString No exponent digits: branch
000F66 EC38000D007E            000F80   (3/2151)1413+         CIJE  R3,0,ToValue0280    Non-negative exponent: branch
000F6C 1366                             (3/2152)1414+         LCR   R6,R6               convert to negative
000F6E A7F40009                000F80   (3/2153)1415+         J     ToValue0280         go check end of string
000F72                                  (3/2155)1417+ToValue0260 DC 0h'0'               Ensure rest of string is blank
000F72 D500D0C51000     0000C5          (3/2156)1418+         CLC   FpconBlank,0(R1)        *
000F78 A774F978                000268   (3/2157)1419+         JNE   ReturnBadString         non-blank: branch
000F7C                                  (3/2158)1420+ToValue0270 DC 0h'0'                   *
000F7C 41101001                         (3/2159)1421+         LA    R1,1(,R1)               *
000F80                                  (3/2160)1422+ToValue0280 DC 0h'0'                   *
000F80 EC10FFF94065            000F72   (3/2161)1423+         CLGRJL   R1,R0,ToValue0260    *
000F86 A76E270F                         (3/2163)1425+         CHI   R6,9999             Is exponent too big?
000F8A A724037A                00167E   (3/2164)1426+         JH    ToValueOverflow         yes: branch
000F8E A76ED8F1                         (3/2165)1427+         CHI   R6,-9999            Is exponent too small?
000F92 A74403C6                00171E   (3/2166)1428+         JL    ToValueUnderflow        yes: branch
000F96 1A46                             (3/2167)1429+         AR    R4,R6               Update exponent value
000F98                                  (3/2169)1431+***********************************************************************
000F98                                  (3/2170)1432+*    Done with processing the string.  Convert to floating point.     *
000F98                                  (3/2171)1433+*        R4: exponent (power of 10)                                   *
000F98                                  (3/2172)1434+*        R5: number of bytes of FpconWork used for number             *
000F98                                  (3/2173)1435+*            For decimal, number is base-10 with each digit in a      *
000F98                                  (3/2174)1436+*            separate byte and with implied decimal point at end.     *
000F98                                  (3/2175)1437+*            Otherwise, number is base-256 with implied decimal       *
000F98                                  (3/2176)1438+*            point at FpconWork+BinDigitsToString                     *
000F98                                  (3/2177)1439+***********************************************************************
000F98                                  (3/2178)1440+ToValue0300 DC 0h'0'
000F98 EC5803C5007E            001722   (3/2179)1441+         CIJE  R5,0,ToValueZero    Number is zero: branch
000F9E 950AD0BD                0000BD   (3/2180)1442+         CLI   FpconBase,FpconBase10 Decimal floating point?
000FA2 A78402A1                0014E4   (3/2181)1443+         JE    ToValue1500             yes: branch
000FA6                                  (3/2183)1445+***********************************************************************
000FA6                                  (3/2184)1446+*    Estimate the actual exponent.  This will purposely be a little   *
000FA6                                  (3/2185)1447+*    on the low side to ensure that valid numbers are not rejected.   *
000FA6                                  (3/2186)1448+***********************************************************************
000FA6 41B0D0D8                0000D8   (3/2187)1449+         LA    R11,FpconWork+BinDigitsToString Point to first digit
000FAA B91900B5                         (3/2188)1450+         SGFR   R11,R5                 in binary string
000FAE E300B0000094                     (3/2189)1451+         LLC   R0,0(,R11)          Compute the largest power of 2
000FB4 18E5                             (3/2190)1452+         LR    R14,R5                  not more than the mantissa
000FB6 06E0                             (3/2191)1453+         BCTR  R14,0                   *
000FB8 89E00003                         (3/2192)1454+         SLL   R14,3                   *
000FBC                                  (3/2193)1455+ToValue0310 DC 0h'0'                   *
000FBC 8A000001                         (3/2194)1456+         SRA   R0,1                    *
000FC0 A7840006                000FCC   (3/2195)1457+         JZ    ToValue0320             *
000FC4 A7EA0001                         (3/2196)1458+         AHI   R14,1                   *
000FC8 A7F4FFFA                000FBC   (3/2197)1459+         J     ToValue0310             *
000FCC                                  (3/2198)1460+ToValue0320 DC 0h'0'
000FCC                                  (3/2199)1461+* The power-of-10 exponent can be converted to a power-of-2
000FCC                                  (3/2200)1462+* exponent by multiplying by LN(10)/LN(2) or 3.321928095
000FCC 1814                             (3/2201)1463+         LR    R1,R4                   *
000FCE 5C00C080                000320   (3/2202)1464+         M     R0,=FS24'3.321928'      *
000FD2 8E000018                         (3/2203)1465+         SRDA  R0,24                   *
000FD6 1AE1                             (3/2204)1466+         AR    R14,R1                  *
000FD8 9502D0BD                0000BD   (3/2205)1467+         CLI   FpconBase,FpconBase2 Binary floating point?
000FDC A784000C                000FF4   (3/2206)1468+         JE    ToValue0330             yes: branch
000FE0 A7EE00FC                         (3/2207)1469+         CHI   R14,252             Too large?
000FE4 A724034D                00167E   (3/2208)1470+         JH    ToValueOverFlow         yes: branch
000FE8 A7EEFEFB                         (3/2209)1471+         CHI   R14,-261            Too small?
000FEC A7B40028                00103C   (3/2210)1472+         JNL   ToValue0400             no: branch
000FF0 A7F40397                00171E   (3/2211)1473+         J     ToValueUnderflow        yes: branch
000FF4                                  (3/2212)1474+ToValue0330 DC 0h'0'
000FF4 9504D0BC                0000BC   (3/2213)1475+         CLI   FpconValueLen,FpconValueLenE Short Binary?
000FF8 A7840010                001018   (3/2214)1476+         JE    ToValue0340             yes: branch
000FFC 9508D0BC                0000BC   (3/2215)1477+         CLI   FpconValueLen,FpconValueLenD Long Binary?
001000 A7840016                00102C   (3/2216)1478+         JE    ToValue0350             yes: branch
001004 A7EE4000                         (3/2217)1479+         CHI   R14,16384           Too large?
001008 A724033B                00167E   (3/2218)1480+         JH    ToValueOverFlow         yes: branch
00100C A7EEBF91                         (3/2219)1481+         CHI   R14,-16495          Too small?
001010 A7B40016                00103C   (3/2220)1482+         JNL   ToValue0400             no: branch
001014 A7F40385                00171E   (3/2221)1483+         J     ToValueUnderflow        yes: branch
001018                                  (3/2222)1484+ToValue0340 DC 0h'0'
001018 A7EE0080                         (3/2223)1485+         CHI   R14,128             Too large?
00101C A7240331                00167E   (3/2224)1486+         JH    ToValueOverFlow         yes: branch
001020 A7EEFF6A                         (3/2225)1487+         CHI   R14,-150            Too small?
001024 A7B4000C                00103C   (3/2226)1488+         JNL   ToValue0400             no: branch
001028 A7F4037B                00171E   (3/2227)1489+         J     ToValueUnderflow        yes: branch
00102C                                  (3/2228)1490+ToValue0350 DC 0h'0'
00102C A7EE0400                         (3/2229)1491+         CHI   R14,1024            Too large?
001030 A7240327                00167E   (3/2230)1492+         JH    ToValueOverFlow         yes: branch
001034 A7EEFBCD                         (3/2231)1493+         CHI   R14,-1075           Too small?
001038 A7440373                00171E   (3/2232)1494+         JL    ToValueUnderflow        yes: branch
00103C                                  (3/2234)1496+***********************************************************************
00103C                                  (3/2235)1497+*    The number is not too far out of range.  Next, either multiply   *
00103C                                  (3/2236)1498+*    or divide the mantissa by 10 to the exponent power.              *
00103C                                  (3/2237)1499+*        R4: exponent (power of 10)                                   *
00103C                                  (3/2238)1500+*        R5: number of bytes of FpconWork used for number             *
00103C                                  (3/2239)1501+*        R11: address of first binary digit in FpconWork              *
00103C                                  (3/2240)1502+***********************************************************************
00103C                                  (3/2241)1503+ToValue0400 DC 0h'0'
00103C EC420052007E            0010E0   (3/2242)1504+         CIJH  R4,0,ToValue0500    Positive exponent: branch
001042                                  (3/2243)1505+***********************************************************************
001042                                  (3/2244)1506+*    The number needs to be divided by a power of 10.  Since a        *
001042                                  (3/2245)1507+*    a repeating fraction will result, compute how many digits        *
001042                                  (3/2246)1508+*    of fraction to keep. An additional byte of fraction is needed    *
001042                                  (3/2247)1509+*    for each LN(10)/LN(256)*exponent, or 0.41524101186*exponent.     *
001042                                  (3/2248)1510+***********************************************************************
001042 1344                             (3/2249)1511+         LCR   R4,R4               Get number of times to divide by 10
001044 1814                             (3/2250)1512+         LR    R1,R4               Compute fraction digits needed
001046 5C00C084                000324   (3/2251)1513+         M     R0,=FS24'.415241'       *
00104A 8E000018                         (3/2252)1514+         SRDA  R0,24                   *
00104E A71A0011                         (3/2253)1515+         AHI   R1,BinDigitsToString+1  *
001052 1F15                             (3/2254)1516+         SLR   R1,R5                   *
001054 A7080820                         (3/2255)1517+         LHI   R0,L'FpconWork-BinDigitsToString
001058 EC1000044076            001060   (3/2256)1518+         CRJL  R1,R0,ToValue0410   Ensure within work area
00105E 1810                             (3/2257)1519+         LR    R1,R0                   *
001060                                  (3/2258)1520+ToValue0410 DC 0h'0'
001060 4100D0D8                0000D8   (3/2259)1521+         LA    R0,FpconWork+BinDigitsToString
001064 1B33                             (3/2260)1522+         SR    R3,R3               Clear fraction
001066 0E02                             (3/2261)1523+         MVCL  R0,R2                   *
001068 B90400E0                         (3/2262)1524+         LGR   R14,R0              Get address of end of number
00106C                                  (3/2263)1525+***********************************************************************
00106C                                  (3/2264)1526+*    For "exponent" times, divide the mantissa by 10.                 *
00106C                                  (3/2265)1527+*        R4: exponent (power of 10)                                   *
00106C                                  (3/2266)1528+*        R11: address of first binary digit in FpconWork              *
00106C                                  (3/2267)1529+*        R14: address of end of number in FpconWork                   *
00106C                                  (3/2268)1530+***********************************************************************
00106C EC4C0034007E            0010D4   (3/2269)1531+         CIJNH R4,0,ToValue0490    Zero exponent: branch
001072                                  (3/2270)1532+ToValue0430 DC 0h'0'               Until the exponent is zero:
001072 B904002B                         (3/2271)1533+         LGR   R2,R11                  Point to first non-zero digit
001076 1B00                             (3/2272)1534+         SR    R0,R0                   Set remainder to zero
001078 A738000A                         (3/2273)1535+         LHI   R3,10                   Set divisor to 10
00107C                                  (3/2274)1536+ToValue0440 DC 0h'0'                   For each digit:
00107C 1810                             (3/2275)1537+         LR    R1,R0                       divident =
00107E 89100008                         (3/2276)1538+         SLL   R1,8                            remainder *= 256
001082 43102000                         (3/2277)1539+         IC    R1,0(,R2)                       + digit
001086 1B00                             (3/2278)1540+         SR    R0,R0                       Divide by 10
001088 1D03                             (3/2279)1541+         DR    R0,R3                           *
00108A 42102000                         (3/2280)1542+         STC   R1,0(,R2)                   Save quotient
00108E 41202001                         (3/2281)1543+         LA    R2,1(,R2)                   point to next digit
001092 EC2EFFF54065            00107C   (3/2282)1544+         CLGRJL   R2,R14,ToValue0440       not end of number: branch
001098 A70E0080                         (3/2283)1545+         CHI   R0,128                  Need to round?
00109C A744000F                0010BA   (3/2284)1546+         JL    ToValue0460                 no: branch
0010A0                                  (3/2285)1547+ToValue0450 DC 0h'0'                   Increment the number
0010A0 E3202FFFFF71                      (3/344)1549+         LAY   R2,-1(,R2)
0010A6 43102000                         (3/2287)1551+         IC    R1,0(,R2)                   *
0010AA A71A0001                         (3/2288)1552+         AHI   R1,1                        *
0010AE 42102000                         (3/2289)1553+         STC   R1,0(,R2)                   *
0010B2 8A100008                         (3/2290)1554+         SRA   R1,8                        *
0010B6 A774FFF5                0010A0   (3/2291)1555+         JNZ   ToValue0450                 *
0010BA                                  (3/2292)1556+ToValue0460 DC 0h'0'                   Locate first non-zero digit
0010BA 9500B000                         (3/2293)1557+         CLI   0(R11),0                    *
0010BE A7740009                0010D0   (3/2294)1558+         JNE   ToValue0470                 *
0010C2 41B0B001                         (3/2295)1559+         LA    R11,1(,R11)                 *
0010C6 ECBEFFFA4065            0010BA   (3/2296)1560+         CLGRJL   R11,R14,ToValue0460      no underflow: branch
0010CC A7F40329                00171E   (3/2297)1561+         J     ToValueUnderflow            underflow: branch
0010D0                                  (3/2298)1562+ToValue0470 DC 0h'0'
0010D0 A746FFD1                001072   (3/2299)1563+         BRCT  R4,ToValue0430          Go divide by 10 again
0010D4                                  (3/2301)1565+ToValue0490 DC 0h'0'                   Compute power-of-256 exponent
0010D4 4100D0D8                0000D8   (3/2302)1566+         LA    R0,FpconWork+BinDigitsToString
0010D8 B90B000B                         (3/2303)1567+         SLGR   R0,R11                     *
0010DC A7F4003A                001150   (3/2304)1568+         J     ToValue0600             Go convert to floating point
0010E0                                  (3/2306)1570+***********************************************************************
0010E0                                  (3/2307)1571+*    The number needs to be multiplied by a power of 10.              *
0010E0                                  (3/2308)1572+***********************************************************************
0010E0                                  (3/2309)1573+ToValue0500 DC 0h'0'               Move number to end of work area
0010E0 D20FD8E8D0C8     0008E8 0000C8   (3/2311)1574+         MVC   FpconWork+L'FpconWork-BinDigitsToString(BinDigitsToString),FpconWork
0010E6 41E0D8F8                0008F8   (3/2312)1576+         LA    R14,FpconWork+L'FpconWork Get address of end of number
0010EA 41B0D8F8                0008F8   (3/2313)1577+         LA    R11,FpconWork+L'FpconWork Get address of start of number
0010EE B91900B5                         (3/2314)1578+         SGFR   R11,R5                 *
0010F2 4130D0C8                0000C8   (3/2315)1579+         LA    R3,FpconWork        Get address of start of work area
0010F6                                  (3/2316)1580+ToValue0510 DC 0h'0'               Do until exponent is zero:
0010F6 E3E0EFFFFF71                      (3/344)1583+         LAY   R14,-1(,R14)
0010FC                                  (3/2318)1585+ToValue0520 DC 0h'0'                       *
0010FC 9500E000                         (3/2319)1586+         CLI   0(R14),0                    *
001100 A784FFFB                0010F6   (3/2320)1587+         JE    ToValue0510                 *
001104 1B00                             (3/2321)1588+         SR    R0,R0                   Set carry to zero
001106 1B11                             (3/2322)1589+         SR    R1,R1                   Clear work register
001108 B904002E                         (3/2323)1590+         LGR   R2,R14                  For each digit:
00110C                                  (3/2324)1591+ToValue0530 DC 0h'0'                       *
00110C 43102000                         (3/2325)1592+         IC    R1,0(,R2)                   get the digit
001110 A71C000A                         (3/2326)1593+         MHI   R1,10                       times 10
001114 1A10                             (3/2327)1594+         AR    R1,R0                       plus the carry
001116 42102000                         (3/2328)1595+         STC   R1,0(,R2)                   save the new value
00111A 88100008                         (3/2329)1596+         SRL   R1,8                        get the carry
00111E 1801                             (3/2330)1597+         LR    R0,R1                           *
001120 E3202FFFFF71                      (3/344)1600+         LAY   R2,-1(,R2)
001126 EC2BFFF3A065            00110C   (3/2332)1602+         CLGRJNL   R2,R11,ToValue0530      not start of number: branch
00112C EC08000A007E            001140   (3/2333)1603+         CIJE  R0,0,ToValue0540        no carry from high-order: branch
001132 EC2302A64065            00167E   (3/2334)1604+         CLGRJL   R2,R3,ToValueOverflow value overflowed: branch
001138 42002000                         (3/2335)1605+         STC   R0,0(,R2)               set new high-order digit
00113C B90400B2                         (3/2336)1606+         LGR   R11,R2                      *
001140                                  (3/2337)1607+ToValue0540 DC 0h'0'                   *
001140 A746FFDE                0010FC   (3/2338)1608+         BRCT  R4,ToValue0520          Go multiply by 10 again
001144 4100D8F8                0008F8   (3/2339)1609+         LA    R0,FpconWork+L'FpconWork
001148 B90B000B                         (3/2340)1610+         SLGR   R0,R11             Compute power-of-256 exponent
00114C 41E0D8F8                0008F8   (3/2341)1611+         LA    R14,FpconWork+L'FpconWork Get address of end of number
001150                                  (3/2343)1613+***********************************************************************
001150                                  (3/2344)1614+* The number is ready to be converted from binary to floating point.  *
001150                                  (3/2345)1615+*        R0: exponent (power of 256)                                  *
001150                                  (3/2346)1616+*        R11: address of first non-zero binary digit in FpconWork     *
001150                                  (3/2347)1617+*             number is base-256 with implied decimal point just      *
001150                                  (3/2348)1618+*             before the digit at R11                                 *
001150                                  (3/2349)1619+*        R14: address of end of number in FpconWork                   *
001150                                  (3/2350)1620+***********************************************************************
001150                                  (3/2351)1621+ToValue0600 DC 0h'0'
001150 9502D0BD                0000BD   (3/2352)1622+         CLI   FpconBase,FpconBase2 Binary formmat?
001154 A78400AA                0012A8   (3/2353)1623+         JE    ToValue1000             yes: branch
001158 1A00                             (3/2354)1624+         AR    R0,R0               Compute hexadecimal exponent
00115A 91F0B000                         (3/2355)1625+         TM    0(R11),X'F0'        Need to shift value?
00115E A774001C                001196   (3/2356)1626+         JNZ   ToValue0620             no: branch
001162 0600                             (3/2357)1627+         BCTR  R0,0                Decrement exponent
001164 1B11                             (3/2358)1628+         SR    R1,R1               Shift the value 4 bits left
001166 1B44                             (3/2359)1629+         SR    R4,R4                   *
001168 4130B00F                         (3/2360)1630+         LA    R3,15(,R11)             (15 bytes maximum)
00116C EC3E00054065            001176   (3/2361)1631+         CLGRJL   R3,R14,ToValue0610   *
001172 B904003E                         (3/2362)1632+         LGR   R3,R14                  *
001176                                  (3/2363)1633+ToValue0610 DC 0h'0'                   *
001176 E3303FFFFF71                      (3/344)1635+         LAY   R3,-1(,R3)
00117C 43403000                         (3/2365)1637+         IC    R4,0(,R3)               *
001180 89400004                         (3/2366)1638+         SLL   R4,4                    *
001184 1641                             (3/2367)1639+         OR    R4,R1                   *
001186 42403000                         (3/2368)1640+         STC   R4,0(,R3)               *
00118A 88400008                         (3/2369)1641+         SRL   R4,8                    *
00118E 1814                             (3/2370)1642+         LR    R1,R4                   *
001190 EC3BFFF32065            001176   (3/2371)1643+         CLGRJH   R3,R11,ToValue0610   *
001196                                  (3/2372)1644+ToValue0620 DC 0h'0'               Get address of bit past end of
001196 4110B003                         (3/2373)1645+         LA    R1,3(,R11)              floating point mantissa
00119A 9504D0BC                0000BC   (3/2374)1646+         CLI   FpconValueLen,FpconValueLenE
00119E A784000A                0011B2   (3/2375)1647+         JE    ToValue0630             *
0011A2 4110B007                         (3/2376)1648+         LA    R1,7(,R11)              *
0011A6 9508D0BC                0000BC   (3/2377)1649+         CLI   FpconValueLen,FpconValueLenD
0011AA A7840004                0011B2   (3/2378)1650+         JE    ToValue0630             *
0011AE 4110B00E                         (3/2379)1651+         LA    R1,14(,R11)             *
0011B2                                  (3/2380)1652+ToValue0630 DC 0h'0'
0011B2 EC1E0022A065            0011F6   (3/2381)1653+         CLGRJNL   R1,R14,ToValue0650 Past end of number: branch
0011B8 91801000                         (3/2382)1654+         TM    0(R1),X'80'         Need to round?
0011BC A784001D                0011F6   (3/2383)1655+         JZ    ToValue0650             no: branch
0011C0 1B22                             (3/2384)1656+         SR    R2,R2               Increment number
0011C2                                  (3/2385)1657+ToValue0640 DC 0h'0'                   *
0011C2 E3101FFFFF71                      (3/344)1659+         LAY   R1,-1(,R1)
0011C8 43201000                         (3/2387)1661+         IC    R2,0(,R1)               *
0011CC A72A0001                         (3/2388)1662+         AHI   R2,1                    *
0011D0 42201000                         (3/2389)1663+         STC   R2,0(,R1)               *
0011D4 8A200008                         (3/2390)1664+         SRA   R2,8                    *
0011D8 A784000F                0011F6   (3/2391)1665+         JZ    ToValue0650             no more carry: branch
0011DC EC1BFFF3C065            0011C2   (3/2392)1666+         CLGRJNH   R1,R11,ToValue0640  *
0011E2                                  (3/2393)1667+* Overflow after rounding:
0011E2 1A02                             (3/2394)1668+         AR    R0,R2               Increment exponent
0011E4 41B0D0C8                0000C8   (3/2395)1669+         LA    R11,FpconWork       Set number to 1
0011E8 9210D0C8                0000C8   (3/2396)1670+         MVI   FpconWork,X'10'         with all trailing zeros
0011EC D70ED0C9D0C9     0000C9 0000C9   (3/2397)1671+         XC    FpconWork+1(15),FpconWork+1
0011F2 41E0D0D8                0000D8   (3/2398)1672+         LA    R14,FpconWork+16        *
0011F6                                  (3/2399)1673+ToValue0650 DC 0h'0'
0011F6 A70A0040                         (3/2400)1674+         AHI   R0,64               Compute biased exponent
0011FA A7440037                001268   (3/2401)1675+         JM    ToValue0700             still negative: branch
0011FE EC0202407F7E            00167E   (3/2402)1676+         CIJH  R0,127,ToValueOverflow Too large: branch
001204 4120D091                000091   (3/2403)1677+         LA    R2,FpconValueE+1    Point to start of output mantissa
001208 9504D0BC                0000BC   (3/2404)1678+         CLI   FpconValueLen,FpconValueLenE Short value?
00120C A784001C                001244   (3/2405)1679+         JE    ToValue0660             yes: branch
001210 4110B007                         (3/2406)1680+         LA    R1,7(,R11)          Point to end of long number
001214 EC1E00222065            001258   (3/2407)1681+         CLGRJH   R1,R14,ToValue0670 Past end of number: branch
00121A D2062000B000                     (3/2408)1682+         MVC   0(7,R2),0(R11)      Copy long mantissa
001220 9508D0BC                0000BC   (3/2409)1683+         CLI   FpconValueLen,FpconValueLenD Long value?
001224 A7840024                00126C   (3/2410)1684+         JE    ToValue0800             yes: branch
001228 4120D099                000099   (3/2411)1685+         LA    R2,FpconValueE+9    Point to start of 2nd half
00122C B90400B1                         (3/2412)1686+         LGR   R11,R1                  *
001230 4110B007                         (3/2413)1687+         LA    R1,7(,R11)          Point to end of extended number
001234 EC1E00122065            001258   (3/2414)1688+         CLGRJH   R1,R14,ToValue0670 Past end of number: branch
00123A D2062000B000                     (3/2415)1689+         MVC   0(7,R2),0(R11)      Copy extended mantissa
001240 A7F40016                00126C   (3/2416)1690+         J     ToValue0800
001244                                  (3/2417)1691+ToValue0660 DC 0h'0'
001244 4110B003                         (3/2418)1692+         LA    R1,3(,R11)          Point to end of short number
001248 EC1E00082065            001258   (3/2419)1693+         CLGRJH   R1,R14,ToValue0670 Past end of number: branch
00124E D2022000B000                     (3/2420)1694+         MVC   0(3,R2),0(R11)      Copy short mantissa
001254 A7F4000C                00126C   (3/2421)1695+         J     ToValue0800
001258                                  (3/2422)1696+ToValue0670 DC 0h'0'               Copy rest of number
001258 B90B00EB                         (3/2423)1697+         SLGR   R14,R11                *
00125C 06E0                             (3/2424)1698+         BCTR  R14,0                   *
00125E C6E0FFFFF82D            0002B8   (3/2425)1699+         EXRL  R14,MVC_R2_R11          *
001264 A7F40004                00126C   (3/2426)1700+         J     ToValue0800             *
001268                                  (3/2428)1702+***********************************************************************
001268                                  (3/2429)1703+*    The value is too small to be converted without denormalizing.    *
001268                                  (3/2430)1704+*    This is probably not a good idea, so for now, just set the       *
001268                                  (3/2431)1705+*    result to zero.  If someone wants denormalized numbers,          *
001268                                  (3/2432)1706+*    support would be added here.  Note: it is fairly complex         *
001268                                  (3/2433)1707+*    logic due to all of the shifting and rounding needed.            *
001268                                  (3/2434)1708+***********************************************************************
001268                                  (3/2435)1709+ToValue0700 DC 0h'0'
001268 A7F4025B                00171E   (3/2436)1710+         J     ToValueUnderflow
00126C                                  (3/2438)1712+***********************************************************************
00126C                                  (3/2439)1713+*    The mantissa of the hexadecimal floating point value has         *
00126C                                  (3/2440)1714+*    been converted.  All that remains is to store the exponent.      *
00126C                                  (3/2441)1715+***********************************************************************
00126C                                  (3/2442)1716+ToValue0800 DC 0h'0'
00126C 9180D090                000090   (3/2443)1717+         TM    FpconValueE,X'80'   Negative number?
001270 A7840008                001280   (3/2444)1718+         JZ    ToValue0810             no: branch
001274 4200D090                000090   (3/2445)1719+         STC   R0,FpconValueE      Set the baised exponent
001278 9680D090                000090   (3/2446)1720+         OI    FpconValueE,X'80'   Make number negative
00127C A7F40004                001284   (3/2447)1721+         J     ToValue0820
001280                                  (3/2448)1722+ToValue0810 DC 0h'0'
001280 4200D090                000090   (3/2449)1723+         STC   R0,FpconValueE      Set the biased exponent
001284                                  (3/2450)1724+ToValue0820 DC 0h'0'
001284 9510D0BC                0000BC   (3/2451)1725+         CLI   FpconValueLen,FpconValueLenL Extended value?
001288 A774F7FF                000286   (3/2452)1726+         JNE   ReturnOk                no: branch
00128C A70AFFF2                         (3/2453)1727+         AHI   R0,-14              Compute 2nd biased exponent
001290 4200D098                000098   (3/2454)1728+         STC   R0,FpconValueL+8        *
001294 947FD098                000098   (3/2455)1729+         NI    FpconValueL+8,X'7F'     *
001298 9180D090                000090   (3/2456)1730+         TM    FpconValueL,X'80'   Negative number?
00129C A784F7F5                000286   (3/2457)1731+         JZ    ReturnOk                no: branch
0012A0 9680D098                000098   (3/2458)1732+         OI    FpconValueL+8,X'80' Make 2nd number negative
0012A4 A7F4F7F1                000286   (3/2459)1733+         J     ReturnOk
0012A8                                  (3/2461)1735+***********************************************************************
0012A8                                  (3/2462)1736+* The number is ready to be converted from binary to BFP format.      *
0012A8                                  (3/2463)1737+*        R0: exponent (power of 256)                                  *
0012A8                                  (3/2464)1738+*        R11: address of first non-zero binary digit in FpconWork     *
0012A8                                  (3/2465)1739+*             number is base-256 with implied decimal point just      *
0012A8                                  (3/2466)1740+*             before the digit at R11                                 *
0012A8                                  (3/2467)1741+*        R14: address of end of number in FpconWork                   *
0012A8                                  (3/2468)1742+***********************************************************************
0012A8                                  (3/2469)1743+ToValue1000 DC 0h'0'
0012A8 0600                             (3/2470)1744+         BCTR  R0,0                Compute binary exponent
0012AA 8B000003                         (3/2471)1745+         SLA   R0,3                    *
0012AE 91F0B000                         (3/2472)1746+         TM    0(R11),X'F0'        Compute right shift bits in R5
0012B2 A784001A                0012E6   (3/2473)1747+         JZ    ToValue1020             (This is a binary search
0012B6 91C0B000                         (3/2474)1748+         TM    0(R11),X'C0'            for the highest 1 bit.)
0012BA A784000C                0012D2   (3/2475)1749+         JZ    ToValue1010             *
0012BE A7580007                         (3/2476)1750+         LHI   R5,7                    *
0012C2 9180B000                         (3/2477)1751+         TM    0(R11),X'80'            *
0012C6 A7740024                00130E   (3/2478)1752+         JNZ   ToValue1040             *
0012CA A7580006                         (3/2479)1753+         LHI   R5,6                    *
0012CE A7F40020                00130E   (3/2480)1754+         J     ToValue1040             *
0012D2                                  (3/2481)1755+ToValue1010 DC 0h'0'                   *
0012D2 A7580005                         (3/2482)1756+         LHI   R5,5                    *
0012D6 9120B000                         (3/2483)1757+         TM    0(R11),X'20'            *
0012DA A774001A                00130E   (3/2484)1758+         JNZ   ToValue1040             *
0012DE A7580004                         (3/2485)1759+         LHI   R5,4                    *
0012E2 A7F40016                00130E   (3/2486)1760+         J     ToValue1040             *
0012E6                                  (3/2487)1761+ToValue1020 DC 0h'0'                   *
0012E6 910CB000                         (3/2488)1762+         TM    0(R11),X'0C'            *
0012EA A784000C                001302   (3/2489)1763+         JZ    ToValue1030             *
0012EE A7580003                         (3/2490)1764+         LHI   R5,3                    *
0012F2 9108B000                         (3/2491)1765+         TM    0(R11),X'08'            *
0012F6 A774000C                00130E   (3/2492)1766+         JNZ   ToValue1040             *
0012FA A7580002                         (3/2493)1767+         LHI   R5,2                    *
0012FE A7F40008                00130E   (3/2494)1768+         J     ToValue1040             *
001302                                  (3/2495)1769+ToValue1030 DC 0h'0'                   *
001302 9102B000                         (3/2496)1770+         TM    0(R11),X'02'            *
001306 A7840034                00136E   (3/2497)1771+         JZ    ToValue1100             none: branch
00130A A7580001                         (3/2498)1772+         LHI   R5,1                    *
00130E                                  (3/2499)1773+ToValue1040 DC 0h'0'
00130E 1A05                             (3/2500)1774+         AR    R0,R5               Update exponent
001310 1B11                             (3/2501)1775+         SR    R1,R1               Shift the value to the right
001312 B904003B                         (3/2502)1776+         LGR   R3,R11                  *
001316 A7680010                         (3/2503)1777+         LHI   R6,16                   (16 bytes maximum)
00131A                                  (3/2504)1778+ToValue1050 DC 0h'0'                   *
00131A 43103000                         (3/2505)1779+         IC    R1,0(,R3)               *
00131E 1841                             (3/2506)1780+         LR    R4,R1                   *
001320 89100008                         (3/2507)1781+         SLL   R1,8                    *
001324 88405000                         (3/2508)1782+         SRL   R4,0(R5)                *
001328 42403000                         (3/2509)1783+         STC   R4,0(,R3)               *
00132C 41303001                         (3/2510)1784+         LA    R3,1(,R3)               *
001330 EC3E0007A065            00133E   (3/2511)1785+         CLGRJNL   R3,R14,ToValue1060  end of number: branch
001336 A766FFF2                00131A   (3/2512)1786+         BRCT  R6,ToValue1050          *
00133A A7F40016                001366   (3/2513)1787+         J     ToValue1080             *
00133E                                  (3/2514)1788+ToValue1060 DC 0h'0'
00133E 4130D8F8                0008F8   (3/2515)1789+         LA    R3,FpconWork+L'FpconWork Number can be extended
001342 ECE300164065            00136E   (3/2516)1790+         CLGRJL   R14,R3,ToValue1100   in place: branch
001348 B90B00EB                         (3/2517)1791+         SLGR   R14,R11            Compute length of number
00134C 183E                             (3/2518)1792+         LR    R3,R14              Move number to start
00134E 0630                             (3/2519)1793+         BCTR  R3,0                    of work area
001350 C630FFFFF7A8            0002A0   (3/2520)1794+         EXRL  R3,ToValue1060_MVC      *
0002A0                                  (3/2521)1795+Static   LOCTR ,
0002A0 D200D0C8B000     0000C8          (3/2522)1796+ToValue1060_MVC MVC FpconWork(0),0(R11) EXecuted instruction
001356                                  (3/2523)1797+ToValue  LOCTR ,
001356 41B0D0C8                0000C8   (3/2524)1798+         LA    R11,FpconWork       Get address of start
00135A 41EED0C8                0000C8   (3/2525)1799+         LA    R14,FpconWork(R14)      and end of number
00135E B904003E                         (3/2526)1800+         LGR   R3,R14              Add another digit to number
001362 41E0E001                         (3/2527)1801+         LA    R14,1(,R14)             *
001366                                  (3/2528)1802+ToValue1080 DC 0h'0'
001366 88105000                         (3/2529)1803+         SRL   R1,0(R5)            Save carry from last byte
00136A 42103000                         (3/2530)1804+         STC   R1,0(,R3)               *
00136E                                  (3/2532)1806+***********************************************************************
00136E                                  (3/2533)1807+* The number is has been shifted so that it starts with X'01'         *
00136E                                  (3/2534)1808+*        R0: exponent (power of 2)                                    *
00136E                                  (3/2535)1809+*        R11: address of start of number in FpconWork                 *
00136E                                  (3/2536)1810+*        R14: address of end of number in FpconWork                   *
00136E                                  (3/2537)1811+***********************************************************************
00136E                                  (3/2538)1812+ToValue1100 DC 0h'0'
00136E 1B11                             (3/2539)1813+         SR    R1,R1               Clear work register
001370 9504D0BC                0000BC   (3/2540)1814+         CLI   FpconValueLen,FpconValueLenE Short?
001374 A784001C                0013AC   (3/2541)1815+         JE    ToValue1110             yes: branch
001378 9508D0BC                0000BC   (3/2542)1816+         CLI   FpconValueLen,FpconValueLenD Long?
00137C A784002F                0013DA   (3/2543)1817+         JE    ToValue1120             yes: branch
001380 4130B00F                         (3/2545)1819+         LA    R3,15(,R11)         Get location of rounding bit
001384 4140D092                000092   (3/2546)1820+         LA    R4,FpconValueL+2    Get address of mantissa in value
001388 4150000E                         (3/2547)1821+         LA    R5,L'FpconValueL-2  Get length of mantissa
00138C A7683FFF                         (3/2548)1822+         LHI   R6,16383            Get maximum exponent
001390 1B77                             (3/2549)1823+         SR    R7,R7               Get bits to shift exponent
001392 EC3E00522065            001436   (3/2550)1824+         CLGRJH   R3,R14,ToValue1150 Past end of number: branch
001398 B90400E3                         (3/2551)1825+         LGR   R14,R3              Truncate number
00139C 91803000                         (3/2552)1826+         TM    0(R3),X'80'         Need to round?
0013A0 A784004B                001436   (3/2553)1827+         JZ    ToValue1150             no: branch
0013A4 B904003E                         (3/2554)1828+         LGR    R3,R14              Go increment value
0013A8 A7F40030                001408   (3/2555)1829+         J     ToValue1130             *
0013AC                                  (3/2557)1831+ToValue1110 DC 0h'0'               Short binary:
0013AC 4130B003                         (3/2558)1832+         LA    R3,3(,R11)          Get location of rounding bit
0013B0 4140D091                000091   (3/2559)1833+         LA    R4,FpconValueE+1    Get address of mantissa in value
0013B4 41500003                         (3/2560)1834+         LA    R5,L'FpconValueE-1  Get length of manissa
0013B8 A768007F                         (3/2561)1835+         LHI   R6,127              Get maximum exponent
0013BC A7780007                         (3/2562)1836+         LHI   R7,7                Get bits to shift exponent
0013C0 EC3E003B2065            001436   (3/2563)1837+         CLGRJH   R3,R14,ToValue1150 Past end of number: branch
0013C6 41E03001                         (3/2564)1838+         LA    R14,1(,R3)          Truncate number
0013CA 91013000                         (3/2565)1839+         TM    0(R3),1             Need to round number?
0013CE A7840034                001436   (3/2566)1840+         JZ    ToValue1150             no: branch
0013D2 B904003E                         (3/2567)1841+         LGR   R3,R14              Go increment number
0013D6 A7F40019                001408   (3/2568)1842+         J     ToValue1130             *
0013DA                                  (3/2570)1844+ToValue1120 DC 0h'0'               Long binary:
0013DA 4130B007                         (3/2571)1845+         LA    R3,7(,R11)          Get location of rounding bit
0013DE 4140D092                000092   (3/2572)1846+         LA    R4,FpconValueD+2    Get address of mantissa in value
0013E2 41500006                         (3/2573)1847+         LA    R5,L'FpconValueD-2  Get length of mantissa
0013E6 A76803FF                         (3/2574)1848+         LHI   R6,1023             Get maximum exponent
0013EA A7780004                         (3/2575)1849+         LHI   R7,4                Get bits to shift exponent
0013EE EC3E00242065            001436   (3/2576)1850+         CLGRJH   R3,R14,ToValue1150 Past end of number: branch
0013F4 41E03001                         (3/2577)1851+         LA    R14,1(,R3)          Truncate number
0013F8 91083000                         (3/2578)1852+         TM    0(R3),X'08'         Need to round number
0013FC A784001D                001436   (3/2579)1853+         JZ    ToValue1150             no: branch
001400 960F3000                         (3/2580)1854+         OI    0(R3),X'0F'         Force increment
001404 B904003E                         (3/2581)1855+         LGR   R3,R14                  *
001408                                  (3/2583)1857+ToValue1130 DC 0h'0'               Increment number due to rounding
001408 E3303FFFFF71                      (3/344)1859+         LAY   R3,-1(,R3)
00140E 43103000                         (3/2585)1861+         IC    R1,0(,R3)               *
001412 A71A0001                         (3/2586)1862+         AHI   R1,1                    *
001416 42103000                         (3/2587)1863+         STC   R1,0(,R3)               *
00141A 8A100008                         (3/2588)1864+         SRA   R1,8                    *
00141E A774FFF5                001408   (3/2589)1865+         JNZ   ToValue1130             *
001422                                  (3/2590)1866+* It is possible that the high order digit is now X'02'
001422                                  (3/2591)1867+* if before rounding the number was X'01FFFFF...'
001422 9501B000                         (3/2592)1868+         CLI   0(R11),1            Is high-order digit still 1?
001426 A7840008                001436   (3/2593)1869+         JE    ToValue1150             yes: branch
00142A 9201B000                         (3/2594)1870+         MVI   0(R11),1            Set number to back to 1
00142E 41E0B001                         (3/2595)1871+         LA    R14,1(,R11)             *
001432 A70A0001                         (3/2596)1872+         AHI   R0,1                Increment exponent
001436                                  (3/2598)1874+***********************************************************************
001436                                  (3/2599)1875+* The number is has been rounded and still starts with X'01'.         *
001436                                  (3/2600)1876+*        R0: exponent (power of 2)                                    *
001436                                  (3/2601)1877+*        R4: address of mantissa in value                             *
001436                                  (3/2602)1878+*        R5: length of mantissa in value                              *
001436                                  (3/2603)1879+*        R6: exponent maximum and bias                                *
001436                                  (3/2604)1880+*        R7: bits to shift exponent left in halfword                  *
001436                                  (3/2605)1881+*        R11: address of start of number in FpconWork                 *
001436                                  (3/2606)1882+*        R14: address of end of number in FpconWork                   *
001436                                  (3/2607)1883+***********************************************************************
001436                                  (3/2608)1884+ToValue1150 DC 0h'0'
001436 EC0601242076            00167E   (3/2609)1885+         CRJH  R0,R6,ToValueOverflow Exponent is too large: branch
00143C 1A06                             (3/2610)1886+         AR    R0,R6               Compute biased exponent
00143E A7D40170                00171E   (3/2611)1887+         JNP   ToValueUnderflow        too small: branch
001442 9504D0BC                0000BC   (3/2612)1888+         CLI   FpconValueLen,FpconValueLenE Short?
001446 A7840022                00148A   (3/2613)1889+         JE    ToValue1170             yes: branch
00144A 9508D0BC                0000BC   (3/2614)1890+         CLI   FpconValueLen,FpconValueLenD Long?
00144E A7740034                0014B6   (3/2615)1891+         JNE   ToValue1200             no: branch
001452 1B11                             (3/2617)1893+         SR    R1,R1               Shift the value 4 bits left
001454 1B22                             (3/2618)1894+         SR    R2,R2                   *
001456 B904003E                         (3/2619)1895+         LGR   R3,R14                  *
00145A                                  (3/2620)1896+ToValue1160 DC 0h'0'                   *
00145A E3303FFFFF71                      (3/344)1898+         LAY   R3,-1(,R3)
001460 43203000                         (3/2622)1900+         IC    R2,0(,R3)               *
001464 89200004                         (3/2623)1901+         SLL   R2,4                    *
001468 1621                             (3/2624)1902+         OR    R2,R1                   *
00146A 42203000                         (3/2625)1903+         STC   R2,0(,R3)               *
00146E 88200008                         (3/2626)1904+         SRL   R2,8                    *
001472 1812                             (3/2627)1905+         LR    R1,R2                   *
001474 EC3BFFF32065            00145A   (3/2628)1906+         CLGRJH   R3,R11,ToValue1160   *
00147A E3E0EFFFFF71                      (3/344)1909+         LAY   R14,-1(,R14)
001480 D100D091B000     000091          (3/2630)1911+         MVN   FpconValueD+1(1),0(R11) Copy the first digit
001486 A7F40018                0014B6   (3/2631)1912+         J     ToValue1200
00148A                                  (3/2633)1914+ToValue1170 DC 0h'0'
00148A 4130B001                         (3/2634)1915+         LA    R3,1(,R11)          Any fraction digits to shift?
00148E EC3E0022A065            0014D2   (3/2635)1916+         CLGRJNL   R3,R14,ToValue1220  no: branch
001494 1B11                             (3/2636)1917+         SR    R1,R1               Shift the fraction 1 bit right
001496                                  (3/2637)1918+ToValue1180 DC 0h'0'                   *
001496 E32030000094                     (3/2638)1919+         LLC   R2,0(,R3)               *
00149C 1621                             (3/2639)1920+         OR    R2,R1                   *
00149E 1812                             (3/2640)1921+         LR    R1,R2                   *
0014A0 88200001                         (3/2641)1922+         SRL   R2,1                    *
0014A4 42203000                         (3/2642)1923+         STC   R2,0(,R3)               *
0014A8 89100008                         (3/2643)1924+         SLL   R1,8                    *
0014AC 41303001                         (3/2644)1925+         LA    R3,1(,R3)               *
0014B0 EC3EFFF34065            001496   (3/2645)1926+         CLGRJL   R3,R14,ToValue1180   *
0014B6                                  (3/2647)1928+ToValue1200 DC 0h'0'
0014B6 41B0B001                         (3/2648)1929+         LA    R11,1(,R11)         Skip X'01' byte
0014BA B90900EB                         (3/2649)1930+         SGR   R14,R11             Copy the mantissa
0014BE A7D4000A                0014D2   (3/2650)1931+         JNP   ToValue1220             *
0014C2 ECE500044076            0014CA   (3/2651)1932+         CRJL  R14,R5,ToValue1210      *
0014C8 18E5                             (3/2652)1933+         LR    R14,R5                  *
0014CA                                  (3/2653)1934+ToValue1210 DC 0h'0'                   *
0014CA 06E0                             (3/2654)1935+         BCTR  R14,0                   *
0014CC C6E0FFFFF6F9            0002BE   (3/2655)1936+         EXRL  R14,MVC_R4_R11          *
0014D2                                  (3/2656)1937+ToValue1220 DC 0h'0'
0014D2 89007000                         (3/2657)1938+         SLL   R0,0(R7)            Get exponent in correct position
0014D6 4810D090                000090   (3/2658)1939+         LH    R1,FpconValueE      OR into first halfword of value
0014DA 1610                             (3/2659)1940+         OR    R1,R0                   *
0014DC 4010D090                000090   (3/2660)1941+         STH   R1,FpconValueE          *
0014E0 A7F4F6D3                000286   (3/2661)1942+         J     ReturnOk            All done!
0014E4                                  (3/2663)1944+***********************************************************************
0014E4                                  (3/2664)1945+*    Convert non-zero number to decimal floating point value.         *
0014E4                                  (3/2665)1946+*        R4: exponent (power of 10)                                   *
0014E4                                  (3/2666)1947+*        R5: number of bytes of FpconWork used for number.            *
0014E4                                  (3/2667)1948+*            Number is base-10 with each digit in a separate          *
0014E4                                  (3/2668)1949+*            byte and with the implied decimal point at end.          *
0014E4                                  (3/2669)1950+***********************************************************************
0014E4                                  (3/2670)1951+ToValue1500 DC 0h'0'
0014E4 9508D0BC                0000BC   (3/2671)1952+         CLI   FpconValueLen,FpconValueLenD Long value?
0014E8 A7840016                001514   (3/2672)1953+         JE    ToValue1520             yes: branch
0014EC 9504D0BC                0000BC   (3/2673)1954+         CLI   FpconValueLen,FpconValueLenE Short value?
0014F0 A784000A                001504   (3/2674)1955+         JE    ToValue1510             yes: branch
0014F4 41100022                         (3/2675)1956+         LA    R1,34               Number of digits for extended
0014F8 A7082FFF                         (3/2676)1957+         LHI   R0,12287            Maximum exponent
0014FC A74A1820                         (3/2677)1958+         AHI   R4,6176             Add exponent bais
001500 A7F40010                001520   (3/2678)1959+         J     ToValue1530
001504                                  (3/2679)1960+ToValue1510 DC 0h'0'
001504 41100007                         (3/2680)1961+         LA    R1,7                Number of digits for short
001508 A70800BF                         (3/2681)1962+         LHI   R0,191              Maximum exponent
00150C A74A0065                         (3/2682)1963+         AHI   R4,101              Add exponent bias
001510 A7F40008                001520   (3/2683)1964+         J     ToValue1530
001514                                  (3/2684)1965+ToValue1520 DC 0h'0'
001514 41100010                         (3/2685)1966+         LA    R1,16               Number of digits for long
001518 A70802FF                         (3/2686)1967+         LHI   R0,767              Maximum exponent
00151C A74A018E                         (3/2687)1968+         AHI   R4,398              Add exponent bias
001520                                  (3/2689)1970+ToValue1530 DC 0h'0'               While exponent is too large:
001520 EC04000EA076            00153C   (3/2690)1971+         CRJNL R0,R4,ToValue1540       exponent not too large: branch
001526 41E5D0C8                0000C8   (3/2691)1972+         LA    R14,FpconWork(R5)       get address of next digit
00152A EC5100AAA076            00167E   (3/2692)1973+         CRJNL R5,R1,ToValueOverflow   too many digits: branch
001530 9200E000                         (3/2693)1974+         MVI   0(R14),0                add another zero
001534 A75A0001                         (3/2694)1975+         AHI   R5,1                    increment number of digits
001538 A746FFF4                001520   (3/2695)1976+         BRCT  R4,ToValue1530          decrement exponent
00153C                                  (3/2697)1978+ToValue1540 DC 0h'0'
00153C EC4A0025007E            001586   (3/2698)1979+         CIJNL R4,0,ToValue1560    Exponent not too small: branch
001542 1A54                             (3/2699)1980+         AR    R5,R4               Are any digits left?
001544 A7D400ED                00171E   (3/2700)1981+         JNP   ToValueUnderflow        no: branch
001548 1B44                             (3/2701)1982+         SR    R4,R4               Exponent is now zero
00154A 41E5D0C7                0000C7   (3/2702)1983+         LA    R14,FpconWork-1(R5) Get address of new last digit
00154E 9505E001                         (3/2703)1984+         CLI   1(R14),5            Need to round up?
001552 A744001A                001586   (3/2704)1985+         JL    ToValue1560             no: branch
001556 4100D0C8                0000C8   (3/2705)1986+         LA    R0,FpconWork        Get address of first digit
00155A 1BFF                             (3/2706)1987+         SR    R15,R15             Round up value
00155C                                  (3/2707)1988+ToValue1550 DC 0h'0'                   *
00155C 43F0E000                         (3/2708)1989+         IC    R15,0(,R14)             *
001560 A7FA0001                         (3/2709)1990+         AHI   R15,1                   *
001564 42F0E000                         (3/2710)1991+         STC   R15,0(,R14)             *
001568 ECFC000F097E            001586   (3/2711)1992+         CIJNH R15,9,ToValue1560       no carry: branch
00156E 9200E000                         (3/2712)1993+         MVI   0(R14),0                *
001572 E3E0EFFFFF71                      (3/344)1995+         LAY   R14,-1(,R14)
001578 EC0EFFF2C065            00155C   (3/2714)1997+         CLGRJNH   R0,R14,ToValue1550  *
00157E 9201D0C8                0000C8   (3/2715)1998+         MVI   FpconWork,1         All 9's, so set to 10000...
001582 A74A0001                         (3/2716)1999+         AHI   R4,1                Increment exponent
001586                                  (3/2718)2001+ToValue1560 DC 0h'0'
001586 1B15                             (3/2719)2002+         SR    R1,R5               Compute # of zeros to prepend
001588 A7D40015                0015B2   (3/2720)2003+         JNP   ToValue1600             none: branch
00158C 41F5D0C7                0000C7   (3/2721)2004+         LA    R15,FpconWork-1(R5) Shift digits to end of value
001590 41E1F000                         (3/2722)2005+         LA    R14,0(R1,R15)           *
001594                                  (3/2723)2006+ToValue1570 DC 0h'0'                   *
001594 D200E000F000                     (3/2724)2007+         MVC   0(1,R14),0(R15)         *
00159A E3E0EFFFFF71                      (3/344)2009+         LAY   R14,-1(,R14)
0015A0 E3F0FFFFFF71                      (3/344)2012+         LAY   R15,-1(,R15)
0015A6 A756FFF7                001594   (3/2727)2014+         BRCT  R5,ToValue1570          *
0015AA 0610                             (3/2728)2015+         BCTR  R1,0                Set leading digits to zero
0015AC C610FFFFF67D            0002A6   (3/2729)2016+         EXRL  R1,ToValue1570_XC       *
0002A6                                  (3/2730)2017+Static   LOCTR ,
0002A6 D700D0C8D0C8     0000C8 0000C8   (3/2731)2018+ToValue1570_XC XC FpconWork(0),FpconWork EXecuted instruction
0015B2                                  (3/2732)2019+ToValue  LOCTR ,
0015B2                                  (3/2734)2021+***********************************************************************
0015B2                                  (3/2735)2022+*    Convert digits in FpconWork to decimal floating point value.     *
0015B2                                  (3/2736)2023+*        R4: biased exponent                                          *
0015B2                                  (3/2737)2024+*        Value in FpconWork is the correct number of digits           *
0015B2                                  (3/2738)2025+*        for the size of the floating point value.                    *
0015B2                                  (3/2739)2026+***********************************************************************
0015B2                                  (3/2740)2027+ToValue1600 DC 0h'0'
0015B2 D200D0E8D090     0000E8 000090   (3/2744)2028+         MVC   FpconWork+32(1),FpconValueE  Save sign bit
0015B8 6000D0C8                0000C8   (3/2745)2029+         STD   FPR0,FpconWork      Save FPR0
0015BC 9508D0BC                0000BC   (3/2746)2030+         CLI   FpconValueLen,FpconValueLenD Long value?
0015C0 A7840018                0015F0   (3/2747)2031+         JE    ToValue1610             yes: branch
0015C4 9510D0BC                0000BC   (3/2748)2032+         CLI   FpconValueLen,FpconValueLenL Extended value?
0015C8 A7840025                001612   (3/2749)2033+         JE    ToValue1620             yes: branch
0015CC F247D0D0D0C8     0000D0 0000C8   (3/2750)2034+         PACK  FpconWork+8(5),FpconWork(8) Pack digits
0015D2 E300D0D00014            0000D0   (3/2751)2035+         LGF   R0,FpconWork+8      Convert digits to DFP
0015D8 B3F20000                         (3/2752)2036+         CDUTR FPR0,R0                 *
0015DC A74A0129                         (3/2753)2037+         AHI   R4,398-101          Set exponent
0015E0 B3F60004                         (3/2754)2038+         IEDTR FPR0,FPR0,R4            *
0015E4 B3D50000                         (3/2755)2039+         LEDTR FPR0,0,FPR0,0       Convert to short
0015E8 7000D090                000090   (3/2756)2040+         STE   FPR0,FpconValueE    Return short value
0015EC A7F40042                001670   (3/2757)2041+         J     ToValue1640         Set sign and return
0015F0                                  (3/2758)2042+ToValue1610 DC 0h'0'               Long DFP:
0015F0 F27ED0D8D0C8     0000D8 0000C8   (3/2759)2043+         PACK  FpconWork+16(8),FpconWork(15) Pack digits
0015F6 F212D0DFD0D6     0000DF 0000D6   (3/2760)2044+         PACK  FpconWork+16+7(2),FpconWork+14(3)
0015FC E300D0D80004            0000D8   (3/2761)2045+         LG    R0,FpconWork+16     Convert digits to DFP
001602 B3F20000                         (3/2762)2046+         CDUTR FPR0,R0                 *
001606 B3F60004                         (3/2763)2047+         IEDTR FPR0,FPR0,R4        Set exponent
00160A 6000D090                000090   (3/2764)2048+         STD   FPR0,FpconValueD    Return long value
00160E A7F40031                001670   (3/2765)2049+         J     ToValue1640         Set sign and return
001612                                  (3/2766)2050+ToValue1620 DC 0h'0'               Extended DFP:
001612 6020D0D0                0000D0   (3/2767)2051+         STD   FPR2,FpconWork+8    Save FPR2
001616 F27ED0EFD0C8     0000EF 0000C8   (3/2768)2052+         PACK  FpconWork+39(8),FpconWork(15) Pack digits
00161C F27ED0F6D0D6     0000F6 0000D6   (3/2769)2053+         PACK  FpconWork+39+7(8),FpconWork+14(15)
001622 F236D0FDD0E4     0000FD 0000E4   (3/2770)2054+         PACK  FpconWork+39+14(4),FpconWork+28(7)
001628 EB01D0F00004            0000F0   (3/2771)2055+         LMG   R0,R1,FpconWork+40  Convert low-order digits to DFP
00162E B3FA0000                         (3/2772)2056+         CXUTR FPR0,R0                 *
001632 E310D0EF0090            0000EF   (3/2773)2057+         LLGC  R1,FpconWork+39     Get high-order 2 digits
001638 EC180014007E            001660   (3/2774)2058+         CIJE  R1,0,ToValue1630    High order 2 digits are zero: branch
00163E 6040D0D8                0000D8   (3/2775)2059+         STD   FPR4,FpconWork+16   Save FPR4
001642 6060D0E0                0000E0   (3/2776)2060+         STD   FPR6,FpconWork+24    and FPR6
001646 B9090000                         (3/2777)2061+         SGR   R0,R0               Convert high-order digits to DFP
00164A B3FA0040                         (3/2778)2062+         CXUTR FPR4,R0                 *
00164E ED4000204048                     (3/2779)2063+         SLXT  FPR4,FPR4,32        Shift to high order
001654 B3DA4000                         (3/2780)2064+         AXTR  FPR0,FPR0,FPR4      Add high-order digits
001658 6840D0D8                0000D8   (3/2781)2065+         LD    FPR4,FpconWork+16   Restore FPR4
00165C 6860D0E0                0000E0   (3/2782)2066+         LD    FPR6,FpconWork+24       and FPR6
001660                                  (3/2783)2067+ToValue1630 DC 0h'0'
001660 B3FE0004                         (3/2784)2068+         IEXTR FPR0,FPR0,R4        Set exponent
001664 6000D090                000090   (3/2785)2069+         STD   FPR0,FpconValueL    Return extended value
001668 6020D098                000098   (3/2786)2070+         STD   FPR2,FpconValueL+8      *
00166C 6820D0D0                0000D0   (3/2787)2071+         LD    FPR2,FpconWork+8    Restore FPR2
001670                                  (3/2788)2072+ToValue1640 DC 0h'0'
001670 6800D0C8                0000C8   (3/2789)2073+         LD    FPR0,FpconWork      Restore FPR0
001674 D600D090D0E8     000090 0000E8   (3/2790)2074+         OC    FpconValueE(1),FpconWork+32   Set sign bit
00167A A7F4F606                000286   (3/2791)2075+         J     ReturnOk            All done!
00167E                                  (3/2960)2077+***********************************************************************
00167E                                  (3/2961)2078+*        The number is too large.  Set the number to (MAX) and        *
00167E                                  (3/2962)2079+*        return with the appropriate return code.                     *
00167E                                  (3/2963)2080+***********************************************************************
00167E                                  (3/2964)2081+ToValueOverflow DC 0h'0'
00167E 9502D0BD                0000BD   (3/2982)2082+         CLI   FpconBase,FpconBase2 Binary format?
001682 A7840020                0016C2   (3/2983)2083+         JE    ToValueOverflowB        yes: branch
001686 950AD0BD                0000BD   (3/2984)2084+         CLI   FpconBase,FpconBase10 Decimal format?
00168A A7840033                0016F0   (3/2985)2085+         JE    ToValueOverflowD        yes: branch
00168E 9504D0BC                0000BC   (3/2986)2086+         CLI   FpconValueLen,FpconValueLenE Short?
001692 A784000E                0016AE   (3/2987)2087+         JE    ToValueOverflowEH       yes: branch
001696 9508D0BC                0000BC   (3/2988)2088+         CLI   FpconValueLen,FpconValueLenD Long?
00169A A784000F                0016B8   (3/2989)2089+         JE    ToValueOverflowDH       yes: branch
00169E D200D098D090     000098 000090   (3/2990)2090+         MVC   FpconValueL+8(1),FpconValueL Copy sign to second half
0016A4 D60FD090C030     000090 0002D0   (3/2991)2091+         OC    FpconValueL,=LH'(MAX)'    Set to extended maximum value
0016AA A7F4F5D3                000250   (3/2992)2092+         J     ReturnOverflow
0016AE                                  (3/2993)2093+ToValueOverflowEH DC 0h'0'
0016AE D603D090C030     000090 0002D0   (3/2994)2094+         OC    FpconValueE,=LH'(MAX)'    Set to short maximum value
0016B4 A7F4F5CE                000250   (3/2995)2095+         J     ReturnOverflow
0016B8                                  (3/2996)2096+ToValueOverflowDH DC 0h'0'
0016B8 D607D090C030     000090 0002D0   (3/2997)2097+         OC    FpconValueD,=LH'(MAX)'    Set to long maximum value
0016BE A7F4F5C9                000250   (3/2998)2098+         J     ReturnOverflow
0016C2                                  (3/2999)2099+ToValueOverflowB DC 0h'0'
0016C2 9504D0BC                0000BC   (3/3000)2100+         CLI   FpconValueLen,FpconValueLenE Short binary?
0016C6 A784000B                0016DC   (3/3001)2101+         JE    ToValueOverflowEB       yes: branch
0016CA 9508D0BC                0000BC   (3/3002)2102+         CLI   FpconValueLen,FpconValueLenD Long binary?
0016CE A784000C                0016E6   (3/3003)2103+         JE    ToValueOverflowDB       yes: branch
0016D2 D60FD090C040     000090 0002E0   (3/3004)2104+         OC    FpconValueL,=LB'(MAX)'    Set to extended maxiumum value
0016D8 A7F4F5BC                000250   (3/3005)2105+         J     ReturnOverflow
0016DC                                  (3/3006)2106+ToValueOverflowEB DC 0h'0'
0016DC D603D090C070     000090 000310   (3/3007)2107+         OC    FpconValueE,=EB'(MAX)'    Set to short maximum value
0016E2 A7F4F5B7                000250   (3/3008)2108+         J     ReturnOverflow
0016E6                                  (3/3009)2109+ToValueOverflowDB DC 0h'0'
0016E6 D607D090C050     000090 0002F0   (3/3010)2110+         OC    FpconValueD,=DB'(MAX)'    Set to long maximum value
0016EC A7F4F5B2                000250   (3/3011)2111+         J     ReturnOverflow
0016F0                                  (3/3012)2112+ToValueOverflowD DC 0h'0'
0016F0 9504D0BC                0000BC   (3/3013)2113+         CLI   FpconValueLen,FpconValueLenE Short decimal?
0016F4 A784000B                00170A   (3/3014)2114+         JE    ToValueOverflowED       yes: branch
0016F8 9508D0BC                0000BC   (3/3015)2115+         CLI   FpconValueLen,FpconValueLenD Long decimal?
0016FC A784000C                001714   (3/3016)2116+         JE    ToValueOverflowDD       yes: branch
001700 D60FD090C058     000090 0002F8   (3/3017)2117+         OC    FpconValueL,=LD'(MAX)'    Set to extended maxiumum value
001706 A7F4F5A5                000250   (3/3018)2118+         J     ReturnOverflow
00170A                                  (3/3019)2119+ToValueOverflowED DC 0h'0'
00170A D603D090C074     000090 000314   (3/3020)2120+         OC    FpconValueE,=ED'(MAX)'    Set to short maximum value
001710 A7F4F5A0                000250   (3/3021)2121+         J     ReturnOverflow
001714                                  (3/3022)2122+ToValueOverflowDD DC 0h'0'
001714 D607D090C068     000090 000308   (3/3023)2123+         OC    FpconValueD,=DD'(MAX)'    Set to long maximum value
00171A A7F4F59B                000250   (3/3024)2124+         J     ReturnOverflow
00171E                                  (3/3026)2126+ToValueUnderflow DC 0h'0'
00171E                                  (3/3027)2127+***********************************************************************
00171E                                  (3/3028)2128+*        The number is too small.  Just set it to zero.               *
00171E                                  (3/3029)2129+***********************************************************************
00171E 9204D0AB                0000AB   (3/3030)2130+         MVI   FpconReturnCode+3,FpconRetUndFlo Indicate underflow
001722                                  (3/3032)2132+ToValueZero DC 0h'0'
001722                                  (3/3033)2133+***********************************************************************
001722                                  (3/3034)2134+*        The number is zero.  Leave the sign for IEEE format.         *
001722                                  (3/3035)2135+*        Remove the sign for IBM S/360 format.                        *
001722                                  (3/3036)2136+***********************************************************************
001722 9510D0BD                0000BD   (3/3037)2137+         CLI   FpconBase,FpconBase16 S/360 format?
001726 A774F5B0                000286   (3/3038)2138+         JNE   ReturnOk                no: branch (leave sign)
00172A 9200D090                000090   (3/3039)2139+         MVI   FpconValueL,0       Clear sign bit
00172E A7F4F5AC                000286   (3/3040)2140+         J     ReturnOk            Done with conversion
001732                                  (3/3045)2142+         DROP  ,
LISTUSE NONE
001732                                  (3/3046)2143+         PRINT NoUhead
001732                                  (3/3047)2144+         TITLE 'Floating Point Conversion - Static Storage'
001732                                  (3/3048)2145+* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
001732                                  (3/3049)2146+*                                                                     *
001732                                  (3/3050)2147+*        Static Data Area - Addressible via R12                       *
001732                                  (3/3051)2148+*                                                                     *
001732                                  (3/3052)2149+* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
0002AC                                  (3/3053)2150+Static   LOCTR ,
0002AC D20040003000                     (3/3055)2152+MVC_R4_R3  MVC 0(0,R4),0(R3)       EXecuted instruction
0002B2 D20030004000                     (3/3056)2153+MVC_R3_R4  MVC 0(0,R3),0(R4)       EXecuted instruction
0002B8 D2002000B000                     (3/3057)2154+MVC_R2_R11 MVC 0(0,R2),0(R11)      EXecuted instruction
0002BE D2004000B000                     (3/3058)2155+MVC_R4_R11 MVC 0(0,R4),0(R11)      EXecuted instruction
0002C4 D70030003000                     (3/3059)2156+XC_R3_R3   XC  0(0,R3),0(R3)       EXecuted instruction
0002CA                                  (3/3061)2158+         LTORG ,
0002D0 7FFFFFFFFFFFFFFF =LH'(MAX)'
0002D8 71FFFFFFFFFFFFFF
0002E0 7FFEFFFFFFFFFFFF =LB'(MAX)'
0002E8 FFFFFFFFFFFFFFFF
0002F0 7FEFFFFFFFFFFFFF =DB'(MAX)'
0002F8 77FFCFF3FCFF3FCF =LD'(MAX)'
000300 F3FCFF3FCFF3FCFF
000308 77FCFF3FCFF3FCFF =DD'(MAX)'
000310 7F7FFFFF         =EB'(MAX)'
000314 77F3FCFF         =ED'(MAX)'
000318 C6F4E2C1         =C'F4SA'
00031C 0000000A         =F'10'
000320 035269DF         =FS24'3.321928'
000324 006A4D3B         =FS24'.415241'
000328 F04E604BC58540                   (3/3063)2160+EBCDIC   DC    X'F0 4E 60 4B C5 85 40'    0 + - . E e blank
00032F 302B2D2E456520                   (3/3064)2161+ASCII    DC    X'30 2B 2D 2E 45 65 20'    0 + - . E e blank
000338                                  (3/3066)2163+StaticEnd DC   0d'0'
000338                                  (3/3069)2165+*        Register Equates
000338                  00000000        (3/3071)2166+R0       EQU   0,,,,GR
000338                  00000001        (3/3071)2167+R1       EQU   1,,,,GR
000338                  00000002        (3/3071)2168+R2       EQU   2,,,,GR
000338                  00000003        (3/3071)2169+R3       EQU   3,,,,GR
000338                  00000004        (3/3071)2170+R4       EQU   4,,,,GR
000338                  00000005        (3/3071)2171+R5       EQU   5,,,,GR
000338                  00000006        (3/3071)2172+R6       EQU   6,,,,GR
000338                  00000007        (3/3071)2173+R7       EQU   7,,,,GR
000338                  00000008        (3/3071)2174+R8       EQU   8,,,,GR
000338                  00000009        (3/3071)2175+R9       EQU   9,,,,GR
000338                  0000000A        (3/3071)2176+R10      EQU   10,,,,GR
000338                  0000000B        (3/3071)2177+R11      EQU   11,,,,GR
000338                  0000000C        (3/3071)2178+R12      EQU   12,,,,GR
000338                  0000000D        (3/3071)2179+R13      EQU   13,,,,GR
000338                  0000000E        (3/3071)2180+R14      EQU   14,,,,GR
000338                  0000000F        (3/3071)2181+R15      EQU   15,,,,GR
000338                  00000000        (3/3078)2183+FPR0     EQU   0,,,,FPR
000338                  00000001        (3/3078)2184+FPR1     EQU   1,,,,FPR
000338                  00000002        (3/3078)2185+FPR2     EQU   2,,,,FPR
000338                  00000003        (3/3078)2186+FPR3     EQU   3,,,,FPR
000338                  00000004        (3/3078)2187+FPR4     EQU   4,,,,FPR
000338                  00000005        (3/3078)2188+FPR5     EQU   5,,,,FPR
000338                  00000006        (3/3078)2189+FPR6     EQU   6,,,,FPR
000338                  00000007        (3/3078)2190+FPR7     EQU   7,,,,FPR
000338                  00000008        (3/3078)2191+FPR8     EQU   8,,,,FPR
000338                  00000009        (3/3078)2192+FPR9     EQU   9,,,,FPR
000338                  0000000A        (3/3078)2193+FPR10    EQU   10,,,,FPR
000338                  0000000B        (3/3078)2194+FPR11    EQU   11,,,,FPR
000338                  0000000C        (3/3078)2195+FPR12    EQU   12,,,,FPR
000338                  0000000D        (3/3078)2196+FPR13    EQU   13,,,,FPR
000338                  0000000E        (3/3078)2197+FPR14    EQU   14,,,,FPR
000338                  0000000F        (3/3078)2198+FPR15    EQU   15,,,,FPR
000000                                  (3/3083)2200+Charset  DSECT ,                   EBCDIC/ASCII character set tables
000000                                  (3/3084)2201+CsZero      DS C                       Zero character
000001                                  (3/3085)2202+CsPlus      DS C                       Plus sign
000002                                  (3/3086)2203+CsMinus     DS C                       Minus sign
000003                                  (3/3087)2204+CsDecimal   DS C                       Decimal point symbol
000004                                  (3/3088)2205+CsExponent  DS C                       Uppercase 'E'
000005                                  (3/3089)2206+CsExpAlt    DS C                       Lowercase 'e'
000006                                  (3/3090)2207+CsBlank     DS C                       Blank character
000007                  00000007        (3/3091)2208+CharsetEnd EQU *
000007                                     (1/4)2210 *
000007                                     (1/5)2211 * NOTE ARCHLVL 2-5 MUST MATCH ARCHLVL IN FPCONMFC.MLC FOR FPCON DEF.
000007                                     (1/6)2212 *
000007                                     (1/7)2213          END 

Symbol Table Listing

 SYM=ASCII    LOC=0000032F LEN=00000007 ESD=0002 TYPE=REL  XREF=2161 168 
 SYM=BinDigitsToString LOC=00000010 LEN=00000001 ESD=0000 TYPE=ABS  XREF=1195 1202 
  1268 1286 1290 1449 1515 1517 1521 1566 1574 
 SYM=CHARSET  LOC=00000000 LEN=00000008 ESD=0006 TYPE=DST  XREF=2200 169 
 SYM=CSBLANK  LOC=00000006 LEN=00000001 ESD=0006 TYPE=REL  XREF=2207 184 185 189 
  193 197 201 
 SYM=CSDECIMAL LOC=00000003 LEN=00000001 ESD=0006 TYPE=REL  XREF=2204 195 
 SYM=CSEXPALT LOC=00000005 LEN=00000001 ESD=0006 TYPE=REL  XREF=2206 205 
 SYM=CSEXPONENT LOC=00000004 LEN=00000001 ESD=0006 TYPE=REL  XREF=2205 199 203 
 SYM=CSMINUS  LOC=00000002 LEN=00000001 ESD=0006 TYPE=REL  XREF=2203 191 
 SYM=CSPLUS   LOC=00000001 LEN=00000001 ESD=0006 TYPE=REL  XREF=2202 187 
 SYM=CSZERO   LOC=00000000 LEN=00000001 ESD=0006 TYPE=REL  XREF=2201 170 173 177 
  180 182 
 SYM=CharsetEnd LOC=00000007 LEN=00000001 ESD=0006 TYPE=REL  XREF=2208 169 
 SYM=EBCDIC   LOC=00000328 LEN=00000007 ESD=0002 TYPE=REL  XREF=2160 172 
 SYM=ENTER000 LOC=00000072 LEN=00000002 ESD=0002 TYPE=REL  XREF=156 151 153 
 SYM=ENTER005 LOC=00000096 LEN=00000002 ESD=0002 TYPE=REL  XREF=166 158 160 162 
 SYM=ENTER010 LOC=000000C0 LEN=00000002 ESD=0002 TYPE=REL  XREF=179 171 174 
 SYM=ENTER020 LOC=000000EA LEN=00000002 ESD=0002 TYPE=REL  XREF=188 186 
 SYM=ENTER030 LOC=000000FA LEN=00000002 ESD=0002 TYPE=REL  XREF=192 190 
 SYM=ENTER040 LOC=0000010A LEN=00000002 ESD=0002 TYPE=REL  XREF=196 194 
 SYM=ENTER050 LOC=0000011A LEN=00000002 ESD=0002 TYPE=REL  XREF=200 198 
 SYM=ENTER060 LOC=00000138 LEN=00000002 ESD=0002 TYPE=REL  XREF=207 204 
 SYM=ENTER070 LOC=0000013E LEN=00000002 ESD=0002 TYPE=REL  XREF=209 202 206 
 SYM=ENTER105 LOC=0000018A LEN=00000002 ESD=0002 TYPE=REL  XREF=232 221 
 SYM=ENTER110 LOC=00000196 LEN=00000002 ESD=0002 TYPE=REL  XREF=236 226 
 SYM=ENTER120 LOC=000001A6 LEN=00000002 ESD=0002 TYPE=REL  XREF=241 217 224 229 231 
  235 239 
 SYM=ENTER130 LOC=000001BC LEN=00000002 ESD=0002 TYPE=REL  XREF=248 246 
 SYM=ENTER140 LOC=000001D8 LEN=00000002 ESD=0002 TYPE=REL  XREF=256 254 
 SYM=ENTER150 LOC=000001E0 LEN=00000002 ESD=0002 TYPE=REL  XREF=259 257 
 SYM=ENTER155 LOC=000001F0 LEN=00000002 ESD=0002 TYPE=REL  XREF=264 262 
 SYM=ENTER160 LOC=0000020A LEN=00000002 ESD=0002 TYPE=REL  XREF=273 269 
 SYM=ENTER170 LOC=00000228 LEN=00000002 ESD=0002 TYPE=REL  XREF=281 277 
 SYM=ENTER180 LOC=0000023C LEN=00000002 ESD=0002 TYPE=REL  XREF=287 275 279 
 SYM=FPCON    LOC=00000000 LEN=000008F8 ESD=0001 TYPE=DST  XREF=48 102 138 139 140 
 SYM=FPCONBASE LOC=000000BD LEN=00000001 ESD=0001 TYPE=REL  XREF=77 157 159 161 163 
  165 220 225 331 333 843 1204 1256 1442 1467 1622 2082 2084 2137 
 SYM=FPCONBLANK LOC=000000C5 LEN=00000001 ESD=0001 TYPE=REL  XREF=96 184 1171 1365 
  1395 1418 
 SYM=FPCONDECIMAL LOC=000000C2 LEN=00000001 ESD=0001 TYPE=REL  XREF=93 193 195 909 
  916 951 982 995 1090 1095 1243 
 SYM=FPCONEND LOC=000008F8 LEN=00000008 ESD=0001 TYPE=REL  XREF=101 140 
 SYM=FPCONEXPALT LOC=000000C4 LEN=00000001 ESD=0001 TYPE=REL  XREF=95 201 205 208 
  1369 
 SYM=FPCONEXPONENT LOC=000000C3 LEN=00000001 ESD=0001 TYPE=REL  XREF=94 197 199 203 
  208 1020 1105 1367 
 SYM=FPCONEXPONENT10 LOC=000000BA LEN=00000002 ESD=0001 TYPE=REL  XREF=72 1015 1067 
  1134 
 SYM=FPCONFIVE LOC=000000C7 LEN=00000001 ESD=0001 TYPE=REL  XREF=98 180 181 803 815 
  1265 1320 
 SYM=FPCONFLAGS LOC=000000BE LEN=00000001 ESD=0001 TYPE=REL  XREF=81 211 261 274 
  792 862 870 1023 1065 1069 1071 1107 
 SYM=FPCONGENDIGITS LOC=000000BA LEN=00000002 ESD=0001 TYPE=REL  XREF=71 242 567 
  641 784 
 SYM=FPCONMAXDECIMAL LOC=000000B6 LEN=00000002 ESD=0001 TYPE=REL  XREF=69 244 276 
  796 798 937 
 SYM=FPCONMAXDIGITS LOC=000000B0 LEN=00000002 ESD=0001 TYPE=REL  XREF=66 214 
 SYM=FPCONMAXLEADING LOC=000000B2 LEN=00000002 ESD=0001 TYPE=REL  XREF=67 249 270 
  284 807 886 946 973 1083 
 SYM=FPCONMINDECIMAL LOC=000000B4 LEN=00000002 ESD=0001 TYPE=REL  XREF=68 251 278 
  282 906 921 953 979 1000 1087 1097 
 SYM=FPCONMINEXPON LOC=000000B8 LEN=00000002 ESD=0001 TYPE=REL  XREF=70 288 1016 
  1103 
 SYM=FPCONMINUS LOC=000000C1 LEN=00000001 ESD=0001 TYPE=REL  XREF=92 189 191 876 
  1030 1079 1227 1388 
 SYM=FPCONNINE LOC=000000C6 LEN=00000001 ESD=0001 TYPE=REL  XREF=97 182 183 828 1251 
  1399 
 SYM=FPCONPLUS LOC=000000C0 LEN=00000001 ESD=0001 TYPE=REL  XREF=91 185 187 872 1025 
  1076 1109 1225 1386 
 SYM=FPCONRETURNCODE LOC=000000A8 LEN=00000004 ESD=0001 TYPE=REL  XREF=54 143 316 
  320 389 460 2130 
 SYM=FPCONSAVE LOC=00000000 LEN=00000008 ESD=0001 TYPE=REL  XREF=49 
 SYM=FPCONSTRINGADDR LOC=000000A0 LEN=00000008 ESD=0001 TYPE=REL  XREF=53 144 307 
  565 637 705 759 781 1057 1068 1116 1127 1164 
 SYM=FPCONSTRINGLEN LOC=000000AE LEN=00000002 ESD=0001 TYPE=REL  XREF=64 308 1058 
  1117 1135 
 SYM=FPCONSTRINGSIZE LOC=000000AC LEN=00000002 ESD=0001 TYPE=REL  XREF=63 148 266 
  1165 
 SYM=FPCONVALUED LOC=00000090 LEN=00000008 ESD=0001 TYPE=REL  XREF=51 367 369 374 
  443 709 1846 1847 1911 2048 2097 2110 2123 
 SYM=FPCONVALUEE LOC=00000090 LEN=00000004 ESD=0001 TYPE=REL  XREF=50 335 355 357 
  362 387 428 703 868 1073 1157 1677 1685 1717 1719 1720 1723 1833 1834 1939 1941 
  2028 2040 2074 2094 2107 2120 
 SYM=FPCONVALUEL LOC=00000090 LEN=00000010 ESD=0001 TYPE=REL  XREF=52 343 344 346 
  404 414 730 731 1168 1229 1728 1729 1730 1732 1820 1821 2069 2070 2090 2091 2104 
  2117 2139 
 SYM=FPCONVALUELEN LOC=000000BC LEN=00000001 ESD=0001 TYPE=REL  XREF=73 150 152 154 
  223 228 234 238 339 341 405 407 706 710 1207 1210 1475 1477 1646 1649 1678 1683 
  1725 1814 1816 1888 1890 1952 1954 2030 2032 2086 2088 2100 2102 2113 2115 
 SYM=FPCONVRT LOC=00000000 LEN=00001738 ESD=0002 TYPE=CST  XREF=127 
 SYM=FPCONWORK LOC=000000C8 LEN=00000830 ESD=0001 TYPE=REL  XREF=100 138 139 338 
  403 528 529 544 564 597 599 600 601 708 718 721 723 724 725 728 729 736 743 744 
  745 748 749 750 751 768 770 865 1045 1046 1047 1202 1258 1268 1286 1290 1322 1323 
  1336 1342 1449 1517 1521 1566 1574 1576 1577 1579 1609 1611 1669 1670 1671 1672 
  1789 1796 1798 1799 1972 1983 1986 1998 2004 2018 2028 2029 2034 2035 2043 2044 
  2045 2051 2052 2053 2054 2055 2057 2059 2060 2065 2066 2071 2073 2074 
 SYM=FPCONZERO LOC=000000BF LEN=00000001 ESD=0001 TYPE=REL  XREF=90 170 173 175 177 
  548 639 685 756 763 806 834 902 925 948 958 1005 1051 1085 1099 1112 1130 1235 
  1249 1397 
 SYM=FPR0     LOC=00000000 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2183 708 709 712 
  714 716 717 718 728 730 732 734 735 740 741 744 770 2029 2036 2038 2039 2040 2046 
  2047 2048 2056 2064 2068 2069 2073 
 SYM=FPR10    LOC=0000000A LEN=00000001 ESD=0000 TYPE=ABS  XREF=2193 
 SYM=FPR1     LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2184 
 SYM=FPR11    LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=2194 
 SYM=FPR12    LOC=0000000C LEN=00000001 ESD=0000 TYPE=ABS  XREF=2195 
 SYM=FPR13    LOC=0000000D LEN=00000001 ESD=0000 TYPE=ABS  XREF=2196 
 SYM=FPR14    LOC=0000000E LEN=00000001 ESD=0000 TYPE=ABS  XREF=2197 
 SYM=FPR15    LOC=0000000F LEN=00000001 ESD=0000 TYPE=ABS  XREF=2198 
 SYM=FPR2     LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2185 729 731 745 
  768 2051 2070 2071 
 SYM=FPR3     LOC=00000003 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2186 
 SYM=FPR4     LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2187 2059 2062 2063 
  2064 2065 
 SYM=FPR5     LOC=00000005 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2188 
 SYM=FPR6     LOC=00000006 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2189 2060 2066 
 SYM=FPR7     LOC=00000007 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2190 
 SYM=FPR8     LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2191 
 SYM=FPR9     LOC=00000009 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2192 
 SYM=FpconBase10 LOC=0000000A LEN=00000001 ESD=0000 TYPE=ABS  XREF=79 159 220 331 
  843 1204 1256 1442 2084 
 SYM=FpconBase16 LOC=00000010 LEN=00000001 ESD=0000 TYPE=ABS  XREF=80 161 2137 
 SYM=FpconBase2 LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=78 157 165 225 
  333 1467 1622 2082 
 SYM=FpconExponPlus LOC=00000010 LEN=00000001 ESD=0000 TYPE=ABS  XREF=85 1023 1107 
 SYM=FpconFixedDec LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=88 274 792 
 SYM=FpconLength LOC=000008F8 LEN=00000001 ESD=0000 TYPE=ABS  XREF=102 
 SYM=FpconRetBadPrm LOC=00000010 LEN=00000001 ESD=0000 TYPE=ABS  XREF=62 313 
 SYM=FpconRetBadStr LOC=0000000C LEN=00000001 ESD=0000 TYPE=ABS  XREF=61 309 
 SYM=FpconRetDenorm LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=57 389 460 
 SYM=FpconRetDigits LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=89 261 862 
  1065 
 SYM=FpconRetInf LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=59 299 
 SYM=FpconRetNan LOC=0000000C LEN=00000001 ESD=0000 TYPE=ABS  XREF=60 303 
 SYM=FpconRetOk LOC=00000000 LEN=00000001 ESD=0000 TYPE=ABS  XREF=55 
 SYM=FpconRetOvrFlo LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=58 295 
 SYM=FpconRetUndFlo LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=56 2130 
 SYM=FpconToValue LOC=00000040 LEN=00000001 ESD=0000 TYPE=ABS  XREF=82 211 
 SYM=FpconValueLenD LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=75 152 223 
  234 341 407 710 1207 1477 1649 1683 1816 1890 1952 2030 2088 2102 2115 
 SYM=FpconValueLenE LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=74 150 228 
  238 339 405 1210 1475 1646 1678 1814 1888 1954 2086 2100 2113 
 SYM=FpconValueLenL LOC=00000010 LEN=00000001 ESD=0000 TYPE=ABS  XREF=76 154 706 
  1725 2032 
 SYM=FpconValuePlus LOC=00000020 LEN=00000001 ESD=0000 TYPE=ABS  XREF=84 870 
 SYM=FpconZeroPlus LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=86 1069 
 SYM=FpconZeroSign LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=87 1071 
 SYM=MVC_R2_R11 LOC=000002B8 LEN=00000006 ESD=0002 TYPE=REL  XREF=2154 1699 
 SYM=MVC_R3_R4 LOC=000002B2 LEN=00000006 ESD=0002 TYPE=REL  XREF=2153 893 918 962 
  997 
 SYM=MVC_R4_R11 LOC=000002BE LEN=00000006 ESD=0002 TYPE=REL  XREF=2155 1936 
 SYM=MVC_R4_R3 LOC=000002AC LEN=00000006 ESD=0002 TYPE=REL  XREF=2152 866 
 SYM=R0       LOC=00000000 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2166 145 146 147 
  148 149 214 215 216 222 227 230 233 237 240 242 246 247 257 258 265 266 270 271 
  276 277 278 282 283 284 285 288 289 290 324 335 336 337 351 363 375 386 394 409 
  412 416 417 418 423 427 431 432 433 438 442 446 447 448 461 462 464 466 470 492 
  495 506 595 602 603 604 660 661 662 663 664 671 676 678 682 684 717 721 722 735 
  736 737 741 794 795 796 886 887 888 906 907 921 922 927 937 938 942 946 947 953 
  957 965 973 974 979 980 1000 1001 1007 1016 1018 1042 1043 1083 1084 1087 1088 
  1097 1101 1103 1104 1114 1165 1166 1175 1232 1239 1351 1363 1373 1393 1410 1423 
  1451 1456 1464 1465 1513 1514 1517 1518 1519 1521 1523 1524 1534 1537 1540 1541 
  1545 1566 1567 1588 1594 1597 1603 1605 1609 1610 1624 1627 1668 1674 1676 1719 
  1723 1727 1728 1744 1745 1774 1872 1885 1886 1938 1940 1957 1962 1967 1971 1986 
  1997 2035 2036 2045 2046 2055 2056 2061 2062 
 SYM=R10      LOC=0000000A LEN=00000001 ESD=0000 TYPE=ABS  XREF=2176 
 SYM=R1       LOC=00000001 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2167 132 134 135 
  136 137 138 139 144 145 147 168 169 172 210 244 245 246 247 249 250 255 257 258 
  260 263 265 307 308 404 412 426 427 441 442 465 466 468 469 470 478 483 509 542 
  553 595 672 674 677 680 683 736 738 743 784 798 799 813 814 825 826 827 939 940 
  941 942 1033 1035 1037 1040 1042 1043 1048 1054 1164 1166 1171 1174 1175 1225 1227 
  1231 1232 1235 1238 1239 1243 1249 1251 1253 1265 1320 1350 1351 1363 1365 1367 
  1369 1372 1373 1386 1388 1392 1393 1395 1397 1399 1404 1409 1410 1418 1421 1423 
  1463 1466 1512 1515 1516 1518 1519 1537 1538 1539 1542 1551 1552 1553 1554 1589 
  1592 1593 1594 1595 1596 1597 1628 1639 1642 1645 1648 1651 1653 1654 1659 1661 
  1663 1666 1680 1681 1686 1687 1688 1692 1693 1775 1779 1780 1781 1803 1804 1813 
  1861 1862 1863 1864 1893 1902 1905 1917 1920 1921 1924 1939 1940 1941 1956 1961 
  1966 1973 2002 2005 2015 2016 2055 2057 2058 
 SYM=R11      LOC=0000000B LEN=00000001 ESD=0000 TYPE=ABS  XREF=2177 139 338 343 
  344 345 348 349 350 352 357 358 361 362 364 369 370 373 374 376 379 390 393 395 
  403 413 414 415 419 428 429 430 434 443 444 445 449 453 456 457 473 486 488 508 
  532 550 552 553 594 597 598 599 602 603 627 655 662 668 683 693 1144 1146 1148 
  1267 1274 1275 1276 1277 1292 1298 1299 1300 1301 1302 1303 1404 1405 1407 1449 
  1450 1451 1533 1557 1559 1560 1567 1577 1578 1602 1606 1610 1625 1630 1643 1645 
  1648 1651 1666 1669 1680 1682 1686 1687 1689 1692 1694 1697 1746 1748 1751 1757 
  1762 1765 1770 1776 1791 1796 1798 1819 1832 1845 1868 1870 1871 1906 1911 1915 
  1929 1930 2154 2155 
 SYM=R12      LOC=0000000C LEN=00000001 ESD=0000 TYPE=ABS  XREF=2178 131 133 136 
  141 324 
 SYM=R13      LOC=0000000D LEN=00000001 ESD=0000 TYPE=ABS  XREF=2179 131 134 135 
  137 140 322 323 324 
 SYM=R14      LOC=0000000E LEN=00000001 ESD=0000 TYPE=ABS  XREF=2180 131 139 323 
  325 345 352 358 364 370 376 379 381 383 385 415 430 445 457 482 484 485 490 510 
  512 515 591 598 600 606 619 623 636 655 658 663 664 666 668 669 672 687 691 693 
  725 751 754 755 759 760 762 763 764 1144 1149 1268 1272 1274 1276 1290 1296 1298 
  1301 1308 1310 1322 1326 1328 1330 1333 1335 1342 1346 1452 1453 1454 1458 1466 
  1469 1471 1479 1481 1485 1487 1491 1493 1524 1544 1560 1576 1583 1586 1590 1611 
  1631 1632 1653 1672 1681 1688 1693 1697 1698 1699 1785 1790 1791 1792 1799 1800 
  1801 1824 1825 1828 1837 1838 1841 1850 1851 1855 1871 1895 1909 1916 1926 1930 
  1932 1933 1935 1936 1972 1974 1983 1984 1989 1991 1993 1995 1997 2005 2007 2009 
 SYM=R15      LOC=0000000F LEN=00000001 ESD=0000 TYPE=ABS  XREF=2181 295 299 303 
  309 313 316 320 714 715 720 732 733 739 747 753 754 758 760 765 1324 1326 1327 
  1328 1329 1987 1989 1990 1991 1992 2004 2005 2007 2012 
 SYM=R2       LOC=00000002 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2168 251 252 255 
  269 410 417 418 424 432 433 439 447 448 462 472 476 477 480 483 484 512 514 515 
  532 536 539 541 542 565 573 574 604 606 609 612 615 618 637 638 639 640 684 685 
  686 705 755 758 782 801 806 814 815 817 820 821 823 825 827 828 830 833 834 841 
  846 847 849 850 864 866 867 893 895 897 899 900 904 918 919 920 922 940 962 963 
  964 965 978 989 997 998 999 1001 1068 1076 1079 1081 1085 1086 1090 1091 1095 1096 
  1099 1100 1105 1106 1109 1110 1112 1113 1116 1117 1129 1132 1133 1135 1197 1237 
  1255 1362 1384 1401 1412 1523 1533 1539 1542 1543 1544 1549 1551 1553 1590 1592 
  1595 1600 1602 1604 1605 1606 1656 1661 1662 1663 1664 1668 1677 1682 1685 1689 
  1694 1894 1900 1901 1902 1903 1904 1905 1919 1920 1921 1922 1923 2154 
 SYM=R3       LOC=00000003 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2169 411 425 440 
  455 464 473 475 479 481 482 506 508 509 510 566 567 575 593 611 613 617 626 632 
  633 638 641 660 695 753 781 783 801 803 814 821 846 864 872 873 876 877 894 899 
  902 903 909 910 916 917 920 925 926 948 949 951 952 958 959 964 976 977 982 983 
  995 996 999 1005 1006 1020 1021 1025 1026 1030 1031 1050 1051 1053 1057 1058 1127 
  1129 1130 1133 1198 1245 1246 1260 1281 1316 1343 1385 1390 1413 1522 1535 1541 
  1579 1604 1630 1631 1632 1635 1637 1640 1643 1776 1779 1783 1784 1785 1789 1790 
  1792 1793 1794 1800 1804 1819 1824 1825 1826 1828 1832 1837 1838 1839 1841 1845 
  1850 1851 1852 1854 1855 1859 1861 1863 1895 1898 1900 1903 1906 1915 1916 1919 
  1923 1925 1926 2152 2153 2156 
 SYM=R4       LOC=00000004 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2170 475 476 477 
  478 479 514 537 538 540 609 610 611 612 613 674 675 676 677 678 782 783 794 813 
  865 915 976 988 1047 1048 1050 1052 1199 1261 1282 1317 1337 1344 1429 1463 1504 
  1511 1512 1531 1563 1608 1629 1637 1638 1639 1640 1641 1642 1780 1782 1783 1820 
  1833 1846 1958 1963 1968 1971 1976 1979 1980 1982 1999 2037 2038 2047 2068 2152 
  2153 2155 
 SYM=R5       LOC=00000005 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2171 513 533 535 
  536 539 540 547 594 601 618 627 630 632 1200 1284 1287 1291 1311 1315 1322 1342 
  1347 1441 1450 1452 1516 1578 1750 1753 1756 1759 1764 1767 1772 1774 1782 1803 
  1821 1834 1847 1932 1933 1972 1973 1975 1980 1983 2002 2004 2014 
 SYM=R6       LOC=00000006 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2172 529 543 545 
  564 572 1364 1402 1406 1407 1414 1425 1427 1429 1777 1786 1822 1835 1848 1885 1886 
 SYM=R7       LOC=00000007 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2173 528 543 545 
  547 548 549 570 572 573 1201 1206 1209 1212 1263 1264 1291 1304 1315 1319 1323 
  1335 1339 1823 1836 1849 1938 
 SYM=R8       LOC=00000008 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2174 527 531 588 
  607 716 719 720 734 746 747 795 799 807 808 809 835 885 888 894 895 915 930 941 
  954 960 975 1015 1017 1022 1029 1034 1036 1038 1045 1128 1134 1253 1254 1285 1286 
  1300 1303 1305 1310 1346 
 SYM=R9       LOC=00000009 LEN=00000001 ESD=0000 TYPE=ABS  XREF=2175 
 SYM=RETURN   LOC=0000028C LEN=00000002 ESD=0002 TYPE=REL  XREF=321 317 
 SYM=RETURNBADPARM LOC=0000027A LEN=00000002 ESD=0002 TYPE=REL  XREF=312 146 147 
  149 155 164 176 215 218 245 250 253 267 271 280 283 285 289 290 
 SYM=RETURNBADSTRING LOC=00000268 LEN=00000002 ESD=0002 TYPE=REL  XREF=306 1173 1176 
  1232 1245 1362 1370 1373 1393 1398 1400 1412 1419 
 SYM=RETURNINFINITY LOC=00000258 LEN=00000002 ESD=0002 TYPE=REL  XREF=298 1150 1158 
 SYM=RETURNNAN LOC=00000260 LEN=00000002 ESD=0002 TYPE=REL  XREF=302 1147 1159 
 SYM=RETURNOK LOC=00000286 LEN=00000002 ESD=0002 TYPE=REL  XREF=319 1059 1118 1136 
  1726 1731 1733 1942 2075 2138 2140 
 SYM=RETURNOVERFLOW LOC=00000250 LEN=00000002 ESD=0002 TYPE=REL  XREF=294 2092 2095 
  2098 2105 2108 2111 2118 2121 2124 
 SYM=RETURNSET LOC=0000027E LEN=00000002 ESD=0002 TYPE=REL  XREF=315 296 300 304 
  310 
 SYM=STATIC   LOC=000002A0 LEN=00000098 ESD=0002 TYPE=CST  XREF=328 133 136 141 1795 
  2017 2150 
 SYM=STATICEND LOC=00000338 LEN=00000008 ESD=0002 TYPE=REL  XREF=2163 141 
 SYM=TOSTRING0010 LOC=0000039E LEN=00000002 ESD=0002 TYPE=REL  XREF=354 340 
 SYM=TOSTRING0020 LOC=000003B4 LEN=00000002 ESD=0002 TYPE=REL  XREF=360 356 
 SYM=TOSTRING0030 LOC=000003CA LEN=00000002 ESD=0002 TYPE=REL  XREF=366 342 
 SYM=TOSTRING0040 LOC=000003E0 LEN=00000002 ESD=0002 TYPE=REL  XREF=372 368 
 SYM=TOSTRING0050 LOC=000003F2 LEN=00000002 ESD=0002 TYPE=REL  XREF=378 347 353 359 
  365 371 384 
 SYM=TOSTRING0060 LOC=00000422 LEN=00000002 ESD=0002 TYPE=REL  XREF=392 396 
 SYM=TOSTRING0100 LOC=00000436 LEN=00000002 ESD=0002 TYPE=REL  XREF=402 334 
 SYM=TOSTRING0110 LOC=00000480 LEN=00000002 ESD=0002 TYPE=REL  XREF=422 406 
 SYM=TOSTRING0120 LOC=000004B6 LEN=00000002 ESD=0002 TYPE=REL  XREF=437 408 
 SYM=TOSTRING0130 LOC=000004EC LEN=00000002 ESD=0002 TYPE=REL  XREF=452 416 431 446 
  457 
 SYM=TOSTRING0140 LOC=00000506 LEN=00000002 ESD=0002 TYPE=REL  XREF=459 454 
 SYM=TOSTRING0150 LOC=00000510 LEN=00000002 ESD=0002 TYPE=REL  XREF=463 420 435 450 
 SYM=TOSTRING0160 LOC=0000052A LEN=00000002 ESD=0002 TYPE=REL  XREF=474 482 
 SYM=TOSTRING0190 LOC=0000056E LEN=00000002 ESD=0002 TYPE=REL  XREF=494 467 487 
 SYM=TOSTRING0200 LOC=00000572 LEN=00000002 ESD=0002 TYPE=REL  XREF=505 388 391 397 
 SYM=TOSTRING0210 LOC=00000596 LEN=00000002 ESD=0002 TYPE=REL  XREF=526 511 
 SYM=TOSTRING0220 LOC=000005A0 LEN=00000002 ESD=0002 TYPE=REL  XREF=530 551 553 
 SYM=TOSTRING0230 LOC=000005AA LEN=00000002 ESD=0002 TYPE=REL  XREF=534 542 
 SYM=TOSTRING0240 LOC=000005D6 LEN=00000002 ESD=0002 TYPE=REL  XREF=546 543 
 SYM=TOSTRING0250 LOC=00000608 LEN=00000002 ESD=0002 TYPE=REL  XREF=568 575 
 SYM=TOSTRING0300 LOC=00000626 LEN=00000002 ESD=0002 TYPE=REL  XREF=587 507 
 SYM=TOSTRING0310 LOC=0000065C LEN=00000002 ESD=0002 TYPE=REL  XREF=605 596 626 634 
 SYM=TOSTRING0320 LOC=00000664 LEN=00000002 ESD=0002 TYPE=REL  XREF=608 618 
 SYM=TOSTRING0330 LOC=00000694 LEN=00000002 ESD=0002 TYPE=REL  XREF=625 620 
 SYM=TOSTRING0340 LOC=000006B0 LEN=00000002 ESD=0002 TYPE=REL  XREF=635 627 
 SYM=TOSTRING0500 LOC=000006CC LEN=00000002 ESD=0002 TYPE=REL  XREF=654 572 
 SYM=TOSTRING0510 LOC=000006EE LEN=00000002 ESD=0002 TYPE=REL  XREF=665 669 
 SYM=TOSTRING0520 LOC=00000700 LEN=00000002 ESD=0002 TYPE=REL  XREF=670 663 667 695 
 SYM=TOSTRING0530 LOC=00000706 LEN=00000002 ESD=0002 TYPE=REL  XREF=673 683 
 SYM=TOSTRING0540 LOC=0000074A LEN=00000002 ESD=0002 TYPE=REL  XREF=694 688 
 SYM=TOSTRING0600 LOC=00000752 LEN=00000002 ESD=0002 TYPE=REL  XREF=702 332 
 SYM=TOSTRING0610 LOC=0000077C LEN=00000002 ESD=0002 TYPE=REL  XREF=713 711 
 SYM=TOSTRING0620 LOC=000007B6 LEN=00000002 ESD=0002 TYPE=REL  XREF=727 707 
 SYM=TOSTRING0630 LOC=000007F6 LEN=00000002 ESD=0002 TYPE=REL  XREF=742 739 
 SYM=TOSTRING0640 LOC=0000081E LEN=00000002 ESD=0002 TYPE=REL  XREF=752 726 
 SYM=TOSTRING0650 LOC=0000083C LEN=00000002 ESD=0002 TYPE=REL  XREF=761 765 
 SYM=TOSTRING1000 LOC=0000085E LEN=00000002 ESD=0002 TYPE=REL  XREF=780 576 655 668 
  693 696 757 766 
 SYM=TOSTRING LOC=00000338 LEN=0000097C ESD=0002 TYPE=CST  XREF=330 292 
 SYM=TOSTRING1010 LOC=000008A6 LEN=00000002 ESD=0002 TYPE=REL  XREF=805 802 
 SYM=TOSTRING1020 LOC=000008BE LEN=00000002 ESD=0002 TYPE=REL  XREF=812 793 797 800 
 SYM=TOSTRING1030 LOC=000008DA LEN=00000002 ESD=0002 TYPE=REL  XREF=819 816 829 
 SYM=TOSTRING1040 LOC=0000090A LEN=00000002 ESD=0002 TYPE=REL  XREF=832 804 821 
 SYM=TOSTRING1050 LOC=0000091C LEN=00000002 ESD=0002 TYPE=REL  XREF=838 813 818 831 
 SYM=TOSTRING1060 LOC=0000092A LEN=00000002 ESD=0002 TYPE=REL  XREF=845 850 
 SYM=TOSTRING1100 LOC=00000940 LEN=00000002 ESD=0002 TYPE=REL  XREF=861 808 810 836 
  844 846 848 
 SYM=TOSTRING1110 LOC=0000097A LEN=00000002 ESD=0002 TYPE=REL  XREF=875 869 
 SYM=TOSTRING1120 LOC=00000984 LEN=00000002 ESD=0002 TYPE=REL  XREF=884 871 874 
 SYM=TOSTRING1130 LOC=000009B8 LEN=00000002 ESD=0002 TYPE=REL  XREF=901 904 
 SYM=TOSTRING1140 LOC=000009C6 LEN=00000002 ESD=0002 TYPE=REL  XREF=905 898 
 SYM=TOSTRING1150 LOC=000009E2 LEN=00000002 ESD=0002 TYPE=REL  XREF=914 896 
 SYM=TOSTRING1160 LOC=00000A08 LEN=00000002 ESD=0002 TYPE=REL  XREF=924 911 927 
 SYM=TOSTRING1190 LOC=00000A16 LEN=00000002 ESD=0002 TYPE=REL  XREF=929 908 912 923 
 SYM=TOSTRING1200 LOC=00000A1C LEN=00000002 ESD=0002 TYPE=REL  XREF=936 885 
 SYM=TOSTRING1210 LOC=00000A48 LEN=00000002 ESD=0002 TYPE=REL  XREF=950 947 
 SYM=TOSTRING1220 LOC=00000A5C LEN=00000002 ESD=0002 TYPE=REL  XREF=956 960 
 SYM=TOSTRING1230 LOC=00000A6C LEN=00000002 ESD=0002 TYPE=REL  XREF=961 955 
 SYM=TOSTRING1300 LOC=00000A84 LEN=00000002 ESD=0002 TYPE=REL  XREF=972 887 888 938 
  942 
 SYM=TOSTRING1310 LOC=00000ABC LEN=00000002 ESD=0002 TYPE=REL  XREF=987 978 
 SYM=TOSTRING1350 LOC=00000AC2 LEN=00000002 ESD=0002 TYPE=REL  XREF=994 974 
 SYM=TOSTRING1400 LOC=00000AE4 LEN=00000002 ESD=0002 TYPE=REL  XREF=1004 966 984 
  1007 
 SYM=TOSTRING1500 LOC=00000AF2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1014 931 967 
  981 985 1002 
 SYM=TOSTRING1510 LOC=00000B06 LEN=00000002 ESD=0002 TYPE=REL  XREF=1019 1017 
 SYM=TOSTRING1520 LOC=00000B2C LEN=00000002 ESD=0002 TYPE=REL  XREF=1028 1022 
 SYM=TOSTRING1530 LOC=00000B38 LEN=00000002 ESD=0002 TYPE=REL  XREF=1032 1024 1027 
 SYM=TOSTRING1540 LOC=00000B5C LEN=00000002 ESD=0002 TYPE=REL  XREF=1041 1034 1036 
  1039 
 SYM=TOSTRING1550 LOC=00000B64 LEN=00000002 ESD=0002 TYPE=REL  XREF=1044 1042 
 SYM=TOSTRING1560 LOC=00000B76 LEN=00000002 ESD=0002 TYPE=REL  XREF=1049 1054 
 SYM=TOSTRING1590 LOC=00000B8E LEN=00000002 ESD=0002 TYPE=REL  XREF=1056 1018 
 SYM=TOSTRINGNANBIN010 LOC=00000C94 LEN=00000002 ESD=0002 TYPE=REL  XREF=1145 1149 
 SYM=TOSTRINGNANBIN LOC=00000C92 LEN=00000002 ESD=0002 TYPE=REL  XREF=1143 418 433 
  448 
 SYM=TOSTRINGNANDEC LOC=00000CA8 LEN=00000002 ESD=0002 TYPE=REL  XREF=1156 704 
 SYM=TOSTRINGRETDIGITS LOC=00000C7E LEN=00000002 ESD=0002 TYPE=REL  XREF=1131 863 
 SYM=TOSTRINGRETDIGITSZERO LOC=00000C6A LEN=00000002 ESD=0002 TYPE=REL  XREF=1126 1066 
 SYM=TOSTRINGZERO010 LOC=00000BC8 LEN=00000002 ESD=0002 TYPE=REL  XREF=1075 1070 
 SYM=TOSTRINGZERO020 LOC=00000BD2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1078 1074 
 SYM=TOSTRINGZERO030 LOC=00000BD8 LEN=00000002 ESD=0002 TYPE=REL  XREF=1080 1077 
 SYM=TOSTRINGZERO040 LOC=00000BDC LEN=00000002 ESD=0002 TYPE=REL  XREF=1082 1072 
 SYM=TOSTRINGZERO050 LOC=00000C0C LEN=00000002 ESD=0002 TYPE=REL  XREF=1094 1084 
 SYM=TOSTRINGZERO060 LOC=00000C1A LEN=00000002 ESD=0002 TYPE=REL  XREF=1098 1092 
  1101 
 SYM=TOSTRINGZERO070 LOC=00000C28 LEN=00000002 ESD=0002 TYPE=REL  XREF=1102 1089 
  1093 
 SYM=TOSTRINGZERO080 LOC=00000C4E LEN=00000002 ESD=0002 TYPE=REL  XREF=1111 1108 
  1114 
 SYM=TOSTRINGZERO090 LOC=00000C5C LEN=00000002 ESD=0002 TYPE=REL  XREF=1115 1104 
 SYM=TOSTRINGZERO LOC=00000B9C LEN=00000002 ESD=0002 TYPE=REL  XREF=1064 379 458 
  771 
 SYM=TOSTRINGZEROR0 LOC=00000856 LEN=00000002 ESD=0002 TYPE=REL  XREF=769 715 
 SYM=TOSTRINGZEROR2 LOC=00000852 LEN=00000002 ESD=0002 TYPE=REL  XREF=767 733 
 SYM=TOVALUE0010 LOC=00000CCA LEN=00000002 ESD=0002 TYPE=REL  XREF=1170 1175 
 SYM=TOVALUE0020 LOC=00000CE6 LEN=00000002 ESD=0002 TYPE=REL  XREF=1196 1172 
 SYM=TOVALUE0025 LOC=00000D1C LEN=00000002 ESD=0002 TYPE=REL  XREF=1224 1205 1208 
  1211 
 SYM=TOVALUE0030 LOC=00000D34 LEN=00000002 ESD=0002 TYPE=REL  XREF=1230 1226 
 SYM=TOVALUE0040 LOC=00000D3E LEN=00000002 ESD=0002 TYPE=REL  XREF=1234 1228 1239 
 SYM=TOVALUE0050 LOC=00000D5A LEN=00000002 ESD=0002 TYPE=REL  XREF=1242 1236 1351 
 SYM=TOVALUE0060 LOC=00000D72 LEN=00000002 ESD=0002 TYPE=REL  XREF=1248 1244 
 SYM=TOVALUE0070 LOC=00000DAE LEN=00000002 ESD=0002 TYPE=REL  XREF=1262 1260 
 SYM=TOVALUE0080 LOC=00000DC8 LEN=00000002 ESD=0002 TYPE=REL  XREF=1269 1278 
 SYM=TOVALUE0090 LOC=00000DE6 LEN=00000002 ESD=0002 TYPE=REL  XREF=1280 1259 
 SYM=TOVALUE0100 LOC=00000DF0 LEN=00000002 ESD=0002 TYPE=REL  XREF=1283 1281 
 SYM=TOVALUE0110 LOC=00000E08 LEN=00000002 ESD=0002 TYPE=REL  XREF=1289 1284 
 SYM=TOVALUE0120 LOC=00000E10 LEN=00000002 ESD=0002 TYPE=REL  XREF=1293 1304 
 SYM=TOVALUE0130 LOC=00000E46 LEN=00000002 ESD=0002 TYPE=REL  XREF=1314 1257 
 SYM=TOVALUE0140 LOC=00000E56 LEN=00000002 ESD=0002 TYPE=REL  XREF=1318 1316 
 SYM=TOVALUE0150 LOC=00000E70 LEN=00000002 ESD=0002 TYPE=REL  XREF=1325 1335 
 SYM=TOVALUE0160 LOC=00000E9A LEN=00000002 ESD=0002 TYPE=REL  XREF=1338 1321 1329 
 SYM=TOVALUE0170 LOC=00000EA2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1341 1315 
 SYM=TOVALUE0180 LOC=00000EB0 LEN=00000002 ESD=0002 TYPE=REL  XREF=1345 1343 
 SYM=TOVALUE0190 LOC=00000EB8 LEN=00000002 ESD=0002 TYPE=REL  XREF=1349 1247 1263 
  1266 1279 1285 1288 1305 1312 1319 1340 
 SYM=TOVALUE0200 LOC=00000EC2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1361 1240 1250 
  1252 
 SYM=TOVALUE0210 LOC=00000EEE LEN=00000002 ESD=0002 TYPE=REL  XREF=1371 1368 
 SYM=TOVALUE0220 LOC=00000F12 LEN=00000002 ESD=0002 TYPE=REL  XREF=1391 1387 
 SYM=TOVALUE0230 LOC=00000F1C LEN=00000002 ESD=0002 TYPE=REL  XREF=1394 1389 1410 
 SYM=TOVALUE0240 LOC=00000F56 LEN=00000002 ESD=0002 TYPE=REL  XREF=1408 1403 
 SYM=TOVALUE0250 LOC=00000F60 LEN=00000002 ESD=0002 TYPE=REL  XREF=1411 1396 
 SYM=TOVALUE0260 LOC=00000F72 LEN=00000002 ESD=0002 TYPE=REL  XREF=1417 1423 
 SYM=TOVALUE0270 LOC=00000F7C LEN=00000002 ESD=0002 TYPE=REL  XREF=1420 1366 
 SYM=TOVALUE0280 LOC=00000F80 LEN=00000002 ESD=0002 TYPE=REL  XREF=1422 1413 1415 
 SYM=TOVALUE0300 LOC=00000F98 LEN=00000002 ESD=0002 TYPE=REL  XREF=1440 1363 
 SYM=TOVALUE0310 LOC=00000FBC LEN=00000002 ESD=0002 TYPE=REL  XREF=1455 1459 
 SYM=TOVALUE0320 LOC=00000FCC LEN=00000002 ESD=0002 TYPE=REL  XREF=1460 1457 
 SYM=TOVALUE0330 LOC=00000FF4 LEN=00000002 ESD=0002 TYPE=REL  XREF=1474 1468 
 SYM=TOVALUE0340 LOC=00001018 LEN=00000002 ESD=0002 TYPE=REL  XREF=1484 1476 
 SYM=TOVALUE0350 LOC=0000102C LEN=00000002 ESD=0002 TYPE=REL  XREF=1490 1478 
 SYM=TOVALUE0400 LOC=0000103C LEN=00000002 ESD=0002 TYPE=REL  XREF=1503 1472 1482 
  1488 
 SYM=TOVALUE0410 LOC=00001060 LEN=00000002 ESD=0002 TYPE=REL  XREF=1520 1518 
 SYM=TOVALUE0430 LOC=00001072 LEN=00000002 ESD=0002 TYPE=REL  XREF=1532 1563 
 SYM=TOVALUE0440 LOC=0000107C LEN=00000002 ESD=0002 TYPE=REL  XREF=1536 1544 
 SYM=TOVALUE0450 LOC=000010A0 LEN=00000002 ESD=0002 TYPE=REL  XREF=1547 1555 
 SYM=TOVALUE0460 LOC=000010BA LEN=00000002 ESD=0002 TYPE=REL  XREF=1556 1546 1560 
 SYM=TOVALUE0470 LOC=000010D0 LEN=00000002 ESD=0002 TYPE=REL  XREF=1562 1558 
 SYM=TOVALUE0490 LOC=000010D4 LEN=00000002 ESD=0002 TYPE=REL  XREF=1565 1531 
 SYM=TOVALUE0500 LOC=000010E0 LEN=00000002 ESD=0002 TYPE=REL  XREF=1573 1504 
 SYM=TOVALUE0510 LOC=000010F6 LEN=00000002 ESD=0002 TYPE=REL  XREF=1580 1587 
 SYM=TOVALUE0520 LOC=000010FC LEN=00000002 ESD=0002 TYPE=REL  XREF=1585 1608 
 SYM=TOVALUE0530 LOC=0000110C LEN=00000002 ESD=0002 TYPE=REL  XREF=1591 1602 
 SYM=TOVALUE0540 LOC=00001140 LEN=00000002 ESD=0002 TYPE=REL  XREF=1607 1603 
 SYM=TOVALUE0600 LOC=00001150 LEN=00000002 ESD=0002 TYPE=REL  XREF=1621 1568 
 SYM=TOVALUE0610 LOC=00001176 LEN=00000002 ESD=0002 TYPE=REL  XREF=1633 1631 1643 
 SYM=TOVALUE0620 LOC=00001196 LEN=00000002 ESD=0002 TYPE=REL  XREF=1644 1626 
 SYM=TOVALUE0630 LOC=000011B2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1652 1647 1650 
 SYM=TOVALUE0640 LOC=000011C2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1657 1666 
 SYM=TOVALUE0650 LOC=000011F6 LEN=00000002 ESD=0002 TYPE=REL  XREF=1673 1653 1655 
  1665 
 SYM=TOVALUE0660 LOC=00001244 LEN=00000002 ESD=0002 TYPE=REL  XREF=1691 1679 
 SYM=TOVALUE0670 LOC=00001258 LEN=00000002 ESD=0002 TYPE=REL  XREF=1696 1681 1688 
  1693 
 SYM=TOVALUE0700 LOC=00001268 LEN=00000002 ESD=0002 TYPE=REL  XREF=1709 1675 
 SYM=TOVALUE0800 LOC=0000126C LEN=00000002 ESD=0002 TYPE=REL  XREF=1716 1684 1690 
  1695 1700 
 SYM=TOVALUE0810 LOC=00001280 LEN=00000002 ESD=0002 TYPE=REL  XREF=1722 1718 
 SYM=TOVALUE0820 LOC=00001284 LEN=00000002 ESD=0002 TYPE=REL  XREF=1724 1721 
 SYM=TOVALUE1000 LOC=000012A8 LEN=00000002 ESD=0002 TYPE=REL  XREF=1743 1623 
 SYM=TOVALUE  LOC=00000CB4 LEN=00000A84 ESD=0002 TYPE=CST  XREF=1162 212 1797 2019 
 SYM=TOVALUE1010 LOC=000012D2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1755 1749 
 SYM=TOVALUE1020 LOC=000012E6 LEN=00000002 ESD=0002 TYPE=REL  XREF=1761 1747 
 SYM=TOVALUE1030 LOC=00001302 LEN=00000002 ESD=0002 TYPE=REL  XREF=1769 1763 
 SYM=TOVALUE1040 LOC=0000130E LEN=00000002 ESD=0002 TYPE=REL  XREF=1773 1752 1754 
  1758 1760 1766 1768 
 SYM=TOVALUE1050 LOC=0000131A LEN=00000002 ESD=0002 TYPE=REL  XREF=1778 1786 
 SYM=TOVALUE1060 LOC=0000133E LEN=00000002 ESD=0002 TYPE=REL  XREF=1788 1785 
 SYM=TOVALUE1060_MVC LOC=000002A0 LEN=00000006 ESD=0002 TYPE=REL  XREF=1796 1794 
 SYM=TOVALUE1080 LOC=00001366 LEN=00000002 ESD=0002 TYPE=REL  XREF=1802 1787 
 SYM=TOVALUE1100 LOC=0000136E LEN=00000002 ESD=0002 TYPE=REL  XREF=1812 1771 1790 
 SYM=TOVALUE1110 LOC=000013AC LEN=00000002 ESD=0002 TYPE=REL  XREF=1831 1815 
 SYM=TOVALUE1120 LOC=000013DA LEN=00000002 ESD=0002 TYPE=REL  XREF=1844 1817 
 SYM=TOVALUE1130 LOC=00001408 LEN=00000002 ESD=0002 TYPE=REL  XREF=1857 1829 1842 
  1865 
 SYM=TOVALUE1150 LOC=00001436 LEN=00000002 ESD=0002 TYPE=REL  XREF=1884 1824 1827 
  1837 1840 1850 1853 1869 
 SYM=TOVALUE1160 LOC=0000145A LEN=00000002 ESD=0002 TYPE=REL  XREF=1896 1906 
 SYM=TOVALUE1170 LOC=0000148A LEN=00000002 ESD=0002 TYPE=REL  XREF=1914 1889 
 SYM=TOVALUE1180 LOC=00001496 LEN=00000002 ESD=0002 TYPE=REL  XREF=1918 1926 
 SYM=TOVALUE1200 LOC=000014B6 LEN=00000002 ESD=0002 TYPE=REL  XREF=1928 1891 1912 
 SYM=TOVALUE1210 LOC=000014CA LEN=00000002 ESD=0002 TYPE=REL  XREF=1934 1932 
 SYM=TOVALUE1220 LOC=000014D2 LEN=00000002 ESD=0002 TYPE=REL  XREF=1937 1916 1931 
 SYM=TOVALUE1500 LOC=000014E4 LEN=00000002 ESD=0002 TYPE=REL  XREF=1951 1443 
 SYM=TOVALUE1510 LOC=00001504 LEN=00000002 ESD=0002 TYPE=REL  XREF=1960 1955 
 SYM=TOVALUE1520 LOC=00001514 LEN=00000002 ESD=0002 TYPE=REL  XREF=1965 1953 
 SYM=TOVALUE1530 LOC=00001520 LEN=00000002 ESD=0002 TYPE=REL  XREF=1970 1959 1964 
  1976 
 SYM=TOVALUE1540 LOC=0000153C LEN=00000002 ESD=0002 TYPE=REL  XREF=1978 1971 
 SYM=TOVALUE1550 LOC=0000155C LEN=00000002 ESD=0002 TYPE=REL  XREF=1988 1997 
 SYM=TOVALUE1560 LOC=00001586 LEN=00000002 ESD=0002 TYPE=REL  XREF=2001 1979 1985 
  1992 
 SYM=TOVALUE1570 LOC=00001594 LEN=00000002 ESD=0002 TYPE=REL  XREF=2006 2014 
 SYM=TOVALUE1570_XC LOC=000002A6 LEN=00000006 ESD=0002 TYPE=REL  XREF=2018 2016 
 SYM=TOVALUE1600 LOC=000015B2 LEN=00000002 ESD=0002 TYPE=REL  XREF=2027 2003 
 SYM=TOVALUE1610 LOC=000015F0 LEN=00000002 ESD=0002 TYPE=REL  XREF=2042 2031 
 SYM=TOVALUE1620 LOC=00001612 LEN=00000002 ESD=0002 TYPE=REL  XREF=2050 2033 
 SYM=TOVALUE1630 LOC=00001660 LEN=00000002 ESD=0002 TYPE=REL  XREF=2067 2058 
 SYM=TOVALUE1640 LOC=00001670 LEN=00000002 ESD=0002 TYPE=REL  XREF=2072 2041 2049 
 SYM=TOVALUEOVERFLOW LOC=0000167E LEN=00000002 ESD=0002 TYPE=REL  XREF=2081 1426 
  1470 1480 1486 1492 1604 1676 1885 1973 
 SYM=TOVALUEOVERFLOWB LOC=000016C2 LEN=00000002 ESD=0002 TYPE=REL  XREF=2099 2083 
 SYM=TOVALUEOVERFLOWD LOC=000016F0 LEN=00000002 ESD=0002 TYPE=REL  XREF=2112 2085 
 SYM=TOVALUEOVERFLOWDB LOC=000016E6 LEN=00000002 ESD=0002 TYPE=REL  XREF=2109 2103 
 SYM=TOVALUEOVERFLOWDD LOC=00001714 LEN=00000002 ESD=0002 TYPE=REL  XREF=2122 2116 
 SYM=TOVALUEOVERFLOWDH LOC=000016B8 LEN=00000002 ESD=0002 TYPE=REL  XREF=2096 2089 
 SYM=TOVALUEOVERFLOWEB LOC=000016DC LEN=00000002 ESD=0002 TYPE=REL  XREF=2106 2101 
 SYM=TOVALUEOVERFLOWED LOC=0000170A LEN=00000002 ESD=0002 TYPE=REL  XREF=2119 2114 
 SYM=TOVALUEOVERFLOWEH LOC=000016AE LEN=00000002 ESD=0002 TYPE=REL  XREF=2093 2087 
 SYM=TOVALUEUNDERFLOW LOC=0000171E LEN=00000002 ESD=0002 TYPE=REL  XREF=2126 1428 
  1473 1483 1489 1494 1561 1710 1887 1981 
 SYM=TOVALUEZERO LOC=00001722 LEN=00000002 ESD=0002 TYPE=REL  XREF=2132 1441 
 SYM=XC_R3_R3 LOC=000002C4 LEN=00000006 ESD=0002 TYPE=REL  XREF=2156 867 

Literal Table Listing

 LIT=C'F4SA'  LOC=00000318 LEN=00000004 ESD=0002 POOL=0001 XREF=136 
 LIT=DB'(MAX)' LOC=000002F0 LEN=00000008 ESD=0002 POOL=0001 XREF=2110 
 LIT=DD'(MAX)' LOC=00000308 LEN=00000008 ESD=0002 POOL=0001 XREF=2123 
 LIT=EB'(MAX)' LOC=00000310 LEN=00000004 ESD=0002 POOL=0001 XREF=2107 
 LIT=ED'(MAX)' LOC=00000314 LEN=00000004 ESD=0002 POOL=0001 XREF=2120 
 LIT=F'10'    LOC=0000031C LEN=00000004 ESD=0002 POOL=0001 XREF=538 
 LIT=FS24'.415241' LOC=00000324 LEN=00000004 ESD=0002 POOL=0001 XREF=1513 
 LIT=FS24'3.321928' LOC=00000320 LEN=00000004 ESD=0002 POOL=0001 XREF=1464 
 LIT=LB'(MAX)' LOC=000002E0 LEN=00000010 ESD=0002 POOL=0001 XREF=2104 
 LIT=LD'(MAX)' LOC=000002F8 LEN=00000010 ESD=0002 POOL=0001 XREF=2117 
 LIT=LH'(MAX)' LOC=000002D0 LEN=00000010 ESD=0002 POOL=0001 XREF=2091 2094 2097 
 
AZ390I total mnote warnings = 0
AZ390I total mnote errors   = 0
AZ390I max   mnote level    = 0
AZ390I total mz390 errors   = 0
AZ390I total az390 errors   = 0
FPCONVRT  MZ390 ENDED   RC= 0 MEM(MB)= MB IO=8280
                       FPCONVRT  MZ390 Copyright 2011 Automated Software Tools Corporation
FPCONVRT  MZ390 z390 is licensed under GNU General Public License
FPCONVRT  MZ390 program = linklib\FPCONVRT.MLC
FPCONVRT  MZ390 options = W:\work\z390\z390.OPT=(time(60)) bal notiming sysmac(mac) 
  syscpy(mac) stats sysmac(mac+linklib) systerm(linklib\rtlink)
FPCONVRT  MZ390 final_options=ALIGN
FPCONVRT  MZ390 final_options=NOALLOW
FPCONVRT  MZ390 final_options=NOAMODE24
FPCONVRT  MZ390 final_options=AMODE31
FPCONVRT  MZ390 final_options=NOASCII
FPCONVRT  MZ390 final_options=ASM
FPCONVRT  MZ390 final_options=NOASSIST
FPCONVRT  MZ390 final_options=AUTOLINK
FPCONVRT  MZ390 final_options=BAL
FPCONVRT  MZ390 final_options=NOBS2000
FPCONVRT  MZ390 final_options=EDF
FPCONVRT  MZ390 final_options=NOCICS
FPCONVRT  MZ390 final_options=CODEPAGE(ISO-8859-1+IBM1047)
FPCONVRT  MZ390 final_options=COMMENT
FPCONVRT  MZ390 final_options=CON
FPCONVRT  MZ390 final_options=NODUMP
FPCONVRT  MZ390 final_options=EPILOG
FPCONVRT  MZ390 final_options=NOERRSUM
FPCONVRT  MZ390 final_options=EXTEND
FPCONVRT  MZ390 final_options=FLOAT(DECIMAL)
FPCONVRT  MZ390 final_options=NOGUAM
FPCONVRT  MZ390 final_options=INIT
FPCONVRT  MZ390 final_options=LIST
FPCONVRT  MZ390 final_options=LISTCALL
FPCONVRT  MZ390 final_options=LISTUSE
FPCONVRT  MZ390 final_options=LOADHIGH
FPCONVRT  MZ390 final_options=NOMCALL
FPCONVRT  MZ390 final_options=NOMOD
FPCONVRT  MZ390 final_options=OBJ
FPCONVRT  MZ390 final_options=NOOBJHEX
FPCONVRT  MZ390 final_options=PC
FPCONVRT  MZ390 final_options=PCOPT
FPCONVRT  MZ390 final_options=NOPDSMEM8
FPCONVRT  MZ390 final_options=NOPRINTALL
FPCONVRT  MZ390 final_options=PROLOG
FPCONVRT  MZ390 final_options=PROTECT
FPCONVRT  MZ390 final_options=R64
FPCONVRT  MZ390 final_options=NOREFORMAT
FPCONVRT  MZ390 final_options=NOREGS
FPCONVRT  MZ390 final_options=RMODE24
FPCONVRT  MZ390 final_options=NORMODE31
FPCONVRT  MZ390 final_options=STATS
FPCONVRT  MZ390 final_options=NOTEST
FPCONVRT  MZ390 final_options=THREAD
FPCONVRT  MZ390 final_options=NOTIME
FPCONVRT  MZ390 final_options=NOTIMING
FPCONVRT  MZ390 final_options=NOTRACE
FPCONVRT  MZ390 final_options=NOTRACEA
FPCONVRT  MZ390 final_options=NOTRACEALL
FPCONVRT  MZ390 final_options=NOTRACEC
FPCONVRT  MZ390 final_options=NOTRACEG
FPCONVRT  MZ390 final_options=NOTRACEI
FPCONVRT  MZ390 final_options=NOTRACEL
FPCONVRT  MZ390 final_options=NOTRACEM
FPCONVRT  MZ390 final_options=NOTRACEP
FPCONVRT  MZ390 final_options=NOTRACEQ
FPCONVRT  MZ390 final_options=NOTRACES
FPCONVRT  MZ390 final_options=NOTRACET
FPCONVRT  MZ390 final_options=NOTRACEV
FPCONVRT  MZ390 final_options=TRAP
FPCONVRT  MZ390 final_options=NOTRUNC
FPCONVRT  MZ390 final_options=NOTS
FPCONVRT  MZ390 final_options=VCB
FPCONVRT  MZ390 final_options=WARN
FPCONVRT  MZ390 final_options=XREF
FPCONVRT  MZ390 final_options=ZSTRMAC
FPCONVRT  MZ390 final_options=CHKMAC=0
FPCONVRT  MZ390 final_options=CHKSRC=1
FPCONVRT  MZ390 final_options=ERR=100
FPCONVRT  MZ390 final_options=MAXCALL=50
FPCONVRT  MZ390 final_options=MAXDISPLAY=80
FPCONVRT  MZ390 final_options=MAXESD=1000
FPCONVRT  MZ390 final_options=MAXFILE=1000
FPCONVRT  MZ390 final_options=MAXGBL=100000
FPCONVRT  MZ390 final_options=MAXHEIGHT=600
FPCONVRT  MZ390 final_options=MAXLCL=100000
FPCONVRT  MZ390 final_options=MAXLEN=80
FPCONVRT  MZ390 final_options=MAXLINE=200000
FPCONVRT  MZ390 final_options=MAXLOG=1000000
FPCONVRT  MZ390 final_options=MAXPARM=10000
FPCONVRT  MZ390 final_options=MAXPASS=2
FPCONVRT  MZ390 final_options=MAXPC=50000
FPCONVRT  MZ390 final_options=MAXQUE=1000
FPCONVRT  MZ390 final_options=MAXRLD=10000
FPCONVRT  MZ390 final_options=MAXSIZE=52428800
FPCONVRT  MZ390 final_options=MAXSYM=50000
FPCONVRT  MZ390 final_options=MAXWARN=4
FPCONVRT  MZ390 final_options=MAXWIDTH=800
FPCONVRT  MZ390 final_options=MEM=1
FPCONVRT  MZ390 final_options=MINHEIGHT=150
FPCONVRT  MZ390 final_options=MINWIDTH=150
FPCONVRT  MZ390 final_options=MNOTE=0
FPCONVRT  MZ390 final_options=PARM=
FPCONVRT  MZ390 final_options=PROFILE=
FPCONVRT  MZ390 final_options=STATS=W:\work\z390\linklib\FPCONVRT
FPCONVRT  MZ390 final_options=SYSPARM=
FPCONVRT  MZ390 final_options=SYSTERM=W:\work\z390\linklib\rtlink
FPCONVRT  MZ390 final_options=TESTDD=
FPCONVRT  MZ390 final_options=TIME=60
FPCONVRT  MZ390 final_options=TRACE=
FPCONVRT  MZ390 final_options=Z390ACROBAT=cmd.exe /c Start
FPCONVRT  MZ390 final_options=Z390BROWSER=cmd.exe /c Start
FPCONVRT  MZ390 final_options=Z390COMMAND=cmd.exe
FPCONVRT  MZ390 final_options=Z390EDITOR=notepad.exe
FPCONVRT  MZ390 final_options=INSTALL=
FPCONVRT  MZ390 final_options=IPL=
FPCONVRT  MZ390 final_options=LOG=
FPCONVRT  MZ390 final_options=SYS390=linklib\+linklib
FPCONVRT  MZ390 final_options=SYSBAL=linklib\
FPCONVRT  MZ390 final_options=SYSCPY=mac
FPCONVRT  MZ390 final_options=SYSDAT=linklib\
FPCONVRT  MZ390 final_options=SYSERR=linklib\
FPCONVRT  MZ390 final_options=SYSLOG=linklib\
FPCONVRT  MZ390 final_options=SYSLST=linklib\
FPCONVRT  MZ390 final_options=SYSMAC=mac+linklib
FPCONVRT  MZ390 final_options=SYSMLC=linklib\
FPCONVRT  MZ390 final_options=SYSPCH=linklib\
FPCONVRT  MZ390 final_options=SYSPRN=linklib\
FPCONVRT  MZ390 final_options=SYSOBJ=linklib\
FPCONVRT  MZ390 final_options=SYSOPT=linklib\
FPCONVRT  MZ390 final_options=SYSTRC=linklib\
FPCONVRT  MZ390 total MLC/MAC loaded  = 3046
FPCONVRT  MZ390 total BAL output lines= 2198
FPCONVRT  MZ390 total BAL instructions= 143
FPCONVRT  MZ390 total macros          = 5
FPCONVRT  MZ390 total macro loads     = 5
FPCONVRT  MZ390 total macro calls     = 29
FPCONVRT  MZ390 total AENTRY blocks   = 0
FPCONVRT  MZ390 total ACALL  calls    = 0
FPCONVRT  MZ390 total AIF    blocks   = 0
FPCONVRT  MZ390 total ACASE  blocks   = 0
FPCONVRT  MZ390 total AWHILE calls    = 0
FPCONVRT  MZ390 total AUNTIL blocks   = 0
FPCONVRT  MZ390 total global set names= 49
FPCONVRT  MZ390 tot global seta cells = 2
FPCONVRT  MZ390 tot global setb cells = 7
FPCONVRT  MZ390 tot global setc cells = 40
FPCONVRT  MZ390 max local pos parms   = 4
FPCONVRT  MZ390 max local key parms   = 5
FPCONVRT  MZ390 max local set names   = 36
FPCONVRT  MZ390 max local seta cells  = 3
FPCONVRT  MZ390 max local setb cells  = 3
FPCONVRT  MZ390 max local setc cells  = 30
FPCONVRT  MZ390 total array expansions= 0
FPCONVRT  MZ390 total Keys            = 1812
FPCONVRT  MZ390 Key searches          = 14698
FPCONVRT  MZ390 Key avg comps         = 1
FPCONVRT  MZ390 Key max comps         = 4
FPCONVRT  MZ390 total macro line exec = 2426
FPCONVRT  MZ390 total pcode line exec = 112
FPCONVRT  MZ390 total pcode line gen. = 92
FPCONVRT  MZ390 total pcode line reuse= 0
FPCONVRT  MZ390 total pcode op   gen. = 255
FPCONVRT  MZ390 total pcode op   exec = 354
FPCONVRT  MZ390 total pcode gen  opt  = 144
FPCONVRT  MZ390 total pcode exec opt  = 2
FPCONVRT  MZ390 FID=  1 ERR= 0 W:\work\z390\linklib\FPCONVRT.MLC
FPCONVRT  MZ390 FID=  2 ERR= 0 W:\work\z390\linklib\ARCHLVL.MAC
FPCONVRT  MZ390 FID=  3 ERR= 0 W:\work\z390\linklib\FPCONVRT.MAC
FPCONVRT  MZ390 total mnote warnings  = 0
FPCONVRT  MZ390 total mnote errors    = 0
FPCONVRT  MZ390 max   mnote level     = 0
FPCONVRT  MZ390 total mz390 errors    = 0
FPCONVRT  AZ390 BAL lines             = 2198
FPCONVRT  AZ390 symbols               = 322
FPCONVRT  AZ390 Literals              = 11
FPCONVRT  AZ390 alloc passes          = 3
FPCONVRT  AZ390 Keys                  = 1652
FPCONVRT  AZ390 Key searches          = 25622
FPCONVRT  AZ390 Key avg comps         = 1
FPCONVRT  AZ390 Key max comps         = 3
FPCONVRT  AZ390 ESD symbols           = 6
FPCONVRT  AZ390 object bytes          = 5930
FPCONVRT  AZ390 object rlds           = 0
FPCONVRT  AZ390 total mnote warnings  = 0
FPCONVRT  AZ390 total mnote errors    = 0
FPCONVRT  AZ390 max   mnote level     = 0
FPCONVRT  AZ390 total mz390 errors    = 0
FPCONVRT  AZ390 total az390 errors    = 0
FPCONVRT  MZ390 ENDED   RC= 0 MEM(MB)= MB IO=13756
